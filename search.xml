<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue</title>
      <link href="/2025/04/05/Vue3/"/>
      <url>/2025/04/05/Vue3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h1><h2 id="创建Vue3工程"><a href="#创建Vue3工程" class="headerlink" title="创建Vue3工程"></a>创建Vue3工程</h2><h3 id="基于vue-cli"><a href="#基于vue-cli" class="headerlink" title="基于vue-cli"></a>基于<code>vue-cli</code></h3><p>官方文档：<a href="https://cli.vuejs.org/zh/">Home | Vue CLI (vuejs.org)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI 现已处于维护模式!</span><br><span class="line">现在官方推荐使用 create-vue 来创建基于 Vite 的新项目。另外请参考 Vue 3 工具链指南 以了解最新的工具推荐。</span><br></pre></td></tr></table></figure><h3 id="基于vite（推荐）"><a href="#基于vite（推荐）" class="headerlink" title="基于vite（推荐）"></a>基于<code>vite</code>（推荐）</h3><p><code>vite</code>是新一代前端构建工具，官网地址：<a href="https://vitejs.cn/">https://vitejs.cn</a></p><p><code>vite</code>的优势如下：</p><ul><li>轻量快速的热重载（HMR），能实现极速的服务启动</li><li>对<code>TypeScript</code>、<code>JSX</code>、<code>CSS</code>等支持开箱即用</li><li>真正的按需编译，不再等待整个应用编译完成</li><li>具体操作如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">npm create vue@latest</span><br><span class="line"></span><br><span class="line">Need to install the following packages:</span><br><span class="line">create-vue@3.11.0</span><br><span class="line">Ok to proceed? (y) y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; npx</span><br><span class="line">&gt; create-vue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.js - The Progressive JavaScript Framework</span><br><span class="line"></span><br><span class="line">√ 请输入项目名称： ... demo1</span><br><span class="line">√ 是否使用 TypeScript 语法？ ... 否 / 是</span><br><span class="line">√ 是否启用 JSX 支持？ ... 否 / 是</span><br><span class="line">√ 是否引入 Vue Router 进行单页面应用开发？ ... 否 / 是</span><br><span class="line">√ 是否引入 Pinia 用于状态管理？ ... 否 / 是</span><br><span class="line">√ 是否引入 Vitest 用于单元测试？ ... 否 / 是</span><br><span class="line">√ 是否要引入一款端到端（End to End）测试工具？ » 不需要</span><br><span class="line">√ 是否引入 ESLint 用于代码质量检测？ ... 否 / 是</span><br><span class="line">√ 是否引入 Prettier 用于代码格式化？ ... 否 / 是</span><br><span class="line">√ 是否引入 Vue DevTools 7 扩展用于调试? (试验阶段) ... 否 / 是</span><br><span class="line"></span><br><span class="line">正在初始化项目 C:\Users\Zhao\Desktop\Vue3WithTs\demo1\demo1...</span><br><span class="line"></span><br><span class="line">项目初始化完成，可执行以下命令：</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cd</span> demo1</span><br><span class="line">  npm install</span><br><span class="line">  npm run dev</span><br></pre></td></tr></table></figure><p>Tips：如果文件爆红，是由于缺少依赖包导致的，在项目根目录下输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure><p>输入完后关闭<code>vscode</code>并重新打开即可</p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>创建完成后的项目，包括了<code>.vscode</code>、<code>node_modules</code>、<code>public</code>、<code>src</code>文件夹，以及其他配置文件</p><p><code>.vscode</code>：不用关注，主要为了第一次使用时，在vscode编译器中安装官方插件</p><p><code>node_modules</code>：不用关注，存放项目的依赖包</p><p><code>public</code>：存放图片、图标等相关资源</p><p><code>src</code>：主要操作的文件夹，需要包含<code>App.vue</code>和<code>main.ts</code>文件</p><p><code>index.html</code>：项目的入口文件</p><p>App.vue文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 一个.vue文件中只能存在一个顶层template --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- html --&gt;</span><br><span class="line">  &lt;div class=&quot;title&quot;&gt;Hello World&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  // TS或JS</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;  // 组件名</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  /* css样式 */</span><br><span class="line">  .title &#123;</span><br><span class="line">    background-color: #ddd;</span><br><span class="line">    color: aqua;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>注意点：需要将组件名暴露出去，否则main.js不认为App.vue是一个组件</p><p>main.ts文件：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入createApp用于创建应用</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入App根组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建App且挂载</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h3><p>在src文件下创建<code>components</code>文件夹，并新建一个Person.vue：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">        &lt;h2&gt;姓名：&#123;&#123; name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;年龄：&#123;&#123; age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;showTel&quot;&gt;点击查看手机号&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Person&#x27;,  // 组件名</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name:&quot;张三&quot;,</span><br><span class="line">                age:18,</span><br><span class="line">                tel:138888888</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            showTel()&#123;</span><br><span class="line">                alert(this.tel);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>以上是vue2的写法，证明vue3可以对vue2向下兼容</p><p>写完后要注意在App.vue中引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;title&quot;&gt;Hello World&lt;/div&gt;</span><br><span class="line">  &lt;Person&gt;&lt;/Person&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  import Person from &#x27;./components/Person.vue&#x27;;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,  // 组件名</span><br><span class="line">    components: &#123;Person&#125;// 注册组件</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  /* css样式 */</span><br><span class="line">  .title &#123;</span><br><span class="line">    background-color: #ddd;</span><br><span class="line">    color: aqua;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="Vue2和Vue3的差异"><a href="#Vue2和Vue3的差异" class="headerlink" title="Vue2和Vue3的差异"></a>Vue2和Vue3的差异</h2><p>出处：<a href="https://www.bilibili.com/read/cv10685553/">Bilibili-大帅老猿</a></p><h3 id="OptionAPI"><a href="#OptionAPI" class="headerlink" title="OptionAPI"></a>OptionAPI</h3><p>Vue2的API设计是Options（配置）风格的</p><img src="/img/vue/Options API.webp"><p>缺点：</p><p>Options类型的API，数据、方法、计算属性等，是分散在：<code>data</code>、<code>methods</code>、<code>computed</code>中的，若想新增或修改一个需求，就需要分别修改<code>data</code>、<code>methods</code>、<code>computed</code>，不方便维护和复用</p><img src="/img/vue/Options API shortcoming.webp"><h3 id="Composition-Api"><a href="#Composition-Api" class="headerlink" title="Composition Api"></a>Composition Api</h3><img src="/img/vue/Compostion API 1.webp"><img src="/img/vue/Compostion API 2.webp"><h1 id="Vue3核心语法"><a href="#Vue3核心语法" class="headerlink" title="Vue3核心语法"></a>Vue3核心语法</h1><h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h2><p><code>setup</code>是<code>vue3</code>中一个新的配置项，值是一个函数，它是<code>Composition API</code>“表演的舞台”，组件中所用到的：</p><ul><li>数据</li><li>方法</li><li>计算属性</li><li>监视</li><li>……</li></ul><p>均配置在<code>setup</code>中</p><p>特点：</p><ul><li>setup函数返回的对象中的内容，可以直接在模板中使用</li><li>setup中访问<code>this</code>是<code>undefined</code></li><li>setup函数会在<code>beforeCreate</code>之前调用，它是领先所有钩子执行的</li></ul><p>实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">        &lt;h2&gt;姓名：&#123;&#123; name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;年龄：&#123;&#123; age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button @click=&quot;showTel&quot;&gt;点击显示手机号码&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;点击修改姓名&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;点击修改年龄&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Person&#x27;,  // 组件名</span><br><span class="line">        setup() &#123;</span><br><span class="line">            // 数据</span><br><span class="line">            let name:string = &quot;张三&quot;;</span><br><span class="line">            let age:number = 18;</span><br><span class="line">            let tel:string = &quot;138xxxxxxxx&quot;;</span><br><span class="line"></span><br><span class="line">            // 方法</span><br><span class="line">            function showTel():void &#123;</span><br><span class="line">                alert(tel);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            function changeName():void &#123;    // 方法是生效的，但是页面并不会变，这是由于数据是非响应式的</span><br><span class="line">                name = &quot;李四&quot;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            function changeAge():void &#123;    // 方法是生效的，但是页面并不会变，这是由于数据是非响应式的</span><br><span class="line">                age++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return &#123;name,age,showTel,changeName,changeAge&#125;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="set的返回值"><a href="#set的返回值" class="headerlink" title="set的返回值"></a>set的返回值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Person&#x27;,  // 组件名</span><br><span class="line">        setup() &#123;</span><br><span class="line">            ...</span><br><span class="line">            ...</span><br><span class="line">            ...</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            return () =&gt; &#123;</span><br><span class="line">                return &quot;Hello World&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>最终模板只会显示<code>Hello World</code></p><h3 id="setup、data、method"><a href="#setup、data、method" class="headerlink" title="setup、data、method"></a>setup、data、method</h3><ol><li><code>setup</code>、<code>data</code>、<code>method</code>是可以同时存在的</li><li>由于<code>setup</code>是早于<code>beforeCreate</code>的，所以data中是可以读取到<code>setup</code>中的数据的，但是<code>setup</code>不能读取<code>data</code>中的数据</li></ol><h3 id="setup语法糖"><a href="#setup语法糖" class="headerlink" title="setup语法糖"></a>setup语法糖</h3><p>在setup中创建数据、方法后，每次都需要手动return出去，相对繁琐，此时可以用到setup的语法糖</p><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// 数据...</span><br><span class="line"></span><br><span class="line">// 方法...</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">        &lt;h2&gt;姓名：&#123;&#123; name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;年龄：&#123;&#123; age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button @click=&quot;showTel&quot;&gt;点击显示手机号码&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;点击修改姓名&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;点击修改年龄&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;Person&#x27;,  // 组件名</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;    // 这里的语言要一致</span><br><span class="line"></span><br><span class="line">// 数据</span><br><span class="line">let name: string = &quot;张三&quot;;</span><br><span class="line">let age: number = 18;</span><br><span class="line">let tel: string = &quot;138xxxxxxxx&quot;;</span><br><span class="line"></span><br><span class="line">// 方法</span><br><span class="line">function showTel(): void &#123;</span><br><span class="line">    alert(tel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function changeName(): void &#123;    // 方法是生效的，但是页面并不会变，这是由于数据是非响应式的</span><br><span class="line">    name = &quot;李四&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function changeAge(): void &#123;    // 方法是生效的，但是页面并不会变，这是由于数据是非响应式的</span><br><span class="line">    age++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>但是为了控制组件名而单独写一个script标签，又比较奇怪。</p><p>此时可以使用到一个插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vite-plugin-vue-setup-extend -D</span><br></pre></td></tr></table></figure><p>安装完插件后，找到根目录下的<code>vite.config.ts</code>引入插件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fileURLToPath, <span class="variable constant_">URL</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;node:url&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入的插件</span></span><br><span class="line"><span class="keyword">import</span> vueSetupExtend <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-vue-setup-extend&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vite.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line">    <span class="title function_">vueSetupExtend</span>()<span class="comment">// 调用插件  </span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;./src&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用方法：</p><p>在setup语法糖标签中，加入<code>name=&quot;组件名&quot;</code>即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;MyPerson&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="响应式数据"><a href="#响应式数据" class="headerlink" title="响应式数据"></a>响应式数据</h2><h3 id="基本类型（Ref）"><a href="#基本类型（Ref）" class="headerlink" title="基本类型（Ref）"></a>基本类型（Ref）</h3><p>在vue2中，data中的数据就已经是响应式的了</p><p>但是在vue3中，要将数据处理成响应式，需要引入响应式方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ref <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br></pre></td></tr></table></figure><p>引入完成后，要将数据改成响应式数据，只需要将值放入到<code>ref</code>方法内</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="title function_">ref</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> age = <span class="title function_">ref</span>(<span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>需要注意的是，在模板中的值，并不需要改为<code>name.value</code>，vue会进行自动处理</p><p>但是，如果要在<code>setup</code>中对数据进行处理的话，就必须要加上<code>name.value</code></p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">        &lt;h2&gt;姓名：&#123;&#123; name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;年龄：&#123;&#123; age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button @click=&quot;showTel&quot;&gt;点击显示手机号码&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;点击修改姓名&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;点击修改年龄&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;MyPerson&quot;&gt;</span><br><span class="line">    // 导入</span><br><span class="line">    import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">    // 数据</span><br><span class="line">    let name = ref(&quot;张三&quot;);</span><br><span class="line">    let age = ref(18);</span><br><span class="line">    let tel: string = &quot;138xxxxxxxx&quot;;</span><br><span class="line"></span><br><span class="line">    console.log(`姓名为：$&#123;name.value&#125;`);</span><br><span class="line">    console.log(`年龄为：$&#123;age.value&#125;`);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    // 方法</span><br><span class="line">    function showTel(): void &#123;</span><br><span class="line">        alert(tel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function changeName(): void &#123;    // 方法是生效的，但是页面并不会变，这是由于数据是非响应式的</span><br><span class="line">        name.value = &quot;李四&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function changeAge(): void &#123;    // 方法是生效的，但是页面并不会变，这是由于数据是非响应式的</span><br><span class="line">        age.value++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="对象类型数据（Reactive）"><a href="#对象类型数据（Reactive）" class="headerlink" title="对象类型数据（Reactive）"></a>对象类型数据（Reactive）</h3><p><code>Ref</code>只能对基本数据类型进行修改，如：string、number、boolean…</p><p>而<code>Reactive</code>则可以对对象类型进行修改，如：Array、Function….</p><p>和<code>Ref</code>一样，使用前需要先导入</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br></pre></td></tr></table></figure><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名 = reactive(对象数据)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 展示修改student对象  --&gt;</span><br><span class="line">    &lt;h1&gt;我叫&#123;&#123; student.name &#125;&#125;，性别是&#123;&#123; student.gender &#125;&#125;，今年&#123;&#123; student.age &#125;&#125;岁了&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;alterGender&quot;&gt;点击修改性别&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;grow&quot;&gt;点击增加一岁&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 展示修改hobbies数组  --&gt;</span><br><span class="line">    &lt;h2&gt;爱好：&lt;/h2&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;hobby in hobbies&quot; :key=&quot;hobby&quot;&gt;&#123;&#123; hobby &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button @click=&quot;deleteHobby&quot;&gt;删除爱好&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;MyPerson&quot;&gt;</span><br><span class="line">    import &#123; reactive &#125; from &#x27;vue&#x27;;</span><br><span class="line">    </span><br><span class="line">    // 定义 student 对象</span><br><span class="line">    let student = reactive(&#123;</span><br><span class="line">        name:&quot;张三&quot;,</span><br><span class="line">        age:18,</span><br><span class="line">        gender:&quot;男&quot;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 定义 hobbies 数组</span><br><span class="line">    let hobbies = reactive([&quot;打游戏&quot;,&quot;敲代码&quot;,&quot;看电影&quot;]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 年龄增长方法</span><br><span class="line">    function grow() &#123;</span><br><span class="line">        student.age++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 修改性别方法</span><br><span class="line">    function alterGender() &#123;</span><br><span class="line">        student.gender = student.gender == &quot;男&quot; ? &quot;女&quot; : &quot;男&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 删除爱好方法</span><br><span class="line">    function deleteHobby() &#123;</span><br><span class="line">        hobbies.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p><font color='red'>注意：Reactive只能定义对象类型的响应式数据</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;MyPerson&quot;&gt;</span><br><span class="line">    import &#123; reactive &#125; from &#x27;vue&#x27;;</span><br><span class="line">    let name = reactive(&quot;张三&quot;);    // 类型“string”的参数不能赋给类型“object”的参数。</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>所以，Reactive是有局限性的</p><h3 id="Ref在对象类型上的使用"><a href="#Ref在对象类型上的使用" class="headerlink" title="Ref在对象类型上的使用"></a>Ref在对象类型上的使用</h3><p>ref也可以直接对对象进行使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let 对象名 = ref(对象值);</span><br></pre></td></tr></table></figure><p>但是在对对象值进行处理时，需要先<code>.value</code>拿到值，再进行处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function () &#123;</span><br><span class="line">对象名.value.对象属性 = 值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 展示修改student对象  --&gt;</span><br><span class="line">    &lt;h1&gt;我叫&#123;&#123; student.name &#125;&#125;，性别是&#123;&#123; student.gender &#125;&#125;，今年&#123;&#123; student.age &#125;&#125;岁了&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;alterGender&quot;&gt;点击修改性别&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;grow&quot;&gt;点击增加一岁&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 展示修改hobbies数组  --&gt;</span><br><span class="line">    &lt;h2&gt;爱好：&lt;/h2&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;hobby in hobbies&quot; :key=&quot;hobby&quot;&gt;&#123;&#123; hobby &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button @click=&quot;deleteHobby&quot;&gt;删除爱好&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;MyPerson&quot;&gt;</span><br><span class="line">    import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">    // 定义 student 对象</span><br><span class="line">    let student = ref(&#123;</span><br><span class="line">        name:&quot;张三&quot;,</span><br><span class="line">        age:18,</span><br><span class="line">        gender:&quot;男&quot;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 定义 hobbies 数组</span><br><span class="line">    let hobbies = ref([&quot;打游戏&quot;,&quot;敲代码&quot;,&quot;看电影&quot;]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 年龄增长方法</span><br><span class="line">    function grow() &#123;</span><br><span class="line">        student.value.age++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 修改性别方法</span><br><span class="line">    function alterGender() &#123;</span><br><span class="line">        student.value.gender = student.value.gender == &quot;男&quot; ? &quot;女&quot; : &quot;男&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 删除爱好方法</span><br><span class="line">    function deleteHobby() &#123;</span><br><span class="line">        hobbies.value.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Ref-vs-Reactive"><a href="#Ref-vs-Reactive" class="headerlink" title="Ref vs Reactive"></a>Ref vs Reactive</h3><p>宏观角度看：</p><ol><li><code>ref</code>用来定义：基本类型数据、对象类型数据</li><li><code>reactive</code>用来定义：对象类型数据</li></ol><p>区别：</p><ol><li><code>ref</code>创建的变量必须使用<code>.value</code>（可以使用vscode中的插件自动添加.value）</li><li><code>reactive</code>重新分配一个新对象，会失去响应式（可以使用<code>Object.assign</code>去整体替换）</li></ol><p>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设触发这个函数，页面是不更新的</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changePerson1</span>(<span class="params"></span>) &#123;</span><br><span class="line">person = &#123;<span class="attr">name</span>:<span class="string">&quot;李四&quot;</span>,<span class="attr">age</span>:<span class="number">21</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个是可以正常使用的</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changePerson2</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(person,&#123;<span class="attr">name</span>:<span class="string">&quot;李四&quot;</span>,<span class="attr">age</span>:<span class="number">21</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在利用ref的情况下实现以上代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> student = <span class="title function_">ref</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>:<span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeStudent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    student.<span class="property">value</span> = &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;李四&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">21</span>,</span><br><span class="line">       <span class="attr">gender</span>:<span class="string">&quot;女&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用原则：</p><ol><li>若需要一个基本类型的响应式数据，必须使用<code>ref</code></li><li>若需要一个响应式对象，层级不深，<code>ref</code>、<code>reactive</code>都可以</li><li>若需要一个响应式对象，且层级较深，推荐使用<code>reactive</code></li></ol><h3 id="toRefs-和-toRef"><a href="#toRefs-和-toRef" class="headerlink" title="toRefs 和 toRef"></a>toRefs 和 toRef</h3><ul><li>作用：将响应式对象中的每一个属性，转换为<code>ref</code>对象</li><li>备注：<code>toRefs</code>与<code>toRef</code>的功能一致，但是<code>toRefs</code>可以批量转换</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> student = <span class="title function_">ref</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>:<span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = student.<span class="property">value</span>.<span class="property">name</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeStudent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    student.<span class="property">value</span>.<span class="property">name</span> += <span class="string">&#x27;~&#x27;</span>;</span><br><span class="line">                                        <span class="comment">// 点击三次后：</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">value</span>.<span class="property">name</span>);    <span class="comment">// 张三~~~</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);                  <span class="comment">// 张三</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面说明了直接将响应式对象的值赋给一个变量，该变量的值并<code>不会成为响应式</code></p><p>而使用<code>toRefs</code>后，效果如下所示：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> student = <span class="title function_">ref</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>:<span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将返回的对象结构赋值</span></span><br><span class="line"><span class="keyword">let</span> &#123; name,age,gender &#125; = <span class="title function_">toRefs</span>(student.<span class="property">value</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeStudent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    student.<span class="property">value</span>.<span class="property">name</span> += <span class="string">&#x27;~&#x27;</span>;</span><br><span class="line">                                        <span class="comment">// 点击三次后：</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">value</span>.<span class="property">name</span>);    <span class="comment">// 张三~~~</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="property">value</span>);            <span class="comment">// 张三~~~</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且，如果直接对name修改，也会导致student.value.name的被修改</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">changeStudent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    name.<span class="property">value</span> += <span class="string">&#x27;~&#x27;</span>;</span><br><span class="line">                                        <span class="comment">// 点击三次后：</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">value</span>.<span class="property">name</span>);    <span class="comment">// 张三~~~</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="property">value</span>);            <span class="comment">// 张三~~~</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计算属性（Computed）"><a href="#计算属性（Computed）" class="headerlink" title="计算属性（Computed）"></a>计算属性（Computed）</h2><p>模板中的表达式虽然方便，但也只能用来做简单的操作。如果在模板中写太多逻辑，会让模板变得臃肿，难以维护</p><p>示例：</p><p>在不使用计算属性的情况下，完成如下需求：</p><ol><li>根据输入框的内容，将全名显示出来</li><li>将全名中的首字母大写</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;全名：&#123;&#123; firstName.slice(0,1).toUpperCase() + firstName.slice(1) &#125;&#125; - &#123;&#123; lastName &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;MyPerson&quot;&gt;</span><br><span class="line">    import &#123; computed, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">    let firstName = ref(&quot;zhang&quot;);</span><br><span class="line">    let lastName = ref(&quot;san&quot;)</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>使用<code>computed</code>后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;全名：&#123;&#123; fullName &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;MyPerson&quot;&gt;</span><br><span class="line">    import &#123; computed, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">    let firstName = ref(&quot;zhang&quot;);</span><br><span class="line">    let lastName = ref(&quot;san&quot;)</span><br><span class="line"></span><br><span class="line">    let fullName = computed(() =&gt; &#123;</span><br><span class="line">        return firstName.value.slice(0,1).toUpperCase() + firstName.value.slice(1) + &quot;-&quot; + lastName.value;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="计算属性缓存"><a href="#计算属性缓存" class="headerlink" title="计算属性缓存"></a>计算属性缓存</h3><p>计算属性是带有缓存的</p><p>示例：</p><p>调用计算属性的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;全名：&#123;&#123; fullName &#125;&#125;&lt;/div&gt; </span><br><span class="line">    &lt;div&gt;全名：&#123;&#123; fullName &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;全名：&#123;&#123; fullName &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;全名：&#123;&#123; fullName &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;全名：&#123;&#123; fullName &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;!-- 调用fullName方法5次，控制台只会输出一次 1 --&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;MyPerson&quot;&gt;</span><br><span class="line">    import &#123; computed, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">    // 将全名的首字母大写</span><br><span class="line">    let firstName = ref(&quot;zhang&quot;);</span><br><span class="line">    let lastName = ref(&quot;san&quot;)</span><br><span class="line"></span><br><span class="line">    let fullName = computed(() =&gt; &#123;</span><br><span class="line">        console.log(1);</span><br><span class="line">        return firstName.value.slice(0,1).toUpperCase() + firstName.value.slice(1) + &quot;-&quot; + lastName.value;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>自定义方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;全名：&#123;&#123; withOutComputed() &#125;&#125;&lt;/div&gt; </span><br><span class="line">    &lt;div&gt;全名：&#123;&#123; withOutComputed() &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;全名：&#123;&#123; withOutComputed() &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;全名：&#123;&#123; withOutComputed() &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;全名：&#123;&#123; withOutComputed() &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;!-- 调用withOutComputed方法5次，控制台输出5次 1 --&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;MyPerson&quot;&gt;</span><br><span class="line">    import &#123; computed, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">    // 将全名的首字母大写</span><br><span class="line">    let firstName = ref(&quot;zhang&quot;);</span><br><span class="line">    let lastName = ref(&quot;san&quot;)</span><br><span class="line"></span><br><span class="line">    let withOutComputed = function() &#123;</span><br><span class="line">        console.log(1);</span><br><span class="line">        return firstName.value.slice(0,1).toUpperCase() + firstName.value.slice(1) + &quot;-&quot; + lastName.value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="可写计算属性"><a href="#可写计算属性" class="headerlink" title="可写计算属性"></a>可写计算属性</h3><p>计算属性默认是只读的。当尝试修改一个计算属性时，会收到一个运行时警告。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fullName = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> firstName.<span class="property">value</span>.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">1</span>).<span class="title function_">toUpperCase</span>() + firstName.<span class="property">value</span>.<span class="title function_">slice</span>(<span class="number">1</span>) + <span class="string">&quot;-&quot;</span> + lastName.<span class="property">value</span>;</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">alertComputed</span>(<span class="params"></span>) &#123;</span><br><span class="line">    fullName.<span class="property">value</span> = <span class="number">123</span>;   <span class="comment">// 无法为“value”赋值，因为它是只读属性。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只在某些特殊场景中可能才需要用到“可写”的属性，可以通过同时提供 getter 和 setter 来创建：</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;全名：&#123;&#123; fullName &#125;&#125;&lt;/div&gt; </span><br><span class="line"></span><br><span class="line">     &lt;button @click=&quot;alertComputed&quot;&gt;修改fullName方法的值&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;MyPerson&quot;&gt;</span><br><span class="line">    import &#123; computed, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">    // 将全名的首字母大写</span><br><span class="line">    let firstName = ref(&quot;zhang&quot;);</span><br><span class="line">    let lastName = ref(&quot;san&quot;)</span><br><span class="line"></span><br><span class="line">    let fullName = computed(&#123;</span><br><span class="line">        get() &#123;</span><br><span class="line">            return firstName.value.slice(0,1).toUpperCase() + firstName.value.slice(1) + &quot;-&quot; + lastName.value;</span><br><span class="line">        &#125;,</span><br><span class="line">        set(val) &#123;</span><br><span class="line">            console.log(val);   // li-si</span><br><span class="line">            let [str1,str2] = val.split(&quot;-&quot;);</span><br><span class="line">            console.log(str1,str2); // li-si</span><br><span class="line">            firstName.value = str1;</span><br><span class="line">            lastName.value = str2;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    function alertComputed() &#123;</span><br><span class="line">        fullName.value = &quot;li-si&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="监视（watch）"><a href="#监视（watch）" class="headerlink" title="监视（watch）"></a>监视（watch）</h2><p>作用：监视数据的变化（和Vue2中的watch作用一致）</p><p>特点：Vue3中的watch只能监视以下四种数据：</p><ul><li><code>ref</code>定义的数据</li><li><code>reactive</code>定义的数据</li><li>函数返回一个值</li><li>一个包含上述内容的数组</li></ul><h3 id="监视Ref基本类型数据"><a href="#监视Ref基本类型数据" class="headerlink" title="监视Ref基本类型数据"></a>监视Ref基本类型数据</h3><p>监视<code>ref</code>定义的基本数据类型，直接写数据名即可，监视的是其<code>value</code>值的改变</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;当前求和值为：&#123;&#123; count &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;addSum&quot;&gt;将求和值+1&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;MyPerson&quot;&gt;</span><br><span class="line">import &#123; ref,watch &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    let count = ref(0)</span><br><span class="line"></span><br><span class="line">    function addSum() &#123;</span><br><span class="line">        count.value++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 监视</span><br><span class="line">    let watchCount = watch(count,(newVal,oldVal) =&gt; &#123;// count不需要.value，因为监视的是ref</span><br><span class="line">        console.log(&quot;新的值：&quot; + newVal + &quot;；旧的值：&quot; + oldVal);    // 第一次点击，控制台返回：新的值：1；旧的值：0</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>上述例子中，<code>watchCount</code>这个函数只要被调用，就会把<code>watch</code>方法停止。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监视</span></span><br><span class="line"><span class="keyword">let</span> watchCount = <span class="title function_">watch</span>(count,<span class="function">(<span class="params">newVal,oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;新的值：&quot;</span> + newVal + <span class="string">&quot;；旧的值：&quot;</span> + oldVal);</span><br><span class="line">    <span class="keyword">if</span>(newVal === <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="title function_">watchCount</span>();   <span class="comment">// 点击到第10次，监视停止</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="监视Ref对象类型数据"><a href="#监视Ref对象类型数据" class="headerlink" title="监视Ref对象类型数据"></a>监视Ref对象类型数据</h3><p>监视<code>ref</code>定义的对象类型数据：直接写数据名，监视的是对象的地址值，若想监视对象内部的数据，要手动开启深度监视</p><p>注意：</p><ul><li>若修改的是ref定义的对象中的属性，<code>newVal</code>和<code>oldVal</code>都是新值，因为它们是同一个对象</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;性别：&#123;&#123; person.gender &#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改姓名&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeGender&quot;&gt;修改性别&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changePerson&quot;&gt;整体修改&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;MyPerson&quot;&gt;</span><br><span class="line">    import &#123; ref,watch &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">    // 定义数据</span><br><span class="line">    let person = ref(&#123;</span><br><span class="line">        name:&quot;张三&quot;,</span><br><span class="line">        age:19,</span><br><span class="line">        gender:&quot;男&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    // 定义方法</span><br><span class="line">    function changeName() &#123;</span><br><span class="line">        person.value.name += &quot;~&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function changeAge() &#123;</span><br><span class="line">        person.value.age++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function changeGender() &#123;</span><br><span class="line">        person.value.gender = person.value.gender == &quot;男&quot; ? &quot;女&quot; : &quot;男&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function changePerson() &#123;</span><br><span class="line">        person.value = &#123;</span><br><span class="line">            name:&quot;李四&quot;,</span><br><span class="line">            age:20,</span><br><span class="line">            gender: &quot;女&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 监视</span><br><span class="line">    watch(person.value,(newVal,oldVal) =&gt; &#123;</span><br><span class="line">        // 点击第一次修改姓名，返回：newVal：张三~，oldVal：张三~</span><br><span class="line">        console.log(`newVal：$&#123;newVal.name&#125;，oldVal：$&#123;oldVal.name&#125;`);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>上述例子中，<code>watch</code>监视的是<code>person.value.name</code>，其他值类似</p><ul><li>若修改整个ref定义的对象，<code>newVal</code>是新值，<code>oldVal</code>是旧值，因为不是同一个对象了</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;性别：&#123;&#123; person.gender &#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改姓名&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeGender&quot;&gt;修改性别&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changePerson&quot;&gt;整体修改&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;MyPerson&quot;&gt;</span><br><span class="line">    import &#123; ref,watch &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">    // 定义数据</span><br><span class="line">    let person = ref(&#123;</span><br><span class="line">        name:&quot;张三&quot;,</span><br><span class="line">        age:19,</span><br><span class="line">        gender:&quot;男&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    // 定义方法</span><br><span class="line">    function changeName() &#123;</span><br><span class="line">        person.value.name += &quot;~&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function changeAge() &#123;</span><br><span class="line">        person.value.age++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function changeGender() &#123;</span><br><span class="line">        person.value.gender = person.value.gender == &quot;男&quot; ? &quot;女&quot; : &quot;男&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function changePerson() &#123;</span><br><span class="line">        person.value = &#123;</span><br><span class="line">            name:&quot;李四&quot;,</span><br><span class="line">            age:20,</span><br><span class="line">            gender: &quot;女&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 监视</span><br><span class="line">    watch(person,(newVal,oldVal) =&gt; &#123;</span><br><span class="line">        // 点击整体修改</span><br><span class="line">        console.log(`newVal.name：$&#123;newVal.name&#125;，oldVal.name：$&#123;oldVal.name&#125;`);    </span><br><span class="line">        // newVal.name：李四，oldVal.name：张三</span><br><span class="line">        console.log(`newVal.age$&#123;newVal.age&#125;，oldVal.age$&#123;oldVal.age&#125;`);    </span><br><span class="line">        // newVal.age20，oldVal.age19</span><br><span class="line">        console.log(`newVal.gender$&#123;newVal.gender&#125;，oldVal.gender$&#123;oldVal.gender&#125;`);    </span><br><span class="line">        // newVal.gender女，oldVal.gender男</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>上述例子中，<code>watch</code>监视的是整个<code>person</code>对象</p><p>根据上面两个例子，可以发现：</p><ul><li><font color='red'>如果<code>watch</code>的第一个参数是<code>person</code>这个整体，那么只有当整体发生变化时，才会被监视到</font></li><li><font color='red'>而如果<code>watch</code>的第一参数是<code>person.value</code>，那么只有当<code>person</code>内部的值发生变化时，才会被监视，而修改整个<code>person</code>并不会被监视</font></li></ul><p>此时可以给watch添加一个参数，表示深度监视</p><h3 id="监视参数（深度监视等）"><a href="#监视参数（深度监视等）" class="headerlink" title="监视参数（深度监视等）"></a>监视参数（深度监视等）</h3><h4 id="深度监视（deep）"><a href="#深度监视（deep）" class="headerlink" title="深度监视（deep）"></a>深度监视（deep）</h4><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch(监视对象,回调函数,&#123;deep:true&#125;);</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(person,<span class="function">(<span class="params">newVal,oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 点击整体修改</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`newVal.name：<span class="subst">$&#123;newVal.name&#125;</span>，oldVal.name：<span class="subst">$&#123;oldVal.name&#125;</span>`</span>);    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`newVal.age<span class="subst">$&#123;newVal.age&#125;</span>，oldVal.age<span class="subst">$&#123;oldVal.age&#125;</span>`</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`newVal.gender<span class="subst">$&#123;newVal.gender&#125;</span>，oldVal.gender<span class="subst">$&#123;oldVal.gender&#125;</span>`</span>);</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;)  <span class="comment">// person的值修改或person被整体修改，都会触发监视</span></span><br></pre></td></tr></table></figure><h4 id="立即监视（immediate）"><a href="#立即监视（immediate）" class="headerlink" title="立即监视（immediate）"></a>立即监视（immediate）</h4><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch(监视对象,回调函数,&#123;immediate:true&#125;);</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(person,<span class="function">(<span class="params">newVal,oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 点击整体修改</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newVal.name：&quot;</span> , newVal.<span class="property">name</span>, <span class="string">&quot;，oldVal.name：&quot;</span> , oldVal?.<span class="property">name</span>); </span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;) <span class="comment">// 当开启immediate配置后，要获取oldVal中的具体值，需要加上 ？，表示可选属性</span></span><br></pre></td></tr></table></figure><h3 id="监视Reactive对象类型数据"><a href="#监视Reactive对象类型数据" class="headerlink" title="监视Reactive对象类型数据"></a>监视Reactive对象类型数据</h3><p>和监视<code>ref</code>的区别在于，监视<code>reactive</code>对象类型数据：<font color='red'>自动开启深度监视（deep）</font></p><p>即：隐式开启深度监视</p><p>就算将<code>watch</code>的深度监视参数手动改为<code>false</code>，也无法关闭</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;性别：&#123;&#123; person.gender &#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改姓名&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeGender&quot;&gt;修改性别&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changePerson&quot;&gt;整体修改&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;MyPerson&quot;&gt;</span><br><span class="line">    import &#123; reactive,watch &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">    // 定义数据</span><br><span class="line">    let person = reactive(&#123;</span><br><span class="line">        name:&quot;张三&quot;,</span><br><span class="line">        age:19,</span><br><span class="line">        gender:&quot;男&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    // 定义方法</span><br><span class="line">    function changeName() &#123;</span><br><span class="line">        person.name += &quot;~&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function changeAge() &#123;</span><br><span class="line">        person.age++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function changeGender() &#123;</span><br><span class="line">        person.gender = person.gender == &quot;男&quot; ? &quot;女&quot; : &quot;男&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function changePerson() &#123;</span><br><span class="line">        Object.assign(person,&#123;</span><br><span class="line">            name:&quot;李四&quot;,</span><br><span class="line">            age:20,</span><br><span class="line">            gender: &quot;女&quot;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 监视</span><br><span class="line">    // 点击修改姓名、年龄、性别、整体都会监视</span><br><span class="line">    watch(person,(newVal,oldVal) =&gt; &#123;</span><br><span class="line">        console.log(&quot;newVal&quot; , newVal, &quot;，oldVal：&quot; , oldVal); </span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="监视响应式数据中的具体属性"><a href="#监视响应式数据中的具体属性" class="headerlink" title="监视响应式数据中的具体属性"></a>监视响应式数据中的具体属性</h3><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><p>如果要监视ref或reactive中的某一个具体属性（基本类型），直接写成以下形式是错误的：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(person.<span class="property">name</span>,<span class="function">(<span class="params">newVal,oldVal</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newVal&quot;</span> , newVal, <span class="string">&quot;，oldVal：&quot;</span> , oldVal); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这是由于watch监视的对象是严格限制的，<a href="#%E7%9B%91%E8%A7%86%EF%BC%88watch%EF%BC%89">查看限制类型</a></p><p>解决方法：</p><p>写一个函数，并在函数中返回监视的对象</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">name</span>,<span class="function">(<span class="params">newVal,oldVal</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newVal&quot;</span> , newVal, <span class="string">&quot;，oldVal：&quot;</span> , oldVal); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h4><p>假设现在的Person为以下形式：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">19</span>,</span><br><span class="line">    <span class="attr">gender</span>:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">    <span class="attr">address</span>:&#123;</span><br><span class="line">        <span class="attr">province</span>:<span class="string">&quot;江苏&quot;</span>,</span><br><span class="line">        <span class="attr">city</span>:<span class="string">&quot;苏州&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果要监视address里的属性，写成以下方式也是可以的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(person.<span class="property">address</span>,<span class="function">(<span class="params">n,o</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n,o)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>但是：</p><ol><li>如果只修改<code>address.province</code>，是能被监视到的</li><li>如果修改<code>address</code>就不会被监视</li></ol><p>解决方法也是将这个对象以函数的形式返回</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">address</span>,<span class="function">(<span class="params">n,o</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n,o)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><font color='red'>不管是基本类型还是对象类型，都建议以函数的形式返回</font></p><h3 id="监视多个类型"><a href="#监视多个类型" class="headerlink" title="监视多个类型"></a>监视多个类型</h3><p>将多个类型包裹为一个数组传入到watch中就可以</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>([<span class="function">()=&gt;</span>person.<span class="property">address</span>,<span class="function">()=&gt;</span>person.<span class="property">name</span>],<span class="function">(<span class="params">n,o</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n,o)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="WatchEffect"><a href="#WatchEffect" class="headerlink" title="WatchEffect"></a>WatchEffect</h2><p>立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行该函数</p><p><code>watch</code>对比<code>watchEffect</code>：</p><ol><li>都能监听响应式数据的变化，不同的是监听数据变化的方式不同</li><li>watch：需要明确指出监视的数据</li><li>watchEffect：不用明确的指出监视的数据（函数中用到哪些属性，就监视哪些属性）</li></ol><p>假设有多个响应式数据：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">let</span> b = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>如果要同时监视以上的所有数据，用<code>watch</code>的方法：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>([a,b,...],<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (val.[<span class="number">0</span>] &gt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a &gt; 10&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (val.[<span class="number">1</span>] &gt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a &gt; 10&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以看出需要将被监视的数据逐个填写到形参中</p><p>而使用watchEffect方法，则是如下的样子：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (a.<span class="property">value</span> &gt; <span class="number">10</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a &gt; 10&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (b.<span class="property">value</span> &gt; <span class="number">10</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a &gt; 10&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="标签的ref属性"><a href="#标签的ref属性" class="headerlink" title="标签的ref属性"></a>标签的ref属性</h2><p>作用：用于注册模板引用</p><ul><li>用在普通<code>DOM标签</code>上，获取的是<code>DOM节点</code></li><li>用在组件标签上，获取的是组件实例对象</li></ul><h3 id="普通DOM标签"><a href="#普通DOM标签" class="headerlink" title="普通DOM标签"></a>普通DOM标签</h3><p>假设<code>Person.vue</code>的内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h2 id=&quot;title&quot;&gt;Person.vue&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;showLog&quot;&gt;点击按钮&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">    function showLog() &#123;</span><br><span class="line">        console.log(document.getElementById(&quot;title&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>效果是点击按钮控制台会输出模板中的的h2标签</p><p>但是在<code>App.vue</code>中，id的名称也是<code>title</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2 id=&quot;title&quot;&gt;App.vue&lt;/h2&gt;</span><br><span class="line">  &lt;Person&gt;&lt;/Person&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">  import Person from &#x27;./components/Person.vue&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>那么点击按钮后，控制台输出的结果是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span>App.vue<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是由于id名称的冲突，谁先使用id就输出谁。</p><p>解决的办法就是用<code>ref</code></p><p>示例：</p><p>Person.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h2 ref=&quot;title&quot;&gt;Person&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;showLog&quot;&gt;点击按钮&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">    import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">// 创建一个title，用于存储ref标记的内容</span><br><span class="line">    let title = ref();</span><br><span class="line"></span><br><span class="line">    function showLog() &#123;</span><br><span class="line">        console.log(title.value);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>App.vue：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2 ref=&quot;title&quot;&gt;App.vue&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;showLog&quot;&gt;点击按钮&lt;/button&gt;</span><br><span class="line">  &lt;Person&gt;&lt;/Person&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">  import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">  import Person from &#x27;./components/Person.vue&#x27;;</span><br><span class="line"></span><br><span class="line">  let title = ref();</span><br><span class="line">  function showLog() &#123;</span><br><span class="line">    console.log(title.value);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="组件标签"><a href="#组件标签" class="headerlink" title="组件标签"></a>组件标签</h3><p>如果将ref绑定在组件标签上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2 ref=&quot;title&quot;&gt;App.vue&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;showLog&quot;&gt;点击按钮&lt;/button&gt;</span><br><span class="line">  &lt;Person ref=&quot;componentPerson&quot;&gt;&lt;/Person&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">  import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">  import Person from &#x27;./components/Person.vue&#x27;;</span><br><span class="line"></span><br><span class="line">  let title = ref();</span><br><span class="line"></span><br><span class="line">  let componentPerson = ref();</span><br><span class="line"></span><br><span class="line">  function showLog() &#123;</span><br><span class="line">    console.log(componentPerson.value);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>那么输出的结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Proxy(Object) &#123;__v_skip: true&#125;</span><br></pre></td></tr></table></figure><p>但是并不能查看到有用的信息，这是由于<code>vue</code>的安全机制。父级不能随意查看子级的内容，如果子级允许父级查看，可以使用<code>defineExpose</code>（可以手动引入，不过最新的vue3已经自动引入了）</p><p>Person.vue中使用该方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h2 ref=&quot;title&quot;&gt;Person&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;showLog&quot;&gt;点击按钮&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">    import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">    let title = ref();</span><br><span class="line">    let a = ref(0);</span><br><span class="line"></span><br><span class="line">    function showLog() &#123;</span><br><span class="line">        console.log(title.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    defineExpose(&#123;title,a&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>修改完后，输出的结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Proxy(Object) &#123;title: RefImpl, a: RefImpl, __v_skip: true&#125;</span><br></pre></td></tr></table></figure><h2 id="Ts中的接口、泛型、自定义类型"><a href="#Ts中的接口、泛型、自定义类型" class="headerlink" title="Ts中的接口、泛型、自定义类型"></a>Ts中的接口、泛型、自定义类型</h2><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>假设要将对象的属性类型限制，这时候就可以用到<code>ts</code>语法中的接口</p><p>在<code>src</code>目录下创建一个<code>types</code>的目录，再创建一个<code>index.ts</code>文件，文件内容如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">PersonInter</span>&#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后引入到<code>Person.vue</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">    // 引入PersonInter前面一定要加type，说明这是一个规范接口</span><br><span class="line">    import &#123;type PersonInter&#125; from &quot;@/types&quot;</span><br><span class="line">    const person:PersonInter = &#123;id:&quot;aaaa0001&quot;,name:&quot;张三&quot;,age:20&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>假设要将数组中的对象的属性类型限制，这时候就可以用到<code>ts</code>语法中的泛型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">    import &#123;type PersonInter&#125; from &quot;@/types&quot;</span><br><span class="line"></span><br><span class="line">    const personList:Array&lt;PersonInter&gt; = [</span><br><span class="line">        &#123;id:&quot;aaaa0001&quot;,name:&quot;张三&quot;,age:20&#125;,</span><br><span class="line">        &#123;id:&quot;aaaa0002&quot;,name:&quot;李四&quot;,age:22&#125;,</span><br><span class="line">        &#123;id:&quot;aaaa0003&quot;,name:&quot;王五&quot;,age:18&#125;</span><br><span class="line">    ]</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h3><p><code>personList:Array&lt;PersonInter&gt;</code>这样的写法，可读性较差，所以可以使用自定义类型来优化代码</p><p>首先在之前创建的index.ts中创建自定义类型：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">PersonInter</span>&#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Persons</span> = <span class="title class_">Array</span>&lt;<span class="title class_">PersonInter</span>&gt;</span><br></pre></td></tr></table></figure><p>随后在<code>Person.vue</code>中导入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">    import &#123;type PersonInter,type Persons&#125; from &quot;@/types&quot;</span><br><span class="line"></span><br><span class="line">    const personList:Persons = [</span><br><span class="line">        &#123;id:&quot;aaaa0001&quot;,name:&quot;张三&quot;,age:20&#125;,</span><br><span class="line">        &#123;id:&quot;aaaa0002&quot;,name:&quot;李四&quot;,age:22&#125;,</span><br><span class="line">        &#123;id:&quot;aaaa0003&quot;,name:&quot;王五&quot;,age:18&#125;</span><br><span class="line">    ]</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="reactive的结合使用"><a href="#reactive的结合使用" class="headerlink" title="reactive的结合使用"></a>reactive的结合使用</h3><p>如果在<code>reactive</code>中使用泛型、接口、自定义类型，可以写为以下形式（不推荐）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">    import &#123;type PersonInter,type Persons&#125; from &quot;@/types&quot;</span><br><span class="line">    import &#123; reactive &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">    const personList:Persons = reactive([</span><br><span class="line">        &#123;id:&quot;aaaa0001&quot;,name:&quot;张三&quot;,age:20&#125;,</span><br><span class="line">        &#123;id:&quot;aaaa0002&quot;,name:&quot;李四&quot;,age:22&#125;,</span><br><span class="line">        &#123;id:&quot;aaaa0003&quot;,name:&quot;王五&quot;,age:18&#125;</span><br><span class="line">    ])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>推荐的用法是把泛型应用到方法上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">    import &#123;type PersonInter,type Persons&#125; from &quot;@/types&quot;</span><br><span class="line">    import &#123; reactive &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">    const personList = reactive&lt;Persons&gt;([</span><br><span class="line">        &#123;id:&quot;aaaa0001&quot;,name:&quot;张三&quot;,age:20&#125;,</span><br><span class="line">        &#123;id:&quot;aaaa0002&quot;,name:&quot;李四&quot;,age:22&#125;,</span><br><span class="line">        &#123;id:&quot;aaaa0003&quot;,name:&quot;王五&quot;,age:18&#125;</span><br><span class="line">    ])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Props的引用"><a href="#Props的引用" class="headerlink" title="Props的引用"></a>Props的引用</h2><p>将父组件的内容发送给子组件，可以在子组件中使用<code>defineProps</code>方法用于接收</p><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Person a=&quot;你好&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">  import Person from &#x27;./components/Person.vue&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; a &#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">    defineProps([&quot;a&quot;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>注意：<code>defineProps</code>中保存的是数组，且数组中的内容类型为<font color='red'>字符串</font>，字符串的内容是父组件中子组件标签的属性名称</p><p>由于数组的内容是字符串，所以不能在<code>script</code>标签中直接使用，但是在模板中可以直接使用。如果想要用变量保存<code>a</code>，则可以定义一个变量用于接收<code>defineProps</code>的返回值</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; a &#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">    let x = defineProps([&quot;a&quot;]);</span><br><span class="line"></span><br><span class="line">    console.log(x);</span><br><span class="line">    console.log(x.a);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>输出内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Proxy(Object) &#123;a: &#x27;你好&#x27;&#125;</span><br><span class="line">你好</span><br></pre></td></tr></table></figure><h3 id="将对象、变量通过Props传递"><a href="#将对象、变量通过Props传递" class="headerlink" title="将对象、变量通过Props传递"></a>将对象、变量通过Props传递</h3><p>示例：</p><p>父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Person a=&quot;你好&quot; :sayHi :personList/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">  import Person from &#x27;./components/Person.vue&#x27;;</span><br><span class="line"></span><br><span class="line">  import &#123;type PersonInter,type Persons&#125; from &quot;@/types&quot;</span><br><span class="line">    import &#123; reactive &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">    const sayHi = &quot;你好&quot;</span><br><span class="line"></span><br><span class="line">    const personList = reactive&lt;Persons&gt;([</span><br><span class="line">        &#123;id:&quot;aaaa0001&quot;,name:&quot;张三&quot;,age:20&#125;,</span><br><span class="line">        &#123;id:&quot;aaaa0002&quot;,name:&quot;李四&quot;,age:22&#125;,</span><br><span class="line">        &#123;id:&quot;aaaa0003&quot;,name:&quot;王五&quot;,age:18&#125;</span><br><span class="line">    ])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>需要注意的是，和之前直接传输字符串不同，由于这次传输的是变量、对象，此时需要在前面加上冒号表示动态数据</p><p>子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; a &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; sayHi &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; personList &#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">    let x = defineProps([&quot;a&quot;,&quot;sayHi&quot;,&quot;personList&quot;]);</span><br><span class="line"></span><br><span class="line">    console.log(x);</span><br><span class="line">    console.log(x.a);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="defineProps限制类型"><a href="#defineProps限制类型" class="headerlink" title="defineProps限制类型"></a>defineProps限制类型</h3><p>为了防止父组件传输错误的类型，如<code>&lt;Person :personList=&quot;5&quot;/&gt;</code>，这会导致<code>v-for</code>空循环五次，输出空内容</p><p>可以使用之前的泛型来约束传输类型，示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;list in personList&quot; :key=&quot;list.id&quot;&gt;姓名：&#123;&#123; list.name &#125;&#125;，年龄：&#123;&#123; list.age &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">    import &#123;type Persons&#125; from &quot;@/types&quot;</span><br><span class="line"></span><br><span class="line">    defineProps&lt;&#123;personList:Persons&#125;&gt;()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>defineProps&lt;&#123;personList:Persons&#125;&gt;()</code>的详细意思如下：</p><ol><li><code>&lt;&gt;</code>表示是泛型</li><li><code>&#123;&#125;</code>表示接收的对象</li><li><code>personList</code>表示接收的对象是谁</li><li><code>Persons</code>表示约束类型</li></ol><h3 id="defineProps更多用法"><a href="#defineProps更多用法" class="headerlink" title="defineProps更多用法"></a>defineProps更多用法</h3><p>除了限制类型，还有限制必要性以及指定默认值</p><h4 id="限制必要性"><a href="#限制必要性" class="headerlink" title="限制必要性"></a>限制必要性</h4><p>当父组件没有传输内容，而子组件又接收了不存的内容，此时代码会报错，这时候可以使用<code>ts</code>中的<code>?</code>。它表示这是一个可选的内容，当父组件存在则接收，不存在则忽略。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;list in personList&quot; :key=&quot;list.id&quot;&gt;姓名：&#123;&#123; list.name &#125;&#125;，年龄：&#123;&#123; list.age &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">    import &#123;type Persons&#125; from &quot;@/types&quot;</span><br><span class="line"></span><br><span class="line">    defineProps&lt;&#123;personList?:Persons&#125;&gt;()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>既然父组件没有传输内容，那么子组件就需要一个默认值来顶替父组件本应该传输的内容，这里可以用到vue的<code>withDefault</code>方法，该方法需要引入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; withDefaults &#125; from &quot;vue&quot;;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;list in personList&quot; :key=&quot;list.id&quot;&gt;姓名：&#123;&#123; list.name &#125;&#125;，年龄：&#123;&#123; list.age &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">    import &#123;type Persons&#125; from &quot;@/types&quot;</span><br><span class="line">    import &#123; withDefaults &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">    withDefaults(defineProps&lt;&#123;personList?:Persons&#125;&gt;(),&#123;</span><br><span class="line">        personList: () =&gt; [&#123;id:&quot;aaaa0000&quot;,name:&quot;匿名&quot;,age:0&#125;]</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>withDefaults</code>说明：</p><ol><li>第一个参数：表示接收的数据</li><li>第二个参数：当没有接收到数据时，使用第二个参数中的值，注意的是对象的值必须为<code>函数</code>的返回值</li></ol><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p><code>vue2</code>中，生命周期有四个阶段（创建、挂载、更新、销毁），每个阶段分前后两种，共以下8种：</p><ol><li>beforeCreate</li><li>created</li><li>beforeMount</li><li>mounted</li><li>beforeUpdate</li><li>updated</li><li>beforeDestroy</li><li>destroyed</li></ol><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &#x27;Hello Vue!&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeCreate() &#123;</span><br><span class="line">    console.log(&#x27;beforeCreate: 组件实例被创建之前&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(&#x27;created: 组件实例创建完成&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeMount() &#123;</span><br><span class="line">    console.log(&#x27;beforeMount: 组件挂载到DOM之前&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(&#x27;mounted: 组件挂载到DOM之后&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeUpdate() &#123;</span><br><span class="line">    console.log(&#x27;beforeUpdate: 组件数据更新之前&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  updated() &#123;</span><br><span class="line">    console.log(&#x27;updated: 组件数据更新之后&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line">    console.log(&#x27;beforeDestroy: 组件实例销毁之前&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    console.log(&#x27;destroyed: 组件实例销毁之后&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在<code>vue3</code>中，与<code>vue2</code>类似，依然保留了创建、挂载、更新和销毁四个阶段，但在细节上有所调整和优化。</p><p>下面是 Vue 3 的生命周期钩子函数列表：</p><ul><li>setup：创建</li><li>onBeforeMount: 在挂载开始之前被调用，相关的渲染函数首次被调用。</li><li>onMounted: 实例挂载完成后被调用，此时 DOM 元素已经插入文档中。</li><li>onBeforeUpdate: 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。</li><li>onUpdated: 组件更新完成后被调用，此时 DOM 已经更新。</li><li>onBeforeUnmount: 在卸载组件之前调用。</li><li>onUnmounted: 组件卸载后调用。</li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">// 创建</span><br><span class="line">console.log(&#x27;创建&#x27;)</span><br><span class="line">// 挂载前</span><br><span class="line">onBeforeMount(()=&gt;&#123;</span><br><span class="line">console.log(&#x27;挂载前&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">// 挂载完毕</span><br><span class="line">onMounted(()=&gt;&#123;</span><br><span class="line">console.log(&#x27;挂载完毕&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">// 更新前</span><br><span class="line">onBeforeUpdate(()=&gt;&#123;</span><br><span class="line">console.log(&#x27;更新前&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">// 更新完毕</span><br><span class="line">onUpdated(()=&gt;&#123;</span><br><span class="line">console.log(&#x27;更新完毕&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">// 卸载前</span><br><span class="line">onBeforeUnmount(()=&gt;&#123;</span><br><span class="line">console.log(&#x27;卸载前&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">// 卸载完毕</span><br><span class="line">onUnmounted(()=&gt;&#123;</span><br><span class="line">console.log(&#x27;卸载完毕&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="自定义Hooks"><a href="#自定义Hooks" class="headerlink" title="自定义Hooks"></a>自定义Hooks</h1><p>类似于封装函数（自己的理解来说的话是这样的）</p><p>示例：</p><h2 id="不使用自定义Hooks案例"><a href="#不使用自定义Hooks案例" class="headerlink" title="不使用自定义Hooks案例"></a>不使用自定义Hooks案例</h2><p>在不使用hook的情况下实现如下要求：</p><ol><li>页面展示数字，默认值为0，点击按钮后<code>+1</code></li><li>页面展示图片，无默认图片，点击按钮后添加一张图片</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h2 id=&quot;showNum&quot;&gt;&#123;&#123; num &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;sum&quot;&gt;点击按钮数字+1&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;img v-for=&quot;(dog,index) in dogList&quot; :src=&quot;dog&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;button @click=&quot;getPicture&quot;&gt;点击按钮获取图片&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">    import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">    import axios from &#x27;axios&#x27;;</span><br><span class="line"></span><br><span class="line">    // 定义数字</span><br><span class="line">    let num = ref(0)</span><br><span class="line"></span><br><span class="line">    // 定义图片数组</span><br><span class="line">    let dogList:any = ref([]);</span><br><span class="line"></span><br><span class="line">    // 定义数字增加函数</span><br><span class="line">    function sum() &#123;</span><br><span class="line">        num.value++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 定义获取图片函数</span><br><span class="line">    async function getPicture() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            let src = await axios.get(&#x27;https://dog.ceo/api/breeds/image/random&#x27;);</span><br><span class="line">            dogList.value.push(src.data.message);</span><br><span class="line">        &#125; catch (error) &#123;</span><br><span class="line">            alert(error)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    h2 &#123;</span><br><span class="line">        color: aqua;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    img &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        margin: 20px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="使用自定义Hooks案例"><a href="#使用自定义Hooks案例" class="headerlink" title="使用自定义Hooks案例"></a>使用自定义Hooks案例</h2><p>将以上的内容改为使用自定义hooks的方法如下：</p><p>首先在src目录下（与components目录同级），创建一个hooks文件夹，将内容拆分，涉及到图片的就创建一个名为useImg.ts的文件将相关内容剪切到该文件中，涉及到数字的就创建一个useNum.ts的文件将相关内容剪切到该文件中。</p><p>useImg.ts：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 定义图片数组</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">dogList</span>:<span class="built_in">any</span> = <span class="title function_">ref</span>([]);</span><br><span class="line">    <span class="comment">// 定义获取图片函数</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getPicture</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> src = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://dog.ceo/api/breeds/image/random&#x27;</span>);</span><br><span class="line">            dogList.<span class="property">value</span>.<span class="title function_">push</span>(src.<span class="property">data</span>.<span class="property">message</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(error)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;dogList,getPicture&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>useNum.ts：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 定义数字</span></span><br><span class="line">    <span class="keyword">let</span> num = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">// 定义数字增加函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">        num.<span class="property">value</span>++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;num,sum&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>相关内容必须要包含在函数内，且函数需要暴露出去，由于是匿名函数，所以必须使用<code>export default</code></li><li>函数中将相关的东西要<code>return</code>出去</li></ul><p>在原来的模板中使用自定义hooks的方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h2 id=&quot;showNum&quot;&gt;&#123;&#123; num &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;sum&quot;&gt;点击按钮数字+1&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;img v-for=&quot;(dog,index) in dogList&quot; :src=&quot;dog&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;button @click=&quot;getPicture&quot;&gt;点击按钮获取图片&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">    import useImg from &#x27;@/hooks/useDog&#x27;;</span><br><span class="line">    import useNum from &#x27;@/hooks/useNum&#x27;;</span><br><span class="line"></span><br><span class="line">    const &#123;dogList,getPicture&#125; = useImg();</span><br><span class="line">    const &#123;num,sum&#125; = useNum();</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    h2 &#123;</span><br><span class="line">        color: aqua;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    img &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        margin: 20px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>路由是 URL 与视图组件之间的映射。程序员可以定义路由规则，让特定的 URL 映射到特定的视图组件。</p><p>以下是基础的路由实现实例：</p><ol><li>首先在App.vue中创建基本的样式</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;test&quot;&gt;</span><br><span class="line">    &lt;h2&gt;路由测试页面&lt;/h2&gt;</span><br><span class="line">    &lt;!-- 导航栏 --&gt;</span><br><span class="line">    &lt;div id=&quot;navigate&quot;&gt;</span><br><span class="line">      &lt;a src=&quot;/home&quot; &gt;首页&lt;/a&gt;  </span><br><span class="line">      &lt;a src=&quot;/news&quot; &gt;新闻&lt;/a&gt;</span><br><span class="line">      &lt;a src=&quot;/about&quot;&gt;关于&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 展示区 --&gt;</span><br><span class="line">    &lt;div id=&quot;content&quot;&gt;</span><br><span class="line">      之后组件展示的区域</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">/* 页面总体样式 */</span><br><span class="line">#test &#123;</span><br><span class="line">  font-family: &#x27;Segoe UI&#x27;, Tahoma, Geneva, Verdana, sans-serif;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  background: linear-gradient(to bottom, #ece9e6, #ffffff);</span><br><span class="line">  padding: 30px;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);</span><br><span class="line">  max-width: 900px;</span><br><span class="line">  margin: 50px auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 标题样式 */</span><br><span class="line">#test h2 &#123;</span><br><span class="line">  font-size: 28px;</span><br><span class="line">  color: #2980b9;</span><br><span class="line">  margin-bottom: 25px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 导航栏样式 */</span><br><span class="line">#navigate &#123;</span><br><span class="line">  margin-bottom: 25px;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  gap: 15px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#navigate a &#123;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  color: #fff;</span><br><span class="line">  background-color: #3498db;</span><br><span class="line">  padding: 12px 25px;</span><br><span class="line">  border-radius: 20px;</span><br><span class="line">  transition: background-color 0.3s, transform 0.3s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#navigate a:hover &#123;</span><br><span class="line">  background-color: #1abc9c;</span><br><span class="line">  transform: scale(1.05);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#navigate a.active &#123; </span><br><span class="line">  background-color: #1abc9c; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 展示区样式 */</span><br><span class="line">#content &#123;</span><br><span class="line">  font-size: 18px;</span><br><span class="line">  line-height: 1.8;</span><br><span class="line">  background-color: #ffffff;</span><br><span class="line">  padding: 25px;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>以上代码主要包含了基本的框架，如页面的标题、导航栏以及展示区，并不涉及路由</p><ol start="2"><li>创建相对应的模板，<code>Home.vue</code>、<code>News.vue</code>、<code>About.vue</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;Home组件页面&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;  setup name=&quot;Home&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建路由文件夹，用于存放路由器。路径为<code>src/router</code>，在文件夹内创建路由器文件<code>index.ts</code></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入createRouter</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter,createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入需要展示的组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/About.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/News.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由器</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>:<span class="title function_">createWebHistory</span>(), <span class="comment">// 路由器的工作模式</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        <span class="comment">// 当路径为空时默认跳转到Home组件页面</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/news&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将路由器暴露出去</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>如果显示缺少路由模块，可以手动下载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-router</span><br></pre></td></tr></table></figure><p>然后引入<code>createRouter,createWebHistory</code>，这两个的作用分别是创建路由器和设置路由器工作模式。</p><p>注意：如果不设置路由器工作模式代码会报错</p><ol start="4"><li>最重要是要在<code>main.ts</code>中修改相关内容，确保正确的使用到了路由器</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入createApp用于创建应用</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入App根组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入路由器</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建App，并且使用路由器，再挂载</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>此时只需要在<code>App.vue</code>文件中稍加修改就可以正确的引用路由了</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;test&quot;&gt;</span><br><span class="line">    &lt;h2&gt;路由测试页面&lt;/h2&gt;</span><br><span class="line">    &lt;!-- 导航栏 --&gt;</span><br><span class="line">    &lt;div id=&quot;navigate&quot;&gt;</span><br><span class="line">      &lt;RouterLink to=&quot;/home&quot; active-class=&quot;active&quot;&gt;首页&lt;/RouterLink&gt;  </span><br><span class="line">      &lt;RouterLink to=&quot;/news&quot; active-class=&quot;active&quot;&gt;新闻&lt;/RouterLink&gt;</span><br><span class="line">      &lt;RouterLink to=&quot;/about&quot; active-class=&quot;active&quot;&gt;关于&lt;/RouterLink&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 展示区 --&gt;</span><br><span class="line">    &lt;div id=&quot;content&quot;&gt;</span><br><span class="line">      &lt;RouterView&gt;&lt;/RouterView&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">  import &#123; RouterView, RouterLink &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">/* 页面总体样式 */</span><br><span class="line">#test &#123;</span><br><span class="line">  font-family: &#x27;Segoe UI&#x27;, Tahoma, Geneva, Verdana, sans-serif;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  background: linear-gradient(to bottom, #ece9e6, #ffffff);</span><br><span class="line">  padding: 30px;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);</span><br><span class="line">  max-width: 900px;</span><br><span class="line">  margin: 50px auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 标题样式 */</span><br><span class="line">#test h2 &#123;</span><br><span class="line">  font-size: 28px;</span><br><span class="line">  color: #2980b9;</span><br><span class="line">  margin-bottom: 25px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 导航栏样式 */</span><br><span class="line">#navigate &#123;</span><br><span class="line">  margin-bottom: 25px;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  gap: 15px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#navigate a &#123;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  color: #fff;</span><br><span class="line">  background-color: #3498db;</span><br><span class="line">  padding: 12px 25px;</span><br><span class="line">  border-radius: 20px;</span><br><span class="line">  transition: background-color 0.3s, transform 0.3s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#navigate a:hover &#123;</span><br><span class="line">  background-color: #1abc9c;</span><br><span class="line">  transform: scale(1.05);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#navigate a.active &#123; </span><br><span class="line">  background-color: #1abc9c; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 展示区样式 */</span><br><span class="line">#content &#123;</span><br><span class="line">  font-size: 18px;</span><br><span class="line">  line-height: 1.8;</span><br><span class="line">  background-color: #ffffff;</span><br><span class="line">  padding: 25px;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="的作用"><a href="#的作用" class="headerlink" title="&lt;RouterLink&gt;的作用"></a><code>&lt;RouterLink&gt;</code>的作用</h2><p><code>&lt;RouterLink&gt;</code>组件用于创建导航链接，它允许用户在不同的路由之间进行切换。它的作用类似于 HTML 中的 <code>&lt;a&gt;</code>标签，但是具有更多的 <code>Vue Router</code> 特性。</p><p>主要功能：</p><ol><li>导航链接：可以使用 <code>to</code> 属性指定目标路由的路径。当用户点击链接时，会导航到指定的路由。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;RouterLink to=&quot;/home&quot;&gt;首页&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>动态路由：支持动态生成路由链接，根据数据或条件生成不同的目标路径。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;RouterLink :to=&quot;&#123; name: &#x27;user&#x27;, params: &#123; userId: 123 &#125;&#125;&quot;&gt;用户123&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>激活类名：可以通过 <code>active-class</code> 属性设置当前路由激活时应用的类名，方便样式定制。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;RouterLink to=&quot;/home&quot; active-class=&quot;active&quot;&gt;首页&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>替换模式：使用 <code>replace</code> 属性进行导航时，不会向历史记录中添加新记录。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;RouterLink to=&quot;/home&quot; replace&gt;首页&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure><h2 id="的作用-1"><a href="#的作用-1" class="headerlink" title="&lt;RouterView&gt;的作用"></a><code>&lt;RouterView&gt;</code>的作用</h2><p><code>&lt;RouterView&gt;</code>组件用于显示匹配的视图组件。它是 Vue Router 中的一个占位符，当路由匹配时，会在这个位置渲染对应的组件</p><p>主要功能：</p><ol><li>视图渲染：根据当前路由，渲染相应的组件。当用户导航到不同路由时，<code>&lt;RouterView&gt;</code>会动态地替换显示的组件。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;RouterView&gt;&lt;/RouterView&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>嵌套路由：支持嵌套使用<code>&lt;RouterView&gt;</code>，用于渲染子路由的组件。父级<code>&lt;RouterView&gt;</code>渲染父路由的组件，子级<code>&lt;RouterView&gt;</code>渲染子路由的组件。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;RouterView&gt;&lt;/RouterView&gt;</span><br><span class="line">&lt;RouterView name=&quot;child&quot;&gt;&lt;/RouterView&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>路由过渡：可以与 Vue 的<code>&lt;transition&gt;</code>组件结合使用，实现视图切换的过渡动画。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition name=&quot;fade&quot;&gt;</span><br><span class="line">  &lt;RouterView&gt;&lt;/RouterView&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure><h2 id="关于路由的注意点"><a href="#关于路由的注意点" class="headerlink" title="关于路由的注意点"></a>关于路由的注意点</h2><ol><li>路由组件通常存放在<code>pages</code>或<code>views</code>文件夹，一般组件通常存放在<code>components</code>文件夹</li><li>通过点击导航，视觉效果上“消失”了的路由组件，默认是被卸载掉的，需要的时候再去挂载</li></ol><h2 id="路由工作模式"><a href="#路由工作模式" class="headerlink" title="路由工作模式"></a>路由工作模式</h2><h3 id="历史模式（History-Mode）"><a href="#历史模式（History-Mode）" class="headerlink" title="历史模式（History Mode）"></a>历史模式（History Mode）</h3><p>工作原理：利用浏览器的 history.pushState 和 history.replaceState 方法来管理路由。URL 中没有哈希（#）符号，路径看起来像正常的 URL。</p><p>优点：URL 更加美观且符合 SEO（搜索引擎优化）要求。</p><p>缺点：需要服务端配置支持，否则刷新页面时会出现 404 错误。</p><h3 id="哈希模式（Hash-Mode）"><a href="#哈希模式（Hash-Mode）" class="headerlink" title="哈希模式（Hash Mode）"></a>哈希模式（Hash Mode）</h3><p>工作原理：利用 URL 的哈希（#）符号来模拟一个完整的 URL。当 URL 改变时，页面不会重新加载。</p><p>优点：不需要服务端配置，适用于所有浏览器，特别是在开发环境中很方便。</p><p>缺点：URL 中包含哈希符号，不太美观。</p><h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><p>在 Vue 3 中，路由命名是一种为路由定义名称的方式，以便在导航和动态路由匹配时更容易引用。这对于大型应用程序尤为有用，因为它可以让代码更加简洁和易读。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li>定义命名路由： 在定义路由时，通过 name 属性为路由指定一个名称。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./views/Home.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;./views/News.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./views/About.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span>, <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/news&#x27;</span>, <span class="attr">component</span>: <span class="title class_">News</span>, <span class="attr">name</span>: <span class="string">&#x27;news&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">About</span>, <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用命名路由进行导航： 在使用<code>&lt;RouterLink&gt;</code>组件进行导航时，可以通过 :to 属性指定目标路由的名称，而不是路径。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;nav&gt;</span><br><span class="line">    &lt;RouterLink :to=&quot;&#123; name: &#x27;home&#x27; &#125;&quot;&gt;首页&lt;/RouterLink&gt;</span><br><span class="line">    &lt;RouterLink :to=&quot;&#123; name: &#x27;news&#x27; &#125;&quot;&gt;新闻&lt;/RouterLink&gt;</span><br><span class="line">    &lt;RouterLink :to=&quot;&#123; name: &#x27;about&#x27; &#125;&quot;&gt;关于&lt;/RouterLink&gt;</span><br><span class="line">  &lt;/nav&gt;</span><br><span class="line">  &lt;RouterView&gt;&lt;/RouterView&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">  import &#123; RouterLink, RouterView &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h2><p>在 Vue 3 中，嵌套路由允许在父路由的基础上定义子路由，从而实现复杂的页面结构。这种设计使得开发多层次、多视图的单页应用变得更加容易和直观。</p><p>实例：</p><p>如果要求在之前代码的基础上，增加以下需求：</p><ol><li>在新闻页面添加导航栏</li><li>导航栏下面添加不同的需要呈现的模板</li><li>模板内展示图片，且只用一个模板就能展示不同的图片</li></ol><p>解决需求如下：</p><p>在News.vue中修改相关代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;News组件页面&lt;/h1&gt;</span><br><span class="line">    &lt;div id=&quot;news_navigate&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div v-for=&quot;(img, index) in imgList&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">                &lt;RouterLink to=&quot;/news/details&quot; active-class=&quot;active&quot;&gt;&#123;&#123; img.title &#125;&#125;&lt;/RouterLink&gt;</span><br><span class="line">                &lt;br&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div id=&quot;imgBorder&quot;&gt;&lt;RouterView&gt;&lt;/RouterView&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;News&quot;&gt;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">let imgList = reactive([</span><br><span class="line">    &#123; id: &quot;aaaa001&quot;, url: &#x27;https://images.dog.ceo/breeds/shiba/shiba-1.jpg&#x27;, title: &#x27;狗狗图01&#x27; &#125;,</span><br><span class="line">    &#123; id: &quot;aaaa002&quot;, url: &#x27;https://images.dog.ceo/breeds/shiba/shiba-2.jpg&#x27;, title: &#x27;狗狗图02&#x27; &#125;,</span><br><span class="line">    &#123; id: &quot;aaaa003&quot;, url: &#x27;https://images.dog.ceo/breeds/shiba/shiba-3.jpg&#x27;, title: &#x27;狗狗图03&#x27; &#125;,</span><br><span class="line">    &#123; id: &quot;aaaa004&quot;, url: &#x27;https://images.dog.ceo/breeds/shiba/shiba-4.jpg&#x27;, title: &#x27;狗狗图04&#x27; &#125;,</span><br><span class="line">    &#123; id: &quot;aaaa005&quot;, url: &#x27;https://images.dog.ceo/breeds/shiba/shiba-5.jpg&#x27;, title: &#x27;狗狗图05&#x27; &#125;,</span><br><span class="line">    &#123; id: &quot;aaaa006&quot;, url: &#x27;https://images.dog.ceo/breeds/shiba/shiba-6.jpg&#x27;, title: &#x27;狗狗图06&#x27; &#125;</span><br><span class="line">])</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    #news_navigate &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        align-items: center;</span><br><span class="line">        justify-content: space-around;</span><br><span class="line">        flex-wrap: wrap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    a &#123;</span><br><span class="line">        text-decoration: none;</span><br><span class="line">        color: #fff;</span><br><span class="line">        background-color: #3498db;</span><br><span class="line">        padding: 6px 9px;</span><br><span class="line">        border-radius: 7px;</span><br><span class="line">        transition: background-color 0.3s, transform 0.3s;</span><br><span class="line">        font-size: 12px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    a:hover &#123;</span><br><span class="line">        background-color: #1abc9c;</span><br><span class="line">        transform: scale(1.05);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    a.active &#123; </span><br><span class="line">        background-color: #1abc9c; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #imgBorder &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        border: 1px black;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>将相关的数据存放在一个列表中，并用<code>v-for</code>循环遍历展示出内容，由于内容中需要包含另外的路由模板，所以创建一个<code>Details.vue</code>的路由模板：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    123123123</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Details&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>并在<code>index.ts</code>路由器文件中修改代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入createRouter</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter,createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入需要展示的组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/About.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/News.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Details</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Details.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由器</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>:<span class="title function_">createWebHistory</span>(), <span class="comment">// 路由器的工作模式</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        <span class="comment">// 当路径为空时默认跳转到Home组件页面</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/news&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">News</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&quot;details&quot;</span>, <span class="comment">// 子路由不需要加/</span></span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Details</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将路由器暴露出去</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>此时，路由嵌套就实现了，但是<code>Details.vue</code>中的内容只是固定死的，点击哪个按钮展示哪张图片的功能需要之后的路由传参</p><h2 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h2><h3 id="query"><a href="#query" class="headerlink" title="query"></a>query</h3><h4 id="发送query参数"><a href="#发送query参数" class="headerlink" title="发送query参数"></a>发送query参数</h4><p>只需要将路径改为<code>query</code>的格式即可：</p><p><code>query</code>参数的格式一般为<code>abc.com/test?a=1&amp;b=2&amp;c=3</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;RouterLink :to=&quot;&#123;path:&#x27;/xxx/xxx&#x27;,query:&#123;a:123,b:123&#125;&#125;&quot;&gt;&#123;&#123; img.title &#125;&#125;&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure><p>示例：</p><p>News.vue：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;News组件页面&lt;/h1&gt;</span><br><span class="line">    &lt;div id=&quot;news_navigate&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div v-for=&quot;(img, index) in imgList&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">                &lt;RouterLink :to=&quot;&#123;path:&#x27;/news/details&#x27;,query:&#123;url:img.url&#125;&#125;&quot;&gt;&#123;&#123; img.title &#125;&#125;&lt;/RouterLink&gt;</span><br><span class="line">                &lt;br&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div id=&quot;imgBorder&quot;&gt;&lt;RouterView&gt;&lt;/RouterView&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;News&quot;&gt;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">let imgList = reactive([</span><br><span class="line">    &#123; id: &quot;aaaa001&quot;, url: &#x27;https://images.dog.ceo/breeds/shiba/shiba-1.jpg&#x27;, title: &#x27;狗狗图01&#x27; &#125;,</span><br><span class="line">    &#123; id: &quot;aaaa002&quot;, url: &#x27;https://images.dog.ceo/breeds/shiba/shiba-2.jpg&#x27;, title: &#x27;狗狗图02&#x27; &#125;,</span><br><span class="line">    &#123; id: &quot;aaaa003&quot;, url: &#x27;https://images.dog.ceo/breeds/shiba/shiba-3.jpg&#x27;, title: &#x27;狗狗图03&#x27; &#125;,</span><br><span class="line">    &#123; id: &quot;aaaa004&quot;, url: &#x27;https://images.dog.ceo/breeds/shiba/shiba-4.jpg&#x27;, title: &#x27;狗狗图04&#x27; &#125;,</span><br><span class="line">    &#123; id: &quot;aaaa005&quot;, url: &#x27;https://images.dog.ceo/breeds/shiba/shiba-5.jpg&#x27;, title: &#x27;狗狗图05&#x27; &#125;,</span><br><span class="line">    &#123; id: &quot;aaaa006&quot;, url: &#x27;https://images.dog.ceo/breeds/shiba/shiba-6.jpg&#x27;, title: &#x27;狗狗图06&#x27; &#125;</span><br><span class="line">])</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    #news_navigate &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        align-items: center;</span><br><span class="line">        justify-content: space-around;</span><br><span class="line">        flex-wrap: wrap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    a &#123;</span><br><span class="line">        text-decoration: none;</span><br><span class="line">        color: #fff;</span><br><span class="line">        background-color: #3498db;</span><br><span class="line">        padding: 6px 9px;</span><br><span class="line">        border-radius: 7px;</span><br><span class="line">        transition: background-color 0.3s, transform 0.3s;</span><br><span class="line">        font-size: 12px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    a:hover &#123;</span><br><span class="line">        background-color: #1abc9c;</span><br><span class="line">        transform: scale(1.05);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #imgBorder &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        border: 1px black;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>这里只修改了<code>RouterLink</code>的路径，因为它是发送<code>query</code>参数的</p><h4 id="接收query参数"><a href="#接收query参数" class="headerlink" title="接收query参数"></a>接收query参数</h4><p>利用<code>useRoute</code>函数接收即可</p><p>示例：</p><p>而接收query则需要在<code>Details.vue</code>中修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;&lt;img :src=&quot;url&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Details&quot;&gt;</span><br><span class="line">    import &#123; useRoute &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">    import &#123; computed &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">    // hooks</span><br><span class="line">    let route = useRoute();</span><br><span class="line"></span><br><span class="line">    const url = computed(() =&gt; route.query.url as string);</span><br><span class="line">    console.log(route.query);  // 可以在控制台中看打印的内容，由于是传输的是query参数，所以接收到的也是query</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt; </span><br><span class="line">    img &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>以上代码添加了一个hooks函数<code>useRoute</code>，这个函数可以接收<code>query</code>参数</p><h3 id="params"><a href="#params" class="headerlink" title="params"></a>params</h3><p><code>params</code>参数格式一般为<code>abc.com/test/a/b/c</code>，其中a、b、c为传输的参数而不是路径</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;News组件页面&lt;/h1&gt;</span><br><span class="line">    &lt;div id=&quot;news_navigate&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div v-for=&quot;(img, index) in imgList&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">                &lt;RouterLink :to=&quot;&#123;name:&#x27;xiangxi&#x27;,params:&#123;url:img.url&#125;&#125;&quot;&gt;&#123;&#123; img.title &#125;&#125;&lt;/RouterLink&gt;</span><br><span class="line">                &lt;br&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div id=&quot;imgBorder&quot;&gt;&lt;RouterView&gt;&lt;/RouterView&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;News&quot;&gt;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">let imgList = reactive([</span><br><span class="line">    &#123; id: &quot;aaaa001&quot;, url: &#x27;https://images.dog.ceo/breeds/shiba/shiba-1.jpg&#x27;, title: &#x27;狗狗图01&#x27; &#125;,</span><br><span class="line">    &#123; id: &quot;aaaa002&quot;, url: &#x27;https://images.dog.ceo/breeds/shiba/shiba-2.jpg&#x27;, title: &#x27;狗狗图02&#x27; &#125;,</span><br><span class="line">    &#123; id: &quot;aaaa003&quot;, url: &#x27;https://images.dog.ceo/breeds/shiba/shiba-3.jpg&#x27;, title: &#x27;狗狗图03&#x27; &#125;,</span><br><span class="line">    &#123; id: &quot;aaaa004&quot;, url: &#x27;https://images.dog.ceo/breeds/shiba/shiba-4.jpg&#x27;, title: &#x27;狗狗图04&#x27; &#125;,</span><br><span class="line">    &#123; id: &quot;aaaa005&quot;, url: &#x27;https://images.dog.ceo/breeds/shiba/shiba-5.jpg&#x27;, title: &#x27;狗狗图05&#x27; &#125;,</span><br><span class="line">    &#123; id: &quot;aaaa006&quot;, url: &#x27;https://images.dog.ceo/breeds/shiba/shiba-6.jpg&#x27;, title: &#x27;狗狗图06&#x27; &#125;</span><br><span class="line">])</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    #news_navigate &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        align-items: center;</span><br><span class="line">        justify-content: space-around;</span><br><span class="line">        flex-wrap: wrap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    a &#123;</span><br><span class="line">        text-decoration: none;</span><br><span class="line">        color: #fff;</span><br><span class="line">        background-color: #3498db;</span><br><span class="line">        padding: 6px 9px;</span><br><span class="line">        border-radius: 7px;</span><br><span class="line">        transition: background-color 0.3s, transform 0.3s;</span><br><span class="line">        font-size: 12px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    a:hover &#123;</span><br><span class="line">        background-color: #1abc9c;</span><br><span class="line">        transform: scale(1.05);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #imgBorder &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        border: 1px black;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>为了不让vue误认为路径中的是子路由路径，所以要到路由文件<code>index.ts</code>中修改</li><li><font color="red">和query传参不一样，<code>:to</code>内不能使用<code>path</code>而是要使用<code>name</code></font></li></ol><p>index.ts：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入createRouter</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter,createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入需要展示的组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/About.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/News.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Details</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Details.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建路由器</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>:<span class="title function_">createWebHistory</span>(), <span class="comment">// 路由器的工作模式</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        <span class="comment">// 当路径为空时默认跳转到Home组件页面</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/news&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">News</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;   </span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&quot;xiangxi&quot;</span>,</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&quot;details/:url&quot;</span>, <span class="comment">// 子路由不需要加/</span></span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Details</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将路由器暴露出去</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>在子路由中的路径中加上<code>:xxx</code>表示路径后的为参数而不是子路由路径，并且要给<code>details</code>路由命名</p><p>接收<code>params</code>也和接收<code>query</code>类似：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;&lt;img :src=&quot;url&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Details&quot;&gt;</span><br><span class="line">    import &#123; useRoute &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">    import &#123; computed &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">    // hooks</span><br><span class="line">    let route = useRoute();</span><br><span class="line"></span><br><span class="line">    const url = computed(() =&gt; route.params.url as string);</span><br><span class="line">    console.log(route.query);  // 可以在控制台中看打印的内容，由于是传输的是query参数，所以接收到的也是query</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt; </span><br><span class="line">    img &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>传递<code>params</code>参数时，若使用<code>to</code>的对象写法，必须使用<code>name</code>配置项，不能用<code>path</code>。</li><li>传递<code>params</code>参数时，需要提前在规则中占位。</li></ol><h3 id="路由props配置"><a href="#路由props配置" class="headerlink" title="路由props配置"></a>路由props配置</h3><p>作用：让路由组件更方便的收到参数（可以将路由参数作为<code>props</code>传给组件）</p><h4 id="写法一"><a href="#写法一" class="headerlink" title="写法一"></a>写法一</h4><p>第一种写法只适用于params参数。格式：<code>props:true</code></p><p>在路由文件<code>index.ts</code>中修改子路由的参数：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;   </span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;xiangxi&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&quot;details/:url&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Details</span>,</span><br><span class="line">    <span class="attr">props</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后路由对应的模板组件就可以简化成以下方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;&lt;img :src=&quot;url&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Details&quot;&gt;</span><br><span class="line">    defineProps([&#x27;url&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>对比之前没有使用<code>props</code>的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;&lt;img :src=&quot;url&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Details&quot;&gt;</span><br><span class="line">    import &#123; useRoute &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">    import &#123; computed &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">    // hooks</span><br><span class="line">    let route = useRoute();</span><br><span class="line"></span><br><span class="line">    const url = computed(() =&gt; route.params.url as string);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="写法二"><a href="#写法二" class="headerlink" title="写法二"></a>写法二</h4><p>第二种写法既可以是<code>query</code>也可以<code>params</code>，不过既然存在第一种更加简洁的写法，第二种则可以默认针对<code>query</code>参数</p><p>格式：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">props</span>(<span class="params">route</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> route.<span class="property">query</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/news&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">News</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="attr">name</span>:<span class="string">&quot;xiangxi&quot;</span>,</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;details&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Details</span>,</span><br><span class="line">            <span class="title function_">props</span>(<span class="params">route</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> route.<span class="property">query</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="replace属性"><a href="#replace属性" class="headerlink" title="replace属性"></a><em>replace属性</em></h2><p>作用：控制路由跳转时操作浏览器历史记录的模式</p><p>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code></p><ul><li><code>push</code>是追加历史记录（默认值）</li><li><code>replace</code>是替换当前记录</li></ul><p>开启<code>replace</code>模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;RouterLink replace .....&gt;XXX&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure><h2 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h2><p>之前的案例，是通过点击链接，既<code>&lt;RouterLink&gt;</code>实现跳转。</p><p>编程式导航是一种在代码中通过编程方式进行路由跳转的方法，而不是依赖用户的操作来触发路由变化。它在许多场景下非常有用，以下是几个常见的使用场景：</p><ol><li><strong>表单提交后跳转</strong>：<ul><li>用户提交表单后，开发者可能希望在表单验证和处理完成后，将用户重定向到一个新的页面。例如：用户注册成功后，跳转到欢迎页面。</li></ul></li><li><strong>登录验证</strong>：<ul><li>检查用户是否登录，如果未登录，重定向到登录页面。例如：访问一个需要登录的页面时，如果用户未登录，则编程式导航到登录页面。</li></ul></li><li><strong>多步骤表单</strong>：<ul><li>在多步骤表单中，根据用户的操作和输入，动态跳转到下一个或上一个步骤。例如：用户填写完第一步后，自动跳转到第二步。</li></ul></li><li><strong>错误处理</strong>：<ul><li>在处理请求或操作时，如果发生错误，可以编程式导航到错误页面或显示错误信息。例如：用户访问一个不存在的页面时，跳转到404页面。</li></ul></li><li><strong>权限控制</strong>：<ul><li>根据用户的权限，决定是否允许访问某个页面，如果没有权限，可以跳转到无权限提示页面或首页。例如：管理员权限页面的访问控制。</li></ul></li><li><strong>动态内容加载</strong>：<ul><li>根据用户的选择动态加载内容并跳转到相应的页面。例如：选择一个分类后，跳转到该分类的详情页面。</li></ul></li></ol><p>在使用编程式导航之前，需要先引入<code>useRouter</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;;</span><br></pre></td></tr></table></figure><p>然后通过调用 <code>useRouter()</code> 这个方法，将当前应用的路由实例赋值给常量 <code>router</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const router = useRouter();</span><br></pre></td></tr></table></figure><p>假设现在有一个按钮，按钮上绑定了一个<code>showDogImg</code>的方法，此时编程式导航的书写如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showDogImg</span>(<span class="params">img:ImgInter</span>) &#123;  <span class="comment">// 这里如果是TS会报类型错误，可以用img:any或者接口规范类型</span></span><br><span class="line">    router.<span class="title function_">push</span>(<span class="comment">// 两种模式：一种是push，另一种就是replace</span></span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">&#x27;/news/details&#x27;</span>,<span class="attr">query</span>:&#123;<span class="attr">url</span>:img.<span class="property">url</span>&#125;&#125;<span class="comment">// 括号内的内容和RouterLink中的to写法一样</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h1&gt;News组件页面&lt;/h1&gt;</span><br><span class="line">    &lt;div id=&quot;news_navigate&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div v-for=&quot;(img, index) in imgList&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">                &lt;button @click=&quot;showDogImg(img)&quot;&gt;点击按钮查看狗狗图&lt;/button&gt;</span><br><span class="line">                &lt;RouterLink :to=&quot;&#123;path:&#x27;/news/details&#x27;,query:&#123;url:img.url&#125;&#125;&quot;&gt;&#123;&#123; img.title &#125;&#125;&lt;/RouterLink&gt;</span><br><span class="line">                &lt;br&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div id=&quot;imgBorder&quot;&gt;&lt;RouterView&gt;&lt;/RouterView&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;News&quot;&gt;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; useRouter &#125; from &#x27;vue-router&#x27;;</span><br><span class="line"></span><br><span class="line">const router = useRouter();</span><br><span class="line"></span><br><span class="line">let imgList = reactive([</span><br><span class="line">...</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">interface ImgInter&#123;</span><br><span class="line">    id:string,</span><br><span class="line">    url:string,</span><br><span class="line">    title:string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function showDogImg(img:ImgInter) &#123;  // 这里如果是TS会报类型错误，可以用img:any或者接口规范类型</span><br><span class="line">    router.push(</span><br><span class="line">        &#123;path:&#x27;/news/details&#x27;,query:&#123;url:img.url&#125;&#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h2><p>将指定的路径跳转到另一个路径</p><p>在之前编写路由器的时候，为了防止第一次输入网页不会自动跳转到首页，进行了如下操作：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>:<span class="title function_">createWebHistory</span>(), <span class="comment">// 路由器的工作模式</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        <span class="comment">// 当路径为空时默认跳转到Home组件页面</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/news&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">News</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;   </span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&quot;xiangxi&quot;</span>,</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&quot;details&quot;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Details</span>,</span><br><span class="line">                    <span class="title function_">props</span>(<span class="params">route</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> route.<span class="property">query</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>现在有了更好的解决方案，既<code>路由重定向</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建路由器</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>:<span class="title function_">createWebHistory</span>(), <span class="comment">// 路由器的工作模式</span></span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        <span class="comment">// 当路径为空时默认跳转到Home组件页面</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/news&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">News</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;   </span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&quot;xiangxi&quot;</span>,</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&quot;details&quot;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Details</span>,</span><br><span class="line">                    <span class="title function_">props</span>(<span class="params">route</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> route.<span class="property">query</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">redirect</span>:<span class="string">&#x27;/home&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Meta"><a href="#Meta" class="headerlink" title="Meta"></a>Meta</h2><p>在 Vue Router 中，<code>meta</code> 属性用于存储与路由相关的自定义数据。这些数据不会影响路由的实际行为，但可以在导航守卫、组件中访问和使用。这使得 <code>meta</code> 属性非常适合用于存储如权限信息、页面标题、布局选项等。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: loginPage,</span><br><span class="line">            <span class="attr">meta</span>: &#123; <span class="attr">centered</span>: <span class="literal">false</span> &#125;<span class="comment">// 决定是否采用居中样式</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: loginPage,</span><br><span class="line">            <span class="attr">meta</span>: &#123; <span class="attr">centered</span>: <span class="literal">false</span> &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: homePage,</span><br><span class="line">            <span class="attr">meta</span>: &#123; <span class="attr">centered</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">            <span class="attr">children</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;camList&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: camList,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: atHome,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;atHome&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: atHome,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;monitorRealTime&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: monitorRealTime,</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h1><p>Pinia 是 Vue 的一个状态管理库，用于管理和共享应用程序中的<code>全局状态</code>。它是 Vuex 的替代方案，提供了更简单、更直观的 API 和更好的性能。Pinia 可以帮助开发人员在多个组件之间共享数据，同时保持代码的清晰和可维护性。</p><p>以下是 Pinia 的一些主要功能和特点：</p><ol><li><strong>简单的 API</strong>：Pinia 提供了直观易懂的 API，简化了状态管理的过程。</li><li><strong>模块化</strong>：可以将状态分成不同的模块，每个模块独立管理自己的状态、动作和变更。</li><li><strong>TypeScript 支持</strong>：Pinia 对 TypeScript 有很好的支持，能够提供类型推断和类型安全。</li><li><strong>插件支持</strong>：Pinia 支持插件，允许开发人员扩展其功能，例如持久化状态、日志记录等。</li><li><strong>SSR 支持</strong>：Pinia 支持服务端渲染，可以在服务端和客户端之间共享状态。</li></ol><h2 id="测试框架"><a href="#测试框架" class="headerlink" title="测试框架"></a>测试框架</h2><p>在使用之前，先搭建好测试的框架：</p><p>App.vue：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Count/&gt;</span><br><span class="line">    &lt;Talk/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;&quot; &gt;</span><br><span class="line">    import Count from &#x27;./components/Count.vue&#x27;;</span><br><span class="line">    import Talk from &#x27;./components/Talk.vue&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>以上代码表示还要创建两个组件<code>Count</code>和<code>Talk</code></p><p>Talk.vue：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;ul v-for=&quot;(talk, index) in talkList&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">            &lt;li&gt;&#123;&#123; talk.content &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;addPoem&quot;&gt;添加诗句&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Talk&quot;&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line">import &#123; nanoid &#125; from &#x27;nanoid&#x27;;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const url = &#x27;https://v1.jinrishici.com/rensheng.txt&#x27;;</span><br><span class="line"></span><br><span class="line">let talkList = reactive([</span><br><span class="line">    &#123; id: &quot;asdafdasfxz&quot;, content: &#x27;归志宁无五亩园，读书本意在元元。&#x27; &#125;,</span><br><span class="line">    &#123; id: &quot;asdgituwsad&quot;, content: &#x27;人老去西风白发，蝶愁来明日黄花。&#x27; &#125;,</span><br><span class="line">    &#123; id: &quot;sjiasdfjasa&quot;, content: &#x27;能令暂开霁，过是吾无求。&#x27; &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">async function addPoem() &#123;</span><br><span class="line">    let result = await axios.get(&#x27;https://v1.jinrishici.com/rensheng.txt&#x27;);</span><br><span class="line">    console.log(result);</span><br><span class="line">    let obj = &#123;id:nanoid(),content:result.data&#125;;</span><br><span class="line">    talkList.push(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Count.vue：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;当前数字累计为：&#123;&#123; sum &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;select v-model.number=&quot;num&quot;&gt;</span><br><span class="line">            &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;</span><br><span class="line">            &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">            &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;</span><br><span class="line">        &lt;/select&gt;</span><br><span class="line">        &lt;button @click=&quot;add&quot;&gt;点击增加数字&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;sub&quot;&gt;点击减小数字&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Count&quot; &gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">let sum = ref(0);   // 累计数</span><br><span class="line">let num = ref(1);   // 选择数</span><br><span class="line"></span><br><span class="line">// 增加数字方法</span><br><span class="line">function add() &#123;</span><br><span class="line">    sum.value += num.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 减小数字方法</span><br><span class="line">function sub() &#123;</span><br><span class="line">    sum.value -= num.value;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>样式可以自行设计</p><h2 id="Pinia教程"><a href="#Pinia教程" class="headerlink" title="Pinia教程"></a>Pinia教程</h2><p>第一步需要安装<code>Pinia</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i pinia</span><br></pre></td></tr></table></figure><p>第二步在main.ts中修改代码</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入createApp用于创建应用</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入App根组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入Pinia</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Pinia</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建App，安装pinia，挂载</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(pinia).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>验证是否安装成功需要在浏览器开发者模式中的<code>vue devtools</code>查看，如果有一个菠萝的logo就表明安装并且引入成功。</p><h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><p>将之前测试框架中，<code>talk.vue</code>的<code>talkList</code>和<code>count.vue</code>的<code>sum</code>存储到<code>pinia</code>中。</p><p>首先在src目录下创建一个store的文件夹，并且在该文件夹下创建对应的<code>talk.ts</code>和<code>count.ts</code></p><p>talk.ts：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTalkStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;talkList&#x27;</span>,&#123;</span><br><span class="line">    <span class="title function_">state</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">talkList</span>:[</span><br><span class="line">                &#123; <span class="attr">id</span>: <span class="string">&quot;asdafdasfxz&quot;</span>, <span class="attr">content</span>: <span class="string">&#x27;归志宁无五亩园，读书本意在元元。&#x27;</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">id</span>: <span class="string">&quot;asdgituwsad&quot;</span>, <span class="attr">content</span>: <span class="string">&#x27;人老去西风白发，蝶愁来明日黄花。&#x27;</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">id</span>: <span class="string">&quot;sjiasdfjasa&quot;</span>, <span class="attr">content</span>: <span class="string">&#x27;能令暂开霁，过是吾无求。&#x27;</span> &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>count.ts：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCountStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;count&#x27;</span>,&#123;</span><br><span class="line">    <span class="comment">// 真正存储数据的地方</span></span><br><span class="line">    <span class="title function_">state</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>根据以上案例，总结出以下步骤：</p><ol><li>引入<code>defineStore</code></li><li>使用<code>defineStore</code>，参数第一个表示名称，参数第二个表示配置</li><li>向外暴露存储的数据</li></ol><h3 id="使用数据"><a href="#使用数据" class="headerlink" title="使用数据"></a>使用数据</h3><p>在<code>talk.vue</code>和<code>count.vue</code>中引入暴露的数据</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useTalkStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store/talk&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useCountStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store/count&#x27;</span>;</span><br></pre></td></tr></table></figure><p>然后用变量接收数据：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CountStore</span> = <span class="title function_">useCountStore</span>();</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">TalkStore</span> = <span class="title function_">useTalkStore</span>();</span><br></pre></td></tr></table></figure><p>使用数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CountStore.sum</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TalkStore.talkList</span><br></pre></td></tr></table></figure><p>完整案例如下：</p><p>Count.vue：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;当前数字累计为：&#123;&#123; CountStore.sum &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;select v-model.number=&quot;num&quot;&gt;</span><br><span class="line">            &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;</span><br><span class="line">            &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">            &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;</span><br><span class="line">        &lt;/select&gt;</span><br><span class="line">        &lt;button @click=&quot;add&quot;&gt;点击增加数字&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;sub&quot;&gt;点击减小数字&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Count&quot; &gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; useCountStore &#125; from &#x27;@/store/count&#x27;;</span><br><span class="line"></span><br><span class="line">const CountStore = useCountStore();</span><br><span class="line"></span><br><span class="line">let num = ref(1);   // 选择数</span><br><span class="line"></span><br><span class="line">// 增加数字方法</span><br><span class="line">function add() &#123;</span><br><span class="line">    CountStore.sum += num.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 减小数字方法</span><br><span class="line">function sub() &#123;</span><br><span class="line">    CountStore.sum -= num.value;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Talk.vue：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;ul v-for=&quot;(talk, index) in TalkStore.talkList&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">            &lt;li&gt;&#123;&#123; talk.content &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;addPoem&quot;&gt;添加诗句&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Talk&quot;&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line">import &#123; nanoid &#125; from &#x27;nanoid&#x27;;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; useTalkStore &#125; from &#x27;@/store/talk&#x27;;</span><br><span class="line"></span><br><span class="line">const url = &#x27;https://v1.jinrishici.com/rensheng.txt&#x27;;</span><br><span class="line"></span><br><span class="line">const TalkStore = useTalkStore();</span><br><span class="line"></span><br><span class="line">async function addPoem() &#123;</span><br><span class="line">    let result = await axios.get(&#x27;https://v1.jinrishici.com/rensheng.txt&#x27;);</span><br><span class="line">    console.log(result);</span><br><span class="line">    let obj = &#123;id:nanoid(),content:result.data&#125;;</span><br><span class="line">    TalkStore.talkList.push(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><h4 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h4><p>在之前的案例中，已经呈现了修改数据的第一种方式——直接调用修改：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CountStore</span> = <span class="title function_">useCountStore</span>();</span><br><span class="line"><span class="comment">// 增加数字方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">CountStore</span>.<span class="property">sum</span> += num.<span class="property">value</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 减小数字方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sub</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">CountStore</span>.<span class="property">sum</span> -= num.<span class="property">value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">TalkStore</span> = <span class="title function_">useTalkStore</span>();</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">addPoem</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://v1.jinrishici.com/rensheng.txt&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;<span class="attr">id</span>:<span class="title function_">nanoid</span>(),<span class="attr">content</span>:result.<span class="property">data</span>&#125;;</span><br><span class="line">    <span class="title class_">TalkStore</span>.<span class="property">talkList</span>.<span class="title function_">push</span>(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h4><p>第二种方式通常用于批量修改数据：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">XXX</span>.$patch(&#123;&#125;)</span><br></pre></td></tr></table></figure><p>为了展示后面修改数据的特殊，将store文件夹中的count.ts进行稍微的修改：</p><p>增加了两个数据<code>name</code>和<code>age</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCountStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;count&#x27;</span>,&#123;</span><br><span class="line">    <span class="comment">// 真正存储数据的地方</span></span><br><span class="line">    <span class="title function_">state</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">sum</span>:<span class="number">0</span>,</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>触发<code>Count.vue</code>的<code>add()</code>方法，修改存储的数据值</p><ul><li><code>name</code>的<code>zhangsan</code>改为<code>lisi</code></li><li><code>age</code>改为<code>15</code></li><li>sum改为<code>99999</code></li></ul><p>使用第二种方法：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CountStore</span> = <span class="title function_">useCountStore</span>();</span><br><span class="line"><span class="comment">// 增加数字方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">CountStore</span>.$patch(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">15</span>,</span><br><span class="line">        <span class="attr">sum</span>:<span class="number">99999</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第三种方式"><a href="#第三种方式" class="headerlink" title="第三种方式"></a>第三种方式</h4><p>第三种方式修改数据的位置在<code>pinia</code>的文件中，使用到了<code>actions</code>方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCountStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;count&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="title function_">change</span>(<span class="params">value:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">sum</span> += value;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;lisi&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">15</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 真正存储数据的地方</span></span><br><span class="line">    <span class="title function_">state</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">sum</span>:<span class="number">0</span>,</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>相当于存储数据的地方又存储了一个修改数据的方法</p><p>而使用该函数的方法就是和第一种方式直接调用一样：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CountStore</span> = <span class="title function_">useCountStore</span>();</span><br><span class="line"><span class="comment">// 增加数字方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">CountStore</span>.<span class="title function_">change</span>(num.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>根据以上的所有示例，可以总结出：</p><ol><li>pinia的功能就是存储全局变量，全局方法。（但全局变量是响应式的）</li><li>修改存储的数据，如果只是简单的修改，直接使用第一种方式，如果相对复杂，推荐使用第三种方式</li></ol><h3 id="小小的优化"><a href="#小小的优化" class="headerlink" title="小小的优化"></a>小小的优化</h3><p>在之前的案例中，每次想要获得数据，都需要用<code>XXX.xxx</code>，这样写逻辑上虽然没问题，但是观感相对较差。</p><p>在之前，解决的方法是利用解构赋值：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CountStore</span> = <span class="title function_">useCountStore</span>();</span><br><span class="line"><span class="keyword">const</span> &#123;sum,name,age&#125; = <span class="title class_">CountStore</span>;</span><br></pre></td></tr></table></figure><p>但是问题就出现了，数据丢失了响应性，此前也有解决该问题的办法，就是使用<code>toRefs</code>方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;sum,name,age&#125; = <span class="title function_">toRefs</span>(<span class="title class_">CountStore</span>);</span><br></pre></td></tr></table></figure><p>这么修改，虽然问题解决了，数据又恢复了响应式，但是在控制台中查看<code>toRefs(CountStore)</code>，发现<code>CountStore</code>中的所有内容全被添加上了响应式，即使不需要的内容也会被添加上响应式。</p><p>针对以上的问题，<code>pinia</code>有对应的办法：</p><p>引入<code>storeToRefs</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br></pre></td></tr></table></figure><p>使用<code>storeToRefs</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;sum,name,age&#125; = <span class="title function_">storeToRefs</span>(<span class="title class_">CountStore</span>);</span><br></pre></td></tr></table></figure><p>总结：解构赋值时，对于<code>pinia</code>的数据要用<code>storeToRefs</code>保证不会丢失响应性</p><h3 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h3><p><code>pinia</code>的<code>getters</code>类似于<code>vue</code>中的<code>computed</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCountStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;count&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="title function_">change</span>(<span class="params">value:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">sum</span> += value;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;lisi&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">15</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 真正存储数据的地方</span></span><br><span class="line">    <span class="title function_">state</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">sum</span>:<span class="number">0</span>,</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="comment">// 将数据放大10倍</span></span><br><span class="line">        <span class="title function_">bigSum</span>():<span class="built_in">number</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">sum</span> * <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>数字放大10倍为：&#123;&#123; CountStore.bigSum &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe"></a>subscribe</h3><p>可以看作是<code>vue</code>中的<code>watch</code></p><p>具体使用方法如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">CountStore</span>.$subscribe(<span class="function">(<span class="params">mutate,state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;CountStore被修改了&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(mutate);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(state);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="store的组合式写法"><a href="#store的组合式写法" class="headerlink" title="store的组合式写法"></a>store的组合式写法</h3><p>原来的选项式写法如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCountStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;count&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="title function_">change</span>(<span class="params">value:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">sum</span> += value;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;lisi&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">15</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 真正存储数据的地方</span></span><br><span class="line">    <span class="title function_">state</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">sum</span>:<span class="number">0</span>,</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="title function_">bigSum</span>():<span class="built_in">number</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">sum</span> * <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>修改成组合式写法如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCountStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;count&#x27;</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 相当于state</span></span><br><span class="line">    <span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">let</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> age = <span class="title function_">ref</span>(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相当于actions</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">change</span>(<span class="params">value:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">        sum.<span class="property">value</span> += value;</span><br><span class="line">        name.<span class="property">value</span> = <span class="string">&#x27;lisi&#x27;</span>;</span><br><span class="line">        age.<span class="property">value</span> = <span class="number">15</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;sum,name,age,change&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h1><p>在Vue3中，有多种方式可以用于组件之间的通信，每种方式都有其适用的场景和优缺点。以下是一些主要的组件通信方式：</p><ol><li><strong>Props 和 Emit</strong>：<ul><li><strong>Props</strong>：父组件通过props向子组件传递数据。</li><li><strong>Emit</strong>：子组件通过emit向父组件发送事件或数据。</li></ul></li><li><strong>Provide 和 Inject</strong>：<ul><li><strong>Provide</strong>：祖先组件提供数据或方法。</li><li><strong>Inject</strong>：后代组件注入并使用提供的数据或方法。适用于跨越多层组件的场景。</li></ul></li><li><strong>全局事件总线</strong>：<ul><li>使用一个空的Vue实例作为中央事件总线，通过<code>$emit</code>和<code>$on</code>在非父子关系的组件之间传递消息。</li></ul></li><li><strong>Vuex</strong>：<ul><li>Vuex是Vue的状态管理库，用于管理全局状态。通过store，任何组件都可以访问和修改状态。</li></ul></li><li><strong>Composition API</strong>：<ul><li>使用组合式API中的<code>ref</code>、<code>reactive</code>和<code>computed</code>等，可以在多个组件中共享状态和逻辑。例如，自定义hook（composables）。</li></ul></li><li><strong>Pinia</strong>：<ul><li>Pinia是Vue3的状态管理库，作为Vuex的替代方案，提供了更简单和更高性能的状态管理。</li></ul></li><li><strong>EventEmitter</strong>：<ul><li>可以使用Node.js的EventEmitter或者其他第三方库来实现组件之间的事件通信。</li></ul></li><li><strong>通过浏览器的LocalStorage、SessionStorage或Cookies</strong>：<ul><li>用于持久化和共享数据，不过这种方式主要用于在不同组件之间保留状态，而不是实时通信。</li></ul></li><li><strong>URL查询参数或路由参数</strong>：<ul><li>在路由中传递数据，适用于页面之间的通信。</li></ul></li></ol><h2 id="Props-和-Emit"><a href="#Props-和-Emit" class="headerlink" title="Props 和 Emit"></a>Props 和 Emit</h2><p>在Vue3中，父组件和子组件之间的通信主要通过Props和Emit来实现。以下是一个简单的示例，展示了如何使用Props和Emit在父子组件之间传递数据和事件</p><p>父组件示例（ParentComponent.vue）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ChildComponent :message=&quot;parentMessage&quot; @updateMessage=&quot;updateMessage&quot;&gt;&lt;/ChildComponent&gt;</span><br><span class="line">    &lt;p&gt;来自子组件的消息: &#123;&#123; childMessage &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;;</span><br><span class="line"></span><br><span class="line">const parentMessage = &#x27;这是来自父组件的消息&#x27;;</span><br><span class="line">const childMessage = ref(&#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">function updateMessage(newMessage: string) &#123;</span><br><span class="line">  childMessage.value = newMessage;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件示例（ChildComponent.vue）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;父组件消息: &#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;input v-model=&quot;inputMessage&quot; placeholder=&quot;输入新的消息&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;sendMessage&quot;&gt;发送消息给父组件&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; defineProps, defineEmits, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">// 定义Props</span><br><span class="line">const props = defineProps&lt;&#123;</span><br><span class="line">  message: string;</span><br><span class="line">&#125;&gt;();</span><br><span class="line"></span><br><span class="line">// 定义Emits</span><br><span class="line">const emit = defineEmits&lt;&#123;</span><br><span class="line">  (e: &#x27;updateMessage&#x27;, newMessage: string): void;</span><br><span class="line">&#125;&gt;();</span><br><span class="line"></span><br><span class="line">const inputMessage = ref(&#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">function sendMessage() &#123;</span><br><span class="line">  emit(&#x27;updateMessage&#x27;, inputMessage.value);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ol><li><strong>父组件（ParentComponent.vue）</strong>：<ul><li>通过<code>parentMessage</code>传递数据到子组件的<code>message</code>属性。</li><li>监听子组件的<code>updateMessage</code>事件，并使用<code>updateMessage</code>方法更新<code>childMessage</code>。</li></ul></li><li><strong>子组件（ChildComponent.vue）</strong>：<ul><li>使用<code>defineProps</code>定义<code>message</code>属性，接收来自父组件的消息。</li><li>使用<code>defineEmits</code>定义<code>updateMessage</code>事件，以便将新的消息发送给父组件。</li><li>用户在输入框输入新消息并点击按钮时，调用<code>sendMessage</code>方法，触发<code>updateMessage</code>事件并将新消息传递给父组件。</li></ul></li></ol><h2 id="Mitt"><a href="#Mitt" class="headerlink" title="Mitt"></a>Mitt</h2><p>Mitt 是一个轻量级的事件发射器，用于在 Vue 3 中实现组件之间的通信，特别适用于<font color='red'>兄弟组件</font>之间的通信</p><p>首先，安装 Mitt：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mitt</span><br></pre></td></tr></table></figure><ol><li>创建事件总线</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mitt <span class="keyword">from</span> <span class="string">&#x27;mitt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emitter = <span class="title function_">mitt</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> emitter;</span><br></pre></td></tr></table></figure><ol start="2"><li>在需要通信的组件中使用事件总线</li></ol><p>发送事件的组件（SenderComponent.vue）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;sendMessage&quot;&gt;发送消息&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import emitter from &#x27;../eventBus&#x27;;</span><br><span class="line"></span><br><span class="line">function sendMessage() &#123;</span><br><span class="line">  emitter.emit(&#x27;customEvent&#x27;, &#x27;Hello from SenderComponent&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>接收事件的组件（ReceiverComponent.vue）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; ref, onMounted, onUnmounted &#125; from &#x27;vue&#x27;;</span><br><span class="line">import emitter from &#x27;../eventBus&#x27;;</span><br><span class="line"></span><br><span class="line">const message = ref(&#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">function handleMessage(payload: string) &#123;</span><br><span class="line">  message.value = payload;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  emitter.on(&#x27;customEvent&#x27;, handleMessage);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">onUnmounted(() =&gt; &#123;</span><br><span class="line">  emitter.off(&#x27;customEvent&#x27;, handleMessage);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h3><ol><li><strong>创建事件总线</strong>：<ul><li>使用 Mitt 创建一个事件总线实例 <code>emitter</code>，并将其导出以供其他组件使用。</li></ul></li><li><strong>发送事件的组件</strong>：<ul><li>在 <code>SenderComponent.vue</code> 中，使用 <code>emitter.emit</code> 方法发送一个自定义事件 <code>customEvent</code>，并附带消息数据。</li></ul></li><li><strong>接收事件的组件</strong>：<ul><li>在 <code>ReceiverComponent.vue</code> 中，定义一个响应事件的处理函数 <code>handleMessage</code>，并在组件挂载时通过 <code>emitter.on</code> 监听 <code>customEvent</code> 事件。</li><li>在组件卸载时，通过 <code>emitter.off</code> 移除事件监听，以避免内存泄漏。</li></ul></li></ol><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><p><code>v-model</code> 是 Vue 的双向数据绑定指令，用于将数据在组件之间进行同步。</p><p>在Vue3中，<code>v-model</code> 可以用在<font color='red'>父组件和子组件</font>之间传递和同步数据。以下是一个简单的示例，展示了如何使用 <code>v-model</code> 进行父子组件通信。</p><p>父组件示例（ParentComponent.vue）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ChildComponent v-model:message=&quot;parentMessage&quot;&gt;&lt;/ChildComponent&gt;</span><br><span class="line">    &lt;p&gt;来自子组件的消息: &#123;&#123; parentMessage &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;;</span><br><span class="line"></span><br><span class="line">const parentMessage = ref(&#x27;这是来自父组件的消息&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件示例（ChildComponent.vue）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;父组件消息: &#123;&#123; modelValue &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;input v-model=&quot;inputMessage&quot; placeholder=&quot;输入新的消息&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;updateMessage&quot;&gt;发送消息给父组件&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; defineProps, defineEmits &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">// 定义Props</span><br><span class="line">const props = defineProps&lt;&#123;</span><br><span class="line">  modelValue: string;</span><br><span class="line">&#125;&gt;();</span><br><span class="line"></span><br><span class="line">// 定义Emits</span><br><span class="line">const emit = defineEmits&lt;&#123;</span><br><span class="line">  (e: &#x27;update:modelValue&#x27;, newMessage: string): void;</span><br><span class="line">&#125;&gt;();</span><br><span class="line"></span><br><span class="line">const inputMessage = ref(props.modelValue);</span><br><span class="line"></span><br><span class="line">function updateMessage() &#123;</span><br><span class="line">  emit(&#x27;update:modelValue&#x27;, inputMessage.value);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="解释-2"><a href="#解释-2" class="headerlink" title="解释"></a>解释</h3><ol><li><strong>父组件（ParentComponent.vue）</strong>：<ul><li>使用 <code>v-model:message</code> 将父组件的 <code>parentMessage</code> 绑定到子组件的 <code>modelValue</code> 属性。</li><li><code>parentMessage</code> 的变化将自动反映在子组件中，反之亦然。</li></ul></li><li><strong>子组件（ChildComponent.vue）</strong>：<ul><li>使用 <code>defineProps</code> 定义 <code>modelValue</code> 属性，接收来自父组件的消息。</li><li>使用 <code>defineEmits</code> 定义 <code>update:modelValue</code> 事件，以便将新的消息发送给父组件。</li><li>用户在输入框中输入新消息并点击按钮时，调用 <code>updateMessage</code> 方法，触发 <code>update:modelValue</code> 事件并将新消息传递给父组件。</li></ul></li></ol><h2 id="attrs"><a href="#attrs" class="headerlink" title="$attrs"></a>$attrs</h2><p><code>$attrs</code> 经常用于<font color='red'>祖孙组件</font>之间的通信，特别是当祖先组件需要将一些属性直接传递给孙组件，而<font color='red'>中间的子组件不需要处理这些属性时</font>。这样可以避免逐级传递 <code>props</code>，使代码更简洁。</p><p>祖先组件（GrandParentComponent.vue）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ParentComponent :title=&quot;grandParentTitle&quot;&gt;&lt;/ParentComponent&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import ParentComponent from &#x27;./ParentComponent.vue&#x27;;</span><br><span class="line">const grandParentTitle = &#x27;这是来自祖先组件的标题&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>父组件（ParentComponent.vue）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ChildComponent v-bind=&quot;$attrs&quot;&gt;&lt;/ChildComponent&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>孙组件（ChildComponent.vue）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; title &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; defineProps &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const props = defineProps&lt;&#123;</span><br><span class="line">  title: string;</span><br><span class="line">&#125;&gt;();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="解释-3"><a href="#解释-3" class="headerlink" title="解释"></a>解释</h3><ol><li><strong>祖先组件（GrandParentComponent.vue）</strong>：<ul><li>定义一个属性 <code>grandParentTitle</code> 并将其传递给 <code>ParentComponent</code>。</li></ul></li><li><strong>父组件（ParentComponent.vue）</strong>：<ul><li>使用 <code>v-bind=&quot;$attrs&quot;</code> 将所有未声明的属性传递给 <code>ChildComponent</code>。</li></ul></li><li><strong>孙组件（ChildComponent.vue）</strong>：<ul><li>使用 <code>defineProps</code> 接收 <code>title</code> 属性，并在模板中显示。</li></ul></li></ol><h2 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide-inject"></a>provide-inject</h2><p><code>provide</code> 和 <code>inject</code> 是一种用于组件间传递依赖的机制，特别适用于跨越多层级组件的通信。这种机制允许祖先组件为其后代组件提供数据或方法，而不需要逐级传递<code>props</code></p><h3 id="provide-和-inject-的作用"><a href="#provide-和-inject-的作用" class="headerlink" title="provide 和 inject 的作用"></a><code>provide</code> 和 <code>inject</code> 的作用</h3><ol><li><strong>provide</strong>：<ul><li>祖先组件使用 <code>provide</code> 方法提供数据或方法，供后代组件使用。</li><li>通常在组件的 <code>setup</code> 函数中调用 <code>provide</code>。</li></ul></li><li><strong>inject</strong>：<ul><li>后代组件使用 <code>inject</code> 方法注入并使用祖先组件提供的数据或方法。</li><li>通常在组件的 <code>setup</code> 函数中调用 <code>inject</code>。</li></ul></li></ol><p>示例：</p><p>GrandParent.vue：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ParentComponent&gt;&lt;/ParentComponent&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; provide &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const providedData = &#x27;这是来自祖先组件的数据&#x27;;</span><br><span class="line">provide(&#x27;sharedData&#x27;, providedData);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Parent.vue：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ChildComponent&gt;&lt;/ChildComponent&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Child.vue：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;注入的数据: &#123;&#123; sharedData &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; inject &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const sharedData = inject&lt;string&gt;(&#x27;sharedData&#x27;, &#x27;默认数据&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><h2 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h2><p>默认插槽（<code>Default Slot</code>）是指在子组件中未指定名称的插槽内容。它允许父组件将内容插入到子组件的预定义位置，从而实现更灵活的组件内容配置。默认插槽是最基础也是最常用的插槽类型。</p><p>子组件（ChildComponent.vue）:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;我是子组件&lt;/h2&gt;</span><br><span class="line">    &lt;slot&gt;默认插槽内容&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>父组件（ParentComponent.vue）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ChildComponent&gt;</span><br><span class="line">      &lt;p&gt;这是插入到子组件中的内容1&lt;/p&gt;</span><br><span class="line">    &lt;/ChildComponent&gt;</span><br><span class="line">    &lt;ChildComponent&gt;</span><br><span class="line">      &lt;p&gt;这是插入到子组件中的内容2&lt;/p&gt;</span><br><span class="line">    &lt;/ChildComponent&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="解释-4"><a href="#解释-4" class="headerlink" title="解释"></a>解释</h3><ol><li><strong>子组件</strong>：<ul><li>使用 <code>&lt;slot&gt;</code> 标签定义插槽，表示这个位置的内容可以由父组件提供。</li><li>如果父组件没有提供内容，则会显示 <code>slot</code> 标签内的默认内容（例如 “默认插槽内容”）。</li></ul></li><li><strong>父组件</strong>：<ul><li>使用子组件 <code>&lt;ChildComponent&gt;</code> 时，在其标签内放置需要插入的内容（例如 <code>&lt;p&gt;这是插入到子组件中的内容&lt;/p&gt;</code>）。</li><li>这些内容将被插入到子组件的 <code>&lt;slot&gt;</code> 标签位置，替换默认内容。</li></ul></li></ol><h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><p>具名插槽（Named Slots）是Vue中一种更高级的插槽类型，它允许为插槽指定一个名称，从而在父组件中可以更精确地将内容插入到子组件的特定位置。</p><p>子组件（ChildComponent.vue）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      &lt;slot name=&quot;header&quot;&gt;默认头部内容&lt;/slot&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;main&gt;</span><br><span class="line">      &lt;slot&gt;默认主体内容&lt;/slot&gt;</span><br><span class="line">    &lt;/main&gt;</span><br><span class="line">    &lt;footer&gt;</span><br><span class="line">      &lt;slot name=&quot;footer&quot;&gt;默认尾部内容&lt;/slot&gt;</span><br><span class="line">    &lt;/footer&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>父组件（ParentComponent.vue）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ChildComponent&gt;</span><br><span class="line">      &lt;template #header&gt;</span><br><span class="line">        &lt;h1&gt;这是插入到头部的内容&lt;/h1&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template #default&gt;</span><br><span class="line">        &lt;p&gt;这是插入到主体的内容&lt;/p&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template #footer&gt;</span><br><span class="line">        &lt;p&gt;这是插入到尾部的内容&lt;/p&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/ChildComponent&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="解释-5"><a href="#解释-5" class="headerlink" title="解释"></a>解释</h3><ol><li><strong>子组件（ChildComponent.vue）</strong>：<ul><li>使用 <code>&lt;slot name=&quot;header&quot;&gt;</code> 和 <code>&lt;slot name=&quot;footer&quot;&gt;</code> 定义具名插槽，允许父组件插入特定内容到这些位置。</li><li>使用 <code>&lt;slot&gt;</code> 定义默认插槽，允许父组件插入默认主体内容。</li></ul></li><li><strong>父组件（ParentComponent.vue）</strong>：<ul><li>使用 <code>&lt;template #header&gt;</code> 插入内容到子组件的头部插槽。</li><li>使用 <code>&lt;template #default&gt;</code> 插入内容到子组件的默认插槽。</li><li>使用 <code>&lt;template #footer&gt;</code> 插入内容到子组件的尾部插槽。</li></ul></li></ol><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>作用域插槽（Scoped Slots）是Vue中的一种强大功能，允许子组件将数据传递回父组件，从而使父组件能够在插槽内容中使用这些数据。与普通插槽不同，<font color='red'>作用域插槽不仅仅是内容插入，还能实现数据共享和逻辑解耦。</font></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>假设有一个列表组件（ListComponent），它接收一个数组并通过插槽渲染每个项。</p><p>子组件（ListComponent.vue）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot :items=&quot;items&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; defineProps &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const props = defineProps&lt;&#123;</span><br><span class="line">  items: Array&lt;&#123; id: number; name: string; &#125;&gt;;</span><br><span class="line">&#125;&gt;();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>父组件（ParentComponent.vue）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ListComponent :items=&quot;items&quot;&gt;</span><br><span class="line">      &lt;template #default=&quot;&#123; items &#125;&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">            &#123;&#123; item.name &#125;&#125;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/ListComponent&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import ListComponent from &#x27;./ListComponent.vue&#x27;;</span><br><span class="line"></span><br><span class="line">const items = ref([</span><br><span class="line">  &#123; id: 1, name: &#x27;苹果&#x27; &#125;,</span><br><span class="line">  &#123; id: 2, name: &#x27;香蕉&#x27; &#125;,</span><br><span class="line">  &#123; id: 3, name: &#x27;橘子&#x27; &#125;</span><br><span class="line">]);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="解释-6"><a href="#解释-6" class="headerlink" title="解释"></a>解释</h3><ol><li><strong>子组件（ListComponent.vue）</strong>：<ul><li>接收一个 <code>items</code> 数组作为 <code>props</code>。</li><li>使用 <code>&lt;slot :items=&quot;items&quot;&gt;&lt;/slot&gt;</code> 传递 <code>items</code> 数据给插槽内容。这里的 <code>:items=&quot;items&quot;</code> 是为插槽提供的数据，父组件可以通过插槽接收这些数据。</li></ul></li><li><strong>父组件（ParentComponent.vue）</strong>：<ul><li>使用 <code>ListComponent</code> 并传递 <code>items</code> 数据。</li><li>使用作用域插槽 <code>template #default=&quot;&#123; items &#125;&quot;</code> 接收来自子组件的数据，并在插槽内容中使用这些数据。</li><li>在插槽内容中，通过 <code>v-for</code> 循环渲染列表项。</li></ul></li></ol><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ol><li><strong>灵活性</strong>：父组件可以完全控制如何渲染插槽内容，同时还可以使用子组件提供的数据。</li><li><strong>解耦</strong>：子组件不需要关心插槽内容的具体实现，只需提供数据即可。</li><li><strong>重用性</strong>：同一个子组件可以在不同的父组件中以不同的方式渲染插槽内容，从而提高了组件的重用性。</li></ol><h1 id="重要的API"><a href="#重要的API" class="headerlink" title="重要的API"></a>重要的API</h1><h2 id="shallowRef与shallowReactive"><a href="#shallowRef与shallowReactive" class="headerlink" title="shallowRef与shallowReactive"></a>shallowRef与shallowReactive</h2><p><code>shallowRef</code> 和 <code>shallowReactive</code> 是 Vue 3 中用于创建浅层响应式状态的方法，它们与 <code>ref</code> 和 <code>reactive</code> 有些类似，但有一些关键区别。</p><p><code>shallowRef</code> 和 <code>shallowReactive</code> 的作用</p><ol><li><code>shallowRef</code>：<ul><li>创建一个浅层响应的引用。当改变其值时，Vue 会追踪这个改变，但对其内部对象的变动不会进行深层次的响应式追踪。</li></ul></li><li><code>shallowReactive</code>：<ul><li>创建一个浅层响应的对象。这个对象的顶层属性会是响应式的，但内部嵌套对象的属性不会进行深层次的响应式追踪。</li></ul></li></ol><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p><code>shallowRef</code> 示例</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; shallowRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shallowValue = <span class="title function_">shallowRef</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新整个对象是响应式的</span></span><br><span class="line">shallowValue.<span class="property">value</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部属性变化不是响应式的</span></span><br><span class="line">shallowValue.<span class="property">value</span>.<span class="property">name</span> = <span class="string">&#x27;Charlie&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>shallowReactive</code> 示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; shallowReactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shallowObj = <span class="title function_">shallowReactive</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">info</span>: &#123; <span class="attr">age</span>: <span class="number">25</span> &#125; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 顶层属性变化是响应式的</span></span><br><span class="line">shallowObj.<span class="property">name</span> = <span class="string">&#x27;Bob&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部嵌套对象属性变化不是响应式的</span></span><br><span class="line">shallowObj.<span class="property">info</span>.<span class="property">age</span> = <span class="number">26</span>;</span><br></pre></td></tr></table></figure><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ol><li><strong>深度响应式 vs 浅层响应式</strong>：<ul><li><code>ref</code> 和 <code>reactive</code> 会进行深层响应式追踪，意味着它们不仅仅追踪顶层属性的变化，还会追踪嵌套对象属性的变化。</li><li><code>shallowRef</code> 和 <code>shallowReactive</code> 只会追踪顶层属性的变化，不会对嵌套对象属性的变化进行响应式处理。</li></ul></li><li><strong>使用场景</strong>：<ul><li><code>ref</code> 和 <code>reactive</code> 适用于需要深度响应式的数据结构，适用于大多数常见场景。</li><li><code>shallowRef</code> 和 <code>shallowReactive</code> 适用于不需要深层响应式的情况，可以提高性能和减少不必要的响应式开销。</li></ul></li></ol><h2 id="readonly与shallowReadonly"><a href="#readonly与shallowReadonly" class="headerlink" title="readonly与shallowReadonly"></a>readonly与shallowReadonly</h2><p><code>readonly</code>：当使用 <code>readonly</code> 时，它会使整个对象成为只读的。意味不能对对象的任何属性进行修改，包括添加、删除或更改属性。这对于确保对象在整个生命周期内保持不变非常有用。</p><p>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">readonly</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">readonly</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj.name = &#x27;Jane&#x27;; // 这会抛出错误</span></span><br><span class="line"><span class="comment">// obj.age = 31; // 这会抛出错误</span></span><br><span class="line"><span class="comment">// obj.newProperty = &#x27;value&#x27;; // 这会抛出错误</span></span><br></pre></td></tr></table></figure><p><code>shallowReadonly</code>：当使用 <code>shallowReadonly</code> 时，它会使对象的顶层属性成为只读的，但不会阻止嵌套对象的修改。意味着可以修改嵌套对象的属性，但不能修改顶层对象的属性。</p><p>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; shallowReadonly &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">shallowReadonly</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="attr">address</span>: &#123;</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&#x27;New York&#x27;</span>,</span><br><span class="line">    <span class="attr">zip</span>: <span class="string">&#x27;10001&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj.name = &#x27;Jane&#x27;; // 这会抛出错误</span></span><br><span class="line"><span class="comment">// obj.address.city = &#x27;Los Angeles&#x27;; // 这会工作</span></span><br><span class="line"><span class="comment">// obj.newProperty = &#x27;value&#x27;; // 这会抛出错误</span></span><br></pre></td></tr></table></figure><h2 id="toRaw与markRaw"><a href="#toRaw与markRaw" class="headerlink" title="toRaw与markRaw"></a>toRaw与markRaw</h2><p><code>toRaw</code> 是一个内部方法，用于获取一个响应式对象的原始（非响应式）版本。这个方法通常在开发过程中不会直接使用，因为它会破坏响应式系统的功能。</p><p>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, toRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rawState = <span class="title function_">toRaw</span>(state);</span><br><span class="line"></span><br><span class="line">rawState.<span class="property">count</span> = <span class="number">10</span>; <span class="comment">// 修改原始状态的 count 属性</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(state.<span class="property">count</span>); <span class="comment">// 输出：0，因为响应式系统未检测到变化</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rawState.<span class="property">count</span>); <span class="comment">// 输出：10，因为我们直接修改了原始状态</span></span><br></pre></td></tr></table></figure><p><code>markRaw</code> 是 Vue 3 中的一个方法，用于标记一个对象或属性为原始（非响应式）的。这意味着，通过 <code>markRaw</code> 标记的对象或属性将不再被 Vue 的响应式系统跟踪和观察变化。</p><p>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; markRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 count 属性标记为原始的</span></span><br><span class="line"><span class="title function_">markRaw</span>(state.<span class="property">count</span>);</span><br><span class="line"></span><br><span class="line">state.<span class="property">count</span> = <span class="number">10</span>; <span class="comment">// 修改 count 属性</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(state.<span class="property">count</span>); <span class="comment">// 输出：10，但这个变化不会被响应式系统检测到</span></span><br></pre></td></tr></table></figure><h2 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h2><p><code>customRef</code> 是 Vue 3 中的一个方法，用于创建一个自定义的响应式引用（Ref）。它允许在组件内部创建一个响应式引用，并且可以在组件外部访问和修改这个引用的值。</p><p>这个方法通常用于复杂的场景，例如需要在组件外部访问或修改组件内部的响应式状态。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;increment&quot;&gt;增加&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;decrement&quot;&gt;减少&lt;/button&gt;</span><br><span class="line">    &lt;p&gt;计数器值：&#123;&#123; counter &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; ref, customRef &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const internalCounter = ref(0);</span><br><span class="line"></span><br><span class="line">const counter = customRef((get, set) =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    get: () =&gt; internalCounter.value,</span><br><span class="line">    set: (newValue) =&gt; &#123;</span><br><span class="line">      internalCounter.value = newValue;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function increment() &#123;</span><br><span class="line">  counter.value++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function decrement() &#123;</span><br><span class="line">  counter.value--;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>customRef</code> 的 <code>track</code> 和 <code>trigger</code> 是两个用于自定义响应式引用的方法。这些方法允许更精细地控制响应式系统的行为。</p><h3 id="track"><a href="#track" class="headerlink" title="track"></a>track</h3><p><code>track</code> 方法用于跟踪一个对象或属性的变化。当调用 <code>track</code> 时，Vue 的响应式系统会开始监控该对象或属性的变化。这对于需要在响应式系统中触发更新非常有用。</p><h3 id="trigger"><a href="#trigger" class="headerlink" title="trigger"></a>trigger</h3><p><code>trigger</code> 方法用于触发一个响应式对象的更新。当调用 <code>trigger</code> 时，Vue 的响应式系统会重新计算所有依赖于该对象或属性的组件。这对于需要手动触发更新非常有用。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;increment&quot;&gt;增加&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;decrement&quot;&gt;减少&lt;/button&gt;</span><br><span class="line">    &lt;p&gt;计数器值：&#123;&#123; counter &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; ref, customRef, track, trigger &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const internalCounter = ref(0);</span><br><span class="line"></span><br><span class="line">const counter = customRef((get, set) =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    get: () =&gt; internalCounter.value,</span><br><span class="line">    set: (newValue) =&gt; &#123;</span><br><span class="line">      internalCounter.value = newValue;</span><br><span class="line">      trigger(internalCounter);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">track(internalCounter);</span><br><span class="line"></span><br><span class="line">function increment() &#123;</span><br><span class="line">  counter.value++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function decrement() &#123;</span><br><span class="line">  counter.value--;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="teleport"><a href="#teleport" class="headerlink" title="teleport"></a>teleport</h2><p><code>teleport</code> 是一个用于将组件的内容插入到 DOM 的外部位置的指令。这个指令非常有用，因为它允许在组件内部定义内容，但将其渲染到页面的任何地方。</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p><code>teleport</code> 的用法非常简单。你只需要在组件的模板中使用 <code>&lt;teleport&gt;</code> 标签，并指定一个目标元素的 <code>to</code> 属性，这个目标元素的 <code>id</code> 将被 <code>teleport</code> 使用。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;teleport to=&quot;body&quot;&gt;</span><br><span class="line">      &lt;div&gt;这是被传送的内容&lt;/div&gt;</span><br><span class="line">    &lt;/teleport&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>正常情况下，这个组件是作为<code>App.vue</code>的子组件渲染到父组件的范围中</p><p>但是在这个示例中，<code>&lt;teleport to=&quot;body&quot;&gt;</code> 将会将 <code>div</code> 元素插入到页面的 <code>&lt;body&gt;</code> 元素中。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li><strong>灵活性</strong>：可以将组件的内容插入到页面的任何地方，而不需要担心组件的位置。</li><li><strong>简单</strong>：使用 <code>teleport</code> 只需要简单的标签和属性，非常方便。</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>目标元素</strong>：确保指定的目标元素存在，并且它的 <code>id</code> 是唯一的。</li><li><strong>组件渲染顺序</strong>：<code>teleport</code> 插入的内容会在目标元素的子节点中，所以它的渲染顺序可能会影响页面的布局。</li></ul><h2 id="suspense"><a href="#suspense" class="headerlink" title="suspense"></a>suspense</h2><p><code>Suspense</code> 是一个用于处理组件加载状态的功能。它允许在组件加载期间显示一个占位符，并在组件加载完成后自动替换为实际内容。这对于处理慢加载组件或异步数据非常有用。</p><h3 id="不使用suspense"><a href="#不使用suspense" class="headerlink" title="不使用suspense"></a>不使用suspense</h3><p>举例：</p><p>App.vue：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;fu&quot;&gt;</span><br><span class="line">        &lt;h2&gt;我是父组件&lt;/h2&gt;</span><br><span class="line">        &lt;Child&gt;&lt;/Child&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;&quot; &gt;</span><br><span class="line"></span><br><span class="line">import Child from &#x27;./components/Child.vue&#x27;;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    #fu &#123;</span><br><span class="line">        width: 500px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: #ddd;</span><br><span class="line">        border-radius: 20px;</span><br><span class="line">        box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.3);</span><br><span class="line">        padding: 20px;</span><br><span class="line">        font-family: Arial, sans-serif;</span><br><span class="line">        color: #333;</span><br><span class="line">        text-align: center;</span><br><span class="line">        display: flex; /* 添加 Flexbox */</span><br><span class="line">        flex-direction: column;</span><br><span class="line">        justify-content: center; /* 水平居中 */</span><br><span class="line">        align-items: center; /* 垂直居中 */</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Child.vue：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h2 id=&quot;zi&quot;&gt;我是子组件&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;&quot; &gt;</span><br><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line">let &#123;data:&#123;content&#125;&#125; = await axios.get(&#x27;https://api.uomg.com/api/rand.qinghua?format=json&#x27;);</span><br><span class="line">console.log(content);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    #zi &#123;</span><br><span class="line">        width: 400px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background-color: #f0f0f0;</span><br><span class="line">        border-radius: 15px;</span><br><span class="line">        box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.3);</span><br><span class="line">        padding: 20px;</span><br><span class="line">        font-family: Arial, sans-serif;</span><br><span class="line">        color: #333;</span><br><span class="line">        text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>在<code>App.vue</code>中，包含了子组件<code>Child.vue</code></li><li>在<code>Child.vue</code>中，使用了<code>Axios</code>来异步获取数据</li></ol><p>结果：</p><ol><li>控制台可以正常输出数据</li><li>页面无法渲染出<code>Child.vue</code></li></ol><h3 id="使用suspense"><a href="#使用suspense" class="headerlink" title="使用suspense"></a>使用suspense</h3><p>为了在<code>App.vue</code>中正常渲染子组件，可以利用<code>suspense</code></p><p>修改后的App.vue：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;fu&quot;&gt;</span><br><span class="line">        &lt;h2&gt;我是父组件&lt;/h2&gt;</span><br><span class="line">        &lt;Suspense&gt;</span><br><span class="line">            &lt;template v-slot:default&gt;</span><br><span class="line">                &lt;Child&gt;&lt;/Child&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">            &lt;template v-slot:fallback&gt;</span><br><span class="line">                加载中...</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Suspense&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;&quot; &gt;</span><br><span class="line">import &#123; Suspense &#125; from &#x27;vue&#x27;;</span><br><span class="line">import Child from &#x27;./components/Child.vue&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    #fu &#123;</span><br><span class="line">        width: 500px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: #ddd;</span><br><span class="line">        border-radius: 20px;</span><br><span class="line">        box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.3);</span><br><span class="line">        padding: 20px;</span><br><span class="line">        font-family: Arial, sans-serif;</span><br><span class="line">        color: #333;</span><br><span class="line">        text-align: center;</span><br><span class="line">        display: flex; /* 添加 Flexbox */</span><br><span class="line">        flex-direction: column;</span><br><span class="line">        justify-content: center; /* 水平居中 */</span><br><span class="line">        align-items: center; /* 垂直居中 */</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>引入<code>suspense</code>：</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Suspense</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>用<code>suspense</code>包裹住要异步渲染的子组件</li><li>利用插槽将子组件标签包裹起来</li><li><code>v-slot:default</code>表示的是默认，用于展示子组件，<code>v-slot:fallback</code>表示在异步请求完成前的操作（信息）</li></ol><h1 id="全局API转移到应用对象"><a href="#全局API转移到应用对象" class="headerlink" title="全局API转移到应用对象"></a>全局API转移到应用对象</h1><h2 id="app-component"><a href="#app-component" class="headerlink" title="app.component"></a>app.component</h2><p><code>全局组件</code>是指可以在应用的任何地方使用的组件，而不需要每次在本地引用。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p><strong>定义组件</strong>： 创建一个新的 Vue 组件文件，例如 <code>MyComponent.vue</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;my-component&quot;&gt;</span><br><span class="line">        我是一个全局组件</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.my-component &#123;</span><br><span class="line">    color: blue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>注册全局组件</strong>： 在你的 <code>main.ts</code> 文件中，将这个组件注册为全局组件。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MyComponent.vue&#x27;</span>; <span class="comment">// 导入组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;MyComponent&#x27;</span>, <span class="title class_">MyComponent</span>); <span class="comment">// 注册全局组件</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>使用全局组件</strong>： 现在就可以在应用的任何地方使用这个全局组件，而不需要在本地引用。例如，在 <code>App.vue</code> 中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;h1&gt;欢迎使用Vue 3&lt;/h1&gt;</span><br><span class="line">        &lt;MyComponent&gt;&lt;/MyComponent&gt; &lt;!-- 使用全局组件 --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">    font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">    text-align: center;</span><br><span class="line">    color: #2c3e50;</span><br><span class="line">    margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="app-config"><a href="#app-config" class="headerlink" title="app.config"></a>app.config</h2><p><code>app.config</code> 是一个用于配置 Vue 应用的对象。通过 <code>app.config</code>，你可以设置一些全局配置项，来影响整个应用的行为。下面是一些常见的 <code>app.config</code> 选项及其使用方法：</p><h3 id="常见的-app-config-选项"><a href="#常见的-app-config-选项" class="headerlink" title="常见的 app.config 选项"></a>常见的 <code>app.config</code> 选项</h3><ol><li><code>app.config.globalProperties</code>： 这个选项用于在全局属性中注册自定义的全局方法或变量，以便在整个应用中访问。</li><li><code>app.config.errorHandler</code>： 自定义全局错误处理器，以处理应用中的错误。</li><li><code>app.config.warnHandler</code>： 自定义全局警告处理器，以处理 Vue 产生的警告。</li><li><code>app.config.isCustomElement</code>： 自定义判断某个标签是否是自定义元素。</li></ol><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>下面是一个示例，展示如何使用这些配置选项：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置全局属性</span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$myGlobalMethod</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个全局方法&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义全局错误处理器</span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">errorHandler</span> = <span class="function">(<span class="params">err, instance, info</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;全局错误处理器:&#x27;</span>, err, instance, info);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义全局警告处理器</span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">warnHandler</span> = <span class="function">(<span class="params">msg, instance, trace</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;全局警告处理器:&#x27;</span>, msg, instance, trace);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断某个标签是否是自定义元素</span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">isCustomElement</span> = <span class="function">(<span class="params">tag</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> tag.<span class="title function_">startsWith</span>(<span class="string">&#x27;my-&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="解释-7"><a href="#解释-7" class="headerlink" title="解释"></a>解释</h3><ol><li><code>app.config.globalProperties</code>： 在全局属性中注册一个自定义方法 <code>$myGlobalMethod</code>，可以在任何组件中通过 <code>this.$myGlobalMethod()</code> 访问这个方法。</li><li><code>app.config.errorHandler</code>： 设置一个全局错误处理器，当应用中发生错误时，会调用这个处理器，输出错误信息。</li><li><code>app.config.warnHandler</code>： 设置一个全局警告处理器，当 Vue 产生警告时，会调用这个处理器，输出警告信息。</li><li><code>app.config.isCustomElement</code>： 设置一个判断函数，用于判断某个标签是否是自定义元素。在这个示例中，所有以 <code>my-</code> 开头的标签都会被认为是自定义元素。</li></ol><h2 id="app-directive"><a href="#app-directive" class="headerlink" title="app.directive"></a>app.directive</h2><p><code>app.directive</code> 方法来定义和注册自定义指令。自定义指令允许在 DOM 元素上应用自定义行为，这些指令可以在应用的任何地方使用，非常强大和灵活。</p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li><strong>定义自定义指令</strong>： 创建一个自定义指令对象，并定义它的钩子函数，如 <code>mounted</code>、<code>updated</code> 等。</li><li><strong>注册全局自定义指令</strong>： 在 <code>main.ts</code> 文件中使用 <code>app.directive</code> 方法将自定义指令注册为全局指令。</li><li><strong>在模板中使用自定义指令</strong>： 在组件的模板中应用自定义指令。</li></ol><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><p>创建一个简单的自定义指令 <code>v-focus</code>，它会在元素挂载时自动获得焦点。</p><h4 id="定义和注册自定义指令"><a href="#定义和注册自定义指令" class="headerlink" title="定义和注册自定义指令"></a>定义和注册自定义指令</h4><p><strong>main.ts</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义自定义指令</span></span><br><span class="line"><span class="keyword">const</span> vFocus = &#123;</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params">el: HTMLElement</span>) &#123;</span><br><span class="line">    el.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册全局自定义指令</span></span><br><span class="line">app.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, vFocus);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="在模板中使用自定义指令"><a href="#在模板中使用自定义指令" class="headerlink" title="在模板中使用自定义指令"></a>在模板中使用自定义指令</h4><p><strong>App.vue</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1&gt;欢迎使用Vue 3&lt;/h1&gt;</span><br><span class="line">    &lt;input v-focus placeholder=&quot;自动获得焦点的输入框&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="解释-8"><a href="#解释-8" class="headerlink" title="解释"></a>解释</h3><ol><li><strong>定义自定义指令</strong>： 在 <code>main.ts</code> 文件中创建一个自定义指令对象 <code>vFocus</code>，并定义 <code>mounted</code> 钩子函数，让元素在挂载时自动获得焦点。</li><li><strong>注册全局自定义指令</strong>： 使用 <code>app.directive(&#39;focus&#39;, vFocus)</code> 将 <code>vFocus</code> 注册为全局自定义指令 <code>v-focus</code>。</li><li><strong>在模板中使用自定义指令</strong>： 在 <code>App.vue</code> 的模板中，使用 <code>v-focus</code> 自定义指令，使得输入框在页面加载时自动获得焦点。</li></ol><h1 id="非兼容性改变"><a href="#非兼容性改变" class="headerlink" title="非兼容性改变"></a>非兼容性改变</h1><p>来自：<a href="https://v3-migration.vuejs.org/zh/breaking-changes/">非兼容性改变 | Vue 3 迁移指南</a></p><p>Vue 3 引入了一些重要的非兼容性变化，这些变化在从 Vue 2 迁移时需要特别注意。以下是一些主要的非兼容性变化：</p><ol><li><strong>全局 API 变化</strong>：<ul><li>全局 Vue API 现在使用应用实例来调用，而不是全局对象。</li><li>全局和内部 API 被重新构建，以支持 tree-shaking。</li></ul></li><li><strong>模板指令变化</strong>：<ul><li><code>v-model</code> 在组件中的使用方式被重新设计，现在使用 <code>v-bind.sync</code> 替代。</li><li><code>&lt;template v-for&gt;</code> 和非 <code>v-for</code> 节点的 <code>key</code> 使用方式有所变化。</li><li><code>v-if</code> 和 <code>v-for</code> 在同一个元素上使用时的优先级发生了变化。</li><li><code>v-bind=&quot;&#123;object&#125;&quot;</code> 现在是顺序敏感的。</li><li><code>v-on:event.native</code> 修饰符被移除。</li></ul></li><li><strong>组件变化</strong>：<ul><li>函数型组件只能通过普通函数来创建。</li><li>单文件组件（SFC）中的 <code>&lt;template&gt;</code> 和 <code>functional</code> 属性已被弃用。</li><li>非同步组件现在需要使用 <code>defineAsyncComponent</code> 方法来创建。</li><li>组件事件现在应该通过 <code>emits</code> 选项来声明。</li></ul></li><li><strong>渲染函数变化</strong>：<ul><li>渲染函数 API 发生了变化。</li><li><code>$scopedSlots</code> 属性被移除，所有的 slots 都通过 <code>$slots</code> 作为函数公开。</li><li><code>$listeners</code> 被移除并合并到 <code>$attrs</code>。</li><li><code>$attrs</code> 现在包含 <code>class</code> 和 <code>style</code> 属性。</li></ul></li><li><strong>自定义元素变化</strong>：<ul><li>自定义元素检查现在在模板编译时进行。</li><li>特殊的 <code>is</code> 属性仅限于 <code>&lt;component&gt;</code> 标签。</li></ul></li><li><strong>其他小变化</strong>：<ul><li><code>destroyed</code> 生命周期选项被重命名为 <code>unmounted</code>。</li><li><code>beforeDestroy</code> 生命周期选项被重命名为 <code>beforeUnmount</code>。</li><li><code>props</code> 的默认工厂函数不再有 <code>this</code> 上下文。</li><li>自定义指令 API 被调整以与组件生命周期一致。</li><li><code>data</code> 选项应始终声明为函数。</li><li><code>mixins</code> 的 <code>data</code> 选项现在浅合并。</li><li>属性强制转换策略发生了变化。</li><li>一些过渡类名被重命名。</li><li><code>&lt;TransitionGroup&gt;</code> 默认不再渲染包装元素。</li><li>监控数组时，回调只在数组被替换时触发。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2025/04/05/TypeScript/"/>
      <url>/2025/04/05/TypeScript/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="TypeScript简介"><a href="#TypeScript简介" class="headerlink" title="TypeScript简介"></a>TypeScript简介</h1><ol><li><code>TypeScript</code>由微软开发，是基于<code>JavaScript</code>的一个扩展语言</li><li>TypeScript包含了JavaScript的所有内容</li><li>TypeScript增加了静态类型检查、接口、泛型等很多现代开发特性，更适合大型项目的开发</li><li>TypeScript需要编译为JavaScript，然后交给浏览器或其他JavaScript运行环境执行</li></ol><h2 id="JavaScript中的典型问题"><a href="#JavaScript中的典型问题" class="headerlink" title="JavaScript中的典型问题"></a>JavaScript中的典型问题</h2><ol><li>容易混淆的数据类型</li><li>逻辑漏洞</li><li>访问不存在的属性</li><li>低级的拼写错误</li></ol><p>静态类型检查：</p><ul><li>在代码运行前进行检查，发现代码的错误或不合理之处，减少运行时异常的出现的机率，此种检查叫做<code>静态类型检查</code>，TypeScript的核心就是这个。简而言之就是<code>把运行时的错误前置</code></li><li>同样的功能，TypeScript的代码量要<code>大于</code>JavaScript，但由于TypeScript的代码结构更加清晰，在后期代码的维护中TypeScript远胜于JavaScript</li></ul><h2 id="编译TS"><a href="#编译TS" class="headerlink" title="编译TS"></a>编译TS</h2><h3 id="命令行编译（不推荐）"><a href="#命令行编译（不推荐）" class="headerlink" title="命令行编译（不推荐）"></a>命令行编译（不推荐）</h3><p>要把.ts文件编译成.js文件，需要配置TypeScript的编译环境，步骤如下：</p><p>第一步：</p><p>创建一个demo.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;person.name&#125;</span>，我今年<span class="subst">$&#123;person.age&#125;</span>岁了`</span>)</span><br></pre></td></tr></table></figure><p>第二步：</p><p>安装全局TypeScript</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i typescript -g</span><br></pre></td></tr></table></figure><p>第三步：</p><p>使用命令编译.ts文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc demo.ts</span><br></pre></td></tr></table></figure><h3 id="自动化编译"><a href="#自动化编译" class="headerlink" title="自动化编译"></a>自动化编译</h3><p>第一步：</p><p>创建TypeScript编译控制文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure><ol><li>工程中会生成一个<code>tsconfig.json</code>配置文件，其中包含着很多编译时的配置</li><li>默认编译的JS版本是ES7，可以手动调整为其他版本</li></ol><p>第二步：</p><p>监视目录中的<code>.ts</code>文件变化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --watch</span><br></pre></td></tr></table></figure><p>第三步：</p><p>小优化，当编译出错时不生成<code>.js</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --noEmitOnError --watch</span><br></pre></td></tr></table></figure><p>Tips：在<code>tsconfig.json</code>文件中也可以修改</p><p>在Vue或其他框架中，TypeScript不许要用户自己处理，框架会自动编译</p><h1 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h1><p>格式：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 变量名:数据类型 = 值;</span><br><span class="line"><span class="keyword">function</span> 函数名(形参名:数据类型,形参名:数据类型):返回值数据类型 &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:<span class="built_in">boolean</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>:<span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">b = <span class="literal">false</span>;</span><br><span class="line">c = <span class="number">2024</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>):<span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">res</span>:<span class="built_in">number</span> = <span class="title function_">count</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure><p>特殊方法（不常用）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="string">&quot;你好&quot;</span>;<span class="comment">// a的值只能为&quot;你好&quot;</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;世界&quot;</span>;<span class="comment">// 报错！！</span></span><br><span class="line">a = <span class="string">&quot;你好&quot;</span>;<span class="comment">// 不报错</span></span><br></pre></td></tr></table></figure><h2 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h2><p>TS会根据代码进行类型推断，如下所示：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">2024</span>;</span><br><span class="line">a = <span class="string">&quot;你好&quot;</span>;<span class="comment">// 报错：不能将String类型分配给Number类型</span></span><br></pre></td></tr></table></figure><p><font color='red'>但是不推荐省略数据类型</font></p><h2 id="类型总览"><a href="#类型总览" class="headerlink" title="类型总览"></a>类型总览</h2><p>JS中的数据类型：</p><ol><li>string</li><li>number</li><li>boolean</li><li>null</li><li>undefined</li><li>bigint</li><li>symbol</li><li>object</li></ol><p>其中，object包含：Array、Function、Date、Error等</p><p>TS中的数据类型：</p><ol><li>上述所有的JS数据类型</li><li>六个新类型：<ol><li>any</li><li>unknown</li><li>never</li><li>void</li><li>tuple</li><li>enum</li></ol></li><li>两个用于自定义类型的方式：<ol><li>type</li><li>interface</li></ol></li></ol><p>注意点：</p><p>在 JavaScript中的这些内置构造函数：Number、String、Boolean，它们用于创建对应的包装对象，在开发日常很少使用，在TypeScript中也是同理，所以在TypeScript中进行类型声明时，通常都是<font color='red'>小写</font>的number、string、boolean</p><p>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">str1</span>:<span class="built_in">string</span>;</span><br><span class="line">str1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">str2 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello&quot;</span>);<span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str2</span>:<span class="title class_">String</span>;</span><br><span class="line">str2 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">str2 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello&quot;</span>)</span><br></pre></td></tr></table></figure><p>原始类型VS包装对象：</p><ul><li>原始类型：如number、string、boolean，在JavaScript中是简单数据类型，它们在内存中占用空间少，处理速度快</li><li>包装对象：如Number对象、String对象、Boolean对象，是复杂类型，在内存中占用更多空间，实际开发中很少使用</li><li>自动装箱：JavaScript在必要时会自动将原始类型包装成对象，以便调用方法或访问属性</li></ul><h1 id="常用类型"><a href="#常用类型" class="headerlink" title="常用类型"></a>常用类型</h1><p><a href="#%E7%B1%BB%E5%9E%8B%E6%80%BB%E8%A7%88">点击此处查看数据类型</a></p><h2 id="any"><a href="#any" class="headerlink" title="any"></a>any</h2><p>任意类型，一旦将变量类型限制为any，那就意味着放弃了对该变量的类型检查</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 明确的表示any类型（显式）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="number">123</span>;</span><br><span class="line">a = <span class="string">&quot;hello world&quot;</span></span><br><span class="line">a = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 以上均无报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐式</span></span><br><span class="line"><span class="keyword">let</span> b;</span><br><span class="line">b = <span class="number">100</span>;</span><br><span class="line">b = <span class="string">&quot;bye bye&quot;</span>;</span><br><span class="line">b = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 以上均无报错</span></span><br></pre></td></tr></table></figure><p><font color='red'>注意：any类型的变量，可以赋值给任意类型的变量</font></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">c</span>:<span class="built_in">any</span>;</span><br><span class="line">c = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">x</span>:<span class="built_in">string</span>;</span><br><span class="line">x = c;<span class="comment">// 不会报错，且x的值为5</span></span><br></pre></td></tr></table></figure><h2 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h2><p>未知类型，可以理解为一个类型安全的any，适用于不确定数据的具体类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">c</span>:<span class="built_in">unknown</span>;</span><br><span class="line">c = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">x</span>:<span class="built_in">string</span>;</span><br><span class="line">x = c;<span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>并且，如果代码为以下形式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">c</span>:<span class="built_in">unknown</span>;</span><br><span class="line">c = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">x</span>:<span class="built_in">string</span>;</span><br><span class="line">x = c; <span class="comment">// 依然会报错</span></span><br></pre></td></tr></table></figure><p>解决办法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> c === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">x = c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第二种（断言）</span></span><br><span class="line">x = a <span class="keyword">as</span> <span class="built_in">string</span><span class="comment">// 断言方式1</span></span><br><span class="line">x = &lt;<span class="built_in">string</span>&gt;a<span class="comment">// 断言方式2</span></span><br></pre></td></tr></table></figure><p>读取<code>any</code>类型数据的任何属性都不会报错，而<code>unknown</code>则相反</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">str1</span>:<span class="built_in">string</span>;</span><br><span class="line">str1 = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">str1.<span class="title function_">toUpperCase</span>();<span class="comment">// 无警告</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str2</span>:<span class="built_in">any</span>;</span><br><span class="line">str2 = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">str2.<span class="title function_">toUpperCase</span>();<span class="comment">// 无警告</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str3</span>:<span class="built_in">unknown</span>;</span><br><span class="line">str3 = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">str3.<span class="title function_">toUpperCase</span>();<span class="comment">// 警告：&quot;str3&quot;的类型为&quot;未知&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用断言强制指定str3的类型为string</span></span><br><span class="line">(str3 <span class="keyword">as</span> <span class="built_in">string</span>).<span class="title function_">toUpperCase</span>(); <span class="comment">// 无警告 </span></span><br></pre></td></tr></table></figure><h2 id="never（少见）"><a href="#never（少见）" class="headerlink" title="never（少见）"></a>never（少见）</h2><p>任何值都不是，简言之就是不能有值，undefined、null、’’、0都不行</p><ol><li>几乎不用never去直接限制变量，因为没有意义</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下都会报错</span></span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line">a = <span class="literal">false</span>;</span><br><span class="line">a = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">a = <span class="literal">undefined</span>;</span><br><span class="line">a = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>never一般是TypeScript主动推断出来的</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">string</span>;</span><br><span class="line">a = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">toUpperCase</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">// TypeScript会推断出此处的a是never，因为没有任何一个值符合此处逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>never也可以用于限制函数的返回值</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throwError</span>(<span class="params">str:<span class="built_in">string</span></span>):<span class="built_in">never</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;程序异常&quot;</span> + str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="void"><a href="#void" class="headerlink" title="void"></a>void</h2><ol><li>void通常用于函数返回值的声明（就和Java中的void一样）</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">logMessage</span>(<span class="params">str:<span class="built_in">string</span></span>):<span class="built_in">void</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">logMessage</span>(<span class="string">&quot;你好&quot;</span>);</span><br></pre></td></tr></table></figure><p><font color='red'>注意：即使没有写函数的返回值，但是还是会有一个隐式返回值<code>undefined</code></font></p><ol start="2"><li>用void限定的函数还可以是以下的方式：</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">logMessage1</span>(<span class="params">str:<span class="built_in">string</span></span>):<span class="built_in">void</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logMessage2</span>(<span class="params">str:<span class="built_in">string</span></span>):<span class="built_in">void</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logMessage3</span>(<span class="params">str:<span class="built_in">string</span></span>):<span class="built_in">void</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>void函数不能对其返回值进行操作（这是与undefined函数的区别所在）</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params">str:<span class="built_in">string</span></span>):<span class="built_in">void</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params">str:<span class="built_in">string</span></span>):<span class="literal">undefined</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res1 = <span class="title function_">test1</span>();</span><br><span class="line"><span class="keyword">let</span> res2 = <span class="title function_">test2</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (res1) &#123;<span class="comment">// 报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (res2) &#123;</span><br><span class="line">    </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="object"><a href="#object" class="headerlink" title="object"></a>object</h2><p>关于<code>object</code>和<code>Object</code>，实际开发中用的相对较小，因为范围太大了</p><h3 id="声明对象类型"><a href="#声明对象类型" class="headerlink" title="声明对象类型"></a>声明对象类型</h3><h4 id="object（小写）"><a href="#object（小写）" class="headerlink" title="object（小写）"></a>object（小写）</h4><p>所有非原始类型，可以存储：对象、函数、数组等，由于限制的范围比较宽泛，实际开发中使用的相对较小</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">object</span>;<span class="comment">// a的值可以是任何非原始类型，包括对象、函数、数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下均无问题</span></span><br><span class="line">a = &#123;&#125;;</span><br><span class="line">a = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>&#125;;</span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">a = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">a = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;&#125;;</span><br><span class="line">a = <span class="keyword">new</span> <span class="title class_">Person</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原始类型警告：</span></span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line">a = <span class="literal">true</span>;</span><br><span class="line">a = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">a = <span class="literal">null</span>;</span><br><span class="line">a = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h4 id="Object（大写）（少见）"><a href="#Object（大写）（少见）" class="headerlink" title="Object（大写）（少见）"></a>Object（大写）（少见）</h4><p>官方描述：所有可以调用Object方法的类型</p><p>简而言之：除了undefined和null的任何值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let b:Object;</span><br><span class="line"></span><br><span class="line">// 以下均无问题</span><br><span class="line">b = &#123;&#125;;</span><br><span class="line">b = &#123;name:&quot;张三&quot;&#125;;</span><br><span class="line">b = [1,2,3];</span><br><span class="line">b = function() &#123;&#125;;</span><br><span class="line">b = new String(&quot;Hello&quot;);</span><br><span class="line">class Person &#123;&#125;;</span><br><span class="line">b = new Person&#123;&#125;;</span><br><span class="line">b = 1;</span><br><span class="line">b = false;</span><br><span class="line">b = &quot;Hello&quot;;</span><br></pre></td></tr></table></figure><h4 id="限制一般对象"><a href="#限制一般对象" class="headerlink" title="限制一般对象"></a>限制一般对象</h4><p>实际开发中，限制一般对象，通常用以下形式：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 限制person对象必须有name属性，age为可选属性</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="built_in">string</span>, age?:<span class="built_in">number</span>&#125;;</span><br><span class="line"></span><br><span class="line">person = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="索引签名"><a href="#索引签名" class="headerlink" title="索引签名"></a>索引签名</h4><p>允许定义对象可以具有任意数量的属性（具有动态属性的对象）</p><p>格式：<code>[键名:键数据类型]:值数据类型</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="built_in">string</span>, age?:<span class="built_in">number</span>, [<span class="attr">key</span>:<span class="built_in">string</span>]:<span class="built_in">any</span>&#125;;</span><br><span class="line"></span><br><span class="line">person = &#123;<span class="attr">name</span>:<span class="string">&quot;tom&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">gender</span>:<span class="string">&quot;男&quot;</span>,<span class="attr">city</span>:<span class="string">&quot;上海&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="声明函数类型"><a href="#声明函数类型" class="headerlink" title="声明函数类型"></a>声明函数类型</h3><p>格式：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 函数名:<span class="function">(<span class="params">形参名:形参类型,形参名:形参类型</span>) =&gt;</span> 返回值类型</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> 函数名 = <span class="keyword">function</span> (<span class="params">形参名,形参名</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> 返回值类型数据;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">count</span>:<span class="function">(<span class="params">a:<span class="built_in">number</span>,b:<span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">count</span> = (<span class="params">x,y</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>TypeScript中的<code>=&gt;</code>在函数类型声明时表示函数类型，描述其参数类型和返回类型（分隔符）</li><li>JavaScript中的<code>=&gt;</code>时一种定义函数的语法，是具体的函数实现</li><li>函数类型声明还可以使用：接口、自定义类型等方式</li></ol><h3 id="声明数组类型"><a href="#声明数组类型" class="headerlink" title="声明数组类型"></a>声明数组类型</h3><p>格式：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1</span></span><br><span class="line"><span class="keyword">let</span> 数组名:数据类型[];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2</span></span><br><span class="line"><span class="keyword">let</span> 数组名:<span class="title class_">Array</span>&lt;数据类型&gt;;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>:<span class="built_in">string</span>[];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>:<span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line"></span><br><span class="line">arr1 = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>];</span><br><span class="line">arr2 = [<span class="number">100</span>,<span class="number">200</span>];</span><br></pre></td></tr></table></figure><h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h2><p>元组（Tuple）是一种特殊的数组类型，可以存储<code>固定数量</code>的元素，并且每个元素的类型是已知的且可以不同。元组用于描述一组值的类型，<code>?</code>表示可选元素</p><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个元素必须是string类型，第二个元素必须是number类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>:[<span class="built_in">string</span>,<span class="built_in">number</span>];</span><br><span class="line"><span class="comment">// 第一个元素必须是number类型，第二个元素是可选的，如果存在，必须是boolean类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>:[<span class="built_in">number</span>,<span class="built_in">boolean</span>?];</span><br><span class="line"><span class="comment">// 第一个元素必须是boolean类型，后面的元素可以是任意数量，但类型必须是string类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr3</span>:[<span class="built_in">boolean</span>,...<span class="built_in">string</span>[]];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line">arr1 = [<span class="string">&quot;Hello&quot;</span>,<span class="number">123</span>];</span><br><span class="line">arr2 = [<span class="number">100</span>,<span class="literal">false</span>];</span><br><span class="line">arr2 = [<span class="number">200</span>];</span><br><span class="line">arr3 = [<span class="literal">true</span>,<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;World&quot;</span>];</span><br><span class="line">arr3 = [<span class="literal">false</span>];</span><br></pre></td></tr></table></figure><h2 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h2><p>枚举（enum）可以定义<code>一组命名常量</code>，它能增强代码的可读性，也让代码更好维护</p><p>如下代码的功能是：</p><p>根据调用walk时传入的不同参数，执行不同的逻辑</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">walk</span>(<span class="params">str:<span class="built_in">string</span></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (str === <span class="string">&quot;up&quot;</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;向上走&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (str === <span class="string">&quot;down&quot;</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;向下走&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (str === <span class="string">&quot;left&quot;</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;向左走&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (str === <span class="string">&quot;right&quot;</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;向右走&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;未知方向&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">walk</span>(<span class="string">&quot;up&quot;</span>);</span><br><span class="line"><span class="title function_">walk</span>(<span class="string">&quot;down&quot;</span>);</span><br><span class="line"><span class="title function_">walk</span>(<span class="string">&quot;left&quot;</span>);</span><br><span class="line"><span class="title function_">walk</span>(<span class="string">&quot;right&quot;</span>);</span><br></pre></td></tr></table></figure><p>存在的问题是调用walk时传参时没有任何提示，编码者很容易写错字符串内容；并且用于判断逻辑的up、down、left、right是连续且相关的一组值，那此时就特别适合使用枚举（enum）</p><h3 id="数字枚举"><a href="#数字枚举" class="headerlink" title="数字枚举"></a>数字枚举</h3><p>数字枚举是最常见的枚举类型，其成员的值会<code>自动递增</code>，且数字枚举还具备反射的特点。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span>,</span><br><span class="line">    <span class="title class_">Down</span>,</span><br><span class="line">    <span class="title class_">Left</span>,</span><br><span class="line">    <span class="title class_">Right</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>);</span><br><span class="line"><span class="comment">// &#123;0: &#x27;Up&#x27;, 1: &#x27;Down&#x27;, 2: &#x27;Left&#x27;, 3: &#x27;Right&#x27;, Up: 0, Down: 1, Left: 2, Right: 3&#125;</span></span><br></pre></td></tr></table></figure><p>根据以上特点，可以修改之前的代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span>,</span><br><span class="line">    <span class="title class_">Down</span>,</span><br><span class="line">    <span class="title class_">Left</span>,</span><br><span class="line">    <span class="title class_">Right</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">walk</span>(<span class="params">data:Direction</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (data === <span class="title class_">Direction</span>.<span class="property">Up</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;向上走&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (data === <span class="title class_">Direction</span>.<span class="property">Down</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;向下走&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (data === <span class="title class_">Direction</span>.<span class="property">Left</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;向左走&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (data === <span class="title class_">Direction</span>.<span class="property">Right</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;向右走&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;未知方向&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">walk</span>(<span class="title class_">Direction</span>.<span class="property">Down</span>);</span><br><span class="line"><span class="title function_">walk</span>(<span class="title class_">Direction</span>.<span class="property">Up</span>);</span><br><span class="line"><span class="title function_">walk</span>(<span class="title class_">Direction</span>.<span class="property">Left</span>);</span><br><span class="line"><span class="title function_">walk</span>(<span class="title class_">Direction</span>.<span class="property">Right</span>);</span><br></pre></td></tr></table></figure><p>优化过后的代码更加的便于维护，也可以防止错误输入的发生</p><h3 id="字符串枚举"><a href="#字符串枚举" class="headerlink" title="字符串枚举"></a>字符串枚举</h3><p>枚举成员是字符换</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span> = <span class="string">&quot;up&quot;</span>,</span><br><span class="line">    <span class="title class_">Down</span> = <span class="string">&quot;down&quot;</span>,</span><br><span class="line">    <span class="title class_">Left</span> = <span class="string">&quot;left&quot;</span>,</span><br><span class="line">    <span class="title class_">Right</span> = <span class="string">&quot;right&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>);</span><br><span class="line"><span class="comment">// &#123;Up: &#x27;up&#x27;, Down: &#x27;down&#x27;, Left: &#x27;left&#x27;, Right: &#x27;right&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="常量枚举"><a href="#常量枚举" class="headerlink" title="常量枚举"></a>常量枚举</h3><p>官方描述：常量枚举是一种特殊枚举类型，它使用<code>const</code>关键字定义，在编译时会被内联，避免生成一些额外的代码</p><p>内联：TypeScript在编译时，会将枚举成员引用替换为它们的实际值，而不是生成额外的枚举对象，这可以减少生成的JS代码量，并提高运行时的性能</p><p>例如：</p><p>普通枚举下的TS：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span>,</span><br><span class="line">    <span class="title class_">Down</span>,</span><br><span class="line">    <span class="title class_">Left</span>,</span><br><span class="line">    <span class="title class_">Right</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>.<span class="property">Up</span>); <span class="comment">// 返回值：0</span></span><br></pre></td></tr></table></figure><p>普通枚举下生成的JS：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Direction</span>;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params">Direction</span>) &#123;</span><br><span class="line">    <span class="title class_">Direction</span>[<span class="title class_">Direction</span>[<span class="string">&quot;Up&quot;</span>] = <span class="number">0</span>] = <span class="string">&quot;Up&quot;</span>;</span><br><span class="line">    <span class="title class_">Direction</span>[<span class="title class_">Direction</span>[<span class="string">&quot;Down&quot;</span>] = <span class="number">1</span>] = <span class="string">&quot;Down&quot;</span>;</span><br><span class="line">    <span class="title class_">Direction</span>[<span class="title class_">Direction</span>[<span class="string">&quot;Left&quot;</span>] = <span class="number">2</span>] = <span class="string">&quot;Left&quot;</span>;</span><br><span class="line">    <span class="title class_">Direction</span>[<span class="title class_">Direction</span>[<span class="string">&quot;Right&quot;</span>] = <span class="number">3</span>] = <span class="string">&quot;Right&quot;</span>;</span><br><span class="line">&#125;)(<span class="title class_">Direction</span> || (<span class="title class_">Direction</span> = &#123;&#125;));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>.<span class="property">Up</span>); <span class="comment">// 返回值：0</span></span><br></pre></td></tr></table></figure><p>常量枚举下的TS：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span>,</span><br><span class="line">    <span class="title class_">Down</span>,</span><br><span class="line">    <span class="title class_">Left</span>,</span><br><span class="line">    <span class="title class_">Right</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>.<span class="property">Up</span>); <span class="comment">// 返回值：0</span></span><br></pre></td></tr></table></figure><p>常量枚举下生成的JS：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> <span class="comment">/* Direction.Up */</span>); <span class="comment">// 返回值：0</span></span><br></pre></td></tr></table></figure><h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><p>type可以为任意类型创建别名，让代码更简洁、可读性更强，同时更方便地进行类型复用和扩展</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>类型别名使用type关键字定义，type后跟类型名称，如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">num</span> </span>= number;</span><br><span class="line"></span><br><span class="line">let price:num;</span><br><span class="line">price = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><p>联合类型是一种高级形式，它表示一个值可以是几种不同类型之一</p><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Statu</span> = <span class="built_in">number</span> | <span class="built_in">string</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Gender</span> = <span class="string">&quot;男&quot;</span> | <span class="string">&quot;女&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printStatus</span>(<span class="params">data:Status</span>):<span class="built_in">void</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printGender</span>(<span class="params">data:Gender</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">printStatus</span>(<span class="number">404</span>);</span><br><span class="line"><span class="title function_">printStatus</span>(<span class="string">&quot;404&quot;</span>);</span><br><span class="line"><span class="title function_">printStatus</span>(<span class="literal">false</span>); <span class="comment">// 错误</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">printGender</span>(<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="title function_">printGender</span>(<span class="string">&quot;女&quot;</span>);</span><br><span class="line"><span class="title function_">printGender</span>(<span class="string">&quot;未知&quot;</span>);<span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><h3 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h3><p>交叉类型（Intersection Types）允许将多个类型合并为一个类型。合并后的类型将拥有所有被合并类型的成员。交叉类型通常用于<code>对象类型</code></p><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 面积</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Area</span> = &#123;</span><br><span class="line"><span class="attr">width</span>:<span class="built_in">number</span>;</span><br><span class="line"><span class="attr">height</span>:height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 地址</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Address</span> = &#123;</span><br><span class="line"><span class="attr">num</span>:<span class="built_in">number</span>;</span><br><span class="line"><span class="attr">cell</span>:<span class="built_in">number</span>;</span><br><span class="line"><span class="attr">room</span>:<span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">House</span> = <span class="title class_">Area</span> &amp; <span class="title class_">Address</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保证Area和Address的每个属性都存在</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">house</span>:<span class="title class_">House</span> = &#123;</span><br><span class="line"><span class="attr">height</span>:<span class="number">100</span>,</span><br><span class="line"><span class="attr">width</span>:<span class="number">100</span>,</span><br><span class="line"><span class="attr">num</span>:<span class="number">101</span>,</span><br><span class="line"><span class="attr">cell</span>:<span class="number">2</span>,</span><br><span class="line"><span class="attr">room</span>:<span class="string">&quot;205&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="特殊情况（void不奏效）"><a href="#特殊情况（void不奏效）" class="headerlink" title="特殊情况（void不奏效）"></a>特殊情况（void不奏效）</h3><p>在函数定义时，限制函数返回值为void，那么函数的返回值就必须为空</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"></span>):<span class="built_in">void</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;<span class="comment">// 正确</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;<span class="comment">// 错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用类型声明限制函数返回值为void，TypeScript并不会严格要求函数返回空</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">LogFunc</span> = <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">f1</span>:<span class="title class_">LogFunc</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">100</span>;<span class="comment">// 不会报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">f2</span>:<span class="title class_">LogFunc</span> = <span class="function">() =&gt;</span> <span class="number">200</span>;<span class="comment">// 不会报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">f3</span>:<span class="title class_">LogFunc</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">300</span>;<span class="comment">// 不会报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导致的原因：</p><p>是为了确保如下代码成立，由于<code>Arrary.prototype.push</code>的返回为一个数字，而<code>Arrary.prototype.forEach</code>方法期望其回调的返回类型是<code>void</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> src = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> dst = [<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">src.<span class="title function_">forEach</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;dst.<span class="title function_">push</span>(el)&#125;);</span><br></pre></td></tr></table></figure><h1 id="类（Class）"><a href="#类（Class）" class="headerlink" title="类（Class）"></a>类（Class）</h1><p>TypeScript中的类和Java的类相似</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="comment">// 声明成员变量</span></span><br><span class="line"><span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line"><span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成员方法</span></span><br><span class="line"><span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫：<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>，今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁了`</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line"><span class="attr">grade</span>:<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span>,grade:<span class="built_in">string</span></span>) &#123;</span><br><span class="line"><span class="variable language_">super</span>(name,age);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">grader</span> = grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">study</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>正在学习中`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫：<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>，今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁了，正在上<span class="subst">$&#123;<span class="variable language_">this</span>.grade&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码包含了：成员变量声明，构造函数声明，成员方法声明，成员变量继承，成员方法重写</p><h2 id="属性修饰符"><a href="#属性修饰符" class="headerlink" title="属性修饰符"></a>属性修饰符</h2><p>和Java类似，TypeScript中也有属性修饰符</p><table><thead><tr><th>修饰符</th><th>含义</th><th>具体规则</th></tr></thead><tbody><tr><td>public（默认）</td><td>公共属性</td><td>可以被：类内部、子类、类外部访问</td></tr><tr><td>protected</td><td>受保护属性</td><td>可以被：类内部、子类访问</td></tr><tr><td>private</td><td>私有属性</td><td>可以被：类内部访问</td></tr><tr><td>readonly</td><td>只读属性</td><td>属性无法修改</td></tr></tbody></table><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">gender</span>:<span class="built_in">string</span>;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性简写（成员变量简写）"><a href="#属性简写（成员变量简写）" class="headerlink" title="属性简写（成员变量简写）"></a>属性简写（成员变量简写）</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> name: <span class="built_in">string</span>, <span class="keyword">public</span> age: <span class="built_in">number</span>, <span class="keyword">protected</span> gender: <span class="built_in">string</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>概念和Java中的类似（都是面向对象编程OOP）：</p><ul><li><p>抽象类不能被实例化（new），其意义是可以被继承，抽象类中可以有普通方法，也可以有抽象方法。</p></li><li><p>有抽象方法的类一定是抽象类。</p></li><li><p>继承抽象类的实例必须要实现抽象类中的方法</p></li></ul><p>格式：</p><p>抽象类定义：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> 抽象类名 &#123;&#125;</span><br></pre></td></tr></table></figure><p>抽象类方法定义：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> 方法名:返回值类型;</span><br></pre></td></tr></table></figure><p>抽象类的实现：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名 <span class="keyword">extends</span> 抽象类 &#123;&#125;</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Package</span> &#123;</span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> weight:<span class="built_in">number</span></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象方法</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="title function_">calculate</span>():<span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体方法</span></span><br><span class="line"><span class="title function_">printInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`包裹重量为<span class="subst">$&#123;<span class="variable language_">this</span>.weight&#125;</span>kg，运费为<span class="subst">$&#123;calculate()&#125;</span>元`</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StandardPackage</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Package</span> &#123;</span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">weight:<span class="built_in">number</span>,<span class="keyword">public</span> unitPrice:<span class="built_in">number</span></span>) &#123;<span class="variable language_">super</span>(weight)&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现抽象方法</span></span><br><span class="line"><span class="title function_">calculate</span>():<span class="built_in">number</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">weight</span> * <span class="variable language_">this</span>.<span class="property">unitPrice</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="title class_">StandardPackage</span>(<span class="number">20</span>,<span class="number">15</span>);</span><br><span class="line">s1.<span class="title function_">printInfo</span>();</span><br></pre></td></tr></table></figure><h1 id="接口（Interface）"><a href="#接口（Interface）" class="headerlink" title="接口（Interface）"></a>接口（Interface）</h1><p>interface是一种定义结构的方式，主要作用是为：类、对象、函数等规定一种契约，这样可以确保代码的一致性和类型安全，但要注意interface只能定义格式，<font color='red'>不能包含任何实现</font></p><p>格式：</p><p>接口定义：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> 接口名 &#123;&#125;</span><br></pre></td></tr></table></figure><p>类接口实现：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名 <span class="keyword">implements</span> 接口名 &#123;&#125;</span><br></pre></td></tr></table></figure><p>对象接口实现（很像之前学的<code>type</code>）：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 对象名:接口名 = &#123;&#125;</span><br></pre></td></tr></table></figure><p>函数接口实现：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 函数名:接口名 = <span class="function">(<span class="params">形参</span>) =&gt;</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><p>实例：</p><p>类接口实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line"><span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line"><span class="title function_">speak</span>(<span class="attr">n</span>:<span class="built_in">number</span>):<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name:<span class="built_in">string</span>,<span class="keyword">public</span> age:<span class="built_in">number</span></span>) &#123;&#125;;</span><br><span class="line">    <span class="title function_">speak</span>(<span class="params">n:<span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i &lt; n;i++) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫：<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>，今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁了`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">p1.<span class="title function_">speak</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>对象接口实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">interface UserInterface &#123;</span><br><span class="line">name:string;</span><br><span class="line">readonly gender:string;</span><br><span class="line">age?:number;</span><br><span class="line"></span><br><span class="line">run:(n:number) =&gt; void;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const user:UserInterface = &#123;</span><br><span class="line">name:&quot;张三&quot;,</span><br><span class="line">gender:&quot;男&quot;,</span><br><span class="line">age:18,</span><br><span class="line">run(n): &#123;</span><br><span class="line">console.log(`跑了$&#123;n&#125;米`)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数接口实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">CountInterface</span> &#123;</span><br><span class="line">(<span class="attr">a</span>:<span class="built_in">number</span>,<span class="attr">b</span>:<span class="built_in">number</span>):numbner;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">count</span>:<span class="title class_">CountInterface</span> = <span class="function">(<span class="params">x,y</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h2><p>格式：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> 接口1 &#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> 接口2 <span class="keyword">extends</span> 接口1 &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line"><span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">StudentInterface</span> <span class="keyword">extends</span> <span class="title class_">PersonInterface</span> &#123;</span><br><span class="line"><span class="attr">grade</span>:<span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">s1</span>:<span class="title class_">StudentInterface</span> = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line"><span class="attr">grade</span>:<span class="string">&#x27;大二&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口合并"><a href="#接口合并" class="headerlink" title="接口合并"></a>接口合并</h2><p>格式：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> 接口1 &#123;</span><br><span class="line">属性<span class="number">1</span>:属性类型;</span><br><span class="line">属性<span class="number">2</span>:属性类型;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> 接口1 &#123;</span><br><span class="line">属性<span class="number">3</span>:属性类型;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，<code>接口1</code>中会有属性1、2、3</p><h2 id="interface和type的区别"><a href="#interface和type的区别" class="headerlink" title="interface和type的区别"></a>interface和type的区别</h2><p>相同点：</p><ol><li>interface和type都可以用于定义对象结构，两者在许多场景中是可以互换的</li></ol><p>不同点：</p><ol><li>interface：更专注于定义对象和类的结构，支持继承、合并</li><li>type：可以定义类型别名、联合类型、交叉类型，但不支持继承和自动合并</li></ol><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>泛型允许在定义函数、类或接口时，使用类型参数来表示未指定的类型，这些参数在具体使用时才被指定具体的类型，泛型能让同一段代码适用于多种类型，同时仍然保持类型的安全性</p><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> logMessage&lt;T&gt;(<span class="attr">data</span>:T):T &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logMessage&lt;<span class="built_in">number</span>&gt;(<span class="number">100</span>);</span><br><span class="line">logMessage&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Hello&quot;</span>);</span><br></pre></td></tr></table></figure><p>多个泛型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> logMessage&lt;T,U&gt;(<span class="attr">data1</span>: T,<span class="attr">data2</span>: U): T | U &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data1,data2);</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Date</span>.<span class="title function_">now</span>() % <span class="number">2</span> ? data1 : data2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(logMessage&lt;<span class="built_in">number</span>,<span class="built_in">boolean</span>&gt;(<span class="number">100</span>,<span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(logMessage&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt;(<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;World&quot;</span>));</span><br></pre></td></tr></table></figure><p>接口泛型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonInterface</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line"><span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line"><span class="attr">extraInfo</span>:T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>:<span class="title class_">PersonInterface</span>&lt;<span class="built_in">number</span>&gt; &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">16</span>,</span><br><span class="line"><span class="attr">extraInfo</span>:<span class="number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类泛型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name:<span class="built_in">string</span>,<span class="keyword">public</span> age:<span class="built_in">string</span>,<span class="keyword">public</span> extraInfo:T</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>，今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁了`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(extraInfo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;张三&quot;</span>,<span class="number">15</span>,<span class="string">&quot;吃饭&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="类型定义文件（-d-ts文件）"><a href="#类型定义文件（-d-ts文件）" class="headerlink" title="类型定义文件（.d.ts文件）"></a>类型定义文件（.d.ts文件）</h1><p>类型声明文件是TypeScript中的一种特殊文件，通常以.d.ts作为拓展名。它的主要作用是为现有的JavaScript代码提供类型信息，使得TypeScript能够在使用这些JavaScript库或模块时进行类型检查和提示</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">mul</span>(<span class="params">a,b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a*b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a:<span class="built_in">number</span>,b:<span class="built_in">number</span></span>):<span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">mul</span>(<span class="params">a:<span class="built_in">number</span>,b:<span class="built_in">number</span></span>):<span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;add,mul&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;add,mul&#125; <span class="keyword">from</span> <span class="string">&quot;./demo.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x = <span class="title function_">add</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> y = <span class="title function_">mul</span>(<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x,y)</span><br></pre></td></tr></table></figure><h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><ol><li>装饰器本质是一种特殊的函数，它可以对：类、属性、方法、参数进行拓展，同时能让代码更简洁</li><li>目前，装饰器依然是实验性特性，需要开发者手动调整配置，来开启装饰器支持</li><li>装饰器共有5种：<ol><li>类装饰器</li><li>属性装饰器</li><li>方法装饰器</li><li>访问器装饰器</li><li>参数装饰器</li></ol></li></ol><p>Tips：虽然<code>TypeScript5.0</code>中可以直接使用类装饰器，但是为了确保其他装饰器可用，现阶段使用时，仍建议使用<code>experimentalDecorators</code>配置来开启装饰器支持，而且不排除在未来的版本中，官方会进一步调整装饰器的相关语法</p><h2 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>类装饰器是一个应用在类声明上的函数，可以为类添加额外的功能，或添加额外的逻辑</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Demo函数会在Person类定义时执行</span></span><br><span class="line"><span class="comment">参数说明：</span></span><br><span class="line"><span class="comment">target参数是被装饰的类，即Person</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params">target:<span class="built_in">Function</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(target);    <span class="comment">// 输出Person这个类</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Demo</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name:<span class="built_in">string</span>,<span class="keyword">public</span> age:<span class="built_in">number</span></span>) &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用举例"><a href="#引用举例" class="headerlink" title="引用举例"></a>引用举例</h3><p>需求：定义一个装饰器，实现Person实例调用<code>toString</code>时返回<code>JSON.stringify</code>的执行结果</p><p>没有使用装饰器的代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name:<span class="built_in">string</span>,<span class="keyword">public</span> age:<span class="built_in">number</span></span>) &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="title function_">toString</span>());<span class="comment">// 返回值为[object Object]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(p1));<span class="comment">// 返回值为：&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:18&#125;</span></span><br></pre></td></tr></table></figure><p>使用装饰器的代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">CustomString</span>(<span class="params">target:<span class="built_in">Function</span></span>) &#123;</span><br><span class="line">    target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CustomString</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name:<span class="built_in">string</span>,<span class="keyword">public</span> age:<span class="built_in">number</span></span>) &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="title function_">toString</span>()); <span class="comment">// &#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:18&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>类装饰器有返回值：若类装饰器返回一个新的类，那这个新类将替换掉被装饰的类</p><p>类装饰器无返回值：若类装饰器无返回值或返回undefined，那被装饰的类不会被替换</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">class</span> &#123;</span><br><span class="line"><span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">200</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">300</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">400</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@demo</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>);<span class="comment">// 返回值为：test类</span></span><br></pre></td></tr></table></figure><h3 id="构造类型（自定义类型）"><a href="#构造类型（自定义类型）" class="headerlink" title="构造类型（自定义类型）"></a>构造类型（自定义类型）</h3><p>在TypeScript中，Function类型所表示的范围十分广泛，包括：普通函数、箭头函数、方法等，但并非所有Function类型的函数都可以被<code>new</code>关键字实例化，例如箭头函数是不能被实例化的，那么TypeScript中该如何声明一个构造类型呢？</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">new 表示：该类型是可以用new操作符调用的</span></span><br><span class="line"><span class="comment">...args表示：构造器可以接收任意数量的参数</span></span><br><span class="line"><span class="comment">any[]表示：构造器可以接收任意类型的参数</span></span><br><span class="line"><span class="comment">&#123;&#125;表示：返回类型是对象（非null、非undefined对象）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Constructor</span> = <span class="keyword">new</span> (...<span class="attr">args</span>:<span class="built_in">any</span>[]) =&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">fn:Constructor</span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;&#125;;</span><br><span class="line"><span class="title function_">test</span>(<span class="title class_">Person</span>);</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个构造类型，且包含一个静态属性</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Constructor</span> = &#123;</span><br><span class="line"><span class="title function_">new</span>(...<span class="attr">args</span>: <span class="built_in">any</span>): &#123;&#125;;</span><br><span class="line"><span class="attr">el</span>:<span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">fn:Constructor</span>)&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="attr">el</span>:<span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="title class_">Person</span>)</span><br></pre></td></tr></table></figure><h3 id="替换被装饰的类"><a href="#替换被装饰的类" class="headerlink" title="替换被装饰的类"></a>替换被装饰的类</h3><p>对于高级一些的装饰器，不仅仅是覆盖一个原型上的方法，还要有更多功能，例如添加新的方法和状态</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需求：设计一个LogTime装饰器，可以给实例添加一个属性，用于记录实例对象的创建时间，再添加一个方法用于读取创建时间</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Constructor</span> = <span class="keyword">new</span> (...<span class="attr">args</span>:<span class="built_in">any</span>[]) =&gt; &#123;&#125;;<span class="comment">// 创建类型约束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title class_">LogTime</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Constructor</span>&gt;(<span class="attr">target</span>:T) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">extends</span> target &#123;<span class="comment">// 返回一个类，类继承自target（被修饰的类）</span></span><br><span class="line">        <span class="attr">createdTime</span>:<span class="title class_">Date</span>;<span class="comment">// 添加一个类属性，用于记录时间</span></span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">...args:<span class="built_in">any</span>[]</span>)&#123;</span><br><span class="line">            <span class="variable language_">super</span>(args);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">createdTime</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">// 将创建类的时间保存</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">getTime</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`该对象创建于<span class="subst">$&#123;<span class="variable language_">this</span>.createdTime&#125;</span>`</span>;<span class="comment">// 用于打印结果</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@LogTime</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name:<span class="built_in">string</span>,<span class="keyword">public</span> age:<span class="built_in">number</span></span>) &#123;&#125;;</span><br><span class="line">    <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>，今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁了`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">16</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1);</span><br><span class="line"><span class="comment">// @ts-ignore   // 取消检查</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="title function_">getTime</span>());</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="装饰器工厂"><a href="#装饰器工厂" class="headerlink" title="装饰器工厂"></a>装饰器工厂</h2><p>修饰器工程是一个<font color='red'>返回修饰器函数的函数</font>，可以为修饰器添加参数，可以更灵活地控制装饰器的行为</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需求：定义一个LogInfo类装饰器工厂，实现Person实例可以调用到introduce方法，且introduce中输出内容的次数，由LogInfo接收的参数决定</span></span><br><span class="line"><span class="comment">// 需求：设计一个LogTime装饰器，可以给实例添加一个属性，用于记录实例对象的创建时间，再添加一个方法用于读取创建时间</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Constructor</span> = <span class="keyword">new</span> (...<span class="attr">args</span>:<span class="built_in">any</span>[]) =&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LogInfo</span>(<span class="params">n:<span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">target:Constructor</span>) &#123;</span><br><span class="line">        target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">introduce</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>，我今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁了`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@LogInfo</span>(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name:<span class="built_in">string</span>,<span class="keyword">public</span> age:<span class="built_in">number</span></span>) &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">12</span>);</span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line">p1.<span class="title function_">introduce</span>();</span><br></pre></td></tr></table></figure><h2 id="装饰器组合"><a href="#装饰器组合" class="headerlink" title="装饰器组合"></a>装饰器组合</h2><p>装饰器可以组合使用，执行顺序为：先<code>由上到下</code>的执行所有的装饰器工厂，依次获取到装饰器，然后再<code>由下到上</code>执行所有的装饰器</p><h2 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h2><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数说明：</span></span><br><span class="line"><span class="comment">target：对于静态属性来说是类，对于实例属性来说是类的原型对象</span></span><br><span class="line"><span class="comment">propertyKey：属性名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params">target:<span class="built_in">object</span>,propertyKey:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(target);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(propertyKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@demo</span> <span class="keyword">public</span> <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line"><span class="meta">@demo</span> <span class="keyword">static</span> <span class="attr">school</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性遮蔽"><a href="#属性遮蔽" class="headerlink" title="属性遮蔽"></a>属性遮蔽</h3><p>如下所示：</p><p>代码1：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> value = <span class="number">99</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        value = val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">age</span>);    <span class="comment">// 18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span>);  <span class="comment">// 99</span></span><br></pre></td></tr></table></figure><p>代码2：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> value = <span class="number">99</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        value = val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">age</span>);    <span class="comment">// 18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span>);  <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><p>代码1和代码2输出结果的不同就是由于属性遮蔽导致的</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需求：实例对象的属性被修改后，会有提示</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">State</span>(<span class="params">target:<span class="built_in">object</span>,propertyKey:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> key = <span class="string">`__<span class="subst">$&#123;propertyKey&#125;</span>`</span><span class="comment">// 保证实例的属性之间互相独立</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target,propertyKey,&#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>[key];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;propertyKey&#125;</span>的值被修改了，最新的值为<span class="subst">$&#123;newValue&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">this</span>[key] = newValue</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">public</span> <span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);   <span class="comment">// age的值被修改了，最新的值为18</span></span><br><span class="line">p1.<span class="property">age</span> = <span class="number">19</span>;    <span class="comment">// age的值被修改了，最新的值为19</span></span><br></pre></td></tr></table></figure><h2 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h2><h3 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    参数说明：</span></span><br><span class="line"><span class="comment">        target：对于静态方法来说值是类，对于实例方法来说值是原型对象</span></span><br><span class="line"><span class="comment">        propertyKey：方法的名称</span></span><br><span class="line"><span class="comment">        descriptor：方法的描述对象，其中value属性是被装饰的方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params">target:<span class="built_in">object</span>,propertyKey:<span class="built_in">string</span>,descriptor:PropertyDescriptor</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(target);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(propertyKey);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name:<span class="built_in">string</span>,<span class="keyword">public</span> age:<span class="built_in">number</span></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Demo修饰实例方法</span></span><br><span class="line">    <span class="meta">@Demo</span> <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫：<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>，今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁了`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Demo修饰静态方法</span></span><br><span class="line">    <span class="meta">@Demo</span> <span class="keyword">static</span> <span class="title function_">isAdult</span>(<span class="params">age:<span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> age&gt;= <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取方法本身或修改方法本身"><a href="#获取方法本身或修改方法本身" class="headerlink" title="获取方法本身或修改方法本身"></a>获取方法本身或修改方法本身</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params">target:<span class="built_in">object</span>,propertyKey:<span class="built_in">string</span>,descriptor:PropertyDescriptor</span>) &#123;</span><br><span class="line">    <span class="comment">// 存储原始方法</span></span><br><span class="line">    <span class="keyword">const</span> originnal = descriptor.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改原始方法</span></span><br><span class="line">    descriptor.<span class="property">value</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;修改了原始方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name:<span class="built_in">string</span>,<span class="keyword">public</span> age:<span class="built_in">number</span></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Demo修饰实例方法</span></span><br><span class="line">    <span class="meta">@Demo</span> <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫：<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>，今年<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>岁了`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Demo修饰静态方法</span></span><br><span class="line">    <span class="meta">@Demo</span> <span class="keyword">static</span> <span class="title function_">isAdult</span>(<span class="params">age:<span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> age&gt;= <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">p1.<span class="title function_">speak</span>(); <span class="comment">// 控制台：修改了原始方法</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TS </tag>
            
            <tag> TypeScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2025/04/05/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2025/04/05/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>资料来源：<a href="https://heuqqdmbyk.feishu.cn/wiki/space/7413668442156498972?ccm_open_type=lark_wiki_spaceLink&open_tab_from=wiki_home">https://heuqqdmbyk.feishu.cn/wiki/space/7413668442156498972?ccm_open_type=lark_wiki_spaceLink&amp;open_tab_from=wiki_home</a></p><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>数据库：DataBase(DB)，是存储和管理数据的仓库</p><p>数据库管理系统：DataBase Management System(DBMS)，操纵和管理数据库的大型软件</p><p>SQL：Structured Query Language，操作关系型数据库的编程语言，定义了一套操作关系型数据库统一标准</p><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>教程来自：<a href="https://heuqqdmbyk.feishu.cn/wiki/UmHJwg2cqi0kYUkOFDIcHGfvnld">05-Web后端基础(数据库) - 飞书云文档</a></p><ol><li>将数据库软件压缩包解压</li></ol><p><img src="/img/MySQL/01.png" alt="01"></p><ol start="2"><li>将软件文件夹中的bin文件添加到环境变量中</li></ol><img src="/img/MySQL/02.png" alt="02" style="zoom:50%;" /><ol start="3"><li>以管理员身份打开CMD，并依次输入以下命令：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize-insecure</span><br><span class="line">mysqld -install</span><br><span class="line">net start mysql</span><br><span class="line">mysqladmin -u root password 1234</span><br><span class="line">mysql -uroot -p1234</span><br></pre></td></tr></table></figure><ol start="4"><li>登录参数：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u用户名 -p密码 -h要连接的mysql服务器的ip地址(默认127.0.0.1) -P端口号(默认3306)</span><br></pre></td></tr></table></figure><h2 id="MySQL数据模型"><a href="#MySQL数据模型" class="headerlink" title="MySQL数据模型"></a>MySQL数据模型</h2><ul><li>关系型数据库：建立在关系模型基础上，由多张相互连接的二维表组成的数据库</li><li>特点：<ul><li>使用表存储数据，格式统一，便于维护</li><li>使用SQL语言操作，标准统一，使用方便，可用于复杂查询</li></ul></li></ul><p>创建数据库命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database xxxx;</span><br></pre></td></tr></table></figure><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><ul><li>SQL：一门操作关系型数据库的编程语言，定义操作所有关系型数据库的统一标准</li><li>分类：</li></ul><table><thead><tr><th>分类</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td>DDL</td><td>Data Definition Language</td><td>数据定义语言，用来定义数据库对象（数据库，表，字段）</td></tr><tr><td>DML</td><td>Data Manipulation Language</td><td>数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td>DQL</td><td>Data Query Language</td><td>数据查询语言，用来查询数据库表的记录</td></tr><tr><td>DCL</td><td>Data Control Language</td><td>数据控制语言，用来创建数据库用户、控制数据库的访问权限</td></tr></tbody></table><h3 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h3><h4 id="库操作"><a href="#库操作" class="headerlink" title="库操作"></a>库操作</h4><ul><li>操作语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询所有数据库(注意复数形式)</span></span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询当前数据库(注意括号)</span></span><br><span class="line"><span class="keyword">select</span> database();</span><br><span class="line"></span><br><span class="line"><span class="comment">--使用/切换数据库</span></span><br><span class="line">use 数据库名;</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建数据库(括号内表示可选属性，创建数据库默认字符集就是utf8mb4)</span></span><br><span class="line"><span class="keyword">create</span> database [if <span class="keyword">not</span> <span class="keyword">exists</span>] 数据库名 [<span class="keyword">default</span> charset utf8mb4];</span><br><span class="line"></span><br><span class="line"><span class="comment">--删除数据库</span></span><br><span class="line"><span class="keyword">drop</span> database [if <span class="keyword">exists</span>] 数据库名;</span><br></pre></td></tr></table></figure><h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><ul><li>创建表的语法：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tablename(</span><br><span class="line">字段<span class="number">1</span> 字段类型 [约束] [comment 字段<span class="number">1</span>注释],</span><br><span class="line">......</span><br><span class="line">字段<span class="number">2</span> 字段类型 [约束] [comment 字段<span class="number">2</span>注释]</span><br><span class="line">)[comment 表注释];</span><br></pre></td></tr></table></figure><p>案例说明：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">    id <span class="type">int</span> comment <span class="string">&#x27;ID，唯一标识&#x27;</span>,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;用户名，长度限制50&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;姓名，长度限制10&#x27;</span>,</span><br><span class="line">    age <span class="type">int</span> comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    gender <span class="type">char</span>(<span class="number">1</span>) comment <span class="string">&#x27;性别&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;用户信息表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>最终结构如下：</p><table><thead><tr><th>id</th><th>username</th><th>name</th><th>age</th><th>gender</th></tr></thead><tbody><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr></tbody></table><h5 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h5><ul><li>约束：约束时作用于表中字段上的规则，用于限制存储在表中的数据</li><li>目的：保证数据库中数据的正确性、有效性和完整性</li></ul><p>常见约束如下：</p><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段值不能为null</td><td>not null</td></tr><tr><td>唯一约束</td><td>保证字段的所有数据都是唯一、不重复的</td><td>unique</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一表示，要求非空且唯一</td><td>primary key</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段值，则采用默认值</td><td>default</td></tr><tr><td>外键约束</td><td>让两张表的数据建立连接，保证数据的一致性和完整性</td><td>foreign key</td></tr></tbody></table><p>将之前的案例进行优化：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key comment <span class="string">&#x27;ID，唯一标识&#x27;</span>,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment <span class="string">&#x27;用户名，长度限制50&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名，长度限制10&#x27;</span>,</span><br><span class="line">    age <span class="type">int</span> comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    gender <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;男&#x27;</span> comment <span class="string">&#x27;性别&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;用户信息表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>想要让主键自动增长，输入<code>auto_increment</code>即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;ID，唯一标识&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><h6 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h6><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td><code>TINYINT</code></td><td>非常小的整数（-128 到 127）</td></tr><tr><td><code>SMALLINT</code></td><td>小整数（-32,768 到 32,767）</td></tr><tr><td><code>MEDIUMINT</code></td><td>中等大小的整数（-8,388,608 到 8,388,607）</td></tr><tr><td><code>INT</code></td><td>普通整数（-2,147,483,648 到 2,147,483,647）</td></tr><tr><td><code>BIGINT</code></td><td>大整数（-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807）</td></tr><tr><td><code>FLOAT</code></td><td>单精度浮点数</td></tr><tr><td><code>DOUBLE</code></td><td>双精度浮点数</td></tr><tr><td><code>DECIMAL</code></td><td>固定小数点数</td></tr></tbody></table><h6 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h6><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td><code>CHAR</code></td><td>定长字符串</td></tr><tr><td><code>VARCHAR</code></td><td>变长字符串</td></tr><tr><td><code>TINYTEXT</code></td><td>非常小的文本</td></tr><tr><td><code>TEXT</code></td><td>小文本</td></tr><tr><td><code>MEDIUMTEXT</code></td><td>中等大小的文本</td></tr><tr><td><code>LONGTEXT</code></td><td>大文本</td></tr><tr><td><code>BINARY</code></td><td>定长二进制数据</td></tr><tr><td><code>VARBINARY</code></td><td>变长二进制数据</td></tr><tr><td><code>TINYBLOB</code></td><td>非常小的BLOB数据</td></tr><tr><td><code>BLOB</code></td><td>小BLOB数据</td></tr><tr><td><code>MEDIUMBLOB</code></td><td>中等大小的BLOB数据</td></tr><tr><td><code>LONGBLOB</code></td><td>大BLOB数据</td></tr><tr><td><code>ENUM</code></td><td>枚举类型</td></tr><tr><td><code>SET</code></td><td>集合类型</td></tr></tbody></table><h6 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h6><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td><code>DATE</code></td><td>日期值（YYYY-MM-DD）</td></tr><tr><td><code>TIME</code></td><td>时间值（HH:MM:SS）</td></tr><tr><td><code>DATETIME</code></td><td>日期和时间值（YYYY-MM-DD HH:MM:SS）</td></tr><tr><td><code>TIMESTAMP</code></td><td>时间戳（YYYY-MM-DD HH:MM:SS），存储从1970年1月1日以来的秒数</td></tr><tr><td><code>YEAR</code></td><td>年份值（YYYY）</td></tr></tbody></table><h6 id="空间数据类型（Spatial-Data-Types）"><a href="#空间数据类型（Spatial-Data-Types）" class="headerlink" title="空间数据类型（Spatial Data Types）"></a>空间数据类型（Spatial Data Types）</h6><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td><code>GEOMETRY</code></td><td>几何数据的通用类型</td></tr><tr><td><code>POINT</code></td><td>一个点</td></tr><tr><td><code>LINESTRING</code></td><td>一条线</td></tr><tr><td><code>POLYGON</code></td><td>多边形</td></tr><tr><td><code>MULTIPOINT</code></td><td>多个点</td></tr><tr><td><code>MULTILINESTRING</code></td><td>多条线</td></tr><tr><td><code>MULTIPOLYGON</code></td><td>多个多边形</td></tr><tr><td><code>GEOMETRYCOLLECTION</code></td><td>几何数据集合</td></tr></tbody></table><h5 id="查询、修改、删除表"><a href="#查询、修改、删除表" class="headerlink" title="查询、修改、删除表"></a>查询、修改、删除表</h5><ul><li>表结构的查询、修改、删除相关语法如下：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;<span class="comment">-- 查询当前数据库的所有表</span></span><br><span class="line"><span class="keyword">desc</span> 表明;<span class="comment">-- 查询表结构</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;<span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 类型(长度) [comment 注释] [约束];<span class="comment">-- 添加字段</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 字段名 新数据类型(长度);<span class="comment">-- 修改字段类型</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 旧字段名 新字段名 类型(长度) [comment 注释] [约束];<span class="comment">-- 修改字段名与字段类型</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">column</span> 字段名;<span class="comment">-- 删除字段</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 rename <span class="keyword">to</span> 新表名;<span class="comment">-- 修改表名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> [if <span class="keyword">exists</span>] 表名;<span class="comment">-- 删除表</span></span><br></pre></td></tr></table></figure><h3 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h3><ul><li>DML英文全称是Data Manipulation Language（数据操作语言），用来对数据库中表的数据记录进行增、删、改操作</li></ul><ol><li>添加数据（INSERT）</li><li>修改数据（UPDATE）</li><li>删除数据（DELETE）</li></ol><h4 id="添加数据——Insert"><a href="#添加数据——Insert" class="headerlink" title="添加数据——Insert"></a>添加数据——Insert</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 指定字段添加数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段名<span class="number">1</span>, 字段名<span class="number">2</span>) <span class="keyword">values</span> (值<span class="number">1</span>, 值<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 全部字段添加数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 批量添加数据(指定字段)</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 (字段名<span class="number">1</span>, 字段名<span class="number">2</span>) <span class="keyword">values</span> (值<span class="number">1</span>, 值<span class="number">2</span>),(值<span class="number">1</span>, 值<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 批量添加数据(全部字段)</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure><p>修改数据——update</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改数据</span></span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段名<span class="number">1</span> <span class="operator">=</span> 值<span class="number">1</span> , 字段名<span class="number">2</span> <span class="operator">=</span> 值<span class="number">2</span> , ... [<span class="keyword">where</span> 条件];</span><br></pre></td></tr></table></figure><p>注意：修改语句的条件可以有，也可以没有，如果没有条件，则会<em>修改整张表的所有数据</em></p><p>删除数据——delete</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除数据</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件];</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>DELETE 语句的条件可以有，也可以没有，如果没有条件，则<em>删除整张表的所有数据</em></li><li>DELETE 语句不能删除某一个字段的值（如果要操作，可以使用update，将该字段值设为NULL）</li></ol><h3 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h3><ul><li>DQL英文全称是Data Query Language（数据查询语言），用来查询数据库表中的记录</li><li>关键字：Select</li></ul><p>完整的DQL语句语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">表名列表</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">分组字段列表</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">分组后条件列表</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">排序字段列表</span><br><span class="line">limit</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><ul><li>基本查询：<code>select ... from ...</code></li><li>条件查询：<code>where</code></li><li>分组查询：<code>group by</code></li><li>排序查询：<code>order by</code></li><li>分页查询：<code>limit</code></li></ul><h4 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询多个字段</span></span><br><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,字段<span class="number">3</span> <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询所有字段(通配符)</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为查询字段设置别名，as关键字可以省略</span></span><br><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span> [<span class="keyword">as</span> 别名<span class="number">1</span>], 字段<span class="number">2</span> [<span class="keyword">as</span> 别名<span class="number">2</span>] <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span> 别名<span class="number">1</span>,字段<span class="number">2</span> 别名<span class="number">2</span> <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 去除重复记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 字段列表 <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 条件查询</span></span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件列表;</span><br></pre></td></tr></table></figure><p>条件列表中可以使用比较运算符和逻辑运算符</p><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !&#x3D;</td><td>不等于</td></tr><tr><td>between … and …</td><td>在某个范围之内（含最小值，最大值）</td></tr><tr><td>in(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>like 占位符</td><td>模糊匹配(_匹配单个字符, %匹配任意个字符)</td></tr><tr><td>is null</td><td>是null值（非空值 is not null）</td></tr></tbody></table><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>and 或 &amp;&amp;</td><td>并且(多个条件同时成立)</td></tr><tr><td>or 或 ||</td><td>或者(多个条件任意一个成立)</td></tr><tr><td>not 或 !</td><td>非 , 不是</td></tr></tbody></table><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> xxx <span class="keyword">WHERE</span> 字段名 <span class="operator">=</span> xxx;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> xxx <span class="keyword">WHERE</span> 字段名 <span class="operator">&lt;&gt;</span> xxx; <span class="comment">-- 不等于</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> xxx <span class="keyword">WHERE</span> 字段名 <span class="operator">&gt;</span> xxx;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> xxx <span class="keyword">WHERE</span> 字段名 <span class="operator">&gt;=</span> xxx;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> xxx <span class="keyword">WHERE</span> 字段名 <span class="operator">&lt;</span> xxx;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> xxx <span class="keyword">WHERE</span> 字段名 <span class="operator">&lt;=</span> xxx;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> xxx <span class="keyword">WHERE</span> 字段名 <span class="keyword">BETWEEN</span> xxx <span class="keyword">AND</span> xxx;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> xxx <span class="keyword">WHERE</span> 字段名 <span class="keyword">IN</span> (xxx, xxx, xxx);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> xxx <span class="keyword">WHERE</span> 字段名 <span class="keyword">LIKE</span> <span class="string">&#x27;xxx%&#x27;</span>; <span class="comment">-- 以xxx开头</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> xxx <span class="keyword">WHERE</span> 字段名 <span class="keyword">LIKE</span> <span class="string">&#x27;%xxx&#x27;</span>; <span class="comment">-- 以xxx结尾</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> xxx <span class="keyword">WHERE</span> 字段名 <span class="keyword">LIKE</span> <span class="string">&#x27;%xxx%&#x27;</span>; <span class="comment">-- 包含xxx</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> xxx <span class="keyword">WHERE</span> 字段名 <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;xxx%&#x27;</span>; <span class="comment">-- 不以xxx开头</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> xxx <span class="keyword">WHERE</span> 字段名 <span class="operator">=</span> xxx <span class="keyword">AND</span> 字段名<span class="number">2</span> <span class="operator">=</span> xxx;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> xxx <span class="keyword">WHERE</span> 字段名 <span class="operator">=</span> xxx <span class="keyword">OR</span> 字段名<span class="number">2</span> <span class="operator">=</span> xxx;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> xxx <span class="keyword">WHERE</span> 字段名 <span class="operator">=</span> xxx <span class="keyword">AND</span> (字段名<span class="number">2</span> <span class="operator">=</span> xxx <span class="keyword">OR</span> 字段名<span class="number">3</span> <span class="operator">=</span> xxx);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> xxx <span class="keyword">WHERE</span> <span class="keyword">NOT</span> (字段名 <span class="operator">=</span> xxx);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> xxx <span class="keyword">WHERE</span> 字段名 <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> xxx <span class="keyword">WHERE</span> 字段名 <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> xxx <span class="keyword">WHERE</span> (字段名 <span class="operator">=</span> xxx <span class="keyword">OR</span> 字段名<span class="number">2</span> <span class="operator">=</span> xxx) <span class="keyword">AND</span> 字段名<span class="number">3</span> <span class="keyword">BETWEEN</span> xxx <span class="keyword">AND</span> xxx;</span><br></pre></td></tr></table></figure><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p>聚合函数：将一列数据作为一个整体，进行纵向计算</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量（NULL值不统计）</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> 表名;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(字段名) <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(字段名) <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(字段名) <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(字段名) <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(字段名) <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(字段名) <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--分组查询</span></span><br><span class="line"><span class="keyword">select</span> 字段列表<span class="keyword">from</span> 表名[<span class="keyword">where</span> 条件列表] <span class="keyword">group</span> <span class="keyword">by</span> 分组字段名 [<span class="keyword">having</span> 分组后过滤条件]</span><br></pre></td></tr></table></figure><ul><li>where与having的区别：<ol><li>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以</li></ol></li></ul><p>单独使用group by：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> 表名 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 字段名;</span><br><span class="line"><span class="keyword">SELECT</span> 字段名, <span class="built_in">SUM</span>(字段名<span class="number">2</span>) <span class="keyword">FROM</span> 表名 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 字段名;</span><br></pre></td></tr></table></figure><p>结合having使用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> 表名 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 字段名 <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SELECT</span> 字段名, <span class="built_in">SUM</span>(字段名<span class="number">2</span>) <span class="keyword">FROM</span> 表名 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 字段名 <span class="keyword">HAVING</span> <span class="built_in">SUM</span>(字段名<span class="number">2</span>) <span class="operator">&gt;</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>实际案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> gender, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br></pre></td></tr></table></figure><p>结果：</p><table><thead><tr><th>gender</th><th>count(*)</th></tr></thead><tbody><tr><td>Male</td><td>45</td></tr><tr><td>Female</td><td>35</td></tr><tr><td>Other</td><td>5</td></tr></tbody></table><p>解释：</p><ol><li><p>SELECT gender, count(*): 选择<code>gender</code>列，并计算每个性别的员工数量。</p></li><li><p>FROM emp: 数据来源于<code>emp</code>表。</p></li><li><p>GROUP BY gender: 按照<code>gender</code>列对数据进行分组。</p></li></ol><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 排序查询</span></span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件列表] [<span class="keyword">group</span> <span class="keyword">by</span> 分组字段名 <span class="keyword">having</span> 分组后过滤条件] <span class="keyword">order</span> <span class="keyword">by</span> 排序字段 排序方式</span><br></pre></td></tr></table></figure><ul><li>排序方式：升序（asc），降序（desc）；默认为升序asc，也就是可以不写采用默认方式</li></ul><p>举例：</p><p>假设表为：</p><table><thead><tr><th>department</th><th>total_employees</th></tr></thead><tbody><tr><td>Sales</td><td>5</td></tr><tr><td>IT</td><td>5</td></tr><tr><td>Marketing</td><td>3</td></tr><tr><td>HR</td><td>2</td></tr><tr><td>Finance</td><td>2</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> total_employees</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> total_employees <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><table><thead><tr><th>department</th><th>total_employees</th></tr></thead><tbody><tr><td>Sales</td><td>15</td></tr><tr><td>Marketing</td><td>12</td></tr><tr><td>IT</td><td>10</td></tr><tr><td>HR</td><td>5</td></tr><tr><td>Finance</td><td>3</td></tr></tbody></table><p>说明：</p><ol><li><p>SELECT department, COUNT(*) AS total_employees: 选择<code>department</code>列，并计算每个部门的员工数量，结果列名为<code>total_employees</code>。</p></li><li><p>FROM employees: 数据来源于<code>employees</code>表。</p></li><li><p>GROUP BY department: 按照<code>department</code>列对数据进行分组。</p></li><li><p>HAVING COUNT(*) &gt; 1: 过滤分组后的结果，只保留员工总数大于1的部门。</p></li><li><p>ORDER BY total_employees DESC: 按照<code>total_employees</code>列进行降序排列</p></li></ol><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 排序查询</span></span><br><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件] [<span class="keyword">group</span> <span class="keyword">by</span> 分组字段 <span class="keyword">having</span> 过滤条件] [<span class="keyword">order</span> <span class="keyword">by</span> 排序字段] limit 起始索引,查询记录数;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>起始索引从0开始</li><li>分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT</li><li>如果起始索引为0，起始索引可以省略，直接简写为 <code>limit 10</code></li></ol><p>举例：</p><p>假设表为：</p><table><thead><tr><th>id</th><th>name</th><th>department</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>Sales</td></tr><tr><td>2</td><td>Bob</td><td>Sales</td></tr><tr><td>3</td><td>Charlie</td><td>Marketing</td></tr><tr><td>4</td><td>David</td><td>Marketing</td></tr><tr><td>5</td><td>Eva</td><td>IT</td></tr><tr><td>6</td><td>Frank</td><td>IT</td></tr><tr><td>7</td><td>Grace</td><td>IT</td></tr><tr><td>8</td><td>Hannah</td><td>HR</td></tr><tr><td>9</td><td>Ivy</td><td>HR</td></tr><tr><td>10</td><td>Jack</td><td>Finance</td></tr><tr><td>11</td><td>Kevin</td><td>Finance</td></tr><tr><td>12</td><td>Liam</td><td>Sales</td></tr><tr><td>13</td><td>Mia</td><td>Sales</td></tr><tr><td>14</td><td>Nina</td><td>Marketing</td></tr><tr><td>15</td><td>Oliver</td><td>IT</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> total_employees</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> total_employees <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">0</span>, <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><table><thead><tr><th>department</th><th>total_employees</th></tr></thead><tbody><tr><td>Sales</td><td>4</td></tr><tr><td>IT</td><td>4</td></tr><tr><td>Marketing</td><td>3</td></tr></tbody></table><p>解释：</p><ol><li>SELECT department, COUNT(*) AS total_employees：选择 <code>department</code> 列，并计算每个部门的员工总数，结果列名为 <code>total_employees</code>。</li><li>FROM employees：数据来源于 <code>employees</code> 表。</li><li>WHERE department IS NOT NULL：条件是部门不为空。</li><li>GROUP BY department：按照 <code>department</code> 列对数据进行分组。</li><li>HAVING COUNT(*) &gt; 1：过滤分组后的结果，只保留员工总数大于1的部门。</li><li>ORDER BY total_employees DESC：按照员工总数降序排列。</li><li>LIMIT 0, 3：限制查询结果的起始索引为0，并显示前3个记录。</li></ol><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><ul><li>项目开发中，在进行数据库表结构设计时，会根据业务需求以及业务模块之间的关系，分析并设计表结构。由于业务之间相互关联，所以各个表结构之间也存在着各种联系</li><li>多表关系分为三种：<ol><li>一对多（多对一）</li><li>一对一</li><li>多对多</li></ol></li></ul><h4 id="一对多（多对一）"><a href="#一对多（多对一）" class="headerlink" title="一对多（多对一）"></a>一对多（多对一）</h4><ul><li><p>场景：部门与员工的关系（一个部门下有多个员工）</p></li><li><p>实现思路：在数据库表中<code>多</code>的一方（子表），添加字段，来关联一的一方的主键</p></li></ul><h4 id="多表问题"><a href="#多表问题" class="headerlink" title="多表问题"></a>多表问题</h4><ul><li>问题：当父表删除某个数据后，子表依旧会关联父表被删除的数据，导致数据不完整、不一致</li><li>原因：虽然逻辑上，父表与子表关联，但在数据库层面，并未直接建立关联，所以是无法保证数据的一致性和完整性</li><li>解决方案：外键约束</li></ul><h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4><ul><li>可以在创建时或表结构创建完成后，为字段添加外键约束</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表时指定</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">字段名 数据类型,</span><br><span class="line">...</span><br><span class="line">[<span class="keyword">constraint</span>] [外键名称] <span class="keyword">foreign</span> key (外键字段名) <span class="keyword">references</span> 主表 (字段名)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建完表后，添加外键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">constraint</span> 外键名称 <span class="keyword">foreign</span> key (外键字段名) <span class="keyword">references</span> 主表 (字段名);</span><br></pre></td></tr></table></figure><p>dept：</p><table><thead><tr><th>id</th><th>name</th><th>create_time</th><th>update_time</th></tr></thead><tbody><tr><td>1</td><td>学工部</td><td>2023-09-25 09:47:40</td><td>2023-09-25 09:47:40</td></tr><tr><td>2</td><td>教研部</td><td>2023-09-25 09:47:40</td><td>2023-10-09 15:17:04</td></tr><tr><td>3</td><td>咨询部2</td><td>2023-09-25 09:47:40</td><td>2023-11-30 21:26:24</td></tr><tr><td>4</td><td>就业部</td><td>2023-09-25 09:47:40</td><td>2023-09-25 09:47:40</td></tr><tr><td>5</td><td>人事部</td><td>2023-09-25 09:47:40</td><td>2023-09-25 09:47:40</td></tr><tr><td>15</td><td>行政部</td><td>2023-11-30 20:56:37</td><td>2023-11-30 20:56:37</td></tr></tbody></table><p>emp：</p><table><thead><tr><th>id</th><th>username</th><th>password</th><th>name</th><th>gender</th><th>phone</th><th>job</th><th>salary</th><th>image</th><th>entry_date</th><th>dept_id（外键）</th><th>create_time</th><th>update_time</th></tr></thead><tbody><tr><td>1</td><td>shinaian</td><td>123456</td><td>施耐庵</td><td>1</td><td>13309090001</td><td>4</td><td>15000</td><td>5.png</td><td>2000-01-01</td><td>2</td><td>2023-10-20 16:35:33</td><td>2023-11-16 16:11:26</td></tr><tr><td>2</td><td>songjiang</td><td>123456</td><td>宋江</td><td>1</td><td>13309090002</td><td>2</td><td>8600</td><td>01.png</td><td>2015-01-01</td><td>2</td><td>2023-10-20 16:35:33</td><td>2023-10-20 16:35:37</td></tr><tr><td>3</td><td>lujunyi</td><td>123456</td><td>卢俊义</td><td>1</td><td>13309090003</td><td>2</td><td>8900</td><td>01.png</td><td>2008-05-01</td><td>1</td><td>2023-10-20 16:35:33</td><td>2023-10-20 16:35:39</td></tr><tr><td>4</td><td>wuyong</td><td>123456</td><td>吴用</td><td>1</td><td>13309090004</td><td>2</td><td>9200</td><td>01.png</td><td>2007-01-01</td><td>1</td><td>2023-10-20 16:35:33</td><td>2023-10-20 16:35:41</td></tr><tr><td>5</td><td>gongsunsheng</td><td>123456</td><td>公孙胜</td><td>1</td><td>13309090005</td><td>2</td><td>9500</td><td>01.png</td><td>2012-12-05</td><td>2</td><td>2023-10-20 16:35:33</td><td>2023-10-20 16:35:43</td></tr></tbody></table><h5 id="查看表之间关系"><a href="#查看表之间关系" class="headerlink" title="查看表之间关系"></a>查看表之间关系</h5><p><img src="/img/MySQL/03.png" alt="03"></p><h5 id="物理外键"><a href="#物理外键" class="headerlink" title="物理外键"></a>物理外键</h5><ul><li>概念：使用 <code>foreign key</code> 定义外键关联另一张表</li><li>缺点：<ol><li>影响增删改的效率（需要检查外键关系）</li><li>仅用于单节点数据库，不适用于分布式、集群场景</li><li>容易引发数据库的死锁问题，消耗性能</li></ol></li></ul><h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><p>案例：用户与身份证信息的关系</p><p>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他字段放在另一张表中，以提升操作效率</p><p>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</p><p>tb_user：</p><table><thead><tr><th>id</th><th>name</th><th>gender</th><th>phone</th><th>degree</th></tr></thead><tbody><tr><td>1</td><td>白眉鹰王</td><td>1</td><td>18812340001</td><td>初中</td></tr><tr><td>2</td><td>青翼蝠王</td><td>1</td><td>18812340002</td><td>大专</td></tr><tr><td>3</td><td>金毛狮王</td><td>1</td><td>18812340003</td><td>初中</td></tr><tr><td>4</td><td>紫衫龙王</td><td>2</td><td>18812340004</td><td>硕士</td></tr></tbody></table><p>tb_user_card：</p><table><thead><tr><th>id</th><th>nationality</th><th>birthday</th><th>idcard</th><th>issued</th><th>expire_begin</th><th>expire_end</th><th>user_id</th></tr></thead><tbody><tr><td>1</td><td>汉</td><td>1960-11-06</td><td>100000100000100001</td><td>朝阳区公安局</td><td>2000-06-10</td><td>NULL</td><td>1</td></tr><tr><td>2</td><td>汉</td><td>1971-11-06</td><td>100000100000100002</td><td>静安区公安局</td><td>2005-06-10</td><td>2025-06-10</td><td>2</td></tr><tr><td>3</td><td>汉</td><td>1963-11-06</td><td>100000100000100003</td><td>昌平区公安局</td><td>2006-06-10</td><td>NULL</td><td>3</td></tr><tr><td>4</td><td>回</td><td>1980-11-06</td><td>100000100000100004</td><td>海淀区公安局</td><td>2008-06-10</td><td>2028-06-10</td><td>4</td></tr></tbody></table><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><ul><li>案例：学生与课程的关系</li><li>关系：一个学生可以选秀多门课程，一门课程也可以供多个学生选择</li><li>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</li></ul><p>tb_student：</p><table><thead><tr><th>id</th><th>name</th><th>no</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>200100101</td></tr><tr><td>2</td><td>李四</td><td>200100102</td></tr><tr><td>3</td><td>王五</td><td>200100103</td></tr><tr><td>4</td><td>赵六</td><td>200100104</td></tr></tbody></table><p>tb_course：</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>Java</td></tr><tr><td>2</td><td>PHP</td></tr><tr><td>3</td><td>MySQL</td></tr><tr><td>4</td><td>Hadoop</td></tr></tbody></table><p>tb_student_course：</p><table><thead><tr><th>id</th><th>studentid</th><th>courseid</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>1</td><td>2</td></tr><tr><td>3</td><td>1</td><td>3</td></tr><tr><td>4</td><td>2</td><td>1</td></tr><tr><td>5</td><td>2</td><td>4</td></tr></tbody></table><h4 id="多表设计案例"><a href="#多表设计案例" class="headerlink" title="多表设计案例"></a>多表设计案例</h4><ul><li>需求：<code>emp（1）➡emp_expr（n） </code></li></ul><p>emp_expr：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 表：dept（1）➡emp（n） || emp（1）➡emp_expr（n）</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp_expr(</span><br><span class="line">    id <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;ID，主键&#x27;</span>,</span><br><span class="line">    <span class="keyword">begin</span> <span class="type">date</span> comment <span class="string">&#x27;开始时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">end</span> <span class="type">date</span> comment <span class="string">&#x27;结束时间&#x27;</span>,</span><br><span class="line">    company <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;公司名称&#x27;</span>,</span><br><span class="line">    job <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;职位&#x27;</span>,</span><br><span class="line">    emp_id <span class="type">int</span> unsigned comment <span class="string">&#x27;关联的员工ID&#x27;</span> <span class="comment">-- 采用逻辑外键</span></span><br><span class="line">) comment <span class="string">&#x27;工作经历表&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><ul><li>多表查询：指从多张表中查询数据</li></ul><h4 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h4><p>dept：</p><table><thead><tr><th>id</th><th>name</th><th>create_time</th><th>update_time</th></tr></thead><tbody><tr><td>1</td><td>学工部</td><td>current_timestamp</td><td>current_timestamp</td></tr><tr><td>2</td><td>教研部</td><td>current_timestamp</td><td>current_timestamp</td></tr><tr><td>3</td><td>咨询部</td><td>current_timestamp</td><td>current_timestamp</td></tr><tr><td>4</td><td>就业部</td><td>current_timestamp</td><td>current_timestamp</td></tr><tr><td>5</td><td>人事部</td><td>current_timestamp</td><td>current_timestamp</td></tr></tbody></table><p>emp：</p><table><thead><tr><th>id</th><th>username</th><th>password</th><th>name</th><th>gender</th><th>phone</th><th>job</th><th>salary</th><th>image</th><th>entry_date</th><th>dept_id</th><th>create_time</th><th>update_time</th></tr></thead><tbody><tr><td>1</td><td>shinaian</td><td>123456</td><td>施耐庵</td><td>男 (1)</td><td>13309090001</td><td>4</td><td>15000</td><td>http:&#x2F;&#x2F;……</td><td>2000-01-01</td><td>2</td><td>2024-10-27 16:35:33</td><td>2024-10-27 16:35:35</td></tr><tr><td>2</td><td>songjiang</td><td>123456</td><td>宋江</td><td>男 (1)</td><td>13309090002</td><td>2</td><td>8600</td><td>http:&#x2F;&#x2F;……</td><td>2015-01-01</td><td>2</td><td>2024-10-27 16:35:33</td><td>2024-10-27 16:35:37</td></tr><tr><td>3</td><td>lujunyi</td><td>123456</td><td>卢俊义</td><td>男 (1)</td><td>13309090003</td><td>2</td><td>8900</td><td>http:&#x2F;&#x2F;……</td><td>2008-05-01</td><td>2</td><td>2024-10-27 16:35:33</td><td>2024-10-27 16:35:39</td></tr><tr><td>4</td><td>wuyong</td><td>123456</td><td>吴用</td><td>男 (1)</td><td>13309090004</td><td>2</td><td>9200</td><td>http:&#x2F;&#x2F;……</td><td>2007-01-01</td><td>2</td><td>2024-10-27 16:35:33</td><td>2024-10-27 16:35:41</td></tr><tr><td>5</td><td>gongsunsheng</td><td>123456</td><td>公孙胜</td><td>男 (1)</td><td>13309090005</td><td>2</td><td>9500</td><td>http:&#x2F;&#x2F;……</td><td>2012-12-05</td><td>2</td><td>2024-10-27 16:35:33</td><td>2024-10-27 16:35:43</td></tr><tr><td>6</td><td>huosanniang</td><td>123456</td><td>扈三娘</td><td>女 (2)</td><td>13309090006</td><td>3</td><td>6500</td><td>http:&#x2F;&#x2F;……</td><td>2013-09-05</td><td>1</td><td>2024-10-27 16:35:33</td><td>2024-10-27 16:35:45</td></tr></tbody></table><h4 id="多表查询基本SQL语句"><a href="#多表查询基本SQL语句" class="headerlink" title="多表查询基本SQL语句"></a>多表查询基本SQL语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp, dept;</span><br></pre></td></tr></table></figure><p>如果直接使用以上SQL语句查询，会出现很多无效数据</p><p>为了避免出现上述问题，在查询时要附带条件查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp, dept <span class="keyword">where</span> emp.dept_id <span class="operator">=</span> dept.id;</span><br></pre></td></tr></table></figure><h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h4><ul><li>内连接：相当于查询A、B交集部分数据</li><li>外连接：<ul><li>左外连接：查询左表所有数据（包括两张表交集部分数据）</li><li>右外连接：查询右表所有数据（包括两张表交集部分数据）</li></ul></li></ul><img src="/img/MySQL/04.png" alt="04" style="zoom:100%;" /><h5 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h5><p>内连接查询的是两张表交集部分的数据。具体语法为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 隐式内连接(常见)</span></span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span>,表<span class="number">2</span> <span class="keyword">where</span> 连接条件 ...;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 显示内连接</span></span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> [<span class="keyword">inner</span>] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件 ...;</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ============================= 内连接 ==========================</span></span><br><span class="line"><span class="comment">-- A. 查询所有员工的ID, 姓名 , 及所属的部门名称 (隐式、显式内连接实现)</span></span><br><span class="line"><span class="keyword">select</span> emp.id,emp.name,dept.name <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.dept_id <span class="operator">=</span> dept.id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> emp.id,emp.name,dept.name <span class="keyword">from</span> dept  <span class="keyword">inner</span> <span class="keyword">join</span> emp <span class="keyword">on</span> emp.dept_id <span class="operator">=</span> dept.id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- B. 查询 性别为男, 且工资 高于8000 的员工的ID, 姓名, 及所属的部门名称 (隐式、显式内连接实现)</span></span><br><span class="line"><span class="keyword">select</span> emp.id,emp.name,dept.name <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.dept_id <span class="operator">=</span> dept.id <span class="keyword">and</span> emp.gender <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> emp.salary <span class="operator">&gt;</span> <span class="number">8000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> emp.id,emp.name,dept.name <span class="keyword">from</span> dept  <span class="keyword">inner</span> <span class="keyword">join</span> emp <span class="keyword">on</span> emp.dept_id <span class="operator">=</span> dept.id <span class="keyword">where</span> emp.gender <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> emp.salary <span class="operator">&gt;</span> <span class="number">8000</span>;</span><br></pre></td></tr></table></figure><h5 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h5><ul><li>外连接分为左外连接和右外连接。具体语法为：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 左外连接（常见）</span></span><br><span class="line"><span class="keyword">select</span> 字段名称 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">left</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件 ...;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 右外连接</span></span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">right</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件 ...;</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- =============================== 外连接 ============================</span></span><br><span class="line"><span class="comment">-- A. 查询员工表 所有 员工的姓名, 和对应的部门名称 (左外连接)</span></span><br><span class="line"><span class="keyword">select</span> emp.name, dept.name <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept <span class="keyword">on</span> dept.id <span class="operator">=</span> emp.dept_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- B. 查询部门表 所有 部门的名称, 和对应的员工名称 (右外连接)</span></span><br><span class="line"><span class="keyword">select</span> emp.name, dept.name <span class="keyword">from</span> emp <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept <span class="keyword">on</span> dept.id <span class="operator">=</span> emp.dept_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- C. 查询工资 高于8000 的 所有员工的姓名, 和对应的部门名称 (左外连接)</span></span><br><span class="line"><span class="keyword">select</span> emp.name, dept.name <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept <span class="keyword">on</span> dept.id <span class="operator">=</span> emp.dept_id  <span class="keyword">where</span> emp.salary <span class="operator">&gt;</span> <span class="number">8000</span>;</span><br></pre></td></tr></table></figure><h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><ul><li>介绍：SQL语句中嵌套select语句，称为嵌套查询，又称子查询</li><li>形式：<code>select * from t1 where column1 = (select column1 from t2 ...);</code></li><li>说明：子查询外部的语句可以是 <code>insert</code> &#x2F; <code>update</code> &#x2F; <code>delete</code> &#x2F; <code>select</code> 的任何一个，最常见的是 <code>select</code></li><li>分类：<ol><li>标量子查询：子查询返回的结果为单个值</li><li>列子查询：子查询返回的结果为一列</li><li>行子查询：子查询返回的结果为一行</li><li>表子查询：子查询返回的结果为多行多列</li></ol></li><li>要点：子查询的要点是，先对需求做拆分，明确具体步骤，再逐步编写SQL语句</li></ul><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ========================= 子查询 ================================</span></span><br><span class="line"><span class="comment">-- 标量子查询</span></span><br><span class="line"><span class="comment">-- A. 查询 最早入职 的员工信息:</span></span><br><span class="line">    <span class="comment">-- 1. 获取到最早入职时间</span></span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">min</span>(emp.entry_date) <span class="keyword">from</span> emp; <span class="comment">-- 2000-01-01</span></span><br><span class="line">    <span class="comment">-- 2. 查询 最早入职 的员工信息</span></span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> entry_date <span class="operator">=</span> <span class="string">&#x27;2000-01-01&#x27;</span>;</span><br><span class="line">    <span class="comment">-- 3. 结合</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> entry_date <span class="operator">=</span> (<span class="keyword">select</span> <span class="built_in">min</span>(emp.entry_date) <span class="keyword">from</span> emp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- B. 查询在 &quot;阮小五&quot; 入职之后入职的员工信息</span></span><br><span class="line">    <span class="comment">-- 1. 获取到阮小五入职时间</span></span><br><span class="line">    <span class="keyword">select</span> emp.entry_date <span class="keyword">from</span> emp <span class="keyword">where</span> emp.name <span class="operator">=</span> <span class="string">&#x27;阮小五&#x27;</span>;  <span class="comment">-- 2015-01-01</span></span><br><span class="line">    <span class="comment">-- 2. 查询在 &quot;阮小五&quot; 入职之后入职的员工信息</span></span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> entry_date <span class="operator">&gt;</span> <span class="string">&#x27;2015-01-01&#x27;</span>;</span><br><span class="line">    <span class="comment">-- 3. 结合</span></span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> entry_date <span class="operator">&gt;</span> (<span class="keyword">select</span> emp.entry_date <span class="keyword">from</span> emp <span class="keyword">where</span> emp.name <span class="operator">=</span> <span class="string">&#x27;阮小五&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 列子查询</span></span><br><span class="line"><span class="comment">-- A. 查询 &quot;教研部&quot; 和 &quot;咨询部&quot; 的所有员工信息</span></span><br><span class="line">    <span class="comment">-- 1. 查询&quot;教研部&quot;和&quot;咨询部&quot;的ID</span></span><br><span class="line">    <span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> dept.name <span class="operator">=</span> <span class="string">&#x27;教研部&#x27;</span> <span class="keyword">or</span> dept.name <span class="operator">=</span> <span class="string">&#x27;咨询部&#x27;</span>; <span class="comment">-- 3 2</span></span><br><span class="line">    <span class="comment">-- 2. 查询指定部门ID的员工信息</span></span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> emp.dept_id <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="comment">-- 3. 结合</span></span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> emp.dept_id <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> dept.name <span class="operator">=</span> <span class="string">&#x27;教研部&#x27;</span> <span class="keyword">or</span> dept.name <span class="operator">=</span> <span class="string">&#x27;咨询部&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 行子查询</span></span><br><span class="line"><span class="comment">-- A. 查询与 &quot;李忠&quot; 的薪资 及 职位都相同的员工信息 ;</span></span><br><span class="line">    <span class="comment">-- 1. 查询&quot;李忠&quot; 的薪资以及职位</span></span><br><span class="line">    <span class="keyword">select</span> emp.salary , emp.job <span class="keyword">from</span> emp <span class="keyword">where</span> emp.name <span class="operator">=</span> <span class="string">&#x27;李忠&#x27;</span>; <span class="comment">-- 5000 5</span></span><br><span class="line">    <span class="comment">-- 2. 查询与 &quot;李忠&quot; 的薪资 及 职位都相同的员工信息</span></span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">=</span> <span class="string">&#x27;5000&#x27;</span> <span class="keyword">and</span> job <span class="operator">=</span> <span class="string">&#x27;5&#x27;</span>;</span><br><span class="line">    <span class="comment">-- 3. 结合</span></span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">=</span> (<span class="keyword">select</span> emp.salary <span class="keyword">from</span> emp <span class="keyword">where</span> emp.name <span class="operator">=</span> <span class="string">&#x27;李忠&#x27;</span>) <span class="keyword">and</span> job <span class="operator">=</span> (<span class="keyword">select</span> emp.job <span class="keyword">from</span> emp <span class="keyword">where</span> emp.name <span class="operator">=</span> <span class="string">&#x27;李忠&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 表子查询</span></span><br><span class="line"><span class="comment">-- A. 获取每个部门中薪资最高的员工信息</span></span><br><span class="line">    <span class="comment">-- 1. 获取每个部门的最高薪资</span></span><br><span class="line">    <span class="keyword">select</span> dept_id,<span class="built_in">max</span>(salary)  <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> dept_id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 2. 查询每个部门中薪资最高的员工信息</span></span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp , (<span class="keyword">select</span> dept_id,<span class="built_in">max</span>(salary) <span class="keyword">as</span> max_sal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> dept_id) <span class="keyword">as</span> res <span class="keyword">where</span> emp.dept_id <span class="operator">=</span> res.dept_id <span class="keyword">and</span> emp.salary <span class="operator">=</span> res.max_sal;</span><br></pre></td></tr></table></figure><h5 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 需求:</span></span><br><span class="line"><span class="comment">-- 1. 查询 &quot;教研部&quot; 性别为 男，且在 &quot;2011-05-01&quot; 之后入职的员工信息 。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> gender <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">AND</span> entry_date <span class="operator">&gt;</span> <span class="string">&#x27;2011-05-01&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> dept_id <span class="operator">=</span> (</span><br><span class="line">      <span class="keyword">SELECT</span> id</span><br><span class="line">      <span class="keyword">FROM</span> dept</span><br><span class="line">      <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;教研部&#x27;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查询工资 低于公司平均工资的 且 性别为男 的员工信息 。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> gender <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">AND</span> salary <span class="operator">&lt;</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> emp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 查询部门人数超过 10 人的部门名称 。</span></span><br><span class="line"><span class="keyword">select</span> dept.name <span class="keyword">from</span> dept;</span><br><span class="line"><span class="keyword">select</span> emp.dept_id <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> emp.dept_id;</span><br><span class="line"><span class="keyword">SELECT</span> name</span><br><span class="line"><span class="keyword">FROM</span> dept</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> dept_id</span><br><span class="line">    <span class="keyword">FROM</span> emp</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> dept_id</span><br><span class="line">    <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">10</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 查询在 &quot;2010-05-01&quot; 后入职，且薪资高于 10000 的 &quot;教研部&quot; 员工信息，并根据薪资倒序排序。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> entry_date <span class="operator">&gt;</span> <span class="string">&#x27;2010-05-01&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> salary <span class="operator">&gt;</span> <span class="number">10000</span></span><br><span class="line">  <span class="keyword">AND</span> dept_id <span class="operator">=</span> (</span><br><span class="line">      <span class="keyword">SELECT</span> id</span><br><span class="line">      <span class="keyword">FROM</span> dept</span><br><span class="line">      <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;教研部&#x27;</span></span><br><span class="line">  )</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5. 查询工资 低于本部门平均工资的员工信息 。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp e1</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&lt;</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary)</span><br><span class="line">    <span class="keyword">FROM</span> emp e2</span><br><span class="line">    <span class="keyword">WHERE</span> e1.dept_id <span class="operator">=</span> e2.dept_id</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="MySQL图形化工具"><a href="#MySQL图形化工具" class="headerlink" title="MySQL图形化工具"></a>MySQL图形化工具</h2><ul><li>介绍：DataGrip是JetBrains旗下的一款数据库管理工具，是管理和开发MySQL、Oracle、PostgreSQL的理想解决方案</li><li>官网：<a href="https://www.jetbrains.com/zh-cn/datagrip/">https://www.jetbrains.com/zh-cn/datagrip/</a></li><li>安装以及使用文档：<a href="https://heuqqdmbyk.feishu.cn/wiki/FAa3wj0nYi4xGBksbFuchBK8nhe">DataGrip安装文档 - 飞书云文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
            <tag> SQL语句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2025/04/05/Maven/"/>
      <url>/2025/04/05/Maven/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>运行DEMO可以在百度网盘中获取：通过网盘分享的文件：<a href="https://pan.baidu.com/s/1Ut9-STQL_8ColkAa4-kMkQ?pwd=edar">https://pan.baidu.com/s/1Ut9-STQL_8ColkAa4-kMkQ?pwd=edar</a></p><h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><p><code>Apache Maven</code>是一个项目管理和构建工具，它基于项目对象模型（POM）的概念，通过一小段描述信息来管理项目的构建</p><p>官网：<a href="http://maven.apache.org/">http://maven.apache.org</a></p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol><li>方便快捷的管理项目依赖的资源（jar包），避免版本冲突问题</li><li>提供标准、统一的项目结构</li><li>标准跨平台（Linux、Windows、MacOS）的自动化项目构建方式</li></ol><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p>用于存储资源，管理各种jar包</p><ul><li>本地仓库：存放在自己计算机上的目录</li><li>中央仓库：由Maven团队维护的全球唯一的仓库。仓库地址：<a href="https://repo1.maven.org/maven2/">https://repo1.maven.org/maven2/</a></li><li>远程仓库（私服）：一般由公司团队搭建的私有仓库</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装步骤：</p><ol><li><p>解压<code>apache-maven-x.x.x-bin.zip</code></p></li><li><p>配置本地仓库：修改conf&#x2F;setting.xml中的&lt;localRepository&gt;为一个指定目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;localRepository&gt;E:\develop\apache-maven-x.x.x\mvn-reop&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置阿里云私服：修改conf&#x2F;setting.xml中的&lt;mirrors&gt;标签，为其添加如下子标签：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">&lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">&lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">&lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">&lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置环境变量：MAVEN_HOME为maven的解压目录，并将其bin目录加入PATH环境变量</p></li></ol><h2 id="配置Maven环境"><a href="#配置Maven环境" class="headerlink" title="配置Maven环境"></a>配置Maven环境</h2><h3 id="当前工程"><a href="#当前工程" class="headerlink" title="当前工程"></a>当前工程</h3><ul><li>选中IDEA中File➡Setting➡Build,Execution,Deployment➡Build Tools➡Maven</li><li>设置IDEA使用本地安装的Maven，并修改配置本地文件及本地仓库路径</li><li>设置Runner中的JDK版本</li><li>设置字节码版本File➡Setting➡Build,Execution,Deployment➡Complier➡Java Compiler➡project bytecode version</li></ul><h3 id="全局工程"><a href="#全局工程" class="headerlink" title="全局工程"></a>全局工程</h3><ol><li>首先需要退出项目File➡close project</li><li>进入IDEA开始界面</li><li>找到Customize➡All settings</li><li>重复当前工程的操作</li></ol><h2 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h2><ol><li>创建模块，选择Maven，点击Next</li><li>填写模块名称，坐标信息，点击Finish，创建完成</li></ol><p>当创建完成后，编写<code>Hello World</code>测试环境配置是否成功</p><p>如果编译后出现<code>java: 错误: 不支持发行版本 6</code>报错信息，则需要找到当前项目的<code>pom.xml</code>文件，添加如下代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>17表示JDK版本</p><p>完整代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.norlcyan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color='red'>注意：修改完代码，需要在IDEA中重新加载配置文件，IDEA会在右上角出现一个M的标志，点击即可</font></p><h2 id="Maven坐标"><a href="#Maven坐标" class="headerlink" title="Maven坐标"></a>Maven坐标</h2><ul><li>Maven中的坐标是资源的唯一标识，通过该坐标可以唯一定位资源位置</li><li>使用坐标来定义项目或引入项目中需要的依赖</li></ul><h3 id="坐标的组成"><a href="#坐标的组成" class="headerlink" title="坐标的组成"></a>坐标的组成</h3><ol><li>groupId：定义当前Maven项目隶属组织名称（通常是域名反写，例如：app.netlify.norlcyan）</li><li>artifactId：定义当前Maven项目名称（通常是模块名称，例如：order-service、goods-service）</li><li>version：定义当前项目的版本号</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>app.netlify.norlcyan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><ul><li>依赖：指当前项目运行所需要的jar包，一个项目中可以引入多个依赖</li><li>配置：<ol><li>在<code>pom.xml</code>中编写&lt;dependencies&gt;标签</li><li>在&lt;dependencies&gt;标签中使用&lt;dependency&gt;引入坐标</li><li>定义坐标的groupId、artifactId、version</li><li>点击刷新按钮，引入最新的坐标</li></ol></li></ul><p>注意：</p><ol><li>如果本地仓库中没有依赖的jar包，代码不会提示，且pom.xml文件会报红，当填写完依赖包的详细信息后，点击刷新会自动下载缺少的包</li><li>要想知道依赖包的详细信息，可以访问<a href="https://mvnrepository.com/%E6%9F%A5%E7%9C%8B">https://mvnrepository.com/查看</a></li></ol><h3 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h3><ul><li>Maven中的依赖具有传递性<ul><li>直接依赖：在当前项目中通过依赖配置建立的依赖关系</li><li>间接依赖：被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源</li></ul></li></ul><h3 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h3><p>依赖的jar包，默认情况下，可以在任何地方使用。可以通过&lt;scope&gt;…&lt;&#x2F;scope&gt;设置其作用的范围</p><p>作用范围：</p><ul><li>主程序范围有效（main文件夹范围内）</li><li>测试程序范围有效（test文件夹范围内）</li><li>是否参与打包运行（package指令范围内）</li></ul><table><thead><tr><th>scope值</th><th>主程序</th><th>测试程序</th><th>打包</th><th>范例</th></tr></thead><tbody><tr><td>compile(默认)</td><td>Y</td><td>Y</td><td>Y</td><td>log4j</td></tr><tr><td>test</td><td>-</td><td>Y</td><td>-</td><td>junit</td></tr><tr><td>provided</td><td>Y</td><td>Y</td><td>-</td><td>servlet-api</td></tr><tr><td>runtime</td><td>-</td><td>Y</td><td>Y</td><td>jdbc驱动</td></tr></tbody></table><p>示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>Maven的生命周期就是为了所有的maven项目构建过程进行抽象和统一</p><p>Maven有三套相互独立的生命周期：</p><ul><li>clean：清理工作</li><li>default：核心工作，如：编译、测试、打包、安装、部署等</li><li>site：生成报告、发布站点等</li></ul><p>生命周期阶段：</p><ul><li>clean：移除上一次构建生成的文件</li><li>complie：编译项目源代码</li><li>test：使用合适的单元测试框架进行测试（junit）</li><li>package：将编译后的文件打包，如：jar、war等</li><li>install：安装项目到本地仓库</li></ul><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><ul><li>测试：是一种用来促进鉴定软件的正确性、完整性、安全性和质量的过程</li><li>阶段划分：单元测试、集成测试、系统测试、验收测试</li><li>测试方法：白盒测试、黑盒测试以及灰盒测试</li></ul><p>白盒测试：</p><ul><li>清楚软件内部结构、代码逻辑</li><li>用于验证代码、逻辑正确性</li></ul><p>黑盒测试：</p><ul><li>不清楚软件内部结构、代码逻辑</li><li>用于验证软件的功能、兼容性等方面</li></ul><p>灰盒测试：</p><ul><li>结合了白盒测试和黑盒测试的特点，既关注软件的内部结构又考虑外部表现（功能）</li></ul><p>单元测试：</p><ul><li>介绍：对软件的基本组成单位进行测试，最小测试单位</li><li>目的：检验软件基本组成单位的正确性</li><li>测试人员：开发人员</li><li>白盒测试</li></ul><p>集成测试：</p><ul><li>将已分别通过测试的单元，按设计要求组合成系统或子系统，再进行的测试</li><li>目的：检查单元之间的协作是否正确</li><li>测试人员：开发人员</li><li>灰盒测试</li></ul><p>系统测试：</p><ul><li>介绍：对已经继承好的软件系统进行彻底的测试</li><li>目的：验证软件系统的正确性、性能是否满足指定的要求</li><li>测试人员：测试人员</li><li>黑盒测试</li></ul><p>验收测试：</p><ul><li>介绍：交付测试，是针对用户需求、业务流程进行的正式的测试</li><li>目的：验证软件系统是否满足验收标准</li><li>测试人员：客户&#x2F;需求方</li><li>黑盒测试</li></ul><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><ul><li>单元测试就是针对最小的功能单元（方法），编写测试代对其正确性进行测试</li><li>Junit是最流行的Java测试框架之一，提供了一些功能，方便程序进行单元测试（第三方公司提供）</li><li>main方法测试的弊端：<ul><li>测试代码与源代码未分开，难以维护</li><li>一个方法测试失败，影响后面方法的运行</li><li>无法自动化测试，得到测试报告</li></ul></li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 查询所有的测试方法</span></span><br><span class="line">findALLStudent();</span><br><span class="line"><span class="comment">// 添加学生</span></span><br><span class="line">addStudent();</span><br><span class="line"><span class="comment">// 修改学生</span></span><br><span class="line">updateStudent();</span><br><span class="line"><span class="comment">// 删除学生</span></span><br><span class="line">deleteStudent();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试删除学生</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteStudent</span><span class="params">()</span> &#123;...&#125;</span><br><span class="line"><span class="comment">// 测试修改学生</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">updateStudent</span><span class="params">()</span> &#123;...&#125;</span><br><span class="line"><span class="comment">// 测试添加学生的方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addStudent</span><span class="params">()</span> &#123;...&#125;</span><br><span class="line"><span class="comment">// 查询所有的学生数据</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">findALLStudent</span><span class="params">()</span> &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h3><h4 id="初次使用JUnit"><a href="#初次使用JUnit" class="headerlink" title="初次使用JUnit"></a>初次使用JUnit</h4><ol><li>在pom.xml中，引入JUnit的依赖：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在test&#x2F;java目录下，创建测试类，并编写对应的测试方法，并在方法上声明@Test注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAge</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">age</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserSerive</span>().getAge(<span class="string">&quot;110002200505091218&quot;</span>)</span><br><span class="line">System.out.println(age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：JUnit单元测试类名命名规范为XxxxTest【规范】。Junit单元测试的方法，必须声明为public void 【规定】</p><ol start="3"><li>运行单元测试（测试通过：绿色；测试失败：红色）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> app.netlify.norlcyan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">age</span> <span class="operator">=</span> userService.getAge(<span class="string">&quot;110002200505091218&quot;</span>);</span><br><span class="line">        System.out.println(age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h4><p>JUnit提供了一些辅助方法，用来确定被测试方法是否按照预期的效果正常工作，这种方式称为断言</p><table><thead><tr><th>断言方法</th><th>描述</th></tr></thead><tbody><tr><td>Assertions.assertEquals(Object exp, Object act, String msg)</td><td>检查两个值是否相等，不相等报错</td></tr><tr><td>Assertions.assertNotEquals(Object unexp, Object act, String msg)</td><td>检查两个值是否不相等，相等报错</td></tr><tr><td>Assertions.assertNull(Object act, String msg)</td><td>检查对象是否为null，不为null报错</td></tr><tr><td>Assertions.assertNotNull(Object act, String msg)</td><td>检查对象是否不为null，为null报错</td></tr><tr><td>Assertions.assertTrue(boolean condition, String msg)</td><td>检查条件是否为true，不为true报错</td></tr><tr><td>Assertions.assertFalse(boolean condition, String msg)</td><td>检查条件是否为false，不为false报错</td></tr><tr><td>Assertions.assertThrows(Class expType, Executable exec, String msg)</td><td>检查两个对象引用是否相等，不相等报错</td></tr></tbody></table><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGenderWithAssert</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> userService.getGender(<span class="string">&quot;100000200010011011&quot;</span>);</span><br><span class="line">    <span class="comment">// 断言</span></span><br><span class="line">    Assertions.assertEquals(<span class="string">&quot;男&quot;</span>,gender);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常见注解"><a href="#常见注解" class="headerlink" title="常见注解"></a>常见注解</h4><p>在JUnit中还提供了一些注解，还增强其功能，常见的注解有以下几个：</p><table><thead><tr><th>注解</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>@Test</td><td>测试类中的方法用它修饰才能成为测试方法，才能启动执行</td><td>单元测试</td></tr><tr><td>ParameterizedTest</td><td>参数化测试的注解（可以让单个测试运行多次，每次运行时仅参数不同）</td><td>用了该注解就不需要@Test注解了</td></tr><tr><td>@ValueSource</td><td>参数化测试的参数来源，赋予测试方法参数</td><td>与参数化测试注解配合使用</td></tr><tr><td>@DisplayName</td><td>指定测试类、测试方法显示的名称（默认为类名、方法名）</td><td></td></tr><tr><td>@BeforeEach</td><td>用来修饰一个实例方法，该方法会在每一个测试方法执行之前执行一次</td><td>初始化资源（准备工作）</td></tr><tr><td>@AfterEach</td><td>用来修饰一个实例方法，该方法会在每一个测试方法执行之后执行一次</td><td>释放资源（清理工作）</td></tr><tr><td>@BeforeAll</td><td>用来修饰一个静态方法，该方法会在所有测试方法之前只执行一次</td><td>初始化资源（准备工作）</td></tr><tr><td>@AfterAll</td><td>用来修饰一个静态方法，该方法会在所有测试方法之后只执行一次</td><td>释放资源（清理工作）</td></tr></tbody></table><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DisplayName(&quot;测试性别&quot;)</span>    <span class="comment">// 控制台会显示该测试的名称为”测试性别“</span></span><br><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@ValueSource(strings = &#123;&quot;100000200010011011&quot;,&quot;100000200010011041&quot;,&quot;100000200010011051&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGender2</span><span class="params">(String idCard)</span> &#123;</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> userService.getGender(idCard);</span><br><span class="line">    <span class="comment">// 断言</span></span><br><span class="line">    Assertions.assertEquals(<span class="string">&quot;男&quot;</span>,gender);    <span class="comment">// 测试三次，第二次是错误结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="企业开发规范"><a href="#企业开发规范" class="headerlink" title="企业开发规范"></a>企业开发规范</h3><p>原则：编写测试方法时，要尽可能的覆盖业务方法中所有可能的情况（尤其是边界值）</p><p>实际开发中，有可能会编写大量的单元测试，难免出现缺漏某些情况。为了防止出现这种情况，可以借助AI生产测试代码。</p><p>在IDEA插件中安装通义灵码，并且登录账户（免费）。然后在需要测试的代码上点击生成单元测试即可。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring框架 </tag>
            
            <tag> Maven </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb</title>
      <link href="/2025/04/05/JavaWeb/"/>
      <url>/2025/04/05/JavaWeb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>运行DEMO可以在百度网盘中获取：通过网盘分享的文件：<a href="https://pan.baidu.com/s/1Ut9-STQL_8ColkAa4-kMkQ?pwd=edar">https://pan.baidu.com/s/1Ut9-STQL_8ColkAa4-kMkQ?pwd=edar</a></p><p>资料来源：<a href="https://heuqqdmbyk.feishu.cn/wiki/space/7413668442156498972?ccm_open_type=lark_wiki_spaceLink&open_tab_from=wiki_home">https://heuqqdmbyk.feishu.cn/wiki/space/7413668442156498972?ccm_open_type=lark_wiki_spaceLink&amp;open_tab_from=wiki_home</a></p><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p>官网：<a href="https://spring.io/">https://spring.io</a></p><h2 id="SpringBootWeb快速入门"><a href="#SpringBootWeb快速入门" class="headerlink" title="SpringBootWeb快速入门"></a>SpringBootWeb快速入门</h2><p>需求：使用 SpringBoot 开发一个web应用，浏览器发起请求&#x2F;hello后，给浏览器返回字符串”Hello World”</p><ol><li>创建SprintBoot工程，并勾选web开发相关依赖</li></ol><p><img src="/img/noteImg/1.PNG" alt="1"></p><p><img src="/img/noteImg/2.PNG" alt="2"></p><ol start="2"><li>定义HelloController类，添加方法hello，并添加注解</li></ol><p><img src="/img/noteImg/3.PNG" alt="3"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> app.netlify.norlcyan.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求处理类</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>运行测试</li></ol><p><img src="/img/noteImg/4.PNG" alt="4"></p><p><img src="/img/noteImg/5.png" alt="5"></p><ol start="4"><li>在浏览器中输入网址：127.0.0.1:8080&#x2F;hello，网页中显示Hello World表示启动成功。</li></ol><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><p>概念：超文本传输协议，规定了浏览器和服务器之间数据传输的规则</p><p>特点：</p><ul><li>基于TCP协议：面向连接，安全</li><li>基于请求-响应模型的：一次请求对应一次响应</li><li>HTTP协议是无状态的协议：对于事物处理没有记忆能力。每次请求-响应都是独立的<ul><li>缺点：多次请求间不能共享数据</li><li>优点：速度快</li></ul></li></ul><h2 id="请求协议"><a href="#请求协议" class="headerlink" title="请求协议"></a>请求协议</h2><p>请求行：请求数据第一行（请求方式、资源路径、协议）</p><p>请求头：第二行开始，格式：<code>key : value</code></p><table><thead><tr><th>Key</th><th>说明</th></tr></thead><tbody><tr><td>Host</td><td>请求的主机名</td></tr><tr><td>User-Agent</td><td>浏览器版本</td></tr><tr><td>Accept</td><td>表示浏览器能够接收的资源类型，如test&#x2F;*，image&#x2F;*或者*&#x2F;*表示所有</td></tr><tr><td>Accept-Language</td><td>表示浏览器偏好的语言，服务器可以据此返回不同语言的网页</td></tr><tr><td>Accept-Encoding</td><td>表示浏览器可以支持的压缩类型</td></tr><tr><td>Content-Type</td><td>请求主体的数据类型</td></tr><tr><td>Content-Length</td><td>请求主体的大小（单位：字节）</td></tr></tbody></table><p>请求体：POST请求，存放请求参数</p><p>请求方式-GET：请求参数在请求行中，没有请求体，GET请求大小是有限制的</p><p>请求方式-POST：请求参数在请求体中，POST请求大小是没有限制的</p><h2 id="响应协议"><a href="#响应协议" class="headerlink" title="响应协议"></a>响应协议</h2><p>响应行：响应数据第一行（协议、状态码、描述）</p><table><thead><tr><th>状态码</th><th>说明</th></tr></thead><tbody><tr><td>1xx</td><td>响应中-临时状态码，表示请求已经接收，告诉客户端应该继续请求或者如果它已经完成则忽略它</td></tr><tr><td>2xx</td><td>成功-表示请求已经被成功接收，处理已完成</td></tr><tr><td>3xx</td><td>重定向-重定向到其他地方；让客户端再发起一次请求以完成整个处理</td></tr><tr><td>4xx</td><td>客户端错误-处理发生错误，责任在客户端。如：请求了不存在的资源、客户端未被授权、禁止访问等</td></tr><tr><td>5xx</td><td>服务器错误-处理发生错误，责任在服务端。如：程序抛出异常等</td></tr></tbody></table><p>响应头：第二行开始，格式：<code>key : value</code></p><table><thead><tr><th>Key</th><th>说明</th></tr></thead><tbody><tr><td>Content-Type</td><td>表示该响应内容的类型，例如：text&#x2F;html，application&#x2F;json</td></tr><tr><td>Content-Length</td><td>表示该响应内容的长度（字节数）</td></tr><tr><td>Content-Encoding</td><td>表示该响应压缩算法，如：gzip</td></tr><tr><td>Cache-Control</td><td>指示客户端应如何缓存，例如：max-age&#x3D;300表示可以最多缓存300秒</td></tr><tr><td>Set-Cookie</td><td>告诉浏览器为当前页面所在的域设置cookie</td></tr></tbody></table><p>响应体：最后一部分，存放响应数据</p><h1 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h1><p>Web服务器是一个软件程序，对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，让Web开发更加便捷。主要功能是“提供上网信息浏览服务”</p><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><ul><li><p>概念：Tomcat是Apache软件基金会的一个核心项目，是一个开源免费的轻量级Web服务器，支持Servlet&#x2F;JSP少量JavaEE规范</p></li><li><p>Tomcat也被称为Web容器、Servlet容器。Servlet程序需要依赖于Tomcat才能运行</p></li><li><p>官网：<a href="https://tomcat.apache.org/">https://tomcat.apache.org</a></p></li><li><p>Tomcat部署项目：将项目放置到webapps目录下，即部署完成</p></li></ul><h1 id="请求响应"><a href="#请求响应" class="headerlink" title="请求响应"></a>请求响应</h1><ul><li>请求（HTTPServletRequest）：获取请求数据</li><li>响应（HTTPServletResponse）：设置响应数据</li><li>BS架构：Browser&#x2F;Server ，浏览器&#x2F;服务器架构模式。客户端只需要浏览器，应用程序的逻辑和数据都存储在服务端</li></ul><h2 id="简单参数"><a href="#简单参数" class="headerlink" title="简单参数"></a>简单参数</h2><ul><li><p>原始方式：在原始的Web程序中，获取请求参数，需要通过HttpServletRequest对象手动获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">agestr</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> Integer.parseInt(ageStr);</span><br><span class="line">System.out.println(name + <span class="string">&quot;:&quot;</span> + age);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>SpringBoot方式：参数名与形参变量名相同，定义形参即可接收参数（会自动转换数据类型）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(String name,Integer age)</span> &#123;</span><br><span class="line">System.out.println(name + <span class="string">&quot;:&quot;</span> + age);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果方法形参名称与请求参数名称不匹配，可以使用<code>@RequestParam</code>完成映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(<span class="meta">@RequestParam(name=&quot;name&quot;)</span>String username,Integer age)</span> &#123;</span><br><span class="line">System.out.println(username + <span class="string">&quot;:&quot;</span> + age);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<font color='red'><code>@RequestParam</code>中的<code>required</code>属性默认为<code>true</code>，代表该请求参数必须传递，如果不传递将报错。如果该参数是可选的，可以将required属性设置为false</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(<span class="meta">@RequestParam(name=&quot;name&quot;,required=false)</span>String username,Integer age)</span> &#123;</span><br><span class="line">System.out.println(username + <span class="string">&quot;:&quot;</span> + age);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="实体参数"><a href="#实体参数" class="headerlink" title="实体参数"></a>实体参数</h2><h3 id="简单实体参数"><a href="#简单实体参数" class="headerlink" title="简单实体参数"></a>简单实体参数</h3><ul><li>简单实体参数：请求参数与形参对象属性名相同，定义<code>POJO</code>接收即可</li></ul><p>示例：</p><p>生成一个User类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> app.netlify.norlcyan.POJO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>保证类中有正确的”getter”和”setter”</font></p><p>编写处理函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实体参数</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/simplePojo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">simplePojo</span><span class="params">(User u)</span> &#123;</span><br><span class="line">    System.out.println(u);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中形参是之前创建的User类</p><p>发送GET请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/simplePojo?name=张三&amp;age=20</span><br></pre></td></tr></table></figure><p>控制台打印以下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User&#123;name=<span class="string">&#x27;张三&#x27;</span>, age=20&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂实体参数"><a href="#复杂实体参数" class="headerlink" title="复杂实体参数"></a>复杂实体参数</h3><p>复杂实体参数：请求参数名与形参对象属性名相同，按照对象层次结构关系即可接收嵌套POJO属性参数</p><p>以简单实体参数为例，只需要额外添加一个<code>Address</code>对象即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> app.netlify.norlcyan.POJO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProvince</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProvince</span><span class="params">(String province)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.province = province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCity</span><span class="params">(String city)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Address&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;province=&#x27;&quot;</span> + province + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, city=&#x27;&quot;</span> + city + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理函数没有区别</p><p>发送GET请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/complexPojo?name=张三GET&amp;age=44&amp;address.province=江苏&amp;address.city=苏州</span><br></pre></td></tr></table></figure><h2 id="数组集合参数"><a href="#数组集合参数" class="headerlink" title="数组集合参数"></a>数组集合参数</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组参数：请求参数名与形参数组名称<font color='red'>相同</font>且请求参数为多个，定义数组类型形参即可接收参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/arrayParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">arrayParam</span><span class="params">(String[] hobby)</span> &#123;</span><br><span class="line">    System.out.println(Arrays.toString(hobby));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送GET请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/arrayParam?hobby=打游戏&amp;hobby=敲代码&amp;hobby=看电影</span><br></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>集合参数：请求参数名与形参集合名称相同且请求参数为多个，<code>@RequestParam</code>绑定参数关系（不加这个注解会默认将参数添加到数组中而不是集合中）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/listParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">listParam</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; hobby)</span> &#123;</span><br><span class="line">    System.out.println(hobby);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送GET请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/listParam?hobby=打游戏&amp;hobby=敲代码&amp;hobby=看电影</span><br></pre></td></tr></table></figure><h2 id="日期参数"><a href="#日期参数" class="headerlink" title="日期参数"></a>日期参数</h2><p>日期参数：使用<code>@DateTimeFormat</code>注解完成日期参数格式转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/dateParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">dateParam</span><span class="params">(<span class="meta">@DateTimeFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;)</span> LocalDateTime updateTime)</span> &#123;</span><br><span class="line">    System.out.println(updateTime);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送GET请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/dateParam?updateTime=2024-10-07 21:50:30</span><br></pre></td></tr></table></figure><h2 id="JSON参数"><a href="#JSON参数" class="headerlink" title="JSON参数"></a>JSON参数</h2><p><font color='red'>GET请求并不能直接使用JSON参数</font></p><p>JSON参数：JSON数据键名与形参对象属性名相同，定义POJO类型形参即可接收参数，需要使用<code>@RequestBody</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/jsonParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">jsonParam</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User对象和之前的复杂实体参数是一样的</p><p>发送POST请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/jsonParam</span><br></pre></td></tr></table></figure><p>在Postman中选择body➡raw，选择JSON格式，JSON数据如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Tom&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">21</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;province&quot;</span><span class="punctuation">:</span><span class="string">&quot;江苏&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span><span class="string">&quot;苏州&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="路径参数"><a href="#路径参数" class="headerlink" title="路径参数"></a>路径参数</h2><p>路径参数：通过请求URL直接传递参数，使用<code>&#123;...&#125;</code>来标识该路径参数，需要使用<code>@PathVariable</code>获取路径参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/path/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">pathParam</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送GET请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/path/1</span><br></pre></td></tr></table></figure><p>URL中的<code>1</code>可以变为其他整数，并且发送后控制台可以获取到该数值</p><h1 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h1><h2 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="ResponseBody"></a>ResponseBody</h2><p>@ResponseBody注解：</p><ul><li>类型：方法注解、类注解</li><li>位置：Controller方法上&#x2F;类上</li><li>作用：将方法返回值直接响应，如果返回值类型是实体对象&#x2F;集合，将会转换为JSON格式响应</li><li>说明：<code>@RestController = @Controller + @ResponseBody;</code></li></ul><p>返回对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getUserInfo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUserInfo</span><span class="params">(User u)</span> &#123;</span><br><span class="line">    System.out.println(u);</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回集合</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/getList&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getList</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; hobby)</span> &#123;</span><br><span class="line">    System.out.println(hobby);</span><br><span class="line">    <span class="keyword">return</span> hobby;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="统一响应结果"><a href="#统一响应结果" class="headerlink" title="统一响应结果"></a>统一响应结果</h2><p>使用一个实体对象，将响应的结果进行统一处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Result&#123;</span><br><span class="line"><span class="comment">// 响应码</span></span><br><span class="line"><span class="keyword">private</span> Integer code;</span><br><span class="line"><span class="comment">// 提示信息</span></span><br><span class="line"><span class="keyword">private</span> String msg;</span><br><span class="line"><span class="comment">// 返回的数据</span></span><br><span class="line"><span class="keyword">private</span> Object data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分层解耦"><a href="#分层解耦" class="headerlink" title="分层解耦"></a>分层解耦</h1><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><ul><li>controller：控制层，接收前端发送的请求，对请求进行处理，并响应数据</li><li>service：业务逻辑层，处理具体的业务逻辑</li><li>dao：数据访问层（Data Access Object）（持久层）。负责数据访问操作，包括数据的增删改查</li></ul><h2 id="分层解耦-1"><a href="#分层解耦-1" class="headerlink" title="分层解耦"></a>分层解耦</h2><p>耦合：衡量软件中各个层&#x2F;各个模块的依赖关联程度</p><p>内聚：软件中各个功能模块内部的功能联系</p><p>控制反转：Inversion Of Control，简称IOC。对象的创建控制权由程序自身转移到外部（容器），这种思想称为控制反转</p><p>依赖注入：Dependecy Injection，简称DI。容器为应用程序提供运行时，所依赖的资源，称之为依赖注入</p><p>Bean对象：IOC容器中创建、管理的对象，称之为Bean</p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>实现思路如下：</p><ul><li>将项目中的类交给IOC容器管理（IOC，控制反转）</li><li>应用程序运行时需要什么对象，直接依赖容器为其提供（DI，依赖注入）</li></ul><h3 id="核心注解"><a href="#核心注解" class="headerlink" title="核心注解"></a>核心注解</h3><p>@Component：</p><p><code>@Component</code>注解用于将一个类标记为Spring的组件，使其成为Spring容器管理的Bean。Spring会自动扫描标有<code>@Component</code>注解的类，并将其实例化、配置并注册到应用程序上下文中。</p><p>@Autowired</p><p><code>@Autowired</code>注解用于自动注入Spring容器中的Bean。这意味着Spring会自动将需要的Bean注入到标注了<code>@Autowired</code>的字段、构造函数或方法中。</p><h3 id="IOC详解"><a href="#IOC详解" class="headerlink" title="IOC详解"></a>IOC详解</h3><ul><li>要把某个对象交给IOC容器管理，需要在对应的类上加上如下注解之一：</li></ul><table><thead><tr><th>注解</th><th>说明</th><th>位置</th></tr></thead><tbody><tr><td>@Component</td><td>声明bean的基础注解</td><td>不属于以下三类时，用此注解</td></tr><tr><td>@Controller</td><td>@Component的衍生注解</td><td>标注在控制层类上</td></tr><tr><td>@Service</td><td>@Component的衍生注解</td><td>标注在业务层类上</td></tr><tr><td>@Repository</td><td>@Component的衍生注解</td><td>标注在数据访问层类上（由于与mybatis整合，用的较少）</td></tr></tbody></table><ul><li>前面声明bean的四大注解，要想生效，还需要被组件扫描注解@ComponentScan扫描</li><li>该注解虽然没有显式配置，但是实际上已经包含在了启动类声明注解@SpringBootApplication中，默认扫描的范围是启动类所在包及其子包</li></ul><h3 id="DI详解"><a href="#DI详解" class="headerlink" title="DI详解"></a>DI详解</h3><p>基于@Autowired进行依赖注入的常见方式有如下三种：</p><ol><li>属性注入</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>构造函数注入</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">UserController</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.userService = userService;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>setter注入</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserController</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.userService = userService;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性注入——优点：代码简洁、方便快速开发</p><p>属性注入——缺点：隐藏了类之间的依赖关系、可能会破坏类的封装性</p><p>构造函数注入优点——能清晰地看到类地依赖关系、提高了代码的安全性</p><p>构造函数注入缺点——代码繁琐、如果构造参数过多，可能会导致构造函数臃肿</p><p>构造函数注入注意点——如果只有一个构造函数，@Autowired注解可以省略</p><p>setter注入优点——保持了类的封装性，依赖关系更清晰</p><p>setter注入缺点——需要额外编写setter方法，增加了代码量</p><ul><li><p>@Autowired注解，默认是按照类型进行注入的</p></li><li><p>如果存在多个相同类型的bean，会报错，报错信息为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Field xxx in xxxxxx required a single bean, but xx were found: ...</span><br></pre></td></tr></table></figure></li></ul><p>解决方案一：@Primary注解，表示优先注入的对象</p><p>解决方案二：@Qualifier注解，搭配@Autowired注解，并在@Qualifier中填写指定的类名，如@Qualifier(“xxx”)</p><p>解决方案三：@Resource注解，用法和@Qualifier类似，@Resource(name &#x3D; “xxx”)</p><h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><p>JDBC：（Java DataBase Connectivity），就是使用Java语言操作关系型数据库的一套API</p><p>本质：</p><ul><li>Sun公司官方定义的一套操作所有关系型数据库的规范，即接口</li><li>各个数据库厂商去实现这套接口，提供数据库驱动jar包</li><li>用户可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类</li></ul><h2 id="入门使用"><a href="#入门使用" class="headerlink" title="入门使用"></a>入门使用</h2><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><p>案例需求：基于JDBC程序，执行update语句<code>(update user set age = 25 where id = 1);</code></p><p>步骤：</p><ol><li>准备工作：创建一个Maven项目，引入依赖；并准备数据库表user</li><li>代码实现：编写JDBC程序，操作数据库</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="jdbc-table"> </a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">    id <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;ID,主键&#x27;</span>,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">    password <span class="type">varchar</span>(<span class="number">32</span>) comment <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age tinyint unsigned comment <span class="string">&#x27;年龄&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;用户表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(id, username, password, name, age) <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;daqiao&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;大乔&#x27;</span>, <span class="number">22</span>),</span><br><span class="line">                                                           (<span class="number">2</span>, <span class="string">&#x27;xiaoqiao&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;小乔&#x27;</span>, <span class="number">18</span>),</span><br><span class="line">                                                           (<span class="number">3</span>, <span class="string">&#x27;diaochan&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;貂蝉&#x27;</span>, <span class="number">24</span>),</span><br><span class="line">                                                           (<span class="number">4</span>, <span class="string">&#x27;lvbu&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;吕布&#x27;</span>, <span class="number">28</span>),</span><br><span class="line">                                                           (<span class="number">5</span>, <span class="string">&#x27;zhaoyun&#x27;</span>, <span class="string">&#x27;12345678&#x27;</span>, <span class="string">&#x27;赵云&#x27;</span>, <span class="number">27</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 注册驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 获取连接</span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/web01&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManage.getConnect(url,username,password);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 获取SQL语句执行对象</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 执行SQL</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> statement.executeUpdate(<span class="string">&quot;Update user set age = 25 where id = 1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 释放资源</span></span><br><span class="line">statement.close();</span><br><span class="line">Connection.close();</span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p>案例需求：基于JDBC执行如下<code>select</code>语句，将查询结果封装到<code>User</code>对象中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;daqiao&#x27;</span> <span class="keyword">and</span> password <span class="operator">=</span> <span class="string">&#x27;123456&#x27;</span></span><br></pre></td></tr></table></figure><p>案例代码如下：<a name="jdbc-select"> </a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 数据库连接信息，请根据实际情况修改</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/web01&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">dbUser</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">dbPassword</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// SQL 查询语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT id, username, password, name, age FROM user WHERE username = ? AND password = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用于存储查询结果的列表</span></span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明数据库资源</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 加载数据库驱动程序</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 建立数据库连接</span></span><br><span class="line">            conn = DriverManager.getConnection(url, dbUser, dbPassword);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建 PreparedStatement 对象，防止 SQL 注入</span></span><br><span class="line">            stmt = conn.prepareStatement(sql);</span><br><span class="line">            stmt.setString(<span class="number">1</span>, <span class="string">&quot;daqiao&quot;</span>);</span><br><span class="line">            stmt.setString(<span class="number">2</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行查询</span></span><br><span class="line">            rs = stmt.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 迭代结果集，将每一行数据封装到 User 对象中</span></span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="type">User</span> <span class="variable">userObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">                userObj.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                userObj.setUsername(rs.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">                userObj.setPassword(rs.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">                userObj.setName(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                userObj.setAge(rs.getInt(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">                userList.add(userObj);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭资源</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (rs != <span class="literal">null</span>) rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException se) &#123;</span><br><span class="line">                se.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (stmt != <span class="literal">null</span>) stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException se) &#123;</span><br><span class="line">                se.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (conn != <span class="literal">null</span>) conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException se) &#123;</span><br><span class="line">                se.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出每个 User 对象的数据</span></span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="ResultSet（结果集对象）"><a href="#ResultSet（结果集对象）" class="headerlink" title="ResultSet（结果集对象）"></a>ResultSet（结果集对象）</h4><p><code>ResultSet rs = statement.executeQuery()</code>：</p><ul><li>next()：将光标从当前位置向前移动一行，并判断当前行是否为有效行，返回值为<code>boolean</code><ul><li>true：有效行，当前行有数据</li><li>false：无效行，当前行没有数据</li></ul></li><li>getXxx(…)：获取数据，可以根据列的标号获取，也可以根据列名获取（推荐）</li></ul><h2 id="预编译SQL"><a href="#预编译SQL" class="headerlink" title="预编译SQL"></a>预编译SQL</h2><p>静态SQL（参数硬编码）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> statement.executeUpdate(<span class="string">&quot;update user set age = 25 where id = 1&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;SQL执行完毕，影响的记录数为：&quot;</span> + i);</span><br></pre></td></tr></table></figure><p>预编译SQL（参数动态传递）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(<span class="string">&quot;Select * FROM user WHERE username = ? AND password = ?&quot;</span>);</span><br><span class="line">pstmt.setString(<span class="number">1</span>,<span class="string">&quot;daqiao&quot;</span>);</span><br><span class="line">pstmt.setString(<span class="number">2</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultset</span> <span class="operator">=</span> pstmt.executeQuery();</span><br></pre></td></tr></table></figure><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ol><li>安全：<ul><li>防止SQL注入：SQL注入即通过控制输入来修改事先定义好的SQL语句，以达到执行代码对服务器进行攻击的方法</li></ul></li><li>性能更高</li></ol><h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><p>MyBatis是一款优秀的持久层（dao层）框架，用于简化JDBC的开发</p><p><a href="#jdbc-select">查看之前的案例</a></p><p>对比使用MyBatis：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Mapper</span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line">// 查询全部</span><br><span class="line">@Select(&quot;select * from user&quot;);</span><br><span class="line">public List&lt;User&gt; findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyBatis官网：<a href="https://mybatis.org/mybatis-3/zh_CN/index.html">https://mybatis.org/mybatis-3/zh_CN/index.html</a></p><h2 id="入门程序"><a href="#入门程序" class="headerlink" title="入门程序"></a>入门程序</h2><ul><li><p>准备工作：</p><ol><li>创建SpringBoot工程、引入MyBatis相关依赖</li></ol><img src="/img/noteImg/6.png" alt="6" style="zoom:50%;" /><ol start="2"><li>准备数据库表user、实体类User，<a href="#jdbc-table">数据库表依旧使用之前的表</a></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> app.netlify.norlcyan.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id; <span class="comment">//ID</span></span><br><span class="line">    <span class="keyword">private</span> String username; <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String password; <span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> Integer age; <span class="comment">//年龄</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>配置MyBatis（在application.properties中数据库连接信息）</li></ol><img src="/img/noteImg/7.png" alt="7" style="zoom:50%;" /></li><li><p>编写Mybatis程序：编写Mybatis的持久层接口，定义SQL（注解&#x2F;XML）</p><ul><li>项目目录结构：</li></ul><img src="/img/noteImg/8.png" alt="8" style="zoom:50%;" /><ul><li><p>项目详细代码：</p><ul><li>UserMapper</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> app.netlify.norlcyan.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> app.netlify.norlcyan.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span> <span class="comment">// 应用程序在运行时，会自动扫描到这个接口，并创建一个实现类，这个实现类会自动注入到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        查询所有用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>MybatisDemoApplicationTests</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> app.netlify.norlcyan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> app.netlify.norlcyan.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> app.netlify.norlcyan.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span> <span class="comment">// SpringBoot单元测试的注解 - 当前测试类中的测试方法运行时，会启动springboot项目 - IOC容器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MybatisDemoApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.findAll();</span><br><span class="line">        userList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="辅助配置"><a href="#辅助配置" class="headerlink" title="辅助配置"></a>辅助配置</h2><h3 id="SQL语句识别"><a href="#SQL语句识别" class="headerlink" title="SQL语句识别"></a>SQL语句识别</h3><ul><li>默认在MyBatis中配置的SQL语句是不识别的。可以做如下配置：</li></ul><img src="/img/noteImg/9.png" alt="9" style="zoom:25%;" /><img src="/img/noteImg/10.png" alt="10" style="zoom:50%;" /><img src="/img/noteImg/11.png" alt="11" style="zoom:50%;" /><p>做完以上配置，user会报错：</p><p><img src="/img/noteImg/12.png" alt="12"></p><ul><li>产生原因：idea和数据库没有建立连接，不识别表信息</li><li>解决方式：在idea中配置MySQL数据库连接</li></ul><img src="/img/noteImg/13.png" alt="13" style="zoom:50%;" /><h3 id="MyBatis日志输出"><a href="#MyBatis日志输出" class="headerlink" title="MyBatis日志输出"></a>MyBatis日志输出</h3><ul><li>默认情况下，在MyBatis中，SQL语句执行时，用户并不能直接看到SQL语句的执行日志。加入如下配置，即可查看日志：</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">Mybatis_Demo</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#配置数据库连接信息</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/web01</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">1234</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#配置MyBatis</span></span><br><span class="line"><span class="attr">mybatis.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><ul><li>数据库连接池是个容器，负责分配、管理数据库连接（Connection）</li><li>它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</li><li>释放空间时间超过最大空闲时间的连接，来避免因为没有释放连接而引起的数据库连接遗漏</li><li>优势：<ol><li>资源重用</li><li>提升系统响应速度</li><li>避免数据库连接遗漏</li></ol></li></ul><p>标准接口：DataSource</p><ul><li>官方（sun）提供的数据库连接池接口，由第三方组织实现此接口</li><li>功能：获取连接</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection<span class="title function_">getConnetion</span><span class="params">()</span> <span class="keyword">throws</span> SQLException;</span><br></pre></td></tr></table></figure><p>常见产品：</p><ol><li>C3P0</li><li>DBCP</li><li>Druid（阿里巴巴开源的数据库连接池项目）</li><li>Hikari（SpringBoot默认）</li></ol><h3 id="切换数据库连接池"><a href="#切换数据库连接池" class="headerlink" title="切换数据库连接池"></a>切换数据库连接池</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/web01</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure><h2 id="增删改查操作"><a href="#增删改查操作" class="headerlink" title="增删改查操作"></a>增删改查操作</h2><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul><li>需求：根据ID删除用户信息</li><li>SQL：<code>delete from user where id = 5;</code></li><li>Mapper接口：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Delete(&quot;delete from user where id = 5&quot;);// 硬编码，不推荐</span></span><br><span class="line"><span class="meta">@Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">deleteById</span><span class="params">(Integer id)</span>;<span class="comment">// DML语句执行完毕的返回值，表示该DML语句执行完毕影响的行数</span></span><br></pre></td></tr></table></figure><p>MyBatis中的#号与$号：</p><table><thead><tr><th>符号</th><th>说明</th><th>场景</th><th>优缺点</th></tr></thead><tbody><tr><td>#{…}</td><td>占位符。执行时，会将#{…}替换为?，生成预编译SQL</td><td>参数值传递</td><td>安全、性能高（推荐）</td></tr><tr><td>${…}</td><td>拼接符。直接将参数拼接在SQL语句中，存在SQL注入问题</td><td>表名、字段名动态设置时使用</td><td>不安全、性能低</td></tr></tbody></table><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><ul><li>需求：添加一个用户</li><li>SQL：<code>insert into user(username,password,name,age) values(&#39;zhouyu&#39;,&#39;123456&#39;,&#39;周瑜&#39;,20);</code></li><li>Mapper接口：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Insert(&quot;insert into user(username,password,name,age) values(&#x27;zhouyu&#x27;,&#x27;123456&#x27;,&#x27;周瑜&#x27;,20)&quot;); </span></span><br><span class="line"><span class="meta">@Insert(&quot;insert into user(username,password,name,age) values(#&#123;username&#125;,#&#123;password&#125;,#&#123;name&#125;,#&#123;age&#125;)&quot;)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String username,String password,String name,Integer age)</span>;</span><br></pre></td></tr></table></figure><p>假设参数过多，可以使用对象封装起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into user(username,password,name,age) values(#&#123;username&#125;,#&#123;password&#125;,#&#123;name&#125;,#&#123;age&#125;)&quot;)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><ul><li>需求：根据ID更新用户信息</li><li>SQL：<code>update user set username = &#39;zhouyu&#39;,password = &#39;123456&#39;, name = &#39;周瑜&#39;, age = 20 where id = 1</code></li><li>Mapper接口：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;update user set username = #&#123;username&#125;,password = #&#123;password&#125;, name = #&#123;name&#125;, age = #&#123;age&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul><li>需求：根据用户名和密码查询用户信息</li><li>SQL：<code>select * from user where username = &#39;zhouyu&#39; and password = &#39;666888&#39;</code></li><li>Mapper接口：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user where username = #&#123;username&#125; and password = #&#123;password&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">findByUsernameAndPassword</span><span class="params">(String username,String password)</span>;</span><br><span class="line"><span class="comment">// 也可以写成以下形式：</span></span><br><span class="line"><span class="comment">// public User findByUsernameAndPassword(@Param(&quot;username&quot;) String username,@Param(&quot;password&quot;) String password);</span></span><br></pre></td></tr></table></figure><p>@Param注解的作用是为接口的方法形参起名字的</p><h2 id="XML映射配置"><a href="#XML映射配置" class="headerlink" title="XML映射配置"></a>XML映射配置</h2><ul><li>在Mybatis中，既可以通过注解配置SQL语句，也可以通过XML配置文件配置SQL语句</li><li>默认规则：<ol><li>XML映射文件的名称与Mapper接口名称一致，并且将XML映射文件和Mapper接口放置在相同包下（同包同名）</li><li>XML映射文件的namespace属性为Mapper接口全限定名一致</li><li>XML映射文件中sql语句的id与Mapper接口中的方法名一致，并保持返回类型一致</li></ol></li></ul><p><img src="/img/noteImg/14.png" alt="14"></p><img src="/img/noteImg/15.png" alt="15" style="zoom:50%;" /><p>Mapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XML：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;app.netlify.norlcyan.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;app.netlify.norlcyan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">select id, username, password, name, age from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="辅助配置-1"><a href="#辅助配置-1" class="headerlink" title="辅助配置"></a>辅助配置</h3><p>现在XML文件位置如下：</p><p><img src="/img/noteImg/16.png" alt="16"></p><p>配置XML映射文件的位置：</p><p>application.properties：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定XML映射配置文件的位置</span></span><br><span class="line"><span class="attr">mybatis.mapper-location</span>=<span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><h2 id="对于XML映射和注解的选择"><a href="#对于XML映射和注解的选择" class="headerlink" title="对于XML映射和注解的选择"></a>对于XML映射和注解的选择</h2><ul><li>在Mybatis的开发中，如果只是简单的增删改查功能，选择注解即可。但是如果要实现复杂的SQL功能，推荐使用XML来配置映射语句</li><li>官方说明：<a href="https://mybatis.net.cn/getting-started.html">https://mybatis.net.cn/getting-started.html</a></li></ul><h1 id="SpringBoot配置文件"><a href="#SpringBoot配置文件" class="headerlink" title="SpringBoot配置文件"></a>SpringBoot配置文件</h1><ul><li>SpringBoot项目提供了多种属性配置方式（properties、yaml、yml）</li></ul><p>application.properties：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">Mybatis_Demo</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#配置数据库连接信息</span></span><br><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/web01</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure><p>缺点：</p><ul><li>臃肿</li><li>层次结构不清晰</li></ul><p>application.yaml&#x2F;application.yml：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">datasource:</span></span><br><span class="line"><span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/web01</span></span><br><span class="line"><span class="attr">username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">password:</span> <span class="number">1234</span></span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>简洁</li><li>以数据为中心</li></ul><h2 id="yml配置文件"><a href="#yml配置文件" class="headerlink" title="yml配置文件"></a>yml配置文件</h2><p>格式：</p><ul><li>数值前边必须有空格，作为分隔符</li><li>使用缩进表示层级关系，缩进时，不允许使用Tab键，只能用空格（idea中会自动将Tab转换为空格）</li><li>缩进的空格数码不重要，只要相同层级的元素左侧对齐即可</li><li># 表示注释，从这个字符一直到行尾，都会被解析器忽略</li></ul><p>定义对象&#x2F;Map集合：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">张三</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>定义数组&#x2F;List&#x2F;Set集合：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hobby:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">java</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">game</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">sport</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：在yml格式的配置文件中，如果配置项的值是以0开头的，值需要使用<code>&#39; &#39;</code>引用他起来，因为以0开头在yml中表示8进制的数据</p></blockquote><h1 id="日志技术"><a href="#日志技术" class="headerlink" title="日志技术"></a>日志技术</h1><p>Java中的日志技术提供了多种选择，开发人员可以根据项目需求选择适合的日志框架，记录和分析应用程序的运行状态，提高代码质量和维护效率</p><p>优势：</p><ul><li>数据追踪</li><li>性能优化</li><li>问题排查</li><li>系统监控</li><li>……</li></ul><p>主流的日志框架：</p><ol><li>JUL（java.util.logging）：这是JavaSE平台提供的官方日志框架，配置相对简单，但不够灵活，性能较差</li><li>Log4j：主流的日志框架，提供了灵活的配置选项，支持多种输出目标</li><li>Logback：基于Log4j升级而来，提供了更多的功能和配置选项，性能也优于Log4j（推荐）</li><li>Slf4j（Simple Logging Facade For Java）：简单日志门面，提供了一套日志操作的标准接口及抽象类，允许应用程序使用不同的底层日志框架</li></ol><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ul><li>准备工作：引入Logback的依赖（<font color='red'>springboot项目中该依赖已传递</font>）、配置文件Logback.xml</li><li>记录日志：定义日志记录对象Logger，记录日志</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Logback.xml文件具体如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度  %logger&#123;50&#125;: 最长50个字符(超出.切割)  %msg：日志消息，%n是换行符 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 日志输出级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(LogTest.class);</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLog</span><span class="params">()</span> &#123;</span><br><span class="line">log.debug(<span class="string">&quot;开始计算...&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span>[] nums = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">34</span>,<span class="number">2</span>,<span class="number">23</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt;= nums.length;i++) &#123;</span><br><span class="line">    sum += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;计算结果为：&quot;</span> + sum);</span><br><span class="line">    log.debug(<span class="string">&quot;结束计算...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul><li>配置文件名：logback.xml</li><li>该配置文件是对Logback日志框架输出的日志进行控制的，可以来配置输出的格式、位置及日志开关等</li><li>常用的两种输出日志的位置：控制台、系统文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 系统文件输出 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><p>详细的配置修改查询AI即可</p><h2 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h2><ul><li>日志级别指的是日志信息的类型，日志都会分级别，常见的日志级别如下（级别由低到高）：</li></ul><table><thead><tr><th>日志级别</th><th>说明</th><th>记录方式</th></tr></thead><tbody><tr><td>trace</td><td>追踪，记录程序运行轨迹【使用很少】</td><td>log.trace(“…”)</td></tr><tr><td>debug</td><td>调试，记录程序调试过程中的信息，实际应用中一般将其视为最低级别【使用较多】</td><td>log.debug(“…”)</td></tr><tr><td>info</td><td>记录一般信息，描述程序运行的关键时间，如：网络连接、IO操作等【使用较多】</td><td>log.info(“…”)</td></tr><tr><td>warn</td><td>警告信息，记录潜在有害的情况【使用较多】</td><td>log.warn(“…”)</td></tr><tr><td>error</td><td>错误信息【使用较多】</td><td>log.error(“…”)</td></tr></tbody></table><p>可以在配置文件中，灵活的控制输出哪些类型的日志</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h1><ul><li>概念：事务是一组操作的集合，它是一个不可分割的工作单位。事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作<code>要么同时成功，要么同时失败</code></li><li>比如在WebAi实战项目中的添加员工信息，假设添加员工基本信息成功，但是添加工作经历的代码出现了错误，会导致数据库数据的不完整（只有员工基本信息，没有工作经历信息）</li></ul><p>默认MySQL的事务是自动提交的，也就是说，当执行一条DML语句，MySQL会立即隐式的提交事务</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul><li>事务控制主要三步操作：开启事务、提交事务&#x2F;回滚事务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction; <span class="operator">/</span> <span class="keyword">begin</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1. 保存员工信息</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">39</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;汤姆&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;13300001111&#x27;</span>,<span class="number">1</span>,<span class="number">4000</span>,<span class="string">&#x27;1.jpg&#x27;</span>,<span class="string">&#x27;2023-11-01&#x27;</span>,<span class="number">1</span>,now(),now());</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 保存员工工作经历</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp_expr(emp_id, <span class="keyword">begin</span>, <span class="keyword">end</span>, company, job)</span><br><span class="line">    <span class="keyword">values</span> (<span class="number">37</span>,<span class="string">&#x27;2020-01-01&#x27;</span>, <span class="string">&#x27;2021-01-01&#x27;</span>, <span class="string">&#x27;百度&#x27;</span>, <span class="string">&#x27;Java开发&#x27;</span>),</span><br><span class="line">           (<span class="number">37</span>,<span class="string">&#x27;2022-01-01&#x27;</span>, <span class="string">&#x27;2023-01-01&#x27;</span>, <span class="string">&#x27;阿里巴巴&#x27;</span>, <span class="string">&#x27;运维&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事物（全部成功） </span></span><br><span class="line"><span class="keyword">commit</span>; </span><br><span class="line"><span class="comment">-- 回滚事务（有一个失败）</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure><h2 id="Spring事务管理——控制事务"><a href="#Spring事务管理——控制事务" class="headerlink" title="Spring事务管理——控制事务"></a>Spring事务管理——控制事务</h2><ul><li>注解：<code>@Transactional</code></li><li>作用：将当前方法交给Spring进行事务管理，方法执行前，开启事务；成功执行则提交事务；出现异常则回滚事务</li><li>位置：在业务（Service）层的方法上、类上、接口上</li></ul><p>方法（推荐）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Emp emp)</span> &#123;</span><br><span class="line">    <span class="comment">// 设置默认值</span></span><br><span class="line">    emp.setCreateTime(LocalDateTime.now());</span><br><span class="line">    emp.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    <span class="comment">// 保存基本员工信息</span></span><br><span class="line">    empMapper.insert(emp);</span><br><span class="line">    <span class="comment">// 保存员工工作经历</span></span><br><span class="line">    List&lt;EmpExpr&gt; exprList = emp.getExprList();</span><br><span class="line">    <span class="keyword">if</span>(!CollectionUtils.isEmpty(exprList)) &#123;</span><br><span class="line">        <span class="comment">// 遍历集合，为empId赋值</span></span><br><span class="line">        exprList.forEach(expr -&gt; expr.setEmpId(emp.getId()));</span><br><span class="line">        empExprMapper.insertBatch(exprList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpService</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>配置日志信息，查看Spring事务管理的底层日志</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">level:</span></span><br><span class="line"><span class="attr">org.springframework.jdbc.support.JdbcTransactionManage:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h2 id="事务进阶——rollbackFor"><a href="#事务进阶——rollbackFor" class="headerlink" title="事务进阶——rollbackFor"></a>事务进阶——rollbackFor</h2><ul><li><code>rollbackFor</code>属性用于控制出现何种异常类型，回滚事务</li><li><code>Transactional</code>默认为出现运行时异常（RuntimeException）才会回滚</li></ul><p>以下代码，保存员工工作经历不会执行，但是并不会回滚</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line">@Override</span><br><span class="line">public void save(Emp emp) throws Exception &#123;</span><br><span class="line">    // 设置默认值</span><br><span class="line">    emp.setCreateTime(LocalDateTime.now());</span><br><span class="line">    emp.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    // 保存基本员工信息</span><br><span class="line">    empMapper.insert(emp);</span><br><span class="line">    </span><br><span class="line">    if (true) &#123;</span><br><span class="line">    throw new Exception(&quot;出错信息！！！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 保存员工工作经历</span><br><span class="line">    List&lt;EmpExpr&gt; exprList = emp.getExprList();</span><br><span class="line">    if(!CollectionUtils.isEmpty(exprList)) &#123;</span><br><span class="line">        // 遍历集合，为empId赋值</span><br><span class="line">        exprList.forEach(expr -&gt; expr.setEmpId(emp.getId()));</span><br><span class="line">        empExprMapper.insertBatch(exprList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后就可以正常使用了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = &#123;Exception.class&#125;)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Emp emp)</span> &#123;</span><br><span class="line">    <span class="comment">// 设置默认值</span></span><br><span class="line">    emp.setCreateTime(LocalDateTime.now());</span><br><span class="line">    emp.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    <span class="comment">// 保存基本员工信息</span></span><br><span class="line">    empMapper.insert(emp);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;出错信息！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 保存员工工作经历</span></span><br><span class="line">    List&lt;EmpExpr&gt; exprList = emp.getExprList();</span><br><span class="line">    <span class="keyword">if</span>(!CollectionUtils.isEmpty(exprList)) &#123;</span><br><span class="line">        <span class="comment">// 遍历集合，为empId赋值</span></span><br><span class="line">        exprList.forEach(expr -&gt; expr.setEmpId(emp.getId()));</span><br><span class="line">        empExprMapper.insertBatch(exprList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事务进阶——propagation"><a href="#事务进阶——propagation" class="headerlink" title="事务进阶——propagation"></a>事务进阶——propagation</h2><ul><li>事务传播行为：指的就是当一个事务方法被另一个事务方法调用时，这个事务方法应该如何进行事务控制</li></ul><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">userService.b();</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在a方法中的b方法的事务行为（加入、新建）可以通过<code>propagation</code>属性指定</p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中propagation的常见属性值有如下几种</p><table><thead><tr><th>属性值</th><th>含义</th></tr></thead><tbody><tr><td>REQUIRED</td><td>【默认值】需要事务，有则加入，无则创建新书屋</td></tr><tr><td>REQUIRES_NEW</td><td>需要新事物，无论有无，总是创建新事物</td></tr><tr><td>SUPPORTS</td><td>支持事务，有则加入，无则在<code>无事务状态</code>中运行</td></tr><tr><td>NOT_SUPPORTED</td><td>不支持事务，在<code>无事务状态</code>下运行，如果当前存在已有事务，则<code>挂起当前事务</code></td></tr><tr><td>MANDATORY</td><td>必须有事务，否则抛出异常</td></tr><tr><td>NEVER</td><td>必须没事务，否则抛出异常</td></tr></tbody></table><h2 id="四大特性"><a href="#四大特性" class="headerlink" title="四大特性"></a>四大特性</h2><ul><li>原子性：事务是不可分割的最小单元，要么全部成功，要么全部失败</li><li>一致性：事务完成时，必须使所有的数据都保持一致状态</li><li>隔离性：数据库系统提供的隔离机制，保证事务在不受外部并发影响的独立环境下运行</li><li>持久性：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><ul><li>文件上传：是指将本地图片、视频、音频等文件上传到服务器，供其他用户浏览或下载的过程</li></ul><p>前端：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/uploda&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">图像：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传文件&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;</span><br><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">handleFileUpload</span><span class="params">(String name,Integer age,MultipartFile file)</span> &#123;</span><br><span class="line">log.info(<span class="string">&quot;文件上传：&#123;&#125;&quot;</span>,file);</span><br><span class="line"><span class="keyword">return</span> Result.success;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收到前端发来的数据后，后端会将其保存为临时文件<code>xxx.tmp</code></p><h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><p>对之前的后端代码进行修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">upload</span><span class="params">(String name, Integer age, MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    log.info(<span class="string">&quot;接收参数：&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>,name,age,file);</span><br><span class="line">    <span class="comment">// 1. 获取原始文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    <span class="comment">// 2. 生成新文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">extension</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> UUID.randomUUID().toString() + extension;</span><br><span class="line">    <span class="comment">// 2. 保存文件</span></span><br><span class="line">    file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:/files/&quot;</span> + originalFilename));</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>为了确保上传的文件名不能与本地存储的文件名重复，需要使用<code>UUID</code>生成文件名</li><li>在 <strong>Spring Boot</strong> 中，默认的文件上传大小限制为 <strong>1MB</strong>，如果上传文件过大，需要在application.yaml中修改配置：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">servlet:</span></span><br><span class="line">  <span class="attr">multipart:</span></span><br><span class="line">    <span class="comment"># 最大单个文件大小</span></span><br><span class="line">    <span class="attr">max-file-size:</span> <span class="string">10MB</span></span><br><span class="line">    <span class="comment"># 最大请求大小（包括所有文件和表单数据）</span></span><br><span class="line">    <span class="attr">max-request-size:</span> <span class="string">100MB</span></span><br></pre></td></tr></table></figure><h2 id="阿里云OSS"><a href="#阿里云OSS" class="headerlink" title="阿里云OSS"></a>阿里云OSS</h2><p>阿里云对象存储OSS（Object Storage Service），是一款海量、安全、低成本、高可靠的云存储服务。使用OSS，可以通过网络随时存储和调用包括文本、图片、音频和视频等在内的各种文件</p><p>使用教程<a href="https://heuqqdmbyk.feishu.cn/wiki/PHp6wXaNUij3bokCXWrclz5anWh">09-后端Web实战(员工管理) - 飞书云文档</a></p><h1 id="登录校验"><a href="#登录校验" class="headerlink" title="登录校验"></a>登录校验</h1><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  sequenceDiagram    participant User as 用户    participant Frontend as 前端    participant Backend as 后端    participant Database as 数据库    User-&gt;&gt;Frontend: 输入用户名和密码    Frontend-&gt;&gt;Backend: 发送登录请求 (POST &#x2F;login)    Backend-&gt;&gt;Backend: 验证参数 (非空、格式等)    alt 参数验证不通过        Backend--&gt;&gt;Frontend: 返回错误信息 (400 Bad Request)        Frontend--&gt;&gt;User: 显示错误信息    else 参数验证通过        Backend-&gt;&gt;Database: 查询用户信息 (SELECT * FROM users WHERE username &#x3D; ?)        Database--&gt;&gt;Backend: 返回用户信息        alt 用户不存在            Backend--&gt;&gt;Frontend: 返回错误信息 (401 Unauthorized)            Frontend--&gt;&gt;User: 显示错误信息        else 用户存在            Backend-&gt;&gt;Backend: 验证密码 (compare password)            alt 密码验证失败                Backend--&gt;&gt;Frontend: 返回错误信息 (401 Unauthorized)                Frontend--&gt;&gt;User: 显示错误信息            else 密码验证成功                Backend-&gt;&gt;Backend: 生成Token (JWT)                Backend--&gt;&gt;Frontend: 返回登录成功信息及Token (200 OK)                Frontend--&gt;&gt;User: 跳转到主页            end        end    end  </pre></div><h2 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h2><ul><li><p>会话：用户打开浏览器，访问web服务器的资源，会话建立，直到有一方断开连接，会话结束。在一次会话中可以包含多次请求和响应</p></li><li><p>会话跟踪：一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间共享数据</p></li><li><p>会话跟踪方案：</p><ul><li>客户端会话跟踪技术：Cookie</li><li>服务端会话跟踪技术：Session</li><li>令牌技术</li></ul></li></ul><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>案例来自黑马程序员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.pojo.Result;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HttpSession演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置Cookie</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/c1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">cookie1</span><span class="params">(HttpServletResponse response)</span>&#123;</span><br><span class="line">        response.addCookie(<span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;login_username&quot;</span>,<span class="string">&quot;itheima&quot;</span>)); <span class="comment">//设置Cookie/响应Cookie</span></span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取Cookie</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/c2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">cookie2</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cookie.getName().equals(<span class="string">&quot;login_username&quot;</span>))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;login_username: &quot;</span>+cookie.getValue()); <span class="comment">//输出name为login_username的cookie</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cookie的优点：HTTP协议中支持的技术</p><p>Cookie的缺点：</p><ul><li>移动端APP无法使用Cookie</li><li>不安全，用户可以自己禁用Cookie</li><li>Cookie不能跨域</li></ul><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>案例来自黑马程序员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.pojo.Result;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HttpSession演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/s1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">session1</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;HttpSession-s1: &#123;&#125;&quot;</span>, session.hashCode());</span><br><span class="line"></span><br><span class="line">        session.setAttribute(<span class="string">&quot;loginUser&quot;</span>, <span class="string">&quot;tom&quot;</span>); <span class="comment">//往session中存储数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/s2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">session2</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;HttpSession-s2: &#123;&#125;&quot;</span>, session.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">loginUser</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;loginUser&quot;</span>); <span class="comment">//从session中获取数据</span></span><br><span class="line">        log.info(<span class="string">&quot;loginUser: &#123;&#125;&quot;</span>, loginUser);</span><br><span class="line">        <span class="keyword">return</span> Result.success(loginUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Session的优点：存储在服务端，安全</p><p>Session的缺点：</p><ul><li>服务器集群环境下无法直接使用Session</li><li>包括所有Cookie中的缺点</li></ul><h3 id="令牌"><a href="#令牌" class="headerlink" title="令牌"></a>令牌</h3><p>令牌的优点：</p><ul><li>支持PC端、移动端</li><li>解决集群环境下的认证问题</li><li>减轻服务端存储压力</li></ul><p>令牌的缺点：</p><ul><li>需要程序员自己实现</li></ul><h4 id="JWT令牌"><a href="#JWT令牌" class="headerlink" title="JWT令牌"></a>JWT令牌</h4><ul><li>全称：JSON Web Token（<a href="http://jwt.io)/">http://jwt.io）</a></li><li>定义了一种简洁的、自包含的格式，用于在通信双方以JSON数据格式安全的传输信息</li><li>组成：<ol><li>第一部分：Header（头），记录令牌类型、算法签名等，例如：<code>&#123;&quot;alg&quot;:&quot;HS256&quot;, &quot;type&quot;:&quot;JWT&quot;&#125;</code></li><li>第二部分：Payload（有效载荷），携带一些自定义信息、默认信息等。例如：<code>&#123;&quot;id&quot;:&quot;1&quot;,&quot;username&quot;:&quot;Tom&quot;&#125;</code></li><li>第三部分：Signature（签名），防止Token被篡改、确保安全性。将header、payload融入，并加入指定密钥，通过指定签名算法计算而来</li></ol></li></ul><p>使用步骤：</p><ol><li>引入<code>jjwt</code>的依赖</li><li>调用官方提供的工具类<code>Jwts</code>来生成或解析<code>jwt令牌</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGenerateJwt</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; dataMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    dataMap.put(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    dataMap.put(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;norlcyan&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> Jwts.builder().signWith(SignatureAlgorithm.HS256, <span class="string">&quot;bm9ybGN5YW4=&quot;</span>) <span class="comment">// 指定加密算法和密钥</span></span><br><span class="line">            .addClaims(dataMap) <span class="comment">// 添加自定义信息</span></span><br><span class="line">            .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + <span class="number">3600</span> * <span class="number">1000</span>)) <span class="comment">// 设置过期时间</span></span><br><span class="line">            .compact(); <span class="comment">// 生成令牌</span></span><br><span class="line">    System.out.println(jwt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析JWT令牌</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testParseJwt</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJub3JsY3lhbiIsImV4cCI6MTczOTA5NTAzOH0.grGPR6b2Dib5qW74VIHPSujQec-TuKRTMduoTSnBEis&quot;</span>;</span><br><span class="line">    <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser().setSigningKey(<span class="string">&quot;bm9ybGN5YW4=&quot;</span>).parseClaimsJws(token).getBody();</span><br><span class="line">    System.out.println(claims);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="过滤器Filter"><a href="#过滤器Filter" class="headerlink" title="过滤器Filter"></a>过滤器Filter</h4><ul><li>概念：Filter过滤器，是JavaWeb三大组件（Servlet、Filter、Listener）之一</li><li>过滤器可以把对资源的请求拦截下来，从而实现一些特殊的功能</li><li>过滤器一般完成一些通用的操作，比如：登录校验、统一编码处理、敏感字符处理等</li></ul><h5 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h5><ol><li>定义Filter：定义一个类，实现Filter接口，并实现其所有方法</li><li>配置Filter：Filter类上加<code>@WebFilter</code>注解，配置拦截路径。引导类上加<code>@ServletComponentScan</code>开启Servlet组件支持</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> app.netlify.norlcyan.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span><span class="comment">// 拦截所有请求</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 初始化方法，web服务器启动，创建Filter实例时调用，只调用一次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 拦截到请求时，调用该方法，可以调用多次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse,FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;拦截到了请求...&quot;</span>);</span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        chain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 销毁方法，web服务器关闭时调用，只调用一次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引导类</span></span><br><span class="line"><span class="meta">@servletComponentScan</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TliasManagementApplication</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>拦截到请求后需要执行放行操作，否则服务器不会返回数据</li><li>并不是所有请求都需要校验令牌，如登录请求、注册请求</li><li>当有令牌，且令牌校验通过后，放行；否则返回未登录错误结果</li></ol><h5 id="令牌校验Filter流程"><a href="#令牌校验Filter流程" class="headerlink" title="令牌校验Filter流程"></a>令牌校验Filter流程</h5><img src="/img/noteImg/流程图.png" alt="流程图" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> app.netlify.norlcyan.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> app.netlify.norlcyan.utils.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="comment">// logback</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.slf4j.<span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> org.slf4j.LoggerFactory.getLogger(TokenFilter.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        Filter.<span class="built_in">super</span>.init(filterConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line">        <span class="comment">// 1. 获取到请求路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 判断是否为登录请求（/login），是则放行</span></span><br><span class="line">        <span class="keyword">if</span> (requestURI.contains(<span class="string">&quot;/login&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;登录请求，放行&quot;</span>);</span><br><span class="line">            filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 获取请求头中的Token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 判断Token是否存在，不存在则返回401状态码</span></span><br><span class="line">        <span class="keyword">if</span> (token == <span class="literal">null</span> || token.isEmpty()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;令牌为空，返回401状态码&quot;</span>);</span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 解析Token，获取其中的用户信息</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JwtUtils.parseJwt(token);</span><br><span class="line">            log.info(<span class="string">&quot;解析Token成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;解析Token失败，返回401状态码&quot;</span>);</span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 校验通过</span></span><br><span class="line">        log.info(<span class="string">&quot;校验通过，放行&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        Filter.<span class="built_in">super</span>.destroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Filter拦截路径"><a href="#Filter拦截路径" class="headerlink" title="Filter拦截路径"></a>Filter拦截路径</h5><table><thead><tr><th>拦截路径</th><th>urlPatterns值</th><th>含义</th></tr></thead><tbody><tr><td>拦截具体路径</td><td>&#x2F;login</td><td>只有访问&#x2F;login路径时，才会被拦截</td></tr><tr><td>目录拦截</td><td>&#x2F;emps&#x2F;*</td><td>访问&#x2F;emps下的所有资源，都会被拦截</td></tr><tr><td>拦截所有</td><td>&#x2F;*</td><td>访问所有资源，都会被拦截</td></tr></tbody></table><h5 id="Filter过滤器链"><a href="#Filter过滤器链" class="headerlink" title="Filter过滤器链"></a>Filter过滤器链</h5><ul><li>一个Web应用中，可以配置多个过滤器，这多个过滤器就形成了一个过滤器链</li><li>注解配置的Filter，优先级是按照过滤器类名（字符串）的自然排序</li></ul><h4 id="拦截器Interceptor"><a href="#拦截器Interceptor" class="headerlink" title="拦截器Interceptor"></a>拦截器Interceptor</h4><ul><li>概念：是一种动态拦截方法调用的机制，类似于过滤器。Spring框架中提供的，主要用于动态拦截控制器方法的执行</li><li>作用：拦截请求，在指定的方法调用前后，根据业务需要执行预先设定的代码</li></ul><h5 id="快速入门-2"><a href="#快速入门-2" class="headerlink" title="快速入门"></a>快速入门</h5><ol><li>定义拦截器，实现HandlerInterceptor接口，并实现其所有方法</li><li>注册拦截器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> app.netlify.norlcyan.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">// logback</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.slf4j.<span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> org.slf4j.LoggerFactory.getLogger(DemoInterceptor.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>   <span class="comment">// 目标资源方法执行前执行。返回true：放行；返回false：不放行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;preHandle...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>   <span class="comment">// 目标资源方法执行后执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;postHandle...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>   <span class="comment">// 视图渲染完毕后执行，最后执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;afterCompletion...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DemoInterceptor demoInterceptor</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">registry.addInterceptor(demoInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="令牌校验Interceptor"><a href="#令牌校验Interceptor" class="headerlink" title="令牌校验Interceptor"></a>令牌校验Interceptor</h5><p>流程与Filter类似</p><p>TokenInterceptor：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> app.netlify.norlcyan.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> app.netlify.norlcyan.utils.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@WebFilter(urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="comment">// logback</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.slf4j.<span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> org.slf4j.LoggerFactory.getLogger(TokenFilter.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        Filter.<span class="built_in">super</span>.init(filterConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line">        <span class="comment">// 1. 获取到请求路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 判断是否为登录请求（/login），是则放行</span></span><br><span class="line">        <span class="keyword">if</span> (requestURI.contains(<span class="string">&quot;/login&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;登录请求，放行&quot;</span>);</span><br><span class="line">            filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 获取请求头中的Token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 判断Token是否存在，不存在则返回401状态码</span></span><br><span class="line">        <span class="keyword">if</span> (token == <span class="literal">null</span> || token.isEmpty()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;令牌为空，返回401状态码&quot;</span>);</span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 解析Token，获取其中的用户信息</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JwtUtils.parseJwt(token);</span><br><span class="line">            log.info(<span class="string">&quot;解析Token成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;解析Token失败，返回401状态码&quot;</span>);</span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 校验通过</span></span><br><span class="line">        log.info(<span class="string">&quot;校验通过，放行&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        Filter.<span class="built_in">super</span>.destroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WebConfig：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> app.netlify.norlcyan.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> app.netlify.norlcyan.interceptor.DemoInterceptor;</span><br><span class="line"><span class="keyword">import</span> app.netlify.norlcyan.interceptor.TokenInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenInterceptor tokenInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(tokenInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);    <span class="comment">// 拦截所有请求</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="拦截路径"><a href="#拦截路径" class="headerlink" title="拦截路径"></a>拦截路径</h5><p>拦截器可以根据需求，配置不同的拦截路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class="line">@Override</span><br><span class="line">    registry.addInterceptor(tokenInterceptor).addPathPatterns(&quot;/**&quot;).excludePathPatterns(&quot;/login&quot;);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>excludePathPatterns：指定哪些请求不拦截</p><table><thead><tr><th>拦截路径</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td>&#x2F;*</td><td>一级路径</td><td>能匹配&#x2F;depts,&#x2F;emps等，不能匹配&#x2F;depts&#x2F;1</td></tr><tr><td>&#x2F;**</td><td>任意级路径</td><td>所有路径都能匹配</td></tr><tr><td>&#x2F;depts&#x2F;*</td><td>&#x2F;depts下的一级路径</td><td>能匹配&#x2F;depts&#x2F;1，不能匹配&#x2F;depts&#x2F;1&#x2F;2，&#x2F;depts</td></tr><tr><td>&#x2F;depts&#x2F;**</td><td>&#x2F;depts下的任意级路径</td><td>&#x2F;depts下的所有路径，如&#x2F;depts&#x2F;1，&#x2F;depts&#x2F;1&#x2F;2</td></tr></tbody></table><h5 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h5><p>优先Filter，其次才是拦截器（拦截器是在Spring框架下的）</p><p>实际项目中，二选一即可</p><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><ul><li>AOP：Aspect Oriented Programming（面向切面编程、面向方面编程），可以简单理解为就是面向特定方法编程</li><li>场景：案例中部分业务方法运行较慢，定位执行耗时较长的方法，此时需要统计每个业务方法的执行耗时</li></ul><p>原始方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">beginTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">List&lt;Dept&gt; deptList = deptMapper.list();</span><br><span class="line"><span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">log.info(<span class="string">&quot;执行耗时：&#123;&#125;&quot;</span>,endTime - beginTime);</span><br><span class="line"><span class="keyword">return</span> deptList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AOP方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecordTimeAspect</span> &#123;</span><br><span class="line"><span class="meta">@Around(&quot;execution(* xxx.xxx.service.*.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">recordTime</span><span class="params">(ProceedingJointPoint pjp)</span> &#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">beginTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line"><span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">log.info(<span class="string">&quot;执行耗时：&#123;&#125;&quot;</span>,endTime - beginTime);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优势：</p><ol><li>减少重复代码</li><li>代码无侵入</li><li>提高开发效率</li><li>维护方便</li></ol><p>提示：AOP是一种<code>思想</code>，而在Spring框架中对这种思想进行的实现，就是<code>Spring AOP</code></p><p>个人理解：相当于给方法装了个插件，方法本身不会被修改</p><h2 id="AOP基础"><a href="#AOP基础" class="headerlink" title="AOP基础"></a>AOP基础</h2><h3 id="快速入门-3"><a href="#快速入门-3" class="headerlink" title="快速入门"></a>快速入门</h3><p>需求：统计所有业务层方法的执行耗时</p><ol><li>导入依赖：在pom.xml中引入AOP的依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>编写AOP程序：针对特定的方法根据业务需要进行编程</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecordTimeAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Around(&quot;execution(* xxx.xxx.service.impl.*.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">recordTime</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AOP核心概念"><a href="#AOP核心概念" class="headerlink" title="AOP核心概念"></a>AOP核心概念</h2><ul><li>连接点：JoinPoint，可以被AOP控制的方法（暗含方法执行时的相关信息）</li></ul><img src="/img/noteImg/AOP01.png" alt="AOP01" style="zoom:50%;" /><ul><li>通知：Advice，指那些重复的逻辑，也就是共性功能（最终体现为一个方法）</li></ul><img src="/img/noteImg/AOP02.png" alt="AOP02" style="zoom:50%;" /><ul><li>切入点：PointCut，匹配连接点的条件，通知仅会在切入点方法执行时被应用</li></ul><img src="/img/noteImg/AOP03.png" alt="AOP03" style="zoom:50%;" /><ul><li>切面：Aspect，描述通知与切入点的对应关系（通知+切入点）</li></ul><img src="/img/noteImg/AOP04.png" alt="AOP04" style="zoom:50%;" /><ul><li>目标对象：Target，通知所应用的对象</li></ul><img src="/img/noteImg/AOP05.png" alt="AOP05" style="zoom:50%;" /><h2 id="AOP进阶"><a href="#AOP进阶" class="headerlink" title="AOP进阶"></a>AOP进阶</h2><h3 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h3><ul><li>根据通知方法执行时机的不同，将通知类型分为以下常见的五类：<ol><li>@Around：环绕通知，此注解标注的通知方法在目标方法前、后都被执行</li><li>@Before：前置通知，此注解标注的通知方法在目标方法前被执行</li><li>@After：后置通知，此注解标注的通知方法在目标方法后被执行，无论是否有异常都会执行</li><li>@AfterReturning：返回后通知，此注解标注的通知方法在目标方法后被执行，有异常不会执行</li><li>@AfterThrowing：异常后通知，此注解标注的通知方法发生异常后执行</li></ol></li></ul><p>注意：</p><ol><li>@Around环绕通知需要自己调用<code>ProceedingJoinPoint.proceed()</code>来让原始方法执行，其他通知不需要考虑目标方法执行</li><li>@Around环绕通知方法的返回值，必须指定为Object，来接收原始方法的返回值</li></ol><h3 id="PointCut"><a href="#PointCut" class="headerlink" title="@PointCut"></a>@PointCut</h3><p>该注解的作用是将公共的切点表达式抽取出来，需要用到时引用该切点表达式即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PointCut(&quot;execution(* com.itheima.service.impl.DeptServiceImpl.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">recordTime</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;...&#125;</span><br></pre></td></tr></table></figure><h3 id="通知顺序"><a href="#通知顺序" class="headerlink" title="通知顺序"></a>通知顺序</h3><ul><li>当有多个切面的切入点都匹配到了目标方法，目标方法运行时，多个通知方法都会被执行</li><li>执行顺序：<ul><li>不同切面类中，默认按照切面类的类名字母排序：<ul><li>目标方法前的通知方法：字母排名靠前的先执行</li><li>目标方法后的通知方法：字母排名靠前的后执行</li></ul></li><li>用<code>@Order(数字)</code>加在切面类上来控制顺序<ul><li>目标方法前的通知方法：数字小的先执行</li><li>目标方法前的通知方法：数字小的后执行</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Order(5)</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecordTimeAspect</span>&#123;...&#125;</span><br></pre></td></tr></table></figure><h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><ul><li><p>介绍：描述切入点方法的一种表达式</p></li><li><p>作用：用来决定项目中的哪些方法需要加入通知</p></li><li><p>常见形式：</p><ol><li><code>execution(...)</code>：根据方法的签名来匹配</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;execution(public void com.itheima.service.impl.DeptServiceImpl.delete(java.lang.Integer))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span> &#123;..&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>@annotation(...)</code>：根据注解匹配</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;@annotation(com.itheima.anno.Log)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="execution"><a href="#execution" class="headerlink" title="execution"></a>execution</h4><p>主要根据方法的返回值、包名、类名、方法名、方法参数等信息来匹配，语法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(访问修饰符? 返回值 + 包名.类名.?方法名(方法参数) <span class="keyword">throws</span> 异常?)</span><br></pre></td></tr></table></figure><ul><li><p>其中带<code>?</code>的表示可以省略的部分</p><ol><li><p>访问修饰符：可省略（比如：public、protected）</p></li><li><p>包名.类名：可省略（不建议省略）</p></li><li><p>throws 异常：可省略（注意是方法上声明抛出的异常，不是实际抛出的异常）</p></li></ol></li><li><p>可以使用通配符描述切入点</p><ol><li><code>*</code>：单个独立的任意符号，可以通配任意返回值、包名、类名、方法名、任意类型的一个参数，也可以通配包、类、方法名的一部分</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* com.*.service.*.update*(*))</span><br></pre></td></tr></table></figure><ol start="2"><li><code>..</code>：多个连续的任意符号，可以通配任意层级的包，或任意类型、任意个数的参数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* com.itheima..DeptService.*(..))</span><br></pre></td></tr></table></figure></li></ul><p>书写建议：</p><ol><li>所有业务方法名在命名时尽量规范，方便切入点表达式快速匹配。如：<code>findXxx</code>、<code>updateXxx</code></li><li>描述切入点方法通常基于接口描述，而不是直接描述实现类，增强拓展性</li><li>在满足业务需要的前提下，尽量缩小切入点的匹配范围。如：包名尽量不使用<code>..</code>，使用<code>*</code>匹配单个包</li></ol><h3 id="annotation"><a href="#annotation" class="headerlink" title="@annotation"></a>@annotation</h3><ul><li><code>@annotation</code>切入点表达式，用于匹配标识有特定注解的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;@annotation(com.itheima.anno.LogOperation)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">logAround</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@LogOperation</span><span class="comment">// 匹配</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;根据ID删除部门数据：&quot;</span> + id);</span><br><span class="line">deptService.delete(id);</span><br><span class="line"><span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：<code>@LogOperation</code>该注解为用户自定义注解，关于创建用户自定义注解在<a href="https://norlcyan.netlify.app/2024/07/27/java/">Java | Norlcyan’s Blog</a>提及</p><h3 id="连接点"><a href="#连接点" class="headerlink" title="连接点"></a>连接点</h3><ul><li>在Spring中用JoinPoint抽象了连接点，用它可以获得方法执行时的相关信息，如目标类名、方法名、方法参数等<ul><li>对于@Around通知，获取连接点信息<font color='red'>只能</font>使用<code>ProceedingJoinPoint</code></li><li>对于其他四种通知，获取连接点信息<font color='red'>只能</font>使用JoinPoint，它是ProceedingJoinPoint的父类型</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;execution(* com.itheima.service.DeptService.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> joinPoint.getTarget().getClass().getName();<span class="comment">// 获取目标类名</span></span><br><span class="line"><span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();<span class="comment">// 获取目标方法签名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();<span class="comment">// 获取目标方法名</span></span><br><span class="line">Object[] args = joinPoint.getArgs();<span class="comment">// 获取目标方法运行参数</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;execution(* com.itheima.service.DeptService.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> joinPoint.getTarget().getClass().getName();<span class="comment">// 获取目标类名</span></span><br><span class="line"><span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();<span class="comment">// 获取目标方法签名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();<span class="comment">// 获取目标方法名</span></span><br><span class="line">Object[] args = joinPoint.getArgs();<span class="comment">// 获取目标方法运行参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AOP案例"><a href="#AOP案例" class="headerlink" title="AOP案例"></a>AOP案例</h2><ul><li>将Tlias智能学习辅助系统案例中增删改接口的操作日志记录到数据库中</li><li>日志信息包含：操作人、操作时间、执行方法的全类名、执行方法名、方法运行时参数、返回值、方法执行时长</li></ul><p>创建操作日志表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 操作日志表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> operate_log(</span><br><span class="line">    id <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">    operate_emp_id <span class="type">int</span> unsigned comment <span class="string">&#x27;操作人ID&#x27;</span>,</span><br><span class="line">    operate_time datetime comment <span class="string">&#x27;操作时间&#x27;</span>,</span><br><span class="line">    class_name <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;操作的类名&#x27;</span>,</span><br><span class="line">    method_name <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;操作的方法名&#x27;</span>,</span><br><span class="line">    method_params <span class="type">varchar</span>(<span class="number">2000</span>) comment <span class="string">&#x27;方法参数&#x27;</span>,</span><br><span class="line">    return_value <span class="type">varchar</span>(<span class="number">2000</span>) comment <span class="string">&#x27;返回值&#x27;</span>,</span><br><span class="line">    cost_time <span class="type">bigint</span> unsigned comment <span class="string">&#x27;方法执行耗时, 单位:ms&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;操作日志表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>创建AOP类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> app.netlify.norlcyan.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> app.netlify.norlcyan.mapper.OperateLogMapper;</span><br><span class="line"><span class="keyword">import</span> app.netlify.norlcyan.pojo.OperateLog;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">    <span class="comment">// logback</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.slf4j.<span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> org.slf4j.LoggerFactory.getLogger(LogAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OperateLogMapper operateLogMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(app.netlify.norlcyan.anno.Log)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">logOperation</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算耗时</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">long</span> <span class="variable">costTime</span> <span class="operator">=</span> endTime - startTime;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建日志实体</span></span><br><span class="line">        <span class="type">OperateLog</span> <span class="variable">olog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OperateLog</span>();</span><br><span class="line">        olog.setOperateEmpId(<span class="number">1</span>);</span><br><span class="line">        olog.setOperateTime(LocalDateTime.now());</span><br><span class="line">        olog.setClassName(joinPoint.getTarget().getClass().getName());</span><br><span class="line">        olog.setMethodName(joinPoint.getSignature().getName());</span><br><span class="line">        olog.setMethodParams(Arrays.toString(joinPoint.getArgs()));</span><br><span class="line">        olog.setReturnValue(result != <span class="literal">null</span> ? result.toString() : <span class="string">&quot;void&quot;</span>);</span><br><span class="line">        olog.setCostTime(costTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存日志</span></span><br><span class="line">        log.info(<span class="string">&quot;日志记录：&#123;&#125;&quot;</span>, olog);</span><br><span class="line">        operateLogMapper.insert(olog);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于只记录增删改操作，所以使用<code>@annotation</code>注解，创建自定义注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> app.netlify.norlcyan.anno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据数据库结构创建实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> app.netlify.norlcyan.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperateLog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id; <span class="comment">//ID</span></span><br><span class="line">    <span class="keyword">private</span> Integer operateEmpId; <span class="comment">//操作人ID</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime operateTime; <span class="comment">//操作时间</span></span><br><span class="line">    <span class="keyword">private</span> String className; <span class="comment">//操作类名</span></span><br><span class="line">    <span class="keyword">private</span> String methodName; <span class="comment">//操作方法名</span></span><br><span class="line">    <span class="keyword">private</span> String methodParams; <span class="comment">//操作方法参数</span></span><br><span class="line">    <span class="keyword">private</span> String returnValue; <span class="comment">//操作方法返回值</span></span><br><span class="line">    <span class="keyword">private</span> Long costTime; <span class="comment">//操作耗时</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OperateLog</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OperateLog</span><span class="params">(Integer id, Integer operateEmpId, LocalDateTime operateTime, String className, String methodName, String methodParams, String returnValue, Long costTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.operateEmpId = operateEmpId;</span><br><span class="line">        <span class="built_in">this</span>.operateTime = operateTime;</span><br><span class="line">        <span class="built_in">this</span>.className = className;</span><br><span class="line">        <span class="built_in">this</span>.methodName = methodName;</span><br><span class="line">        <span class="built_in">this</span>.methodParams = methodParams;</span><br><span class="line">        <span class="built_in">this</span>.returnValue = returnValue;</span><br><span class="line">        <span class="built_in">this</span>.costTime = costTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getOperateEmpId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> operateEmpId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOperateEmpId</span><span class="params">(Integer operateEmpId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.operateEmpId = operateEmpId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LocalDateTime <span class="title function_">getOperateTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> operateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOperateTime</span><span class="params">(LocalDateTime operateTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.operateTime = operateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getClassName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClassName</span><span class="params">(String className)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.className = className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMethodName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> methodName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMethodName</span><span class="params">(String methodName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.methodName = methodName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMethodParams</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> methodParams;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMethodParams</span><span class="params">(String methodParams)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.methodParams = methodParams;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getReturnValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setReturnValue</span><span class="params">(String returnValue)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.returnValue = returnValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getCostTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> costTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCostTime</span><span class="params">(Long costTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.costTime = costTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建Mapper对数据库进行操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> app.netlify.norlcyan.mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> app.netlify.norlcyan.pojo.OperateLog;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OperateLogMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入日志数据</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into operate_log (operate_emp_id, operate_time, class_name, method_name, method_params, return_value, cost_time) &quot; +</span></span><br><span class="line"><span class="meta">            &quot;values (#&#123;operateEmpId&#125;, #&#123;operateTime&#125;, #&#123;className&#125;, #&#123;methodName&#125;, #&#123;methodParams&#125;, #&#123;returnValue&#125;, #&#123;costTime&#125;);&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(OperateLog log)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对需要记录的操作加上<code>@annotation</code>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> app.netlify.norlcyan.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> app.netlify.norlcyan.anno.Log;</span><br><span class="line"><span class="keyword">import</span> app.netlify.norlcyan.pojo.*;</span><br><span class="line"><span class="keyword">import</span> app.netlify.norlcyan.service.EmpService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 员工管理Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/emps&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.slf4j.<span class="type">Logger</span> <span class="variable">log</span></span><br><span class="line">            <span class="operator">=</span> org.slf4j.LoggerFactory.getLogger(EmpController.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分页查询</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">page</span><span class="params">(EmpQueryParam empQueryParam)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;分页查询,参数:&#123;&#125;&quot;</span>,empQueryParam);</span><br><span class="line">        PageResult&lt;Emp&gt; pageResult = empService.page(empQueryParam);</span><br><span class="line">        <span class="keyword">return</span> Result.success(pageResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存员工信息</span></span><br><span class="line">    <span class="meta">@Log</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Emp emp)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;保存员工信息,参数:&#123;&#125;&quot;</span>,emp);</span><br><span class="line">        empService.save(emp);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除员工信息</span></span><br><span class="line">    <span class="meta">@Log</span></span><br><span class="line">    <span class="meta">@DeleteMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Integer&gt; ids)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;删除员工信息,参数:&#123;&#125;&quot;</span>, ids);</span><br><span class="line">        empService.delete(ids);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询回显，返回数据包括员工基本信息和员工工作经历</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getInfo</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;查询回显,参数:&#123;&#125;&quot;</span>, id);</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> empService.getInfo(id);</span><br><span class="line">        <span class="keyword">return</span> Result.success(emp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改员工信息</span></span><br><span class="line">    <span class="meta">@Log</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Emp emp)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;修改员工信息,参数:&#123;&#125;&quot;</span>, emp);</span><br><span class="line">        empService.update(emp);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询所有员工信息</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;查询所有员工信息&quot;</span>);</span><br><span class="line">        List&lt;Emp&gt; list = empService.list();</span><br><span class="line">        <span class="keyword">return</span> Result.success(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在之前创建的AOP类代码中，获取员工数据是写死的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">olog.setOperateEmpId(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>想要获取员工动态数据，可以从令牌的Token中解析得到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> app.netlify.norlcyan.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> app.netlify.norlcyan.utils.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">// logback</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(DemoInterceptor.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. 获取到请求路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 判断是否为登录请求（/login），是则放行</span></span><br><span class="line">        <span class="keyword">if</span> (requestURI.contains(<span class="string">&quot;/login&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;登录请求，放行&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 获取请求头中的Token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 判断Token是否存在，不存在则返回401状态码</span></span><br><span class="line">        <span class="keyword">if</span> (token == <span class="literal">null</span> || token.isEmpty()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;令牌为空，返回401状态码&quot;</span>);</span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5. 解析Token，获取其中的用户信息</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JwtUtils.parseJwt(token);</span><br><span class="line">            log.info(<span class="string">&quot;解析Token成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;解析Token失败，返回401状态码&quot;</span>);</span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6. 校验通过</span></span><br><span class="line">        log.info(<span class="string">&quot;校验通过，放行&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要将其中的参数发送给AOP、Controller、Serivce，需要通过<code>ThreadLocal</code>来实现</p><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><ul><li>ThreadLocal并不是一个Thread，而是Thread的局部变量</li><li>ThreadLocal为每个线程提供一份单独的存储空间，具有线程隔离效果，不同的线程之间不会相互干扰</li><li>ThreadLocal常用方法：<ul><li>public void set(T value)：设置当前线程的线程局部变量</li><li>public T get()：返回当前线程所对应的线程局部变量</li><li>public void remove()：移除当前线程的线程局部变量</li></ul></li></ul><h3 id="获取当前登录员工"><a href="#获取当前登录员工" class="headerlink" title="获取当前登录员工"></a>获取当前登录员工</h3><p>具体操作步骤：</p><ol><li>定义ThreadLocal操作的工具类，用于操作当前登录员工ID</li><li>在拦截器类中，解析当前完成登录员工ID，将其存入ThreadLocal（用完之后需要将其删除）</li><li>在AOP程序中，从ThreadLocal中获取当前登录员工的ID</li></ol><p>ThreadLocal工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> app.netlify.norlcyan.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CurrentHolder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Integer&gt; CURRENT_LOCAL = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCurrentId</span><span class="params">(Integer employeeId)</span> &#123;</span><br><span class="line">        CURRENT_LOCAL.set(employeeId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">getCurrentId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> CURRENT_LOCAL.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        CURRENT_LOCAL.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改拦截器相关代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> app.netlify.norlcyan.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> app.netlify.norlcyan.utils.CurrentHolder;</span><br><span class="line"><span class="keyword">import</span> app.netlify.norlcyan.utils.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">// logback</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(DemoInterceptor.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. 获取到请求路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 判断是否为登录请求（/login），是则放行</span></span><br><span class="line">        <span class="keyword">if</span> (requestURI.contains(<span class="string">&quot;/login&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;登录请求，放行&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 获取请求头中的Token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 判断Token是否存在，不存在则返回401状态码</span></span><br><span class="line">        <span class="keyword">if</span> (token == <span class="literal">null</span> || token.isEmpty()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;令牌为空，返回401状态码&quot;</span>);</span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5. 解析Token，获取其中的用户信息</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtils.parseJwt(token);</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">empId</span> <span class="operator">=</span> Integer.valueOf(claims.get(<span class="string">&quot;id&quot;</span>).toString());</span><br><span class="line">            CurrentHolder.setCurrentId(empId);</span><br><span class="line">            log.info(<span class="string">&quot;当前用户id为：&#123;&#125;&quot;</span>,empId);</span><br><span class="line">            log.info(<span class="string">&quot;解析Token成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;解析Token失败，返回401状态码&quot;</span>);</span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6. 校验通过</span></span><br><span class="line">        log.info(<span class="string">&quot;校验通过，放行&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 释放资源</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        CurrentHolder.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AOP动态获取当前登录员工数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> app.netlify.norlcyan.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> app.netlify.norlcyan.mapper.OperateLogMapper;</span><br><span class="line"><span class="keyword">import</span> app.netlify.norlcyan.pojo.OperateLog;</span><br><span class="line"><span class="keyword">import</span> app.netlify.norlcyan.utils.CurrentHolder;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">    <span class="comment">// logback</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.slf4j.<span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> org.slf4j.LoggerFactory.getLogger(LogAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OperateLogMapper operateLogMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(app.netlify.norlcyan.anno.Log)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">logOperation</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算耗时</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">long</span> <span class="variable">costTime</span> <span class="operator">=</span> endTime - startTime;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建日志实体</span></span><br><span class="line">        <span class="type">OperateLog</span> <span class="variable">olog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OperateLog</span>();</span><br><span class="line">        olog.setOperateEmpId(CurrentHolder.getCurrentId());<span class="comment">// 只需要修改这里</span></span><br><span class="line">        olog.setOperateTime(LocalDateTime.now());</span><br><span class="line">        olog.setClassName(joinPoint.getTarget().getClass().getName());</span><br><span class="line">        olog.setMethodName(joinPoint.getSignature().getName());</span><br><span class="line">        olog.setMethodParams(Arrays.toString(joinPoint.getArgs()));</span><br><span class="line">        olog.setReturnValue(result != <span class="literal">null</span> ? result.toString() : <span class="string">&quot;void&quot;</span>);</span><br><span class="line">        olog.setCostTime(costTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存日志</span></span><br><span class="line">        log.info(<span class="string">&quot;日志记录：&#123;&#125;&quot;</span>, olog);</span><br><span class="line">        operateLogMapper.insert(olog);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Web编程 </tag>
            
            <tag> Spring框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程——拓展内容</title>
      <link href="/2025/04/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%88%E9%A2%9D%E5%A4%96%E6%89%A9%E5%B1%95%EF%BC%89/"/>
      <url>/2025/04/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%88%E9%A2%9D%E5%A4%96%E6%89%A9%E5%B1%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="内容来自B站黑马程序员"><a href="#内容来自B站黑马程序员" class="headerlink" title="内容来自B站黑马程序员"></a>内容来自B站黑马程序员</h1><h1 id="1-线程状态"><a href="#1-线程状态" class="headerlink" title="1 线程状态"></a>1 线程状态</h1><h2 id="1-1-状态介绍"><a href="#1-1-状态介绍" class="headerlink" title="1.1 状态介绍"></a>1.1 状态介绍</h2><p>当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。线程对象在不同的时期有不同的状态。那么Java中的线程存在哪几种状态呢？Java中的线程</p><p>状态被定义在了java.lang.Thread.State枚举类中，State枚举类的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/* 新建 */</span></span><br><span class="line">        NEW , </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 可运行状态 */</span></span><br><span class="line">        RUNNABLE , </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 阻塞状态 */</span></span><br><span class="line">        BLOCKED , </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 无限等待状态 */</span></span><br><span class="line">        WAITING , </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 计时等待 */</span></span><br><span class="line">        TIMED_WAITING , </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 终止 */</span></span><br><span class="line">        TERMINATED;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取当前线程的状态</span></span><br><span class="line">    <span class="keyword">public</span> State <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jdk.internal.misc.VM.toThreadState(threadStatus);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过源码我们可以看到Java中的线程存在6种状态，每种线程状态的含义如下</p><table><thead><tr><th>线程状态</th><th>具体含义</th></tr></thead><tbody><tr><td>NEW</td><td>一个尚未启动的线程的状态。也称之为初始状态、开始状态。线程刚被创建，但是并未启动。还没调用start方法。MyThread t &#x3D; new MyThread()只有线程象，没有线程特征。</td></tr><tr><td>RUNNABLE</td><td>当我们调用线程对象的start方法，那么此时线程对象进入了RUNNABLE状态。那么此时才是真正的在JVM进程中创建了一个线程，线程一经启动并不是立即得到执行，线程的运行与否要听令与CPU的调度，那么我们把这个中间状态称之为可执行状态(RUNNABLE)也就是说它具备执行的资格，但是并没有真正的执行起来而是在等待CPU的度。</td></tr><tr><td>BLOCKED</td><td>当一个线程试图获取一个对象锁，而该对象锁被其他的线程持有，则该线程进入Blocked状态；当该线程持有锁时，该线程将变成Runnable状态。</td></tr><tr><td>WAITING</td><td>一个正在等待的线程的状态。也称之为等待状态。造成线程等待的原因有两种，分别是调用Object.wait()、join()方法。处于等待状态的线程，正在等待其他线程去执行一个特定的操作。例如：因为wait()而等待的线程正在等待另一个线程去调用notify()或notifyAll()；一个因为join()而等待的线程正在等待另一个线程结束。</td></tr><tr><td>TIMED_WAITING</td><td>一个在限定时间内等待的线程的状态。也称之为限时等待状态。造成线程限时等待状态的原因有三种，分别是：Thread.sleep(long)，Object.wait(long)、join(long)。</td></tr><tr><td>TERMINATED</td><td>一个完全运行完成的线程的状态。也称之为终止状态、结束状态</td></tr></tbody></table><p>各个状态的转换，如下图所示：</p><p><img src="/img/thread_java/1571652681276.png" alt="1571652681276"> </p><h2 id="1-2-案例演示"><a href="#1-2-案例演示" class="headerlink" title="1.2 案例演示"></a>1.2 案例演示</h2><p>为了验证上面论述的状态即状态转换的正确性，也为了加深对线程状态转换的理解，下面通过三个案例演示线程间中的状态转换。</p><h3 id="1-2-1-案例一"><a href="#1-2-1-案例一" class="headerlink" title="1.2.1 案例一"></a>1.2.1 案例一</h3><p>本案例主要演示TIME_WAITING的状态转换。</p><p>需求：编写一段代码，依次显示一个线程的这些状态：NEW -&gt; RUNNABLE -&gt; TIME_WAITING -&gt; RUNNABLE -&gt;  TERMINATED</p><p>为了简化我们的开发，本次我们使用匿名内部类结合lambda表达式的方式使用多线程。</p><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadStateDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个内部线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;2.执行thread.start()之后，线程的状态：&quot;</span> + Thread.currentThread().getState());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//休眠100毫秒</span></span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;4.执行Thread.sleep(long)完成之后，线程的状态：&quot;</span> + Thread.currentThread().getState());</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取start()之前的状态</span></span><br><span class="line">        System.out.println(<span class="string">&quot;1.通过new初始化一个线程，但是还没有start()之前，线程的状态：&quot;</span> + thread.getState());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//休眠50毫秒</span></span><br><span class="line">        Thread.sleep(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为thread1需要休眠100毫秒，所以在第50毫秒，thread处于sleep状态</span></span><br><span class="line">        <span class="comment">//用main线程来获取thread1线程的状态，因为thread1线程睡眠时间较长</span></span><br><span class="line">        <span class="comment">//所以当main线程执行的时候，thread1线程还没有睡醒，还处于计时等待状态</span></span><br><span class="line">        System.out.println(<span class="string">&quot;3.执行Thread.sleep(long)时，线程的状态：&quot;</span> + thread.getState());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//thread1和main线程主动休眠150毫秒，所以在第150毫秒,thread早已执行完毕</span></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;5.线程执行完毕之后，线程的状态：&quot;</span> + thread.getState() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>通过<span class="keyword">new</span>初始化一个线程，但是还没有start()之前，线程的状态：NEW</span><br><span class="line"><span class="number">2.</span>执行thread.start()之后，线程的状态：RUNNABLE</span><br><span class="line"><span class="number">3.</span>执行Thread.sleep(<span class="type">long</span>)时，线程的状态：TIMED_WAITING</span><br><span class="line"><span class="number">4.</span>执行Thread.sleep(<span class="type">long</span>)完成之后，线程的状态：RUNNABLE</span><br><span class="line"><span class="number">5.</span>线程执行完毕之后，线程的状态：TERMINATED</span><br></pre></td></tr></table></figure><h3 id="1-2-2-案例二"><a href="#1-2-2-案例二" class="headerlink" title="1.2.2 案例二"></a>1.2.2 案例二</h3><p>本案例主要演示WAITING的状态转换。</p><p>需求：编写一段代码，依次显示一个线程的这些状态：NEW -&gt; RUNNABLE -&gt; WAITING -&gt; RUNNABLE -&gt; TERMINATED</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadStateDemo02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个对象，用来加锁和解锁</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个内部线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;2.执行thread.start()之后，线程的状态：&quot;</span> + Thread.currentThread().getState());</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//thread1需要休眠100毫秒</span></span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//thread1100毫秒之后，通过wait()方法释放obj对象是锁</span></span><br><span class="line">                    obj.wait();</span><br><span class="line">                    </span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;4.被object.notify()方法唤醒之后，线程的状态：&quot;</span> + Thread.currentThread().getState());</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取start()之前的状态</span></span><br><span class="line">        System.out.println(<span class="string">&quot;1.通过new初始化一个线程，但是还没有start()之前，线程的状态：&quot;</span> + thread1.getState());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        thread1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//main线程休眠150毫秒</span></span><br><span class="line">        Thread.sleep(<span class="number">150</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为thread1在第100毫秒进入wait等待状态，所以第150秒肯定可以获取其状态</span></span><br><span class="line">        System.out.println(<span class="string">&quot;3.执行object.wait()时，线程的状态：&quot;</span> + thread1.getState());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明另一个线程进行解锁</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                <span class="comment">//唤醒等待的线程</span></span><br><span class="line">                obj.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//main线程休眠10毫秒等待thread1线程能够苏醒</span></span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取thread1运行结束之后的状态</span></span><br><span class="line">        System.out.println(<span class="string">&quot;5.线程执行完毕之后，线程的状态：&quot;</span> + thread1.getState() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>通过<span class="keyword">new</span>初始化一个线程，但是还没有start()之前，线程的状态：NEW</span><br><span class="line"><span class="number">2.</span>执行thread.start()之后，线程的状态：RUNNABLE</span><br><span class="line"><span class="number">3.</span>执行object.wait()时，线程的状态：WAITING</span><br><span class="line"><span class="number">4.</span>被object.notify()方法唤醒之后，线程的状态：RUNNABLE</span><br><span class="line"><span class="number">5.</span>线程执行完毕之后，线程的状态：TERMINATED</span><br></pre></td></tr></table></figure><h3 id="1-2-3-案例三"><a href="#1-2-3-案例三" class="headerlink" title="1.2.3 案例三"></a>1.2.3 案例三</h3><p>本案例主要演示BLOCKED的状态转换。</p><p>需求：编写一段代码，依次显示一个线程的这些状态：NEW -&gt; RUNNABLE -&gt; BLOCKED -&gt; RUNNABLE -&gt; TERMINATED</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadStateDemo03</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个对象，用来加锁和解锁</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个线程，先抢占了obj2对象的锁</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj2) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);              <span class="comment">//第一个线程要持有锁100毫秒</span></span><br><span class="line">                    obj2.wait();                          <span class="comment">//然后通过wait()方法进行等待状态，并释放obj2的对象锁</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义目标线程，获取等待获取obj2的锁</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;2.执行thread.start()之后，线程的状态：&quot;</span> + Thread.currentThread().getState());</span><br><span class="line">            <span class="keyword">synchronized</span> (obj2) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);              <span class="comment">//thread3要持有对象锁100毫秒</span></span><br><span class="line">                    obj2.notify();                        <span class="comment">//然后通过notify()方法唤醒所有在ojb2上等待的线程继续执行后续操作</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;4.阻塞结束后，线程的状态：&quot;</span> + Thread.currentThread().getState());</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取start()之前的状态</span></span><br><span class="line">        System.out.println(<span class="string">&quot;1.通过new初始化一个线程，但是还没有thread.start()之前，线程的状态：&quot;</span> + thread.getState());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先等100毫秒</span></span><br><span class="line">        Thread.sleep(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一个线程释放锁至少需要100毫秒，所以在第50毫秒时，thread正在因等待obj的对象锁而阻塞</span></span><br><span class="line">        System.out.println(<span class="string">&quot;3.因为等待锁而阻塞时，线程的状态：&quot;</span> + thread.getState());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再等300毫秒</span></span><br><span class="line">        Thread.sleep(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//两个线程的执行时间加上之前等待的50毫秒总共是250毫秒，所以第300毫秒，所有的线程都已经执行完毕</span></span><br><span class="line">        System.out.println(<span class="string">&quot;5.线程执行完毕之后，线程的状态：&quot;</span> + thread.getState());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------代码简化--------------------------------------------</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程开启之后的状态&quot;</span> + Thread.currentThread().getState());</span><br><span class="line">            <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;进入之后的状态&quot;</span> + Thread.currentThread().getState());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;创建线程对象后,但是不调用start方法的状态&quot;</span> + t2.getState());</span><br><span class="line">        t2.start();</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(t2.getState());</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        System.out.println(t2.getState());</span><br></pre></td></tr></table></figure><p>控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>通过<span class="keyword">new</span>初始化一个线程，但是还没有thread.start()之前，线程的状态：NEW</span><br><span class="line"><span class="number">2.</span>执行thread.start()之后，线程的状态：RUNNABLE</span><br><span class="line"><span class="number">3.</span>因为等待锁而阻塞时，线程的状态：BLOCKED</span><br><span class="line"><span class="number">4.</span>阻塞结束后，线程的状态：RUNNABLE</span><br><span class="line"><span class="number">5.</span>线程执行完毕之后，线程的状态：TERMINATED</span><br></pre></td></tr></table></figure><p>通过上面3个案例的代码演示，我们可以证明开始章节说所述的线程状态以及线程状态转换都是正确的。</p><h1 id="2-线程池"><a href="#2-线程池" class="headerlink" title="2 线程池"></a>2 线程池</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><p>提到池，大家应该能想到的就是水池。水池就是一个容器，在该容器中存储了很多的水。那么什么是线程池呢？线程池也是可以看做成一个池子，在该池子中存储很多个线程。</p><p>线程池存在的意义：</p><p>系统创建一个线程的成本是比较高的，因为它涉及到与操作系统交互，当程序中需要创建大量生存期很短暂的线程时，频繁的创建和销毁线程对系统的资源消耗有可能大于业务处理是对系</p><p>统资源的消耗，这样就有点”舍本逐末”了。针对这一种情况，为了提高性能，我们就可以采用线程池。线程池在启动的时，会创建大量空闲线程，当我们向线程池提交任务的时，线程池就</p><p>会启动一个线程来执行该任务。等待任务执行完毕以后，线程并不会死亡，而是再次返回到线程池中称为空闲状态。等待下一次任务的执行。</p><h2 id="2-2-自定义线程池"><a href="#2-2-自定义线程池" class="headerlink" title="2.2 自定义线程池"></a>2.2 自定义线程池</h2><h3 id="2-2-1-线程池的设计思路"><a href="#2-2-1-线程池的设计思路" class="headerlink" title="2.2.1 线程池的设计思路"></a>2.2.1 线程池的设计思路</h3><p>线程池的思路和生产者消费者模型是很接近的</p><ol><li>准备一个任务容器</li><li>一次性启动多个(2个)消费者线程</li><li>刚开始任务容器是空的，所以线程都在wait</li><li>直到一个外部线程向这个任务容器中扔了一个”任务”，就会有一个消费者线程被唤醒</li><li>这个消费者线程取出”任务”，并且执行这个任务，执行完毕后，继续等待下一次任务的到来</li></ol><p>在整个过程中，都不需要创建新的线程，而是循环使用这些已经存在的线程。</p><p><img src="/img/thread_java/1571655104091.png" alt="1571655104091"> </p><h3 id="2-2-2-代码实现"><a href="#2-2-2-代码实现" class="headerlink" title="2.2.2 代码实现"></a>2.2.2 代码实现</h3><p>实现思路：</p><ul><li>创建一个线程池类(ThreadPool)</li><li>在该类中定义两个成员变量poolSize(线程池初始化线程的个数) , BlockingQueue<Runnable>(任务容器)</li><li>通过构造方法来创建两个线程对象(消费者线程)，并且启动</li><li>使用内部类的方式去定义一个线程类(TaskThread),可以提供一个构造方法用来初始化线程名称</li><li>两个消费者线程需要不断的从任务容器中获取任务，如果没有任务，则线程处于阻塞状态。</li><li>提供一个方法(submit)向任务容器中添加任务</li><li>定义测试类进行测试</li></ul><p>线程池类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPool</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化线程个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_POOL_SIZE</span> <span class="operator">=</span> <span class="number">2</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在该类中定义两个成员变量poolSize(线程池初始化线程的个数) , BlockingQueue&lt;Runnable&gt;(任务容器)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">poolSize</span> <span class="operator">=</span> DEFAULT_POOL_SIZE ;</span><br><span class="line">    <span class="keyword">private</span> BlockingQueue&lt;Runnable&gt; blockingQueue = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;() ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadPool</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.initThread();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造方法，通过构造方法来创建两个线程对象(消费者线程)，并且启动</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadPool</span><span class="params">(<span class="type">int</span> poolSize)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(poolSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.poolSize = poolSize ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.initThread();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化线程方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initThread</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; poolSize ; x++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TaskThread</span>(<span class="string">&quot;线程---&gt;&quot;</span> + x).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供一个方法(submit)向任务容器中添加任务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">submit</span><span class="params">(Runnable runnable)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            blockingQueue.put(runnable);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用内部类的方式去定义一个线程类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提供一个构造方法，用来初始化线程名称</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TaskThread</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 两个消费者线程需要不断的从任务容器中获取任务，如果没有任务，则线程处于阻塞状态。</span></span><br><span class="line">                    <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> blockingQueue.take();</span><br><span class="line">                    task.run();</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程池对象,无参构造方法创建</span></span><br><span class="line">        <span class="comment">// ThreadPool threadPool = new ThreadPool();</span></span><br><span class="line">        <span class="type">ThreadPool</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPool</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交任务</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">10</span> ; x++) &#123;</span><br><span class="line">            threadPool.submit( () -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;----&gt;&gt;&gt;处理了任务&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用无参构造方法创建线程池对象，控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">线程---&gt;<span class="number">0</span>----&gt;&gt;&gt;处理了任务</span><br><span class="line">线程---&gt;<span class="number">1</span>----&gt;&gt;&gt;处理了任务</span><br><span class="line">线程---&gt;<span class="number">0</span>----&gt;&gt;&gt;处理了任务</span><br><span class="line">线程---&gt;<span class="number">1</span>----&gt;&gt;&gt;处理了任务</span><br><span class="line">线程---&gt;<span class="number">0</span>----&gt;&gt;&gt;处理了任务</span><br><span class="line">线程---&gt;<span class="number">1</span>----&gt;&gt;&gt;处理了任务</span><br><span class="line">线程---&gt;<span class="number">0</span>----&gt;&gt;&gt;处理了任务</span><br><span class="line">线程---&gt;<span class="number">1</span>----&gt;&gt;&gt;处理了任务</span><br><span class="line">线程---&gt;<span class="number">0</span>----&gt;&gt;&gt;处理了任务</span><br><span class="line">线程---&gt;<span class="number">1</span>----&gt;&gt;&gt;处理了任务</span><br></pre></td></tr></table></figure><p>通过控制台的输出，我们可以看到在线程池中存在两个线程，通过这2个线程处理了10个任务。</p><p>使用有参构造方法创建线程池对象，传递的参数是5，控制台输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">线程---&gt;3----&gt;&gt;&gt;处理了任务</span><br><span class="line">线程---&gt;4----&gt;&gt;&gt;处理了任务</span><br><span class="line">线程---&gt;2----&gt;&gt;&gt;处理了任务</span><br><span class="line">线程---&gt;0----&gt;&gt;&gt;处理了任务</span><br><span class="line">线程---&gt;2----&gt;&gt;&gt;处理了任务</span><br><span class="line">线程---&gt;4----&gt;&gt;&gt;处理了任务</span><br><span class="line">线程---&gt;3----&gt;&gt;&gt;处理了任务</span><br><span class="line">线程---&gt;1----&gt;&gt;&gt;处理了任务</span><br><span class="line">线程---&gt;2----&gt;&gt;&gt;处理了任务</span><br><span class="line">线程---&gt;0----&gt;&gt;&gt;处理了任务</span><br></pre></td></tr></table></figure><p>通过控制台的输出，我们可以看到在线程池中存在两个线程，通过这5个线程处理了10个任务。</p><h2 id="2-3-JDK中线程池"><a href="#2-3-JDK中线程池" class="headerlink" title="2.3 JDK中线程池"></a>2.3 JDK中线程池</h2><h3 id="2-3-1-Executors"><a href="#2-3-1-Executors" class="headerlink" title="2.3.1 Executors"></a>2.3.1 Executors</h3><p>JDK对线程池也进行了相关的实现，在真实企业开发中我们也很少去自定义线程池，而是使用JDK中自带的线程池。</p><p>我们可以使用Executors中所提供的<strong>静态</strong>方法来创建线程池。</p><p><font color="blue" size="3"><strong>获取线程池的方法</strong></font>：</p><p>&#x2F;&#x2F;通过不同的方法创建出来的线程池具有不同的特点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService <span class="title function_">newCachedThreadPool</span><span class="params">()</span>: 创建一个可缓存线程池，可灵活的去创建线程，并且灵活的回收线程，若无可回收，则新建线程。</span><br><span class="line">ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span>: 初始化一个具有固定数量线程的线程池</span><br><span class="line">ExecutorService <span class="title function_">newSingleThreadExecutor</span><span class="params">()</span>: 初始化一个具有一个线程的线程池</span><br><span class="line"><span class="comment">//做完一个，再做一个，不停歇，直到做完，老黄牛性格</span></span><br><span class="line">ScheduledExecutorService <span class="title function_">newSingleThreadScheduledExecutor</span><span class="params">()</span>: 初始化一个具有一个线程的线程池，支持定时及周期性任务执行</span><br><span class="line"><span class="comment">//按照固定的计划去执行线程，一个做完之后按照计划再做另一个</span></span><br></pre></td></tr></table></figure><p>这个方法返回的都是ExecutorService类型的对象(ScheduledExecutorService继承ExecutorService),而ExecutorService可以看做就是一个线程池，那么ExecutorService</p><p>给我们提供了哪些方法供我们使用呢？</p><p><font color="blue" size="3"><strong>ExecutorService中的常见方法</strong></font>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;?&gt; submit(Runnable task)：提交任务方法</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span>：关闭线程池的方法</span><br></pre></td></tr></table></figure><p><font color="blue" size="3"><strong>案例1</strong></font>：演示newCachedThreadPool方法所获取到的线程池的特点</p><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExecutorsDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演示Executors中的newCachedThreadPool返回的线程池的特点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取线程池对象</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交任务</span></span><br><span class="line">        threadPool.submit(() -&gt; &#123;</span><br><span class="line">            System.out.println( Thread.currentThread().getName() + <span class="string">&quot;---执行了任务&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交任务</span></span><br><span class="line">        threadPool.submit(() -&gt; &#123;</span><br><span class="line">            System.out.println( Thread.currentThread().getName() + <span class="string">&quot;---执行了任务&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不使用线程池了，还可以将线程池关闭</span></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>---执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>---执行了任务</span><br></pre></td></tr></table></figure><p>针对每一个任务，线程池为其分配一个线程去执行，我们可以在第二次提交任务的时候，让主线程休眠一小会儿，看程序的执行结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExecutorsDemo02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演示Executors中的newCachedThreadPool返回的线程池的特点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取线程池对象</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交任务</span></span><br><span class="line">        threadPool.submit(() -&gt; &#123;</span><br><span class="line">            System.out.println( Thread.currentThread().getName() + <span class="string">&quot;---执行了任务&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程休眠2秒，主线程休眠2秒，此时之前提交的任务应该已经执行完毕</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交任务</span></span><br><span class="line">        threadPool.submit(() -&gt; &#123;</span><br><span class="line">            System.out.println( Thread.currentThread().getName() + <span class="string">&quot;---执行了任务&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不使用线程池了，还可以将线程池关闭</span></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>---执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>---执行了任务</span><br></pre></td></tr></table></figure><p>我们发现是通过一个线程执行了两个任务。此时就说明线程池中的线程”pool-1-thread-1”被线程池回收了，成为了空闲线程，当我们再次提交任务的时候，该线程就去执行新的任务。</p><p><font color="blue" size="3"><strong>案例2</strong></font>：演示newFixedThreadPool方法所获取到的线程池的特点</p><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExecutorsDemo03</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演示newFixedThreadPool方法所获取到的线程池的特点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取线程池对象,初始化一个具有固定数量线程的线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);  <span class="comment">// 在该线程池中存在3个线程</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交任务</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">5</span> ; x++) &#123;</span><br><span class="line">            threadPool.submit( () -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-----&gt;&gt;&gt;执行了任务&quot;</span> );</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>-----&gt;&gt;&gt;执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>-----&gt;&gt;&gt;执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>-----&gt;&gt;&gt;执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>-----&gt;&gt;&gt;执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span>-----&gt;&gt;&gt;执行了任务</span><br></pre></td></tr></table></figure><p>通过控制台的输出结果，我们可以看到5个任务是通过3个线程进行执行的，说明此线程池中存在三个线程对象</p><p><font color="blue" size="3"><strong>案例3</strong></font>：演示newSingleThreadExecutor方法所获取到的线程池的特点</p><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExecutorsDemo04</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演示newSingleThreadExecutor方法所获取到的线程池的特点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取线程池对象,初始化一个具有一个线程的线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交任务</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">5</span> ; x++) &#123;</span><br><span class="line">            threadPool.submit(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-----&gt;&gt;&gt;执行了任务&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>-----&gt;&gt;&gt;执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>-----&gt;&gt;&gt;执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>-----&gt;&gt;&gt;执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>-----&gt;&gt;&gt;执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>-----&gt;&gt;&gt;执行了任务</span><br></pre></td></tr></table></figure><p>通过控制台的输出结果，我们可以看到5个任务是通过1个线程进行执行的,说明此线程池中只存在一个线程对象。</p><p><font color="blue" size="3"><strong>案例4</strong></font>： 演示newSingleThreadScheduledExecutor方法所获取到的线程池的特点(初始化一个具有一个线程的线程池)</p><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExecutorsDemo05</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演示：newSingleThreadScheduledExecutor方法所获取到的线程池的第一个特点(初始化一个具有一个线程的线程池)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取线程池对象</span></span><br><span class="line">        <span class="type">ScheduledExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newSingleThreadScheduledExecutor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交任务</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">5</span> ; x++) &#123;</span><br><span class="line">            threadPool.submit(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;----&gt;&gt;执行了任务&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt;执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt;执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt;执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt;执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt;执行了任务</span><br></pre></td></tr></table></figure><p>通过控制台的输出结果，我们可以看到5个任务是通过1个线程进行执行的,说明此线程池中只存在一个线程对象。</p><p><font color="blue" size="3"><strong>案例5</strong></font>： 演示newSingleThreadScheduledExecutor方法所获取到的线程池的特点(支持定时及周期性任务执行)</p><p>ScheduledExecutorService中和定时以及周期性执行相关的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定时执行</span></span><br><span class="line"><span class="comment">command: 任务类对象</span></span><br><span class="line"><span class="comment">delay  : 延迟多长时间开始执行任务, 任务提交到线程池以后我们需要等待多长时间开始执行这个任务</span></span><br><span class="line"><span class="comment">unit   : 指定时间操作单元</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> ScheduledFuture&lt;?&gt; schedule(Runnable command,<span class="type">long</span> delay, TimeUnit unit);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">周期性执行</span></span><br><span class="line"><span class="comment">command: 任务类对象</span></span><br><span class="line"><span class="comment">initialDelay: 延迟多长时间开始第一次该执行任务, 任务提交到线程池以后我们需要等待多长时间开始第一次执行这个任务</span></span><br><span class="line"><span class="comment">period:        下一次执行该任务所对应的时间间隔</span></span><br><span class="line"><span class="comment">unit: 指定时间操作单元</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable command, <span class="type">long</span> initialDelay, <span class="type">long</span> period, TimeUnit unit);</span><br></pre></td></tr></table></figure><p>测试类1(演示定时执行)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExecutorsDemo06</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演示newSingleThreadScheduledExecutor方法所获取到的线程池的特点(支持定时及周期性任务执行)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取线程池对象</span></span><br><span class="line">        <span class="type">ScheduledExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newSingleThreadScheduledExecutor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交任务,10s以后开始执行该任务</span></span><br><span class="line">        threadPool.schedule( () -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;----&gt;&gt;&gt;执行了该任务&quot;</span>);</span><br><span class="line">        &#125; , <span class="number">10</span> , TimeUnit.SECONDS) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类2(演示周期性执行)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExecutorsDemo07</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演示newSingleThreadScheduledExecutor方法所获取到的线程池的特点(支持定时及周期性任务执行)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取线程池对象</span></span><br><span class="line">        <span class="type">ScheduledExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newSingleThreadScheduledExecutor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交任务,10s以后开始第一次执行该任务，然后每隔1秒执行一次</span></span><br><span class="line">        threadPool.scheduleAtFixedRate( () -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;----&gt;&gt;&gt;执行了该任务&quot;</span>);</span><br><span class="line">        &#125; , <span class="number">10</span> ,<span class="number">1</span>, TimeUnit.SECONDS) ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-ThreadPoolExecutor"><a href="#2-3-2-ThreadPoolExecutor" class="headerlink" title="2.3.2 ThreadPoolExecutor"></a>2.3.2 ThreadPoolExecutor</h3><h4 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1) 基本使用"></a>1) 基本使用</h4><p>刚才我们是通过Executors中的静态方法去创建线程池的，通过查看源代码我们发现，其底层都是通过ThreadPoolExecutor构建的。比如：newFixedThreadPool方法的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建了ThreadPoolExecutor对象，然后直接返回</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads,<span class="number">0L</span>, TimeUnit.MILLISECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么也可以使用ThreadPoolExecutor去创建线程池。</p><p>ThreadPoolExecutor最完整的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                              <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                              <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                              TimeUnit unit,</span></span><br><span class="line"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                              ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                              RejectedExecutionHandler handler)</span></span><br></pre></td></tr></table></figure><p>参数说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">corePoolSize：   核心线程的最大值，不能小于<span class="number">0</span></span><br><span class="line">maximumPoolSize：最大线程数，不能小于等于<span class="number">0</span>，maximumPoolSize &gt;= corePoolSize</span><br><span class="line">keepAliveTime：  空闲线程最大存活时间,不能小于<span class="number">0</span></span><br><span class="line">unit：           时间单位</span><br><span class="line">workQueue：      任务队列，不能为<span class="literal">null</span></span><br><span class="line">threadFactory：  创建线程工厂,不能为<span class="literal">null</span>      </span><br><span class="line">handler：        任务的拒绝策略,不能为<span class="literal">null</span>    </span><br></pre></td></tr></table></figure><p>案例演示通过ThreadPoolExecutor创建线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutorDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演示基本使用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过ThreadPoolExecutor创建一个线程池对象</span></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span> , <span class="number">3</span> , <span class="number">60</span> , TimeUnit.SECONDS ,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;Runnable&gt;(<span class="number">3</span>) , Executors.defaultThreadFactory() , <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy()) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 以上代码表示的意思是：核心线程池中的线程数量最大为1,整个线程池中最多存在3个线程,空闲线程最大的存活时间为60,时间单位为秒,阻塞队列使用的是有界阻塞队列</span></span><br><span class="line"><span class="comment">         * 容量为3,使用默认的线程工厂;以及默认的任务处理策略</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交任务</span></span><br><span class="line">        threadPoolExecutor.submit( () -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;------&gt;&gt;&gt;执行了任务&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        threadPoolExecutor.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-工作原理"><a href="#2-工作原理" class="headerlink" title="2) 工作原理"></a>2) 工作原理</h4><p>接下来我们就来研究一下线程池的工作原理，如下图所示</p><p><img src="/img/thread_java/1571732060388.png" alt="1571732060388"> </p><p>当我们通过submit方法向线程池中提交任务的时候，具体的工作流程如下：</p><ol><li>客户端每次提交一个任务，线程池就会在核心线程池中创建一个工作线程来执行这个任务。当核心线程池中的线程已满时，则进入下一步操作。</li><li>把任务试图存储到工作队列中。如果工作队列没有满，则将新提交的任务存储在这个工作队列里，等待核心线程池中的空闲线程执行。如果工作队列满了，则进入下个流程。</li><li>线程池会再次在非核心线程池区域去创建新工作线程来执行任务，直到当前线程池总线程数量超过最大线程数时，就是按照指定的任务处理策略处理多余的任务。</li></ol><p>举例说明：</p><p>假如有一个工厂，工厂里面有10个工人(正式员工)，每个工人同时只能做一件任务。因此只要当10个工人中有工人是空闲的，来了任务就分配给空闲的工人做；当10个工人都有任务在做时，</p><p>如果还来了任务，就把任务进行排队等待；如果说新任务数目增长的速度远远大于工人做任务的速度，那么此时工厂主管可能会想补救措施，比如重新招4个临时工人进来；然后就将任务也分配</p><p>给这4个临时工人做；如果说着14个工人做任务的速度还是不够，此时工厂主管可能就要考虑不再接收新的任务或者抛弃前面的一些任务了。当这14个工人当中有人空闲时，而新任务增长的速度</p><p>又比较缓慢，工厂主管可能就考虑辞掉4个临时工了，只保持原来的10个工人，毕竟请额外的工人是要花钱的。</p><p>这里的工厂可以看做成是一个线程池，每一个工人可以看做成是一个线程。其中10个正式员工，可以看做成是核心线程池中的线程，临时工就是非核心线程池中的线程。当临时工处于空闲状态</p><p>的时候，那么如果空闲的时间超过keepAliveTime所指定的时间，那么就会被销毁。</p><h4 id="3-案例演示"><a href="#3-案例演示" class="headerlink" title="3) 案例演示"></a>3) 案例演示</h4><p>接下来我们就通过一段代码的断点测试，来演示一下线程池的工作原理。</p><p>案例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutorDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 核心线程数量为1 ， 最大线程池数量为3, 任务容器的容量为1 ,空闲线程的最大存在时间为20s</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span> , <span class="number">3</span> , <span class="number">20</span> , TimeUnit.SECONDS ,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1</span>) , Executors.defaultThreadFactory() , <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy()) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交3个任务，此时会产生一个核心线程,一个临时工线程，队列中会存在一个任务，20s后临时工线程被回收，核心线程不会被回收</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">3</span> ; x++) &#123;</span><br><span class="line">            threadPoolExecutor.submit(() -&gt; &#123;<span class="comment">// 断点位置</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;----&gt;&gt; 执行了任务&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初次debug方式启动线程，查看变量值</p><p><img src="/img/thread_java/1571735388181.png" alt="1571735388181"> </p><p>由于此时还没有提交任务，因此线程池中的线程数量为0，工作队列的任务数量也为0；提交一个任务</p><p><img src="/img/thread_java/1571735465100.png" alt="1571735465100"> </p><p>再次查看各个值的变化</p><p><img src="/img/thread_java/1571735607347.png" alt="1571735607347"> </p><p>再次提交一个任务</p><p><img src="/img/thread_java/1571735465100.png" alt="1571735465100"> </p><p>再次查看各个值的变化</p><p><img src="/img/thread_java/1571735715977.png" alt="1571735715977"> </p><p>此时会把第二个任务存储到工作队列中，因此工作队列的值为1了。再次提交一个任务</p><p><img src="/img/thread_java/1571735465100.png" alt="1571735465100"> </p><p>再次查看各个值的变化</p><p><img src="/img/thread_java/1571735904991.png" alt="1571735904991"> </p><p>此时3个任务都以及提交完毕，断点跳过。经过20s以后，再次查看该进程中的线程。</p><p><img src="/img/thread_java/1571736824748.png" alt="1571736824748"> </p><p>我们发现非核心线程已经被线程池回收了。</p><h4 id="4-任务拒绝策略"><a href="#4-任务拒绝策略" class="headerlink" title="4) 任务拒绝策略"></a>4) 任务拒绝策略</h4><p>RejectedExecutionHandler是jdk提供的一个任务拒绝策略接口，它下面存在4个子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor.AbortPolicy:     丢弃任务并抛出RejectedExecutionException异常。是默认的策略。</span><br><span class="line">ThreadPoolExecutor.DiscardPolicy：    丢弃任务，但是不抛出异常 这是不推荐的做法。</span><br><span class="line">ThreadPoolExecutor.DiscardOldestPolicy：    抛弃队列中等待最久的任务 然后把当前任务加入队列中。</span><br><span class="line">ThreadPoolExecutor.CallerRunsPolicy:        调用任务的run()方法绕过线程池直接执行。</span><br></pre></td></tr></table></figure><p>注：明确线程池对多可执行的任务数 &#x3D; 队列容量 + 最大线程数</p><p><font color="blue" size="3"><strong>案例演示1</strong></font>：演示ThreadPoolExecutor.AbortPolicy任务处理策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutorDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 核心线程数量为1 ， 最大线程池数量为3, 任务容器的容量为1 ,空闲线程的最大存在时间为20s</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span> , <span class="number">3</span> , <span class="number">20</span> , TimeUnit.SECONDS ,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1</span>) , Executors.defaultThreadFactory() , <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy()) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交5个任务，而该线程池最多可以处理4个任务，当我们使用AbortPolicy这个任务处理策略的时候，就会抛出异常</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">5</span> ; x++) &#123;</span><br><span class="line">            threadPoolExecutor.submit(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;----&gt;&gt; 执行了任务&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.FutureTask@566776ad[Not completed, task = java.util.concurrent.Executors$RunnableAdapter<span class="meta">@edf4efb</span>[<span class="type">Wrapped</span> <span class="variable">task</span> <span class="operator">=</span> com.itheima.javase.thread.pool.demo04.ThreadPoolExecutorDemo01$$Lambda$<span class="number">14</span>/<span class="number">0x0000000100066840</span>@2f7a2457]] rejected from java.util.concurrent.ThreadPoolExecutor@6108b2d7[Running, <span class="type">pool</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">3</span>, <span class="type">active</span> <span class="variable">threads</span> <span class="operator">=</span> <span class="number">3</span>, <span class="type">queued</span> <span class="variable">tasks</span> <span class="operator">=</span> <span class="number">1</span>, <span class="type">completed</span> <span class="variable">tasks</span> <span class="operator">=</span> <span class="number">0</span>]</span><br><span class="line">at java.base/java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:<span class="number">2055</span>)</span><br><span class="line">at java.base/java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:<span class="number">825</span>)</span><br><span class="line">at java.base/java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:<span class="number">1355</span>)</span><br><span class="line">at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:<span class="number">118</span>)</span><br><span class="line">at com.itheima.javase.thread.pool.demo04.ThreadPoolExecutorDemo01.main(ThreadPoolExecutorDemo01.java:<span class="number">20</span>)</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span>----&gt;&gt; 执行了任务</span><br></pre></td></tr></table></figure><p>控制台报错，仅仅执行了4个任务，有一个任务被丢弃了</p><p><font color="blue" size="3"><strong>案例演示2</strong></font>：演示ThreadPoolExecutor.DiscardPolicy任务处理策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutorDemo02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 核心线程数量为1 ， 最大线程池数量为3, 任务容器的容量为1 ,空闲线程的最大存在时间为20s</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span> , <span class="number">3</span> , <span class="number">20</span> , TimeUnit.SECONDS ,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1</span>) , Executors.defaultThreadFactory() , <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardPolicy()) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交5个任务，而该线程池最多可以处理4个任务，当我们使用DiscardPolicy这个任务处理策略的时候，控制台不会报错</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">5</span> ; x++) &#123;</span><br><span class="line">            threadPoolExecutor.submit(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;----&gt;&gt; 执行了任务&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>----&gt;&gt; 执行了任务</span><br></pre></td></tr></table></figure><p>控制台没有报错，仅仅执行了4个任务，有一个任务被丢弃了</p><p><font color="blue" size="3"><strong>案例演示3</strong></font>：演示ThreadPoolExecutor.DiscardOldestPolicy任务处理策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutorDemo02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 核心线程数量为1 ， 最大线程池数量为3, 任务容器的容量为1 ,空闲线程的最大存在时间为20s</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ThreadPoolExecutor threadPoolExecutor;</span><br><span class="line">        threadPoolExecutor = <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span> , <span class="number">3</span> , <span class="number">20</span> , TimeUnit.SECONDS ,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1</span>) , Executors.defaultThreadFactory() , <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardOldestPolicy());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交5个任务</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">5</span> ; x++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 定义一个变量，来指定指定当前执行的任务;这个变量需要被final修饰</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x ;</span><br><span class="line">            threadPoolExecutor.submit(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;----&gt;&gt; 执行了任务&quot;</span> + y);</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>----&gt;&gt; 执行了任务<span class="number">2</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt; 执行了任务<span class="number">0</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span>----&gt;&gt; 执行了任务<span class="number">3</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt; 执行了任务<span class="number">4</span></span><br></pre></td></tr></table></figure><p>由于任务1在线程池中等待时间最长，因此任务1被丢弃。</p><p><font color="blue" size="3"><strong>案例演示4</strong></font>：演示ThreadPoolExecutor.CallerRunsPolicy任务处理策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutorDemo04</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 核心线程数量为1 ， 最大线程池数量为3, 任务容器的容量为1 ,空闲线程的最大存在时间为20s</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ThreadPoolExecutor threadPoolExecutor;</span><br><span class="line">        threadPoolExecutor = <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span> , <span class="number">3</span> , <span class="number">20</span> , TimeUnit.SECONDS ,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1</span>) , Executors.defaultThreadFactory() , <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交5个任务</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">5</span> ; x++) &#123;</span><br><span class="line">            threadPoolExecutor.submit(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;----&gt;&gt; 执行了任务&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt; 执行了任务</span><br><span class="line">main----&gt;&gt; 执行了任务</span><br></pre></td></tr></table></figure><p>通过控制台的输出，我们可以看到次策略没有通过线程池中的线程执行任务，而是直接调用任务的run()方法绕过线程池直接执行。</p><h1 id="3-volatile关键字"><a href="#3-volatile关键字" class="headerlink" title="3 volatile关键字"></a>3 volatile关键字</h1><h2 id="3-1-看程序说结果"><a href="#3-1-看程序说结果" class="headerlink" title="3.1 看程序说结果"></a>3.1 看程序说结果</h2><p>分析如下程序，说出在控制台的输出结果。</p><p>Thread的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span> ;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFlag</span><span class="params">()</span> &#123; <span class="keyword">return</span> flag;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程休眠1秒</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将flag的值更改为true</span></span><br><span class="line">        <span class="built_in">this</span>.flag = <span class="literal">true</span> ;</span><br><span class="line">        System.out.println(<span class="string">&quot;flag=&quot;</span> + flag);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileThreadDemo01</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建VolatileThread线程对象</span></span><br><span class="line">        <span class="type">VolatileThread</span> <span class="variable">volatileThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VolatileThread</span>() ;</span><br><span class="line">        volatileThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在main线程中获取开启的线程中flag的值</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main线程中获取开启的线程中flag的值为&quot;</span> + volatileThread.isFlag());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前面是<span class="literal">false</span>，过了一段时间之后就变成了<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>按照我们的分析，当我们把volatileThread线程启动起来以后，那么volatileThread线程开始执行。在volatileThread线程的run方法中，线程休眠1s，休眠一秒以后那么flag的值应该为</p><p>true，此时我们在主线程中不停的获取flag的值。发现前面释放false，后面是true</p><p>信息，那么这是为什么呢？要想知道原因，那么我们就需要学习一下JMM。</p><h2 id="3-2-JMM"><a href="#3-2-JMM" class="headerlink" title="3.2 JMM"></a>3.2 JMM</h2><p>概述：JMM(Java Memory Model)Java内存模型,是java虚拟机规范中所定义的一种内存模型。</p><p>Java内存模型(Java Memory Model)描述了Java程序中各种变量(线程共享变量)的访问规则，以及在JVM中将变量存储到内存和从内存中读取变量这样的底层细节。</p><p>特点：</p><ol><li><p>所有的共享变量都存储于主内存(计算机的RAM)这里所说的变量指的是实例变量和类变量。不包含局部变量，因为局部变量是线程私有的，因此不存在竞争问题。</p></li><li><p>每一个线程还存在自己的工作内存，线程的工作内存，保留了被线程使用的变量的工作副本。</p></li><li><p>线程对变量的所有的操作(读，写)都必须在工作内存中完成，而不能直接读写主内存中的变量，不同线程之间也不能直接访问对方工作内存中的变量，线程间变量的值的传递需要通过主</p><p>内存完成。</p></li></ol><p><img src="/img/thread_java/1571743818653.png" alt="1571743818653"> </p><h2 id="3-3-问题分析"><a href="#3-3-问题分析" class="headerlink" title="3.3 问题分析"></a>3.3 问题分析</h2><p>了解了一下JMM,那么接下来我们就来分析一下上述程序产生问题的原因。</p><p><img src="/img/thread_java/1571744627663.png" alt="1571744627663">  </p><p>产生问题的流程分析：</p><ol><li><p>VolatileThread线程从主内存读取到数据放入其对应的工作内存</p></li><li><p>将flag的值更改为true，但是这个时候flag的值还没有回写主内存</p></li><li><p>此时main线程读取到了flag的值并将其放入到自己的工作内存中，此时flag的值为false</p></li><li><p>VolatileThread线程将flag的值写回到主内存，但是main函数里面的while(true)调用的是系统比较底层的代码，速度快，快到没有时间再去读取主内存中的值，所以while(true)</p><p>读取到的值一直是false。(如果有一个时刻main线程从主内存中读取到了flag的最新值，那么if语句就可以执行，main线程何时从主内存中读取最新的值，我们无法控制)</p></li></ol><p>我们可以让主线程执行慢一点，执行慢一点以后，在某一个时刻，可能就会读取到主内存中最新的flag的值，那么if语句就可以进行执行。</p><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileThreadDemo02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建VolatileThread线程对象</span></span><br><span class="line">        <span class="type">VolatileThread</span> <span class="variable">volatileThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VolatileThread</span>() ;</span><br><span class="line">        volatileThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// main方法</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(volatileThread.isFlag()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;执行了======&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 让线程休眠100毫秒</span></span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flag=<span class="literal">true</span></span><br><span class="line">执行了======</span><br><span class="line">执行了======</span><br><span class="line">执行了======</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>此时我们可以看到if语句已经执行了。当然我们在真实开发中可能不能使用这种方式来处理这个问题，那么这个问题应该怎么处理呢？我们就需要学习下一小节的内容。</p><h2 id="3-4-问题处理"><a href="#3-4-问题处理" class="headerlink" title="3.4 问题处理"></a>3.4 问题处理</h2><h3 id="3-4-1-加锁"><a href="#3-4-1-加锁" class="headerlink" title="3.4.1 加锁"></a>3.4.1 加锁</h3><p>第一种处理方案，我们可以通过加锁的方式进行处理。</p><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileThreadDemo03</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建VolatileThread线程对象</span></span><br><span class="line">        <span class="type">VolatileThread</span> <span class="variable">volatileThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VolatileThread</span>() ;</span><br><span class="line">        volatileThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// main方法</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 加锁进行问题处理</span></span><br><span class="line">            <span class="keyword">synchronized</span> (volatileThread) &#123;</span><br><span class="line">                <span class="keyword">if</span>(volatileThread.isFlag()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;执行了======&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flag=<span class="literal">true</span></span><br><span class="line">执行了======</span><br><span class="line">执行了======</span><br><span class="line">执行了======</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>工作原理说明</p><p>对上述代码加锁完毕以后，某一个线程支持该程序的过程如下：</p><p>a.线程获得锁</p><p>b.清空工作内存</p><p>c.从主内存拷贝共享变量最新的值到工作内存成为副本</p><p>d.执行代码</p><p>e.将修改后的副本的值刷新回主内存中</p><p>f.线程释放锁</p><h3 id="3-4-2-volatile关键字"><a href="#3-4-2-volatile关键字" class="headerlink" title="3.4.2 volatile关键字"></a>3.4.2 volatile关键字</h3><p>第二种处理方案，我们可以通过volatile关键字来修饰flag变量。</p><p>线程类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span> ;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFlag</span><span class="params">()</span> &#123; <span class="keyword">return</span> flag;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程休眠1秒</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将flag的值更改为true</span></span><br><span class="line">        <span class="built_in">this</span>.flag = <span class="literal">true</span> ;</span><br><span class="line">        System.out.println(<span class="string">&quot;flag=&quot;</span> + flag);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--------------------------------更新之后的案例-------------------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileTest</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (!flag) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;stope&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">VolatileTest</span> <span class="variable">vt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VolatileTest</span>();</span><br><span class="line">        vt.start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        vt.flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flag=<span class="literal">true</span></span><br><span class="line">执行了======</span><br><span class="line">执行了======</span><br><span class="line">执行了======</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>工作原理说明</p><p><img src="/img/thread_java/1571746088704.png" alt="1571746088704"> </p><p>执行流程分析</p><ol><li>VolatileThread线程从主内存读取到数据放入其对应的工作内存</li><li>将flag的值更改为true，但是这个时候flag的值还没有回写主内存</li><li>此时main线程读取到了flag的值并将其放入到自己的工作内存中，此时flag的值为false</li><li>VolatileThread线程将flag的值写到主内存</li><li>main线程工作内存中的flag变量副本失效</li><li>main线程再次使用flag时，main线程会从主内存读取最新的值，放入到工作内存中，然后在进行使用</li></ol><p>总结： volatile保证不同线程对共享变量操作的可见性，也就是说一个线程修改了volatile修饰的变量，当修改写回主内存时，另外一个线程立即看到最新的值。</p><p>​      但是volatile不保证原子性(关于原子性问题，我们在下面的小节中会介绍)。</p><p>volatile与synchronized的区别：</p><ol><li><p>volatile只能修饰实例变量和类变量，而synchronized可以修饰方法，以及代码块。</p></li><li><p>volatile保证数据的可见性，但是不保证原子性(多线程进行写操作，不保证线程安全);而synchronized是一种排他（互斥）的机制(因此有时我们也将synchronized这种锁称</p><p>之为排他（互斥）锁)，synchronized修饰的代码块，被修饰的代码块称之为同步代码块，无法被中断可以保证原子性，也可以间接的保证可见性。</p></li></ol><h1 id="4-原子性"><a href="#4-原子性" class="headerlink" title="4 原子性"></a>4 原子性</h1><p>概述：所谓的原子性是指在一次操作或者多次操作中，要么所有的操作全部都得到了执行并且不会受到任何因素的干扰而中断，要么所有的操作都不执行，多个操作是一个不可以分割的整体。</p><p>&#x2F;&#x2F;比如说：你喂你女朋友吃冰淇淋，如果没有女朋友，你就假想一下，实在不行，你就喂你旁边的哥们吃一口冰淇淋。这就是一个不可分割的整体，一个是你喂，一个是她吃。这就是一个整体，如果没有她吃，那么你喂就没有意义，如果没有你喂，她吃就没有意义。</p><p>&#x2F;&#x2F;比如：从张三的账户给李四的账户转1000元，这个动作将包含两个基本的操作：从张三的账户扣除1000元，给李四的账户增加1000元。这两个操作必须符合原子性的要求，要么都成功要么</p><p>都失败。</p><h2 id="4-1-看程序说结果"><a href="#4-1-看程序说结果" class="headerlink" title="4.1 看程序说结果"></a>4.1 看程序说结果</h2><p>分析如下程序的执行结果</p><p>线程类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileAtomicThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个int类型的变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对该变量进行++操作，100次</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">100</span> ; x++) &#123;</span><br><span class="line">            count++ ;</span><br><span class="line">            System.out.println(<span class="string">&quot;冰淇淋的个数 =========&gt;&gt;&gt;&gt; &quot;</span> + count);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileAtomicThreadDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建VolatileAtomicThread对象</span></span><br><span class="line">        <span class="type">VolatileAtomicThread</span> <span class="variable">volatileAtomicThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VolatileAtomicThread</span>() ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启100个线程对count进行++操作</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">100</span> ; x++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(volatileAtomicThread).start();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序分析：我们在主线程中通过for循环启动了100个线程，每一个线程都会对VolatileAtomicThread类中的count加100次。那么直接结果应该是10000。但是真正的执行结果和我们分析</p><p>的是否一样呢？运行程序(多运行几次)，查看控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">count =========&gt;&gt;&gt;&gt; <span class="number">9997</span></span><br><span class="line">count =========&gt;&gt;&gt;&gt; <span class="number">9998</span></span><br><span class="line">count =========&gt;&gt;&gt;&gt; <span class="number">9999</span></span><br></pre></td></tr></table></figure><p>通过控制台的输出，我们可以看到最终count的结果可能并不是10000。接下来我们就来分析一下问题产生的原因。</p><h2 id="4-2-问题分析说明"><a href="#4-2-问题分析说明" class="headerlink" title="4.2 问题分析说明"></a>4.2 问题分析说明</h2><p>以上问题主要是发生在count++操作上：</p><p>count++操作包含3个步骤：</p><ul><li>从主内存中读取数据到工作内存</li><li>对工作内存中的数据进行++操作</li><li>将工作内存中的数据写回到主内存</li></ul><p>count++操作不是一个原子性操作，也就是说在某一个时刻对某一个操作的执行，有可能被其他的线程打断。</p><p><img src="/img/thread_java/1571794778139.png" alt="1571794778139"> </p><p>产生问题的执行流程分析：</p><ol><li><p>假设此时count的值是100，线程A需要对改变量进行自增1的操作，首先它需要从主内存中读取变量count的值。由于CPU的切换关系，此时CPU的执行权被切换到了B线程。A线程就处</p><p>于就绪状态，B线程处于运行状态。</p></li><li><p>线程B也需要从主内存中读取count变量的值,由于线程A没有对count值做任何修改因此此时B读取到的数据还是100</p></li><li><p>线程B工作内存中对count执行了+1操作，但是未刷新之主内存中</p></li><li><p>此时CPU的执行权切换到了A线程上，由于此时线程B没有将工作内存中的数据刷新到主内存，因此A线程工作内存中的变量值还是100，没有失效。A线程对工作内存中的数据进行了+1操作。</p></li><li><p>线程B将101写入到主内存</p></li><li><p>线程A将101写入到主内存</p></li></ol><p>虽然计算了2次，但是只对A进行了1次修改。</p><h2 id="4-3-volatile原子性测试"><a href="#4-3-volatile原子性测试" class="headerlink" title="4.3 volatile原子性测试"></a>4.3 volatile原子性测试</h2><p>我们刚才说到了volatile在多线程环境下只保证了共享变量在多个线程间的可见性，但是不保证原子性。那么接下来我们就来做一个测试。测试的思想，就是使用volatile修饰count。</p><p>线程类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileAtomicThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个int类型的变量,并且使用volatile修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对该变量进行++操作，100次</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">100</span> ; x++) &#123;</span><br><span class="line">            count++ ;</span><br><span class="line">            System.out.println(<span class="string">&quot;count =========&gt;&gt;&gt;&gt; &quot;</span> + count);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果(需要运行多次)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">count =========&gt;&gt;&gt;&gt; <span class="number">9997</span></span><br><span class="line">count =========&gt;&gt;&gt;&gt; <span class="number">9998</span></span><br><span class="line">count =========&gt;&gt;&gt;&gt; <span class="number">9999</span></span><br></pre></td></tr></table></figure><p>通过控制台结果的输出，我们可以看到程序还是会出现问题。因此也就证明volatile关键字是不保证原子性的。</p><h2 id="4-4-volatile使用场景"><a href="#4-4-volatile使用场景" class="headerlink" title="4.4 volatile使用场景"></a>4.4 volatile使用场景</h2><p>volatile关键字不保证原子性操作，那么同学们可能会存在一些疑问，volatile关键字在什么情况下进行使用呢？这里我们举两个基本的使用场景。</p><h3 id="4-4-1-状态标志"><a href="#4-4-1-状态标志" class="headerlink" title="4.4.1 状态标志"></a>4.4.1 状态标志</h3><p>比如现在存在一个线程不断向控制台输出一段话”传智播客中国IT教育的标杆….”,当这个线程执行5秒以后，将该线程结束。</p><p>实现思路：定义一个boolean类型的变量，这个变量就相当于一个标志。当这个变量的值为true的时候，线程一直执行，10秒以后我们把这个变量的值更改为false，此时结束该线程的执行。</p><p>为了保证一个线程对这个变量的修改，另外一个线程立马可以看到，这个变量就需要通过volatile关键字进行修饰。</p><p>线程类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileUseThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义标志变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">shutdown</span> <span class="operator">=</span> <span class="literal">false</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!shutdown) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;传智播客中国IT教育的标杆....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭线程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.shutdown = <span class="literal">true</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileUseThreadDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程任务类对象</span></span><br><span class="line">        <span class="type">VolatileUseThread</span> <span class="variable">volatileUseThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VolatileUseThread</span>() ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(volatileUseThread);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主线程休眠</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭线程</span></span><br><span class="line">        volatileUseThread.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察控制台输出，volatileUseThread线程执行5秒以后程序结束。</p><h3 id="4-4-2-独立观察"><a href="#4-4-2-独立观察" class="headerlink" title="4.4.2 独立观察"></a>4.4.2 独立观察</h3><p>&#x2F;&#x2F;AI养猪。。。。</p><p>&#x2F;&#x2F;设备区测量温度</p><p>&#x2F;&#x2F;当温度高了。。。需要给猪开空调。。。加冰棍。。。加喝的水。。。</p><p>volatile的另一种简单使用场景是：定期”发布”观察结果供程序内部使用。例如，假设有一种环境传感器能够感觉环境温度。一个后台线程可能会每隔几秒读取一次该传感器数据，并更新包</p><p>含这个volatile变量的值。然后，其他线程可以读取这个变量，从而随时能够看到最新的温度值。这种使用就是多个线程操作共享变量，但是是有一个线程对其进行写操作，其他的线程都是读。</p><p>我们可以设计一个程序，模拟上面的温度传感器案例。</p><p>实现步说明</p><ol><li><p>定义一个温度传感器(TemperatureSensor)的类,在该类中定义两个成员变量(temperature(温度值)，type(传感器的类型))，temperature变量需要被volatile修饰</p></li><li><p>定义一个读取温度传感器的线程的任务类(ReadTemperatureRunnable)，该类需要定义一个TemperatureSensor类型的成员变量(该线程需要读取温度传感器的数据)</p></li><li><p>定义一个定时采集温度的线程任务类(GatherTemperatureRunnable)，该类需要定义一个TemperatureSensor类型的成员变量(该线程需要将读到的温度设置给传感器)</p></li><li><p>创建测试类(TemperatureSensorDemo)</p><ol><li>创建TemperatureSensor对象</li><li>创建ReadTemperatureRunnable类对象，把TemperatureSensor作为构造方法的参数传递过来</li><li>创建GatherTemperatureRunnable类对象，把TemperatureSensor作为构造方法的参数传递过来</li><li>创建2个Thread对象，并启动，把第二步所创建的对象作为构造方法参数传递过来，这两个线程负责读取TemperatureSensor中的温度数据</li><li>创建1个Thread对象，并启动，把第三步所创建的对象作为构造方法参数传递过来，这个线程负责读取定时采集数据中的温度数据</li></ol></li></ol><p>TemperatureSensor类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemperatureSensor</span> &#123;        <span class="comment">// 温度传感器类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> temperature ;  <span class="comment">// 温度值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String type ;               <span class="comment">// 传感器的类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTemperature</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> temperature;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTemperature</span><span class="params">(<span class="type">int</span> temperature)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.temperature = temperature;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setType</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ReadTemperatureRunnable类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadTemperatureRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 温度传感器</span></span><br><span class="line">    <span class="keyword">private</span> TemperatureSensor temperatureSensor ;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReadTemperatureRunnable</span><span class="params">(TemperatureSensor temperatureSensor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.temperatureSensor = temperatureSensor ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不断的读取温度传感器中的数据</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取数据</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---读取到的温度数据为------&gt;&gt;&gt; &quot;</span> + temperatureSensor.getTemperature());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 让线程休眠100毫秒，便于观察</span></span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GatherTemperatureRunnable类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatherTemperatureRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 温度传感器</span></span><br><span class="line">    <span class="keyword">private</span> TemperatureSensor temperatureSensor ;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GatherTemperatureRunnable</span><span class="params">(TemperatureSensor temperatureSensor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.temperatureSensor = temperatureSensor ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义一个变量，表示环境初始温度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temperature</span> <span class="operator">=</span> <span class="number">23</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不断进行数据采集</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将采集到的数据设置给温度传感器</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-----采集到的数据为-----&gt;&gt;&gt; &quot;</span> + temperature);</span><br><span class="line">            temperatureSensor.setTemperature(temperature);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 线程休眠2秒,模拟每隔两秒采集一次数据</span></span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 环境温度改变</span></span><br><span class="line">            temperature += <span class="number">2</span> ;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemperatureSensorDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建TemperatureSensor对象</span></span><br><span class="line">        <span class="type">TemperatureSensor</span> <span class="variable">temperatureSensor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemperatureSensor</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ReadTemperatureRunnable类对象</span></span><br><span class="line">        <span class="type">ReadTemperatureRunnable</span> <span class="variable">readTemperatureRunnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReadTemperatureRunnable</span>(temperatureSensor) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建GatherTemperatureRunnable类对象</span></span><br><span class="line">        <span class="type">GatherTemperatureRunnable</span> <span class="variable">gatherTemperatureRunnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GatherTemperatureRunnable</span>(temperatureSensor) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建2个Thread对象，并启动; 这两个线程负责读取TemperatureSensor中的温度数据</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">2</span> ; x++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(readTemperatureRunnable).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建1个Thread对象，并启动，这个线程负责读取定时采集数据中的温度数据</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">gatherThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(gatherTemperatureRunnable);</span><br><span class="line">        gatherThread.setName(<span class="string">&quot;温度采集线程&quot;</span>);</span><br><span class="line">        gatherThread.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">温度采集线程-----采集到的数据为-----&gt;&gt;&gt; <span class="number">23</span></span><br><span class="line">Thread-<span class="number">0</span>---读取到的温度数据为------&gt;&gt;&gt; <span class="number">23</span></span><br><span class="line">...</span><br><span class="line">温度采集线程-----采集到的数据为-----&gt;&gt;&gt; <span class="number">25</span></span><br><span class="line">Thread-<span class="number">1</span>---读取到的温度数据为------&gt;&gt;&gt; <span class="number">25</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>通过控制台的输出，我们可以看到当温度采集线程刚采集到环境温度以后，那么此时两个温度读取线程就可以立即感知到环境温度的变化。</p><h2 id="4-5-问题处理"><a href="#4-5-问题处理" class="headerlink" title="4.5 问题处理"></a>4.5 问题处理</h2><p>接下来我们就来讲解一下我们上述案例(引入原子性问题的案例)的解决方案。</p><h3 id="4-5-1-锁机制"><a href="#4-5-1-锁机制" class="headerlink" title="4.5.1 锁机制"></a>4.5.1 锁机制</h3><p>我们可以给count++操作添加锁，那么count++操作就是临界区中的代码，临界区中的代码一次只能被一个线程去执行，所以count++就变成了原子操作。</p><p>线程任务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileAtomicThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个int类型的变量,</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个Object类型的变量，该变量将作为同步代码块的锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对该变量进行++操作，100次</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">100</span> ; x++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                count++ ;</span><br><span class="line">                System.out.println(<span class="string">&quot;count =========&gt;&gt;&gt;&gt; &quot;</span> + count);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">count =========&gt;&gt;&gt;&gt; <span class="number">9998</span></span><br><span class="line">count =========&gt;&gt;&gt;&gt; <span class="number">9999</span></span><br><span class="line">count =========&gt;&gt;&gt;&gt; <span class="number">10000</span></span><br></pre></td></tr></table></figure><h3 id="4-5-2-原子类"><a href="#4-5-2-原子类" class="headerlink" title="4.5.2 原子类"></a>4.5.2 原子类</h3><h4 id="1-AtomicInteger"><a href="#1-AtomicInteger" class="headerlink" title="1) AtomicInteger"></a>1) AtomicInteger</h4><p>概述：java从JDK1.5开始提供了java.util.concurrent.atomic包(简称Atomic包)，这个包中的原子操作类提供了一种用法简单，性能高效，线程安全地更新一个变量的方式。因为变</p><p>量的类型有很多种，所以在Atomic包里一共提供了13个类，属于4种类型的原子更新方式，分别是原子更新基本类型、原子更新数组、原子更新引用和原子更新属性(字段)。本次我们只讲解</p><p>使用原子的方式更新基本类型，使用原子的方式更新基本类型Atomic包提供了以下3个类：</p><p>AtomicBoolean： 原子更新布尔类型</p><p>AtomicInteger： 原子更新整型</p><p>AtomicLong：原子更新长整型</p><p>以上3个类提供的方法几乎一模一样，所以本节仅以AtomicInteger为例进行讲解，AtomicInteger的常用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">AtomicInteger</span><span class="params">()</span>：   初始化一个默认值为<span class="number">0</span>的原子型Integer</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">AtomicInteger</span><span class="params">(<span class="type">int</span> initialValue)</span>： 初始化一个指定值的原子型Integer</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">get</span><span class="params">()</span>:     获取值</span><br><span class="line"><span class="type">int</span> <span class="title function_">getAndIncrement</span><span class="params">()</span>:       以原子方式将当前值加<span class="number">1</span>，注意，这里返回的是自增前的值。</span><br><span class="line"><span class="type">int</span> <span class="title function_">incrementAndGet</span><span class="params">()</span>:      以原子方式将当前值加<span class="number">1</span>，注意，这里返回的是自增后的值。</span><br><span class="line"><span class="type">int</span> <span class="title function_">addAndGet</span><span class="params">(<span class="type">int</span> data)</span>: 以原子方式将输入的数值与实例中的值（AtomicInteger里的value）相加，并返回结果。</span><br><span class="line"><span class="type">int</span> <span class="title function_">getAndSet</span><span class="params">(<span class="type">int</span> value)</span>:    以原子方式设置为newValue的值，并返回旧值。</span><br></pre></td></tr></table></figure><p>案例演示AtomicInteger的基本使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicIntegerDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原子型Integer</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造方法</span></span><br><span class="line">        <span class="comment">// public AtomicInteger()：初始化一个默认值为0的原子型Integer</span></span><br><span class="line">        <span class="comment">// AtomicInteger atomicInteger = new AtomicInteger() ;</span></span><br><span class="line">        <span class="comment">// System.out.println(atomicInteger);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// public AtomicInteger(int initialValue)： 初始化一个指定值的原子型Integer</span></span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">5</span>) ;</span><br><span class="line">        System.out.println(atomicInteger);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取值</span></span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以原子方式将当前值加1，这里返回的是自增前的值</span></span><br><span class="line">        System.out.println(atomicInteger.getAndIncrement());</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以原子方式将当前值加1，这里返回的是自增后的值</span></span><br><span class="line">        System.out.println(atomicInteger.incrementAndGet());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以原子方式将输入的数值与实例中的值（AtomicInteger里的value）相加，并返回结果</span></span><br><span class="line">        System.out.println(atomicInteger.addAndGet(<span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以原子方式设置为newValue的值，并返回旧值</span></span><br><span class="line">        System.out.println(atomicInteger.getAndSet(<span class="number">20</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-案例改造"><a href="#2-案例改造" class="headerlink" title="2) 案例改造"></a>2) 案例改造</h4><p>使用AtomicInteger对案例进行改造。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileAtomicThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个int类型的变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>() ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对该变量进行++操作，100次</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">100</span> ; x++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> atomicInteger.incrementAndGet();</span><br><span class="line">            System.out.println(<span class="string">&quot;count =========&gt;&gt;&gt;&gt; &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">count =========&gt;&gt;&gt;&gt; <span class="number">9998</span></span><br><span class="line">count =========&gt;&gt;&gt;&gt; <span class="number">9999</span></span><br><span class="line">count =========&gt;&gt;&gt;&gt; <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>通过控制台的执行结果，我们可以看到最终得到的结果就是10000，因此也就证明AtomicInteger所提供的方法是原子性操作方法。</p><h2 id="4-6-AtomicInteger原理"><a href="#4-6-AtomicInteger原理" class="headerlink" title="4.6 AtomicInteger原理"></a>4.6 AtomicInteger原理</h2><h3 id="4-6-1-原理介绍"><a href="#4-6-1-原理介绍" class="headerlink" title="4.6.1 原理介绍"></a>4.6.1 原理介绍</h3><p>AtomicInteger的本质：自旋锁 + CAS算法</p><p>CAS的全成是： Compare And Swap(比较再交换); 是现代CPU广泛支持的一种对内存中的共享数据进行操作的一种特殊指令。CAS可以将read-modify-write转换为原子操作，这个原子操作</p><p>直接由处理器保证。CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当旧预期值A和内存值V相同时，将内存值V修改为B并返回true，否则什么都不做，并返回false。</p><p>举例说明：</p><ol><li>在内存值V当中，存储着值为10的变量。</li></ol><p><img src="/img/thread_java/1571817059527.png" alt="1571817059527">  </p><ol start="2"><li>此时线程1想要把变量的值增加1。对线程1来说，旧的预期值 A &#x3D; 10 ，要修改的新值 B &#x3D; 11。</li></ol><p><img src="/img/thread_java/1571817085047.png" alt="1571817085047"> </p><ol start="3"><li>在线程1要提交更新之前，另一个线程2抢先一步，把内存值V中的变量值率先更新成了11。</li></ol><p><img src="/img/thread_java/1571817628904.png" alt="1571817628904"> </p><ol start="4"><li>线程1开始提交更新，首先进行A和内存值V的实际值比较（Compare），发现A不等于V的值，提交失败。</li></ol><p><img src="/img/thread_java/1571818176635.png" alt="1571818176635"> </p><ol start="5"><li>线程1重新获取内存值V作为当前A的值，并重新计算想要修改的新值。此时对线程1来说，A &#x3D; 11，B &#x3D; 12。这个重新尝试的过程被称为<font color="red" size="4"><strong>自旋</strong></font>。</li></ol><p><img src="/img/thread_java/1571818465276.png" alt="1571818465276"> </p><ol start="6"><li>这一次比较幸运，没有其他线程改变V的值。线程1进行Compare，发现A和V的值是相等的。</li></ol><p><img src="/img/thread_java/1571818597998.png" alt="1571818597998"> </p><ol start="7"><li>线程1进行SWAP，把内存V的值替换为B，也就是12。</li></ol><p><img src="/img/thread_java/1571818747880.png" alt="1571818747880"> </p><p>举例说明：这好比春节的时候抢火车票，下手快的会抢先买到票，而下手慢的可以再次尝试，直到买到票。</p><h3 id="4-6-2-源码分析"><a href="#4-6-2-源码分析" class="headerlink" title="4.6.2 源码分析"></a>4.6.2 源码分析</h3><p>那么接下来我们就来查看一下AtomicInteger类中incrementAndGet方法的源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicInteger</span> <span class="keyword">extends</span> <span class="title class_">Number</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cas算法的实现类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> jdk.internal.misc.<span class="type">Unsafe</span> <span class="variable">U</span> <span class="operator">=</span> jdk.internal.misc.Unsafe.getUnsafe();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 表示变量值在内存中的偏移量地址，unsafe类就是根据内存偏移量地址获取数据值。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">VALUE</span> <span class="operator">=</span> U.objectFieldOffset(AtomicInteger.class, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> value;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 以原子方式将当前值加1，这里返回的是自增后的值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">incrementAndGet</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* this表示当前AtomicInteger对象 ，1表示要增加的值 */</span></span><br><span class="line">        <span class="keyword">return</span> U.getAndAddInt(<span class="built_in">this</span>, VALUE, <span class="number">1</span>) + <span class="number">1</span>;<span class="comment">// 调用Unsafe类中的getAndAddInt方法</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UnSafe类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Unsafe</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Unsafe类中的getAndAddInt方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndAddInt</span><span class="params">(Object o, <span class="type">long</span> offset, <span class="type">int</span> delta)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> v;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// do...while就是自旋操作,当CAS成功以后，循环结束</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">// 获取AtomicInteger类中所封装的int类型的值，就相当于旧的预期值A</span></span><br><span class="line">            v = getIntVolatile(o, offset); </span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 调用本类的weakCompareAndSetInt方法实现比较在交换； o: AtomicInteger对象, v: 相当于旧的预期值A, v + delta：新值B</span></span><br><span class="line">        &#125; <span class="keyword">while</span> (!weakCompareAndSetInt(o, offset, v, v + delta));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Unsafe类中的weakCompareAndSetInt方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">weakCompareAndSetInt</span><span class="params">(Object o, <span class="type">long</span> offset, <span class="type">int</span> expected, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> compareAndSetInt(o, offset, expected, x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 本地方法，调用CPU指令实现CAS</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">compareAndSetInt</span><span class="params">(Object o, <span class="type">long</span> offset, <span class="type">int</span> expected, <span class="type">int</span> x)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-7-CAS与Synchronized"><a href="#4-7-CAS与Synchronized" class="headerlink" title="4.7 CAS与Synchronized"></a>4.7 CAS与Synchronized</h2><p>CAS和Synchronized都可以保证多线程环境下共享数据的安全性。那么他们两者有什么区别？</p><p>Synchronized是从悲观的角度出发：</p><p>总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（<strong>共享资源每次只给一个线程使用，其它线</strong></p><p><strong>程阻塞，用完后再把资源转让给其它线程</strong>）。因此Synchronized我们也将其称之为悲观锁。jdk中的ReentrantLock也是一种悲观锁。</p><p>CAS是从乐观的角度出发:</p><p>总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据。CAS这种机制我们也可以将其称之为乐观锁。</p><h1 id="5-并发工具类"><a href="#5-并发工具类" class="headerlink" title="5 并发工具类"></a>5 并发工具类</h1><p>在JDK的并发包里提供了几个非常有用的并发容器和并发工具类。供我们在多线程开发中进行使用。</p><h2 id="5-1-ConcurrentHashMap"><a href="#5-1-ConcurrentHashMap" class="headerlink" title="5.1 ConcurrentHashMap"></a>5.1 ConcurrentHashMap</h2><h3 id="5-1-1-概述以及基本使用"><a href="#5-1-1-概述以及基本使用" class="headerlink" title="5.1.1 概述以及基本使用"></a>5.1.1 概述以及基本使用</h3><p>在集合类中HashMap是比较常用的集合对象，但是HashMap是线程不安全的(多线程环境下可能会存在问题)。为了保证数据的安全性我们可以使用Hashtable，但是Hashtable的效率低下。</p><p>基于以上两个原因我们可以使用JDK1.5以后所提供的ConcurrentHashMap。</p><p><font color="blue" size="3"><strong>案例1</strong></font>：演示HashMap线程不安全</p><p>实现步骤</p><ol><li>创建一个HashMap集合对象</li><li>创建两个线程对象，第一个线程对象向集合中添加元素(1-24),第二个线程对象向集合中添加元素(25-50);</li><li>主线程休眠1秒，以便让其他两个线程将数据填装完毕</li><li>从集合中找出键和值不相同的数据</li></ol><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个HashMap集合对象</span></span><br><span class="line">        HashMap&lt;String , String&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String , String&gt;() ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个线程对象,我们本次使用匿名内部类的方式去常见线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 第一个线程对象向集合中添加元素(1-24)</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span> ; x &lt; <span class="number">25</span> ; x++) &#123;</span><br><span class="line">                    hashMap.put(String.valueOf(x) , String.valueOf(x)) ;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程t2</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 第二个线程对象向集合中添加元素(25-50)</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">25</span> ; x &lt; <span class="number">51</span> ; x++) &#123;</span><br><span class="line">                    hashMap.put(String.valueOf(x) , String.valueOf(x)) ;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 主线程休眠2s，以便让其他两个线程将数据填装完毕</span></span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从集合中找出键和值不相同的数据</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span> ; x &lt; <span class="number">51</span> ; x++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// HashMap中的键就是当前循环变量的x这个数据的字符串表现形式 ， 根据键找到值，然后在进行判断</span></span><br><span class="line">            <span class="keyword">if</span>( !String.valueOf(x).equals( hashMap.get(String.valueOf(x)) ) ) &#123;</span><br><span class="line">                System.out.println(String.valueOf(x) + <span class="string">&quot;:&quot;</span> + hashMap.get(String.valueOf(x)));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------------------------------</span><br><span class="line"><span class="number">5</span>:<span class="literal">null</span></span><br></pre></td></tr></table></figure><p>通过控制台的输出结果，我们可以看到在多线程操作HashMap的时候，可能会出现线程安全问题。</p><blockquote><p>注1：需要多次运行才可以看到具体的效果; 可以使用循环将代码进行改造，以便让问题方便的暴露出来！</p></blockquote><p><font color="blue" size="3"><strong>案例2</strong></font>：演示Hashtable线程安全</p><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashtableDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个Hashtable集合对象</span></span><br><span class="line">        Hashtable&lt;String , String&gt; hashtable = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;String , String&gt;() ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个线程对象,我们本次使用匿名内部类的方式去常见线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 第一个线程对象向集合中添加元素(1-24)</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span> ; x &lt; <span class="number">25</span> ; x++) &#123;</span><br><span class="line">                    hashtable.put(String.valueOf(x) , String.valueOf(x)) ;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程t2</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 第二个线程对象向集合中添加元素(25-50)</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">25</span> ; x &lt; <span class="number">51</span> ; x++) &#123;</span><br><span class="line">                    hashtable.put(String.valueOf(x) , String.valueOf(x)) ;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 主线程休眠2s，以便让其他两个线程将数据填装完毕</span></span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从集合中找出键和值不相同的数据</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span> ; x &lt; <span class="number">51</span> ; x++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Hashtable中的键就是当前循环变量的x这个数据的字符串表现形式 ， 根据键找到值，然后在进行判断</span></span><br><span class="line">            <span class="keyword">if</span>( !String.valueOf(x).equals( hashtable.get(String.valueOf(x)) ) ) &#123;</span><br><span class="line">                System.out.println(String.valueOf(x) + <span class="string">&quot;:&quot;</span> + hashtable.get(String.valueOf(x)));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不论该程序运行多少次，都不会产生数据问题。因此也就证明Hashtable是线程安全的。</p><p><font color="blue" size="3"><strong>Hashtable保证线程安全的原理</strong></font>：</p><p>查看Hashtable的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hashtable</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">Dictionary</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;, Cloneable, java.io.Serializable &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Entry数组，一个Entry就相当于一个元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;?,?&gt;[] table;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Entry类的定义</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> hash;<span class="comment">// 当前key的hash码值</span></span><br><span class="line">        <span class="keyword">final</span> K key;<span class="comment">// 键</span></span><br><span class="line">        V value;<span class="comment">// 值</span></span><br><span class="line">        Entry&lt;K,V&gt; next;<span class="comment">// 下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 存储数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span>&#123;...&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title function_">get</span><span class="params">(Object key)</span>&#123;...&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取长度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;...&#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的结构如下图所示</p><p><img src="/img/thread_java/1571905221097.png" alt="1571905221097"> </p><p>Hashtable保证线程安全性的是使用方法全局锁进行实现的。在线程竞争激烈的情况下HashTable的效率非常低下。因为当一个线程访问HashTable的同步方法，其他线程也访问HashTable</p><p>的同步方法时，会进入阻塞状态。如线程1使用put进行元素添加，线程2不但不能使用put方法添加元素，也不能使用get方法来获取元素，所以竞争越激烈效率越低。</p><p><font color="blue" size="3"><strong>案例3</strong></font>：演示ConcurrentHashMap线程安全</p><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcurrentHashMapDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个ConcurrentHashMap集合对象</span></span><br><span class="line">        ConcurrentHashMap&lt;String , String&gt; concurrentHashMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String , String&gt;() ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个线程对象,我们本次使用匿名内部类的方式去常见线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 第一个线程对象向集合中添加元素(1-24)</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span> ; x &lt; <span class="number">25</span> ; x++) &#123;</span><br><span class="line">                    concurrentHashMap.put(String.valueOf(x) , String.valueOf(x)) ;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程t2</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 第二个线程对象向集合中添加元素(25-50)</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">25</span> ; x &lt; <span class="number">51</span> ; x++) &#123;</span><br><span class="line">                    concurrentHashMap.put(String.valueOf(x) , String.valueOf(x)) ;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 主线程休眠2s，以便让其他两个线程将数据填装完毕</span></span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从集合中找出键和值不相同的数据</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span> ; x &lt; <span class="number">51</span> ; x++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// concurrentHashMap中的键就是当前循环变量的x这个数据的字符串表现形式 ， 根据键找到值，然后在进行判断</span></span><br><span class="line">            <span class="keyword">if</span>( !String.valueOf(x).equals( concurrentHashMap.get(String.valueOf(x)) ) ) &#123;</span><br><span class="line">                System.out.println(String.valueOf(x) + <span class="string">&quot;:&quot;</span> + concurrentHashMap.get(String.valueOf(x)));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不论该程序运行多少次，都不会产生数据问题。因此也就证明ConcurrentHashMap是线程安全的。</p><h3 id="5-1-2-源码分析"><a href="#5-1-2-源码分析" class="headerlink" title="5.1.2 源码分析"></a>5.1.2 源码分析</h3><p>由于ConcurrentHashMap在jdk1.7和jdk1.8的时候实现原理不太相同，因此需要分别来讲解一下两个不同版本的实现原理。</p><h4 id="1-jdk1-7版本"><a href="#1-jdk1-7版本" class="headerlink" title="1) jdk1.7版本"></a>1) jdk1.7版本</h4><p><font color="blue" size="3"><strong>ConcurrentHashMap中的重要成员变量</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcurrentHashMap</span>&lt;K, V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractMap</span>&lt;K, V&gt; <span class="keyword">implements</span> <span class="title class_">ConcurrentMap</span>&lt;K, V&gt;, Serializable &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Segment翻译中文为&quot;段&quot; , 段数组对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> Segment&lt;K,V&gt;[] segments;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Segment是一种可重入锁（ReentrantLock），在ConcurrentHashMap里扮演锁的角色，将一个大的table分割成多个小的table进行加锁。</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Segment</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">ReentrantLock</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">int</span> count;    <span class="comment">// Segment中元素的数量，由volatile修饰，支持内存可见性；</span></span><br><span class="line">        <span class="keyword">transient</span> <span class="type">int</span> modCount; <span class="comment">// 对table的大小造成影响的操作的数量（比如put或者remove操作）;</span></span><br><span class="line">        <span class="keyword">transient</span> <span class="type">int</span> threshold; <span class="comment">// 扩容阈值;</span></span><br><span class="line">        <span class="keyword">transient</span> <span class="keyword">volatile</span> HashEntry&lt;K,V&gt;[] table;  <span class="comment">// 链表数组，数组中的每一个元素代表了一个链表的头部;</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">float</span> loadFactor; <span class="comment">// 负载因子 </span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Segment中的元素是以HashEntry的形式存放在数组中的，其结构与普通HashMap的HashEntry基本一致，不同的是Segment的HashEntry，其value由     // volatile修饰，以支持内存可见性，即写操作对其他读线程即时可见。</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">HashEntry</span>&lt;K,V&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> hash;<span class="comment">// 当前节点key对应的哈希码值</span></span><br><span class="line">        <span class="keyword">final</span> K key;<span class="comment">// 存储键</span></span><br><span class="line">        <span class="keyword">volatile</span> V value;<span class="comment">// 存储值</span></span><br><span class="line">        <span class="keyword">volatile</span> HashEntry&lt;K,V&gt; next;<span class="comment">// 下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的结构如下图所示</p><p><img src="/img/thread_java/1571880094854.png" alt="1571880094854">  </p><p>简单来讲，就是ConcurrentHashMap比HashMap多了一次hash过程，第1次hash定位到Segment，第2次hash定位到HashEntry，然后链表搜索找到指定节点。在进行写操作时，只需锁住写</p><p>元素所在的Segment即可(这种锁被称为<font size="3" color="red"><strong>分段锁</strong></font>)，其他Segment无需加锁，从而产生锁竞争的概率大大减小，提高了并发读写的效率。该种实现方式的缺点是hash过程比普通的HashMap要长</p><p>(因为需要进行两次hash操作)。</p><p><font color="blue" size="3"><strong>ConcurrentHashMap的put方法源码分析</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcurrentHashMap</span>&lt;K, V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractMap</span>&lt;K, V&gt; <span class="keyword">implements</span> <span class="title class_">ConcurrentMap</span>&lt;K, V&gt;, Serializable &#123; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义一个Segment对象</span></span><br><span class="line">        Segment&lt;K,V&gt; s;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果value的值为空，那么抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// hash函数获取key的hashCode，然后做了一些处理</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通过key的hashCode定位segment</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对定位的Segment进行判断，如果Segment为空，调用ensureSegment进行初始化操作(第一次hash定位)</span></span><br><span class="line">        <span class="keyword">if</span> ((s = (Segment&lt;K,V&gt;)UNSAFE.getObject(segments, (j &lt;&lt; SSHIFT) + SBASE)) == <span class="literal">null</span>) </span><br><span class="line">            s = ensureSegment(j);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用Segment对象的put方法添加元素</span></span><br><span class="line">        <span class="keyword">return</span> s.put(key, hash, value, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Segment是一种可ReentrantLock，在ConcurrentHashMap里扮演锁的角色，将一个大的table分割成多个小的table进行加锁。</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Segment</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">ReentrantLock</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加元素</span></span><br><span class="line">        <span class="keyword">final</span> V <span class="title function_">put</span><span class="params">(K key, <span class="type">int</span> hash, V value, <span class="type">boolean</span> onlyIfAbsent)</span> &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 尝试对该段进行加锁,如果加锁失败，则调用scanAndLockForPut方法;在该方法中就要进行再次尝试或者进行自旋等待</span></span><br><span class="line">            HashEntry&lt;K,V&gt; node = tryLock() ? <span class="literal">null</span> : scanAndLockForPut(key, hash, value);</span><br><span class="line">            V oldValue;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 获取HashEntry数组对象</span></span><br><span class="line">                HashEntry&lt;K,V&gt;[] tab = table;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 根据key的hashCode值计算索引(第二次hash定位)</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (tab.length - <span class="number">1</span>) &amp; hash;</span><br><span class="line">                HashEntry&lt;K,V&gt; first = entryAt(tab, index);</span><br><span class="line">                <span class="keyword">for</span> (HashEntry&lt;K,V&gt; e = first;;) </span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 若不为null</span></span><br><span class="line">                    <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">                        K k;</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">// 判读当前节点的key是否和链表头节点的key相同(依赖于hashCode方法和equals方法) </span></span><br><span class="line">                        <span class="comment">// 如果相同，值进行更新</span></span><br><span class="line">                        <span class="keyword">if</span> ((k = e.key) == key || (e.hash == hash &amp;&amp; key.equals(k))) &#123;</span><br><span class="line">                            oldValue = e.value;</span><br><span class="line">                            <span class="keyword">if</span> (!onlyIfAbsent) &#123;</span><br><span class="line">                                e.value = value;</span><br><span class="line">                                ++modCount;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                        e = e.next;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 若头结点为null</span></span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">// 将新节点添加到链表中</span></span><br><span class="line">                        <span class="keyword">if</span> (node != <span class="literal">null</span>) </span><br><span class="line">                            node.setNext(first);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            node = <span class="keyword">new</span> <span class="title class_">HashEntry</span>&lt;K,V&gt;(hash, key, value, first);</span><br><span class="line">                        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> count + <span class="number">1</span>;</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">// 如果超过阈值，则进行rehash操作</span></span><br><span class="line">                        <span class="keyword">if</span> (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</span><br><span class="line">                            rehash(node);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            setEntryAt(tab, index, node);</span><br><span class="line">                        ++modCount;</span><br><span class="line">                        count = c;</span><br><span class="line">                        oldValue = <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注：源代码进行简单讲解即可(核心：进行了两次哈希定位以及加锁过程)</p></blockquote><h4 id="2-jdk1-8版本"><a href="#2-jdk1-8版本" class="headerlink" title="2) jdk1.8版本"></a>2) jdk1.8版本</h4><p>在JDK1.8中为了进一步优化ConcurrentHashMap的性能，去掉了Segment分段锁的设计。在数据结构方面，则是跟HashMap一样，使用一个哈希表table数组。(数组 + 链表 + 红黑树) </p><p>而线程安全方面是结合CAS机制 + 局部锁实现的，减低锁的粒度，提高性能。同时在HashMap的基础上，对哈希表table数组和链表节点的value，next指针等使用volatile来修饰，从而</p><p>实现线程可见性。</p><p><font color="blue" size="3"><strong>ConcurrentHashMap中的重要成员变量</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcurrentHashMap</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractMap</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ConcurrentMap</span>&lt;K,V&gt;, Serializable &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Node数组</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Node类的定义</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123; </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> hash;<span class="comment">// 当前key的hashCode值</span></span><br><span class="line">        <span class="keyword">final</span> K key;<span class="comment">// 键</span></span><br><span class="line">        <span class="keyword">volatile</span> V val;<span class="comment">// 值</span></span><br><span class="line">        <span class="keyword">volatile</span> Node&lt;K,V&gt; next;<span class="comment">// 下一个节点</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// TreeNode类的定义</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">Node</span>&lt;K,V&gt; &#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; parent;  <span class="comment">// 父节点</span></span><br><span class="line">        TreeNode&lt;K,V&gt; left;   <span class="comment">// 左子节点</span></span><br><span class="line">        TreeNode&lt;K,V&gt; right;   <span class="comment">// 右子节点</span></span><br><span class="line">        TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">        <span class="type">boolean</span> red;   <span class="comment">// 节点的颜色状态</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的结构如下图</p><p><img src="/img/thread_java/1571901607504.png" alt="1571901607504"> </p><p><font color="blue" size="3"><strong>ConcurrentHashMap的put方法源码分析</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcurrentHashMap</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractMap</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ConcurrentMap</span>&lt;K,V&gt;, Serializable &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(key, value, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// putVal方法定义</span></span><br><span class="line">    <span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(K key, V value, <span class="type">boolean</span> onlyIfAbsent)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// key为null直接抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span> || value == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算key所对应的hashCode值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> spread(key.hashCode());</span><br><span class="line">        <span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="type">int</span> n, i, fh;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 哈希表如果不存在，那么此时初始化哈希表</span></span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">                tab = initTable();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 通过hash值计算key在table表中的索引，将其值赋值给变量i,然后根据索引找到对应的Node，如果Node为null,做出处理</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="literal">null</span>) &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 新增链表头结点，cas方式添加到哈希表table</span></span><br><span class="line">                <span class="keyword">if</span> (casTabAt(tab, i, <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(hash, key, value, <span class="literal">null</span>))) <span class="keyword">break</span>;                   </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                tab = helpTransfer(tab, f);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">V</span> <span class="variable">oldVal</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// f为链表头结点，使用synchronized加锁</span></span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            binCount = <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                                K ek;</span><br><span class="line">                                </span><br><span class="line">                                <span class="comment">// 节点已经存在，更新value即可</span></span><br><span class="line">                                <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((ek = e.key) == key || (ek != <span class="literal">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                    oldVal = e.val;</span><br><span class="line">                                    <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                        e.val = value;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                </span><br><span class="line">                                <span class="comment">// 该key对应的节点不存在,则新增节点并添加到该链表的末尾</span></span><br><span class="line">                                Node&lt;K,V&gt; pred = e;</span><br><span class="line">                                <span class="keyword">if</span> ((e = e.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                                    pred.next = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                </span><br><span class="line">                            &#125;</span><br><span class="line">                            </span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123; <span class="comment">// 红黑树节点，则往该红黑树更新或添加该节点即可</span></span><br><span class="line">                            Node&lt;K,V&gt; p;</span><br><span class="line">                            binCount = <span class="number">2</span>;</span><br><span class="line">                            <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key, value)) != <span class="literal">null</span>) &#123;</span><br><span class="line">                                oldVal = p.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    p.val = value;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 判断是否需要将链表转为红黑树</span></span><br><span class="line">                <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                        treeifyBin(tab, i);</span><br><span class="line">                    <span class="keyword">if</span> (oldVal != <span class="literal">null</span>)</span><br><span class="line">                        <span class="keyword">return</span> oldVal;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// CAS算法的核心类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe U;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            U = sun.misc.Unsafe.getUnsafe();</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 原子获取链表节点</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; Node&lt;K,V&gt; <span class="title function_">tabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class="type">long</span>)i &lt;&lt; ASHIFT) + ABASE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// CAS更新或新增链表节点</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="type">boolean</span> <span class="title function_">casTabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> i, Node&lt;K,V&gt; c, Node&lt;K,V&gt; v)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> U.compareAndSwapObject(tab, ((<span class="type">long</span>)i &lt;&lt; ASHIFT) + ABASE, c, v);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单总结：</p><ol><li><p>如果当前需要put的key对应的链表在哈希表table中还不存在，即还没添加过该key的hash值对应的链表，则调用casTabAt方法，基于CAS机制来实现添加该链表头结点到哈希表</p><p>table中，避免该线程在添加该链表头结的时候，其他线程也在添加的并发问题；如果CAS失败，则进行自旋，通过继续第2步的操作；</p></li><li><p>如果需要添加的链表已经存在哈希表table中，则通过tabAt方法，基于volatile机制，获取当前最新的链表头结点f，由于f指向的是ConcurrentHashMap的哈希表table的某条</p><p>链表的头结点，故虽然f是临时变量，由于是引用共享的该链表头结点，所以可以使用synchronized关键字来同步多个线程对该链表的访问。在synchronized(f)同步块里面则是与</p><p>HashMap一样遍历该链表，如果该key对应的链表节点已经存在，则更新，否则在链表的末尾新增该key对应的链表节点。</p></li></ol><h2 id="5-2-CountDownLatch"><a href="#5-2-CountDownLatch" class="headerlink" title="5.2 CountDownLatch"></a>5.2 CountDownLatch</h2><p>CountDownLatch允许一个或多个线程等待其他线程完成操作以后，再执行当前线程；比如我们在主线程需要开启2个其他线程，当其他的线程执行完毕以后我们再去执行主线程，针对这</p><p>个需求我们就可以使用CountDownLatch来进行实现。CountDownLatch中count down是倒着数数的意思；CountDownLatch是通过一个计数器来实现的，每当一个线程完成了自己的</p><p>任务后，可以调用countDown()方法让计数器-1，当计数器到达0时，调用CountDownLatch的await()方法的线程阻塞状态解除，继续执行。</p><p>CountDownLatch的相关方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">CountDownLatch</span><span class="params">(<span class="type">int</span> count)</span><span class="comment">// 初始化一个指定计数器的CountDownLatch对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException<span class="comment">// 让当前线程等待</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">countDown</span><span class="params">()</span><span class="comment">// 计数器进行减1</span></span><br></pre></td></tr></table></figure><p>案例演示：使用CountDownLatch完成上述需求(我们在主线程需要开启2个其他线程，当其他的线程执行完毕以后我们再去执行主线程)</p><p>实现思路：在main方法中创建一个CountDownLatch对象，把这个对象作为作为参数传递给其他的两个任务线程</p><p>线程任务类1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountDownLatchThread01</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CountDownLatch类型成员变量</span></span><br><span class="line">    <span class="keyword">private</span> CountDownLatch countDownLatch ;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CountDownLatchThread01</span><span class="params">(CountDownLatch countDownLatch)</span> &#123;      <span class="comment">// 构造方法的作用：接收CountDownLatch对象</span></span><br><span class="line">        <span class="built_in">this</span>.countDownLatch = countDownLatch ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;10秒以后执行了CountDownLatchThread01......&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用CountDownLatch对象的countDown方法对计数器进行-1操作</span></span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程任务类2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountDownLatchThread02</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CountDownLatch类型成员变量</span></span><br><span class="line">    <span class="keyword">private</span> CountDownLatch countDownLatch ;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CountDownLatchThread02</span><span class="params">(CountDownLatch countDownLatch)</span> &#123;      <span class="comment">// 构造方法的作用：接收CountDownLatch对象</span></span><br><span class="line">        <span class="built_in">this</span>.countDownLatch = countDownLatch ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;3秒以后执行了CountDownLatchThread02......&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用CountDownLatch对象的countDown方法对计数器进行-1操作</span></span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountDownLatchDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  1. 创建一个CountDownLatch对象</span></span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">2</span>) ;                 <span class="comment">// CountDownLatch中的计数器的默认值就是2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//  2. 创建线程任务类对象，并且把这个CountDownLatch对象作为构造方法的参数进行传递</span></span><br><span class="line">        <span class="type">CountDownLatchThread01</span> <span class="variable">countDownLatchThread01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatchThread01</span>(countDownLatch) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  3. 创建线程任务类对象，并且把这个CountDownLatch对象作为构造方法的参数进行传递</span></span><br><span class="line">        <span class="type">CountDownLatchThread02</span> <span class="variable">countDownLatchThread02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatchThread02</span>(countDownLatch) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  4. 创建线程对象，并启动线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(countDownLatchThread01);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(countDownLatchThread02);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  5. 在主线程中调用 CountDownLatch中的await让主线程处于阻塞状态</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            countDownLatch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  6. 程序结束的输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程执行了.... 程序结束了......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>秒以后执行了CountDownLatchThread02......</span><br><span class="line"><span class="number">10</span>秒以后执行了CountDownLatchThread01......</span><br><span class="line">主线程执行了.... 程序结束了......</span><br></pre></td></tr></table></figure><p>CountDownLatchThread02线程先执行完毕，此时计数器-1；CountDownLatchThread01线程执行完毕，此时计数器-1；当计数器的值为0的时候，主线程阻塞状态接触，主线程向下执行。</p><h2 id="5-3-CyclicBarrier"><a href="#5-3-CyclicBarrier" class="headerlink" title="5.3 CyclicBarrier"></a>5.3 CyclicBarrier</h2><h3 id="5-3-1-概述以及基本使用"><a href="#5-3-1-概述以及基本使用" class="headerlink" title="5.3.1 概述以及基本使用"></a>5.3.1 概述以及基本使用</h3><p>CyclicBarrier的字面意思是可循环使用（Cyclic）的屏障（Barrier）。它要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障</p><p>才会开门，所有被屏障拦截的线程才会继续运行。</p><p>例如：公司召集5名员工开会，等5名员工都到了，会议开始。我们创建5个员工线程，1个开会线程，几乎同时启动，使用CyclicBarrier保证5名员工线程全部执行后，再执行开会线程。</p><p>CyclicBarrier的相关方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">CyclicBarrier</span><span class="params">(<span class="type">int</span> parties, Runnable barrierAction)</span>   <span class="comment">// 用于在线程到达屏障时，优先执行barrierAction，方便处理更复杂的业务场景</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">await</span><span class="params">()</span><span class="comment">// 每个线程调用await方法告诉CyclicBarrier我已经到达了屏障，然后当前线程被阻塞</span></span><br></pre></td></tr></table></figure><p>案例演示：模拟员工开会</p><p>实现步骤：</p><ol><li>创建一个员工线程类(EmployeeThread),该线程类中需要定义一个CyclicBarrier类型的形式参数</li><li>创建一个开会线程类(MettingThread)</li><li>测试类<ol><li>创建CyclicBarrier对象</li><li>创建5个EmployeeThread线程对象，把第一步创建的CyclicBarrier对象作为构造方法参数传递过来</li><li>启动5个员工线程</li></ol></li></ol><p>员工线程类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CyclicBarrier类型的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> CyclicBarrier cyclicBarrier ;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EmployeeThread</span><span class="params">(CyclicBarrier cyclicBarrier)</span> &#123;        <span class="comment">// 使用构造方法对CyclicBarrier进行初始化</span></span><br><span class="line">        <span class="built_in">this</span>.cyclicBarrier = cyclicBarrier ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟开会人员的随机到场</span></span><br><span class="line">            Thread.sleep((<span class="type">int</span>) (Math.random() * <span class="number">1000</span>));</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 到了! &quot;</span>);</span><br><span class="line">            cyclicBarrier.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开会线程类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MettingThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;好了，人都到了，开始开会......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CyclicBarrierDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建CyclicBarrier对象</span></span><br><span class="line">        <span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">5</span> , <span class="keyword">new</span> <span class="title class_">MettingThread</span>()) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建5个EmployeeThread线程对象，把第一步创建的CyclicBarrier对象作为构造方法参数传递过来</span></span><br><span class="line">        <span class="type">EmployeeThread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmployeeThread</span>(cyclicBarrier) ;</span><br><span class="line">        <span class="type">EmployeeThread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmployeeThread</span>(cyclicBarrier) ;</span><br><span class="line">        <span class="type">EmployeeThread</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmployeeThread</span>(cyclicBarrier) ;</span><br><span class="line">        <span class="type">EmployeeThread</span> <span class="variable">thread4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmployeeThread</span>(cyclicBarrier) ;</span><br><span class="line">        <span class="type">EmployeeThread</span> <span class="variable">thread5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmployeeThread</span>(cyclicBarrier) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动5个员工线程</span></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread3.start();</span><br><span class="line">        thread4.start();</span><br><span class="line">        thread5.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-2-使用场景"><a href="#5-3-2-使用场景" class="headerlink" title="5.3.2 使用场景"></a>5.3.2 使用场景</h3><p>使用场景：CyclicBarrier可以用于多线程计算数据，最后合并计算结果的场景。</p><p>比如：现在存在两个文件，这个两个文件中存储的是某一个员工两年的工资信息(一年一个文件)，现需要对这两个文件中的数据进行汇总；使用两个线程读取2个文件中的数据，当两个文</p><p>件中的数据都读取完毕以后，进行数据的汇总操作。</p><p>分析：要想在两个线程读取数据完毕以后进行数据的汇总，那么我们就需要定义一个任务类(该类需要实现Runnable接口)；两个线程读取完数据以后再进行数据的汇总，那么我们可以将</p><p>​ 两个线程读取到的数据先存储到一个集合中，而多线程环境下最常见的线程集合类就是ConcurrentHashMap，而这个集合需要被两个线程都可以进行使用，那么我们可以将这个集</p><p>​ 合作为我们任务类的成员变量，然后我们在这个任务类中去定义一个CyclicBarrier对象，然后在定义一个方法(count)，当调用这个count方法的时候需要去开启两个线程对象，</p><p>​ 使用这两个线程对象读取数据，把读取到的数据存储到ConcurrentHashMap对象，当一个线程读取数据完毕以后，调用CyclicBarrier的awit方法(告诉CyclicBarrier我已经</p><p>​ 到达了屏障)，然后在任务类的run方法对ConcurrentHashMap的数据进行汇总操作；</p><p>实现步骤:</p><ol><li>定义一个任务类CyclicBarrierThreadUse(实现了Runnable接口)</li><li>定义成员变量：CyclicBarrier ，ConcurrentHashMap</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">2</span> , <span class="built_in">this</span>) ;</span><br><span class="line"><span class="keyword">private</span> ConcurrentHashMap&lt;Integer , String&gt; concurrentHashMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;Integer , String&gt;() ;</span><br></pre></td></tr></table></figure><ol start="3"><li>定义一个方法count方法，在count方法中开启两个线程对象(可以使用匿名内部类的方式实现)</li><li>在run方法中对ConcurrentHashMap中的数据进行汇总</li><li>编写测试类CyclicBarrierThreadUseDemo</li><li>创建CyclicBarrierThreadUse对象，调用count方法</li></ol><p>任务类代代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CyclicBarrierThreadUse</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前我们两个线程到达了屏障点以后，我们需要立即对数据进行汇总, 因此我们需要使用第二个构造方法</span></span><br><span class="line">    <span class="comment">// 并且我们当前这个类就是一个任务类，因此我们可以直接传递参数this</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">2</span> , <span class="built_in">this</span>) ;</span><br><span class="line">    <span class="keyword">private</span> ConcurrentHashMap&lt;Integer , String&gt; concurrentHashMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;Integer , String&gt;() ;  <span class="comment">// 存储两个线程所读取的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">count</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义一个方法count方法，在count方法中开启两个线程对象(可以使用匿名内部类的方式实现)</span></span><br><span class="line">        <span class="comment">// 线程1</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 读取数据</span></span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    bufferedReader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:\\salary\\2017-salary.txt&quot;</span>)) ;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">                    <span class="keyword">while</span>((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        concurrentHashMap.put(Integer.parseInt(line) , <span class="string">&quot;&quot;</span>) ;            <span class="comment">// 小的问题，工资信息不能重复</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(bufferedReader != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            bufferedReader.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 模拟任务的执行时间</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">5</span>) ;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---------------------线程读取数据完毕....&quot;</span>);</span><br><span class="line">                    cyclicBarrier.await() ;         <span class="comment">//通知cyclicBarrier当前线程已经到达了屏障点</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程2</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 读取数据</span></span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    bufferedReader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:\\salary\\2019-salary.txt&quot;</span>)) ;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">                    <span class="keyword">while</span>((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        concurrentHashMap.put(Integer.parseInt(line) , <span class="string">&quot;&quot;</span>) ;            <span class="comment">// 小的问题，工资信息不能重复</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(bufferedReader != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            bufferedReader.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 模拟任务的执行时间</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">10</span>) ;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---------------------线程读取数据完毕....&quot;</span>);</span><br><span class="line">                    cyclicBarrier.await() ;         <span class="comment">//通知cyclicBarrier当前线程已经到达了屏障点</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取concurrentHashMap中的数据进行汇总</span></span><br><span class="line">        Enumeration&lt;Integer&gt; enumeration = concurrentHashMap.keys();        <span class="comment">// 获取concurrentHashMap中所有的键</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这个Enumeration的使用和我们之前所学习过的迭代器类似</span></span><br><span class="line"><span class="comment">         * boolean hasMoreElements(); 判断集合中是否存在下一个元素</span></span><br><span class="line"><span class="comment">         * E nextElement();           获取元素</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">while</span>(enumeration.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> enumeration.nextElement();</span><br><span class="line">            result += integer ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CyclicBarrierThreadUseDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建任务类的对象</span></span><br><span class="line">        <span class="type">CyclicBarrierThreadUse</span> <span class="variable">cyclicBarrierThreadUse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrierThreadUse</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用count方法进行数据汇总</span></span><br><span class="line">        cyclicBarrierThreadUse.count();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-4-Semaphore"><a href="#5-4-Semaphore" class="headerlink" title="5.4 Semaphore"></a>5.4 Semaphore</h2><p>Semaphore字面意思是信号量的意思，它的作用是控制访问特定资源的线程数目。</p><p>举例：现在有一个十字路口，有多辆汽车需要进经过这个十字路口，但是我们规定同时只能有两辆汽车经过。其他汽车处于等待状态，只要某一个汽车经过了这个十字路口，其他的汽车才可以经</p><p>过，但是同时只能有两个汽车经过。如何限定经过这个十字路口车辆数目呢? 我们就可以使用Semaphore。</p><p>Semaphore的常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Semaphore</span><span class="params">(<span class="type">int</span> <span class="keyword">permits</span>)</span><span class="keyword">permits</span> 表示许可线程的数量</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">acquire</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException表示获取许可</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">()</span>表示释放许可</span><br></pre></td></tr></table></figure><p>案例演示：模拟汽车通过十字路口</p><p>实现步骤：</p><ol><li>创建一个汽车的线程任务类(CarThreadRunnable),在该类中定义一个Semaphore类型的成员变量</li><li>创建测试类<ol><li>创建线程任务类对象</li><li>创建5个线程对象，并启动。(5个线程对象，相当于5辆汽车)</li></ol></li></ol><p>CarThreadRunnable类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarThreadRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个Semaphore对象,限制只允许2个线程获取到许可证</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">2</span>) ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;                         <span class="comment">// 这个run只允许2个线程同时执行</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取许可证</span></span><br><span class="line">            semaphore.acquire();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-----&gt;&gt;正在经过十字路口&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟车辆经过十字路口所需要的时间</span></span><br><span class="line">            <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">nextInt</span> <span class="operator">=</span> random.nextInt(<span class="number">7</span>);</span><br><span class="line">            TimeUnit.SECONDS.sleep(nextInt);</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-----&gt;&gt;驶出十字路口&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 释放许可证</span></span><br><span class="line">            semaphore.release();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SemaphoreDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程任务类对象</span></span><br><span class="line">        <span class="type">CarThreadRunnable</span> <span class="variable">carThreadRunnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CarThreadRunnable</span>() ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建5个线程对象，并启动。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">5</span> ; x++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(carThreadRunnable).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Thread-<span class="number">0</span>-----&gt;&gt;正在经过十字路口</span><br><span class="line">Thread-<span class="number">1</span>-----&gt;&gt;正在经过十字路口</span><br><span class="line">Thread-<span class="number">1</span>-----&gt;&gt;驶出十字路口</span><br><span class="line">Thread-<span class="number">2</span>-----&gt;&gt;正在经过十字路口</span><br><span class="line">Thread-<span class="number">0</span>-----&gt;&gt;驶出十字路口</span><br><span class="line">Thread-<span class="number">3</span>-----&gt;&gt;正在经过十字路口</span><br><span class="line">Thread-<span class="number">2</span>-----&gt;&gt;驶出十字路口</span><br><span class="line">Thread-<span class="number">4</span>-----&gt;&gt;正在经过十字路口</span><br><span class="line">Thread-<span class="number">4</span>-----&gt;&gt;驶出十字路口</span><br><span class="line">Thread-<span class="number">3</span>-----&gt;&gt;驶出十字路口</span><br></pre></td></tr></table></figure><p>通过控制台输出，我们可以看到当某一个汽车”驶出”十字路口以后，就会有一个汽车立马驶入。</p><h2 id="5-5-Exchanger"><a href="#5-5-Exchanger" class="headerlink" title="5.5 Exchanger"></a>5.5 Exchanger</h2><h3 id="5-5-1-概述以及基本使用"><a href="#5-5-1-概述以及基本使用" class="headerlink" title="5.5.1 概述以及基本使用"></a>5.5.1 概述以及基本使用</h3><p>Exchanger（交换者）是一个用于线程间协作的工具类。Exchanger用于进行线程间的数据交换。</p><p>举例：比如男女双方结婚的时候，需要进行交换结婚戒指。</p><p>Exchanger常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Exchanger</span><span class="params">()</span><span class="comment">// 构造方法</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">exchange</span><span class="params">(V x)</span><span class="comment">// 进行交换数据的方法，参数x表示本方数据 ，返回值v表示对方数据</span></span><br></pre></td></tr></table></figure><p>这两个线程通过exchange方法交换数据，如果第一个线程先执行exchange()方法，它会一直等待第二个线程也执行exchange方法，当两个线程都到达同步点时，这两个线程就可以交换数据，</p><p>将本线程生产出来的数据传递给对方。</p><p>案例演示：模拟交互结婚戒指</p><p>实现步骤：</p><ol><li>创建一个男方的线程类(ManThread),定义一个Exchanger类型的成员变量</li><li>创建一个女方的线程类(WomanThread),定义一个Exchanger类型的成员变量</li><li>测试类<ol><li>创建一个Exchanger对象</li><li>创建一个ManThread对象，把第一步所创建的Exchanger作为构造方法参数传递过来</li><li>创建一个WomanThread对象，把第一步所创建的Exchanger作为构造方法参数传递过来</li><li>启动两个线程</li></ol></li></ol><p>ManThread类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ManThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义Exchanger类型的变量</span></span><br><span class="line">    <span class="keyword">private</span> Exchanger&lt;String&gt; exchanger ;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ManThread</span><span class="params">(Exchange&lt;String&gt; exchanger , String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.name = name ;</span><br><span class="line">        <span class="built_in">this</span>.exchanger = exchanger ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> exchanger.exchange(<span class="string">&quot;钻戒&quot;</span>);</span><br><span class="line">            System.out.println(name + <span class="string">&quot;----&gt;&gt;把钻戒给媳妇&quot;</span>);</span><br><span class="line">            System.out.println(name + <span class="string">&quot;----&gt;&gt;得到媳妇给的&quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WomanThread类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WomanThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义Exchanger类型的变量</span></span><br><span class="line">    <span class="keyword">private</span> Exchanger&lt;String&gt; exchanger ;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WomanThread</span><span class="params">(Exchanger&lt;String&gt; exchanger , String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name) ;</span><br><span class="line">        <span class="built_in">this</span>.name = name ;</span><br><span class="line">        <span class="built_in">this</span>.exchanger = exchanger ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> exchanger.exchange(<span class="string">&quot;铝戒&quot;</span>);</span><br><span class="line">            System.out.println(name + <span class="string">&quot;----&gt;&gt;把铝戒给老公&quot;</span>);</span><br><span class="line">            System.out.println(name + <span class="string">&quot;----&gt;&gt;得到老公给的&quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExchangerDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个Exchanger对象</span></span><br><span class="line">        Exchanger&lt;String&gt; exchanger = <span class="keyword">new</span> <span class="title class_">Exchanger</span>&lt;String&gt;() ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个ManThread对象</span></span><br><span class="line">        <span class="type">ManThread</span> <span class="variable">manThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ManThread</span>(exchanger , <span class="string">&quot;杨过&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个WomanThread对象</span></span><br><span class="line">        <span class="type">WomanThread</span> <span class="variable">womanThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WomanThread</span>(exchanger , <span class="string">&quot;小龙女&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        manThread.start();</span><br><span class="line">        womanThread.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-2-使用场景"><a href="#5-5-2-使用场景" class="headerlink" title="5.5.2 使用场景"></a>5.5.2 使用场景</h3><p>使用场景：可以做数据校对工作</p><p>比如: 现在存在一个文件，该文件中存储的是某一个员工一年的工资信息，现需要将这个员工的工资信息录入到系统中，采用AB岗两人进行录入，录入到两个文件中，系统需要加载这两</p><p>个文件，并对两个文件数据进行校对，看看是否录入一致，</p><p>实现步骤：</p><ol><li>创建一个测试类(ExchangerUseDemo)</li><li>通过匿名内部类的方法创建两个线程对象</li><li>两个线程分别读取文件中的数据，然后将数据存储到各自的集合中</li><li>当每一个线程读取完数据以后，就将数据交换给对方</li><li>然后每个线程使用对方传递过来的数据与自己所录入的数据进行比对</li></ol><p>ExchangerUseDemo类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExchangerUseDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建Exchanger对象</span></span><br><span class="line">        Exchanger&lt;ArrayList&lt;String&gt;&gt; exchanger = <span class="keyword">new</span> <span class="title class_">Exchanger</span>&lt;ArrayList&lt;String&gt;&gt;() ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 通过匿名内部类的方法创建两个线程对象</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 读取文件中的数据，然后将其存储到集合中</span></span><br><span class="line">                    ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;() ;</span><br><span class="line">                    <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:\\salary\\2017-salary.txt&quot;</span>)) ;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">                    <span class="keyword">while</span>((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        arrayList.add(line) ;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// arrayList.add(&quot;90000&quot;) ;</span></span><br><span class="line">                    <span class="comment">// arrayList.set(0 , &quot;90000&quot;) ;</span></span><br><span class="line">                    arrayList.remove(<span class="number">0</span>) ;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 调用Exchanger中的exchange方法完成数据的交换</span></span><br><span class="line">                    ArrayList&lt;String&gt; exchange = exchanger.exchange(arrayList);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 先比对长度</span></span><br><span class="line">                    <span class="keyword">if</span>(arrayList.size() == exchange.size()) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 然后使用对方线程所传递过来的数据和自己线程所读取到的数据进行比对</span></span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; arrayList.size() ; x++) &#123;</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 本方数据</span></span><br><span class="line">                            <span class="type">String</span> <span class="variable">benfangElement</span> <span class="operator">=</span> arrayList.get(x);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 对方数据</span></span><br><span class="line">                            <span class="type">String</span> <span class="variable">duifangElement</span> <span class="operator">=</span> exchange.get(x);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 比对</span></span><br><span class="line">                            <span class="keyword">if</span>(!benfangElement.equals(duifangElement)) &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;数据存在问题.....&quot;</span>);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">else</span>  &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;数据存在问题.....&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程2</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 读取文件中的数据，然后将其存储到集合中</span></span><br><span class="line">                    ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;() ;</span><br><span class="line">                    <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:\\salary\\2017-salary.txt&quot;</span>)) ;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">                    <span class="keyword">while</span>((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        arrayList.add(line) ;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 调用Exchanger中的exchange方法完成数据的交换</span></span><br><span class="line">                    ArrayList&lt;String&gt; exchange = exchanger.exchange(arrayList);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 先比对长度</span></span><br><span class="line">                    <span class="keyword">if</span>(arrayList.size() == exchange.size()) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 然后使用对方线程所传递过来的数据和自己线程所读取到的数据进行比对</span></span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; arrayList.size() ; x++) &#123;</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 本方数据</span></span><br><span class="line">                            <span class="type">String</span> <span class="variable">benfangElement</span> <span class="operator">=</span> arrayList.get(x);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 对方数据</span></span><br><span class="line">                            <span class="type">String</span> <span class="variable">duifangElement</span> <span class="operator">=</span> exchange.get(x);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 比对</span></span><br><span class="line">                            <span class="keyword">if</span>(!benfangElement.equals(duifangElement)) &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;数据存在问题.....&quot;</span>);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">else</span>  &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;数据存在问题.....&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="/2025/01/27/Java/"/>
      <url>/2025/01/27/Java/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="IDEA快捷键"><a href="#IDEA快捷键" class="headerlink" title="** IDEA快捷键 **"></a>** IDEA快捷键 **</h1><p>ALT + Ins 快速创建Javabean</p><p>CTRL + P 查看方法的具体参数</p><p>ALT + ENTER 选择 Extract Method 快速生成方法</p><p>CTRL + ALT + L 格式化代码</p><p>CTRL + B 查看方法详细</p><p>CTRL + ALT + V 生成生成接收返回值的变量名</p><p>CTRL + ALT + T 将选中的代码以某种方式包裹起来（如<code>try...catch</code>）</p><h1 id="Java基础语法"><a href="#Java基础语法" class="headerlink" title="Java基础语法"></a>Java基础语法</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p><font color='orange'>注释内容不会参与编译和运行，仅仅是对代码的解释说明</font></p><h3 id="注释概念"><a href="#注释概念" class="headerlink" title="注释概念"></a>注释概念</h3><ul><li>注释是在程序指定位置添加的说明性信息</li><li>简单理解为：对代码的一种解释，方便阅读</li></ul><h3 id="注释分类"><a href="#注释分类" class="headerlink" title="注释分类"></a>注释分类</h3><p>单行注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注释信息</span></span><br></pre></td></tr></table></figure><p>多行注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注释信息 */</span></span><br></pre></td></tr></table></figure><p>文档注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 注释信息 **/</span></span><br></pre></td></tr></table></figure><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p><font color='orange'>关键字：被java赋予了特定涵义的英文单词</font></p><h3 id="关键字特点"><a href="#关键字特点" class="headerlink" title="关键字特点"></a>关键字特点</h3><ul><li>关键字字母全部小写</li><li>常用的代码编辑器，针对关键字有特殊的颜色标记，非常直观</li></ul><hr><p>class：用于创建&#x2F;定义一个类，后面跟随类目。<font color='cornflowerblue'>类是Java最基本的组成单元</font></p><h2 id="⭐字面量⭐"><a href="#⭐字面量⭐" class="headerlink" title="⭐字面量⭐"></a>⭐字面量⭐</h2><p><font color='orange'>数据在程序中的书写格式</font></p><h4 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h4><table><thead><tr><th align="center">字面量类型</th><th align="center">说明</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">整数类型</td><td align="center">不带小数点的数字</td><td align="center">666，-666</td></tr><tr><td align="center">小数类型</td><td align="center">带小数点的数字</td><td align="center">3.1415，-3.1415</td></tr><tr><td align="center">字符串类型</td><td align="center">用双引号括起来的内容</td><td align="center">“123”，”ABC”,”你好”</td></tr><tr><td align="center">字符类型</td><td align="center">用单引号括起来的内容，内容只能有一个</td><td align="center">‘A’，’0’,’嗨‘</td></tr><tr><td align="center">布尔类型</td><td align="center">布尔值，表示真、假</td><td align="center">只有两个值：true，false</td></tr><tr><td align="center">空类型</td><td align="center">一个特殊的值，空值</td><td align="center">null</td></tr></tbody></table><h4 id="拓展——特殊字符"><a href="#拓展——特殊字符" class="headerlink" title="拓展——特殊字符"></a>拓展——特殊字符</h4><h5 id="t-制表符"><a href="#t-制表符" class="headerlink" title="\t 制表符"></a>\t 制表符</h5><p>在打印的时候，把前面字符串的长度补齐到8，或者8的整数倍。最少补1个空格，最多补8个空格</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 补上5个空格</span></span><br><span class="line">        System.out.println(<span class="string">&quot;abc&quot;</span> + <span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>作用：是文本输出时，更加美观、整齐</font></p><h3 id="⭐变量⭐"><a href="#⭐变量⭐" class="headerlink" title="⭐变量⭐"></a>⭐变量⭐</h3><p><font color='orange'>变量：在程序的执行过程中，其值可能发生改变的量（数据）</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据类型 变量名 = 数据值;</span></span><br></pre></td></tr></table></figure><p>数据类型：限定了变量能存储数据的类型</p><p>变量名：存储空间的名称</p><p>数据值：真正存在变量中的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义变量</span></span><br><span class="line"><span class="comment">// 数据类型 变量名 = 数据值;</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">System.out.println(a); <span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 变量参与计算</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">System.out.println(a + b); <span class="comment">// 30</span></span><br><span class="line"><span class="comment">// 修改记录的值</span></span><br><span class="line">a = -<span class="number">10</span>;</span><br><span class="line">System.out.println(a); <span class="comment">// -10</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>数据类型</th><th>关键字</th></tr></thead><tbody><tr><td>整数</td><td>int</td></tr><tr><td>浮点数</td><td>double</td></tr></tbody></table><h4 id="变量的注意事项"><a href="#变量的注意事项" class="headerlink" title="变量的注意事项"></a>变量的注意事项</h4><ul><li><p>只能存一个值</p></li><li><p>变量名不允许重复定义</p></li><li><p>一条语句可以定义多个变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在一条语句中可以定义多个变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">100</span>, e = <span class="number">200</span>, f = <span class="number">300</span>;</span><br><span class="line">System.out.println(d + e + f); <span class="comment">// 600</span></span><br></pre></td></tr></table></figure></li><li><p>变量在使用之前一定要赋值</p></li><li><p>变量的作用域范围</p></li></ul><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p>不同进制在代码中的表现形式</p><p>二进制：由 0 和 1 组成，代码中以 0b 开头</p><p>十进制：由 0 ~ 9 组成，前面不添加前缀</p><p>八进制：由 0 ~ 7 组成，代码中以 0 开头</p><p>十六进制：由 0 ~ 9 以及 a ~ f 组成，代码中以 0x 开头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">data</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="number">15</span>); <span class="comment">// 十进制</span></span><br><span class="line">System.out.println(<span class="number">015</span>); <span class="comment">// 八进制</span></span><br><span class="line">System.out.println(<span class="number">0b1101</span>); <span class="comment">// 二进制</span></span><br><span class="line">System.out.println(<span class="number">0x19f</span>); <span class="comment">// 十六进制</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>在计算机中，任意数据都是以二进制的形式来存储的 </font></p><h3 id="⭐数据类型⭐"><a href="#⭐数据类型⭐" class="headerlink" title="⭐数据类型⭐"></a>⭐数据类型⭐</h3><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><table><thead><tr><th>数据类型</th><th>关键字</th><th>范围</th><th>内存占用</th></tr></thead><tbody><tr><td>整数</td><td>byte</td><td>-128 ~ 127</td><td>1</td></tr><tr><td></td><td>short</td><td>-32768 ~ 32767</td><td>2</td></tr><tr><td></td><td>int</td><td>-2147483648 ~ 2147483647 (<font color='red'>10位数</font>)</td><td>4</td></tr><tr><td></td><td>long</td><td>-9223372036854774808 ~ 9223372036854774807 (<font color='red'>19位数</font>)</td><td>8</td></tr><tr><td>浮点数</td><td>float</td><td>-3.40E + 38 ~ 3.40E + 38</td><td>4</td></tr><tr><td></td><td>double</td><td>-1.79E + 308 ~ 1.79E + 308</td><td>8</td></tr><tr><td>字符</td><td>char</td><td>0 ~ 65535</td><td>2</td></tr><tr><td>布尔</td><td>boolean</td><td>true，false</td><td>1</td></tr></tbody></table><p><font color='red'>注意：如果要定义long类型的变量，要在数据后面加一个 L 作为后缀（大小写都可以）</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">num01</span> <span class="operator">=</span> <span class="number">99999L</span>；</span><br></pre></td></tr></table></figure><p><font color='red'>注意：如果要定义float类型的变量，要在数据后面加一个 F 作为后缀（大小写都可以）</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">num02</span> <span class="operator">=</span> <span class="number">10.1F</span>;</span><br></pre></td></tr></table></figure><p>整数和小数取值范围大小关系</p><p><font color='red'>double &gt; float &gt; long &gt; int &gt; short &gt; byte</font></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p><font color='orange'>标识符：就是给类、方法、变量起的名字</font></p><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><ul><li>由数字、字母、下划线 (_) 、美元符号 ($)组成</li><li>不能以数字开头</li><li>不能是关键字</li><li>区分大小写</li></ul><h3 id="驼峰命名法"><a href="#驼峰命名法" class="headerlink" title="驼峰命名法"></a>驼峰命名法</h3><ul><li>小驼峰命名法</li></ul><p>适用于方法、变量</p><p>例如：name、firstName</p><ul><li>大驼峰命名法</li></ul><p>适用于类名</p><p>例如：Student，MyCode</p><h2 id="⭐键盘录入⭐"><a href="#⭐键盘录入⭐" class="headerlink" title="⭐键盘录入⭐"></a>⭐键盘录入⭐</h2><p>Java中有一个类：Scanner，这个类就可以接收键盘输入的<font color='red'>数字</font></p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li>导包 — Scanner这个类在哪</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建对象 — 表示要开始使用Scanner这个类了</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in)</span><br></pre></td></tr></table></figure><ol start="3"><li>接受数据 — 正式开始工作</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sc.nextInt();</span><br></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p><font color='orange'>运算符：对字面量或者变量进行操作的符号</font></p><p><font color='orange'>表达式：用运算符把字面量或者变量连接起来，符合Java语法的式子就可以称为表达式</font></p><p>举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br></pre></td></tr></table></figure><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p><font color='red'>注意：在代码中，如果有小数参与计算，可能会丢失精度</font></p><h3 id="“-”-操作的三种情况"><a href="#“-”-操作的三种情况" class="headerlink" title="“+” 操作的三种情况"></a>“+” 操作的三种情况</h3><ul><li>数字相加</li><li>字符串相加</li><li>字符相加</li></ul><h4 id="数字相加"><a href="#数字相加" class="headerlink" title="数字相加"></a>数字相加</h4><p>数字进行运算时，数据类型不一样不能运算，需要<font color='red'>转成</font>一样的才能运算</p><h5 id="隐式转换（自动类型提升）"><a href="#隐式转换（自动类型提升）" class="headerlink" title="隐式转换（自动类型提升）"></a>隐式转换（自动类型提升）</h5><p>取值范围<font color='red'>小</font>的数值 → 取值范围<font color='red'>大</font>的数值</p><ul><li>取值范围小的，和取值范围大的进行运算，小的会提升为大的，再进行运算</li><li>byte short char 三种类型的数据在运算的时候，都会直接先提升为 int，然后再进行运算</li></ul><h5 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h5><p>取值范围<font color='red'>大</font>的数值 → 取值范围<font color='red'>小</font>的数值</p><ul><li>如果要把一个取值范围大的数值，赋值给取值范围小的变量，是不允许直接赋值的。如果一定要这么做，就需要加入强制转换</li><li>格式：目标数据类型 变量名 &#x3D; （目标数据类型）被强转的数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">12.3</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">int</span>) a;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">result</span> <span class="operator">=</span> (<span class="type">byte</span>)(a + b);</span><br></pre></td></tr></table></figure><h4 id="字符串相加"><a href="#字符串相加" class="headerlink" title="字符串相加"></a>字符串相加</h4><ul><li>当”+”操作中出现字符串时，这个”+”是字符串连接符，而不是算术运算符了。会将前后的数据进行拼接，并产生一个新的字符串</li><li>连续进行”+”，从左到右逐个执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">10</span> + <span class="number">10</span> + <span class="string">&quot;岁&quot;</span>); <span class="comment">// 20岁</span></span><br></pre></td></tr></table></figure><h4 id="字符的-操作"><a href="#字符的-操作" class="headerlink" title="字符的 + 操作"></a>字符的 + 操作</h4><ul><li>当 字符 + 字符&#x2F;字符 + 数字 时，会把字符通过 ASCII 码表查询到对应的数字再进行计算</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">1</span> + <span class="string">&#x27;a&#x27;</span>); <span class="comment">// 98</span></span><br><span class="line">System.out.println(<span class="string">&#x27;a&#x27;</span> + <span class="string">&quot;a&quot;</span>); <span class="comment">// aa</span></span><br></pre></td></tr></table></figure><h2 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h2><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>++</td><td>加</td><td>变量的值加1</td></tr><tr><td>–</td><td>减</td><td>变量的值减1</td></tr></tbody></table><p>单独使用：++ 和 – 无论是放在变量的前面还是后面，单独写一行<font color='red'>结果是一样</font>的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">a++;</span><br><span class="line">System.out.println(a); <span class="comment">// 6</span></span><br><span class="line">++a;</span><br><span class="line">System.out.println(a); <span class="comment">// 7</span></span><br><span class="line">a--;</span><br><span class="line">System.out.println(a); <span class="comment">// 6</span></span><br><span class="line">--a;</span><br><span class="line">System.out.println(a); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>参与计算：</p><p>先用后加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a++;<span class="comment">// b=10,a=11</span></span><br></pre></td></tr></table></figure><p>先加后用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> ++a;<span class="comment">// b=11,a=11</span></span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>&#x3D;</td><td>赋值</td><td>int a&#x3D;10,将10赋值给a</td></tr><tr><td>+&#x3D;</td><td>加后赋值</td><td>a+&#x3D;b,将a+b的值给a</td></tr><tr><td>-&#x3D;</td><td>减后赋值</td><td>a-&#x3D;b,将a-b的值给a</td></tr><tr><td>*&#x3D;</td><td>乘后赋值</td><td>a*&#x3D;b,将a*b的值给a</td></tr><tr><td>&#x2F;&#x3D;</td><td>除后赋值</td><td>a&#x2F;&#x3D;b,将a÷b的值给a</td></tr><tr><td>%&#x3D;</td><td>取余后赋值</td><td>a%&#x3D;b,将a%b的值给a</td></tr></tbody></table><p><font color='red'>注意事项：扩展的赋值运算符隐含了强制类型转换</font></p><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>a&#x3D;&#x3D;b,判断a和b的值是否相等，成立为true，不成立为false</td></tr><tr><td>!&#x3D;</td><td>a!&#x3D;b,判断a和b的值是否不相等，成立为false，不成立为true</td></tr><tr><td>&gt;</td><td>a&gt;b,判断a是否大于b，成立为true，不成立为false</td></tr><tr><td>&gt;&#x3D;</td><td>a&gt;&#x3D;b,判断a是否大于等于b，成立为true，不成立为false</td></tr><tr><td>&lt;</td><td>a&lt;b,判断a是否小于b，成立为true，不成立为false</td></tr><tr><td>&lt;&#x3D;</td><td>a&lt;&#x3D;b,判断a是否小于等于b，成立为true，不成立为false</td></tr></tbody></table><p><font color='red'>注意事项：关系运算符的结果都是boolean类型，要么是true，要么是false</font></p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>&amp;</td><td>逻辑与（且）</td><td>并且，两边都为真，结果才是真</td></tr><tr><td>|</td><td>逻辑或</td><td>或者，两边都是假，结果才是假</td></tr><tr><td>^</td><td>逻辑异或</td><td>相同为false，不同为 true</td></tr><tr><td>!</td><td>逻辑非</td><td>取反</td></tr></tbody></table><h3 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符"></a>短路逻辑运算符</h3><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>短路与</td><td>结果和&amp;相同，但是有短路效果</td></tr><tr><td>||</td><td>短路或</td><td>结果和|相同，但是有短路效果</td></tr></tbody></table><p><font color='red'>注意事项：</font></p><ul><li>&amp; | ，无论左边true或false，右边都要执行</li><li>&amp;&amp; || ，当左边的表达式能确定最终的结果，那么右边的表达式则不参与计算了</li></ul><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>关系表达式 ? 表达式1 : 表达式2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> a &gt; b ? a : b;<span class="comment">// 把三元运算符的结果赋值给一个变量</span></span><br><span class="line">System.out.println(a &gt; b ? a : b);<span class="comment">// 把三元运算符的结果直接打印</span></span><br></pre></td></tr></table></figure><h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><table><thead><tr><th>优先级</th><th>运算符</th></tr></thead><tbody><tr><td>1</td><td>. （） {}</td></tr><tr><td>2</td><td>! ~ ++ –</td></tr><tr><td>3</td><td>* &#x2F; %</td></tr><tr><td>4</td><td>+ -</td></tr><tr><td>5</td><td>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td></tr><tr><td>6</td><td>&lt; &lt;&#x3D; &gt; &gt;&#x3D; instanceof</td></tr><tr><td>7</td><td>&#x3D;&#x3D; !&#x3D;</td></tr><tr><td>8</td><td>&amp;</td></tr><tr><td>9</td><td>^</td></tr><tr><td>10</td><td>|</td></tr><tr><td>11</td><td>&amp;&amp;</td></tr><tr><td>12</td><td>||</td></tr><tr><td>13</td><td>?:</td></tr><tr><td>14</td><td>&#x3D; +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; %&#x3D; &amp;&#x3D;</td></tr></tbody></table><h1 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="**原码、反码、补码**"></a>**原码、反码、补码**</h1><p>原码：十进制数据的二进制表示，最左边的符号位，0为正，1为负</p><p>反码：正数的补码反码是其本身，负数的反码是符号位不变，其余位取反</p><p>补码：正数的补码是其本身，负数的补码是在其反码的基础上 +1</p><p>原码：利用原码对正数进行计算是不会有问题的。但是如果是负数计算，结果就会出错，实际运算的结果，跟预期是相反的</p><p>反码：为了解决原码不能计算负数的问题而出现的</p><p>计算规则：正数的反码不变，负数的反码在原码的基础上，符号位不变。数值取反，0变1，1变0</p><p>反码的弊端：负数运算的时候，如果结果不跨0，是没有任何问题的，但是如果结果跨0，跟实际结果会有1的偏差</p><p>补码：为了解决负数计算时跨0的问题出现的</p><p>补码的计算规则：正数的补码不变，负数的补码在反码的基础上+1</p><p>另外补码还能多记录一个特殊的值-128，该数据在一个字节下，没有原码和反码</p><p><font color='red'>补码的注意点：计算机中的存储和计算都是以补码的形式进行的</font></p><table><thead><tr><th>十进制数字</th><th>原码</th><th>反码</th><th>补码</th></tr></thead><tbody><tr><td>+0</td><td>0000 0000</td><td>0000 0000</td><td>0000 0000</td></tr><tr><td>-0</td><td>1000 0000</td><td>1111 1111</td><td>0000 0000</td></tr><tr><td>-1</td><td>1000 0001</td><td>1111 1110</td><td>1111 1111</td></tr><tr><td>-2</td><td>1000 0010</td><td>1111 1101</td><td>1111 1110</td></tr><tr><td>-3</td><td>1000 0011</td><td>1111 1100</td><td>1111 1101</td></tr><tr><td>-4</td><td>1000 0100</td><td>1111 1011</td><td>1111 1100</td></tr><tr><td>-5</td><td>1000 0101</td><td>1111 1010</td><td>1111 1011</td></tr><tr><td>-6</td><td>1000 0110</td><td>1111 1001</td><td>1111 1010</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="位运算"><a href="#位运算" class="headerlink" title="?位运算?"></a>?位运算?</h3><table><thead><tr><th>运算符</th><th>含义</th><th>运算规则</th></tr></thead><tbody><tr><td>&amp;</td><td>逻辑与</td><td>0为false 1为true</td></tr><tr><td>|</td><td>逻辑或</td><td>0为false 1为true</td></tr><tr><td>&lt;&lt;</td><td>左移</td><td>向左移动，低位补0</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td>向右移动，高位补0或1</td></tr><tr><td>&gt;&gt;&gt;</td><td>无符号右移</td><td>向右移动，高位补0</td></tr></tbody></table><p>​0000 0000 0000 0000 0000 1100 1000</p><p>&amp; 0000 0000 0000 0000 0000 0000 1010</p><p>-———————————————————-</p><p>​0000 0000 0000 0000 0000 0000 1000</p><p>​0000 0000 0000 0000 0000 1100 1000</p><p>|  0000 0000 0000 0000 0000 0000 1010</p><p>-———————————————————-</p><p>​0000 0000 0000 0000 0000 1100 1010</p><h1 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h1><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><h3 id="IF语句第一种书写格式"><a href="#IF语句第一种书写格式" class="headerlink" title="IF语句第一种书写格式"></a>IF语句第一种书写格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">语句体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><ol><li>首先计算关系表达式</li><li>如果关系表达式的值为true，就执行语句体</li><li>如果关系表达式为false，就不执行语句体</li><li>继续执行后面的其他语句</li></ol><p>if的注意点：</p><ol><li>大括号的开头可以另起一行书写，但是建议写在第一行的末尾</li><li>在语句体中，如果只有一句代码，大括号可以省略不写</li><li>如果对一个布尔类型的变量进行判断，不要用 &#x3D;&#x3D; 号，直接输入就可以</li></ol><h3 id="IF语句第二种书写格式"><a href="#IF语句第二种书写格式" class="headerlink" title="IF语句第二种书写格式"></a>IF语句第二种书写格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">语句体<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">语句体<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><ol><li>首先计算关系表达式的值</li><li>如果关系表达式的值为true就执行语句体1</li><li>如果关系表达式的值为false就执行语句体2</li><li>继续执行后面的其他语句</li></ol><h3 id="IF语句第三种书写格式"><a href="#IF语句第三种书写格式" class="headerlink" title="IF语句第三种书写格式"></a>IF语句第三种书写格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (关系表达式<span class="number">1</span>) &#123;</span><br><span class="line">语句体<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (关系表达式<span class="number">2</span>) &#123;</span><br><span class="line">语句体<span class="number">2</span>;</span><br><span class="line">&#125; ... <span class="keyword">else</span> &#123;</span><br><span class="line">语句体n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><ol><li>首先计算关系表达式1的值</li><li>如果为true就执行语句体1；如果为false就计算关系表达式2的值</li><li>如果true就执行语句体2；如果为false就计算关系表达式3的值</li><li>如果所有关系表达式结果都为false，就执行语句体n</li></ol><h3 id="switch语句格式"><a href="#switch语句格式" class="headerlink" title="switch语句格式"></a>switch语句格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">语句体<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">3</span>:</span><br><span class="line">    语句体<span class="number">3</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    语句体n;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><ol><li>首先计算表达式的值</li><li>依次和case后面的值进行比较，如果有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结束</li><li>如果所有的case后面的值和表达式的值都不匹配，就会执行default里面的语句体，然后结束整个switch语句</li></ol><p>格式说明：</p><ol><li>表达式：（将要匹配的值）取值为byte、short、int、char。JDK5以后可以是枚举，JDK7以后可以是String</li><li>case：后面跟的是要和表达式进行比较的值（被匹配的值）</li><li>break：表示中断，结束的意思，用来结束switch语句</li><li>default：表示所有情况都不匹配的时候，就执行该处的内容，和if语句的else相似</li><li>case后面的值只能是字面量，不能是变量</li><li>case给出的值不允许重复</li></ol><h3 id="switch其他知识点"><a href="#switch其他知识点" class="headerlink" title="switch其他知识点"></a>switch其他知识点</h3><ul><li>default的位置和省略</li></ul><p>省略：default可以省略，语法没问题，但不建议省略</p><p>位置：default不一定要写在最下面，但是为了方便理解和阅读，习惯写在底部</p><ul><li>case穿透</li></ul><p>如果break漏写，会导致case穿透</p><p>执行流程：</p><ol><li>首先还是会拿着小括号中表达式的值跟下面每一个case进行匹配</li><li>如果匹配上了，就会执行相应的语句体，如果发现了break，则会结束整个switch语句</li><li>如果没有发现break，那么程序会继续执行下一个case的语句体，一直遇到break或者右大括号为止</li></ol><p>使用场景：</p><p>​如果多个case的语句体重复了，则可以考虑case穿透去简化代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">dayOfWeek</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">String dayType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (dayOfWeek) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        dayType = <span class="string">&quot;Weekday&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        dayType = <span class="string">&quot;Weekend&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        dayType = <span class="string">&quot;Invalid day&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;The day is: &quot;</span> + dayType);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>switch新特性</li></ul><p>**JDK12以上的版本产生的新特性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">switch</span> (num) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> -&gt; System.out.println(<span class="string">&quot;一&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span> -&gt; System.out.println(<span class="string">&quot;二&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span> -&gt; System.out.println(<span class="string">&quot;三&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;None&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用这种语法，可以在case里写表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">switch</span> (number) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> -&gt; <span class="string">&quot;Number is 1, 2, or 3&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span> + <span class="number">6</span> -&gt; <span class="string">&quot;Number is 10&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> (<span class="type">int</span>) Math.PI -&gt; <span class="string">&quot;Number is approximately 3&quot;</span>;</span><br><span class="line">    <span class="keyword">default</span> -&gt; <span class="string">&quot;Number is not recognized&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(result);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">switch</span> (a) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span> -&gt; <span class="string">&quot;a is 1 or 2&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> x <span class="keyword">if</span> x &lt; <span class="number">10</span> -&gt; <span class="string">&quot;a is less than 10&quot;</span>;</span><br><span class="line">    <span class="keyword">default</span> -&gt; <span class="string">&quot;a is neither 1 nor less than 10&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(result);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>switch和if第三种格式各自的使用场景</li></ul><ol><li>if的第三种格式一般用于对范围的判断</li><li>switch则是把有限个数据一一列举出来，任选其一</li></ol><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p>循环的分类：</p><ul><li>for</li><li>while</li><li>do…while</li></ul><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化语句;条件判断语句;条件控制语句)&#123;</span><br><span class="line">循环语句体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= <span class="number">10</span>;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><ol><li>执行初始化语句</li><li>条件判断语句，看其结果是true还是false</li></ol><p>如果是<code>false</code>，循环结束</p><p>如果是<code>true</code>，执行循环体语句</p><ol start="3"><li>执行条件控制语句</li><li>回到 2 继续执行条件判断语句</li></ol><p>注意点：</p><ul><li>初始化语句只执行一次</li><li>判断语句为true，循环继续</li><li>判断语句为false，循环结束</li></ul><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件判断语句) &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">条件控制语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for和while的对比：</p><p>相同点：运行规则都是一样的</p><p>区别：</p><ul><li><code>for</code> 循环中，控制循环的变量，因为归属for循环的语句结构中 在for循环结束后，就不能再次访问到了</li><li><code>while</code> 循环中，控制循环的变量，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以接续使用</li></ul><h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 循环体代码</span></span><br><span class="line">&#125; <span class="keyword">while</span> (条件);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">    i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Sum: &quot;</span> + sum);</span><br></pre></td></tr></table></figure><p>解释：<code>do-while</code>循环是一种后测试循环结构，它首先执行循环体中的代码，然后在条件判断之前检查循环条件。只有在循环体执行完毕后，才会判断条件是否满足，如果满足则继续执行下一次循环，否则退出循环</p><p>区别：<code>do-while</code>和<code>while</code>的区别就是<code>do-while</code>会先执行循环体，再判断循环体是否符合条件</p><h3 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h3><p>三种格式</p><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在后面写代码会报错，因为系统会一直卡在无限循环中，不会执行下面的操作,其他无限循环同理</p><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h4><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">while</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h4 id="跳转控制语句"><a href="#跳转控制语句" class="headerlink" title="跳转控制语句"></a>跳转控制语句</h4><p>关键词：continue</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="comment">// 结束本次循环，继续下次循环</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> System.out.println(i); <span class="comment">// 输出结果：0,1,2,4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键词：break</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">// 结束本次循环，继续下次循环</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i);<span class="comment">// 输出结果：0,1,2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组：数组指一种容器，可以用来存储<code>同种类型</code>的多个值</p><h2 id="数组的定义："><a href="#数组的定义：" class="headerlink" title="数组的定义："></a>数组的定义：</h2><p>格式1：</p><p>数据类型 [] 数组名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> [] array</span><br></pre></td></tr></table></figure><p>格式2“</p><p>数据类型 数组名[]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> array[]</span><br></pre></td></tr></table></figure><h2 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h2><p>初始化：就是在内存中，为数组开辟空间，并将数据存放入容器中的过程</p><h3 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h3><p>完整格式：</p><p>数据类型[] 数组名 &#x3D; new 数据类型[] {元素1, 元素2, 元素3…} ;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>&#125;;</span><br></pre></td></tr></table></figure><p>简化格式：</p><p>数据类型[] 数组名 &#x3D; {元素1, 元素2, 元素3…} ;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>&#125;;</span><br></pre></td></tr></table></figure><p>地址值：如果直接打印数组名，打印结果会是数组的地址值，即数组在内存中的地址</p><h3 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h3><p>动态初始化：初始化时只指定数组长度，由系统为数组分配初始值</p><p>格式：数据类型[] 数组名 &#x3D; new 数组类型[数组长度];</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[] arr = new int[3];</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存50个人的姓名</span></span><br><span class="line">String[] arrName = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">50</span>];</span><br><span class="line"><span class="comment">// 添加数据</span></span><br><span class="line">arrName[<span class="number">0</span>] = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">arrName[<span class="number">1</span>] = <span class="string">&quot;李四&quot;</span>;</span><br></pre></td></tr></table></figure><p>动态初始化、静态初始化的区别</p><p>动态初始化：手动指定数组长度，由系统给出默认初始化值</p><p>静态初始化：手动指定数组长度。系统会根据元素个数，计算出数组的长度</p><h3 id="数组元素访问"><a href="#数组元素访问" class="headerlink" title="数组元素访问"></a>数组元素访问</h3><p>格式：数组名[索引];</p><p>索引：也叫下标，角标</p><p>索引的特点：从<code>0</code>开始，逐个+1增长，持续不间断</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义三个身高</span></span><br><span class="line"><span class="type">double</span>[] height = &#123;<span class="number">160.2</span>,<span class="number">151.5</span>,<span class="number">170.6</span>&#125;;</span><br><span class="line"><span class="comment">// 定义三个年龄</span></span><br><span class="line"><span class="type">int</span>[] age = &#123;<span class="number">18</span>,<span class="number">20</span>,<span class="number">19</span>&#125;;</span><br><span class="line"><span class="comment">// 定义五个姓名</span></span><br><span class="line">String[] name = &#123;<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>,<span class="string">&quot;孙七&quot;</span>&#125;;</span><br><span class="line">System.out.println(height[<span class="number">1</span>]);  <span class="comment">// 151.1</span></span><br><span class="line">System.out.println(age[<span class="number">2</span>]);     <span class="comment">// 19</span></span><br><span class="line">System.out.println(name[<span class="number">4</span>]);    <span class="comment">// 孙七</span></span><br></pre></td></tr></table></figure><h3 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h3><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] num = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num.length; i++) &#123;</span><br><span class="line">System.out.println(num[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组的常见问题"><a href="#数组的常见问题" class="headerlink" title="数组的常见问题"></a>数组的常见问题</h3><p>索引越界：当访问了数组中不存在的索引值，就会引发索引越界</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] num = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">System.out.println(num[<span class="number">10</span>]);<span class="comment">// 索引越界</span></span><br></pre></td></tr></table></figure><h3 id="数组的常见操作"><a href="#数组的常见操作" class="headerlink" title="数组的常见操作"></a>数组的常见操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求最值</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">95</span>,<span class="number">77</span>,<span class="number">81</span>,<span class="number">90</span>,<span class="number">69</span>,<span class="number">121</span>,<span class="number">55</span>,<span class="number">17</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (max &lt; arr[i]) &#123;max = arr[i];&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(max);</span><br><span class="line"><span class="comment">// 求和</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    sum += arr[i];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line"><span class="comment">// 交换数据</span></span><br><span class="line">System.out.println(<span class="string">&quot;beforeChange：&quot;</span> + arr[<span class="number">1</span>] + <span class="string">&#x27;|&#x27;</span> + arr[<span class="number">3</span>]);</span><br><span class="line"><span class="type">int</span> <span class="variable">box</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">box = arr[<span class="number">1</span>];</span><br><span class="line">arr[<span class="number">1</span>] = arr[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">3</span>] = box;</span><br><span class="line">System.out.println(<span class="string">&quot;afterChange：&quot;</span> + arr[<span class="number">1</span>] + <span class="string">&#x27;|&#x27;</span> + arr[<span class="number">3</span>]);</span><br></pre></td></tr></table></figure><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><h3 id="二维数组的静态初始化"><a href="#二维数组的静态初始化" class="headerlink" title="二维数组的静态初始化"></a>二维数组的静态初始化</h3>格式：数据类型[]\[] 数组名 = new 数据类型[]\[] {{元素1, 元素2, 元素3},{元素4, 元素5, 元素6},{元素7, 元素8, 元素9}}<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[][] &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;</span><br></pre></td></tr></table></figure>简化格式：数据类型[]\[] 数组名 = {{元素1, 元素2, 元素3},{元素4, 元素5, 元素6},{元素7, 元素8, 元素9}}<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组的动态初始化"><a href="#二维数组的动态初始化" class="headerlink" title="二维数组的动态初始化"></a>二维数组的动态初始化</h3><p>格式：数据类型[][] 数组名 &#x3D; new 数据类型[行数][列数]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] twoDimensionalArray = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>请注意，每行的列数可以不同，因此可以创建不规则的二维数组。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] irregularArray = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][];</span><br><span class="line">irregularArray[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">irregularArray[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line">irregularArray[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>在上述示例中，我们创建了一个不规则的二维数组<code>irregularArray</code>，其中第一行有2个元素，第二行有4个元素，第三行有3个元素</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态初始化一个 3x3 的二维数组</span></span><br><span class="line"><span class="type">int</span>[][] twoDimensionalArray = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给二维数组赋值</span></span><br><span class="line">twoDimensionalArray[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">twoDimensionalArray[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">twoDimensionalArray[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">twoDimensionalArray[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line">twoDimensionalArray[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">twoDimensionalArray[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">6</span>;</span><br><span class="line">twoDimensionalArray[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">7</span>;</span><br><span class="line">twoDimensionalArray[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">8</span>;</span><br><span class="line">twoDimensionalArray[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印二维数组的内容</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; twoDimensionalArray.length; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; twoDimensionalArray[i].length; j++) &#123;</span><br><span class="line">    System.out.print(twoDimensionalArray[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组的调用"><a href="#二维数组的调用" class="headerlink" title="二维数组的调用"></a>二维数组的调用</h3><p>在Java中，二维数组的索引使用行索引和列索引来访问特定的元素。可以通过在数组名称后使用方括号来指定索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 3x3 的二维数组</span></span><br><span class="line"><span class="type">int</span>[][] twoDimensionalArray = &#123;</span><br><span class="line">  &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">  &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">  &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问二维数组的元素</span></span><br><span class="line">System.out.println(twoDimensionalArray[<span class="number">0</span>][<span class="number">0</span>]); <span class="comment">// 输出: 1</span></span><br><span class="line">System.out.println(twoDimensionalArray[<span class="number">1</span>][<span class="number">2</span>]); <span class="comment">// 输出: 6</span></span><br><span class="line">System.out.println(twoDimensionalArray[<span class="number">2</span>][<span class="number">1</span>]); <span class="comment">// 输出: 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改二维数组的元素</span></span><br><span class="line">twoDimensionalArray[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">10</span>;</span><br><span class="line">System.out.println(twoDimensionalArray[<span class="number">1</span>][<span class="number">1</span>]); <span class="comment">// 输出: 10</span></span><br></pre></td></tr></table></figure><h1 id="Java内存分配"><a href="#Java内存分配" class="headerlink" title="**Java内存分配**"></a>**Java内存分配**</h1><p>栈：方法运行时使用的内存，比如main方法运行，进入方法栈中执行</p><p>堆：存储对象或者数组，new来创建的，都存储在堆内存</p><p>方法区：存储可以运行的class文件</p><p>本地方法栈：JVM在使用操作系统功能的时候使用，和开发无关</p><p>寄存器：给CPU使用，和开发无关</p><p>在Java中，数据类型分为两大类：基本数据类型（Primitive Data Types）和引用数据类型（Reference Data Types）。</p><p><strong>基本数据类型</strong>是用于存储简单数据值的数据类型，它们是Java语言的内置类型，共有8种基本数据类型：</p><ol><li><strong>整数类型</strong>：<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>，用于表示整数值。</li><li><strong>浮点类型</strong>：<code>float</code>、<code>double</code>，用于表示带小数点的数值。</li><li><strong>字符类型</strong>：<code>char</code>，用于表示单个字符。</li><li><strong>布尔类型</strong>：<code>boolean</code>，用于表示真（<code>true</code>）或假（<code>false</code>）。</li></ol><p>基本数据类型有以下特点：</p><ul><li>占用的内存空间固定，不受具体值的影响。</li><li>直接存储数据值，而不是对象引用。</li><li>在内存中存储在栈（Stack）中。</li><li>进行基本数据类型之间的操作时，是按值进行的。</li></ul><p><strong>引用数据类型</strong>是指非基本数据类型，也称为对象类型（Object Types），包括类（Class）、接口（Interface）、数组（Array）等。引用数据类型通过引用（Reference）来访问和操作对象。</p><p>引用数据类型有以下特点：</p><ul><li>占用的内存空间不固定，根据对象的大小动态分配。</li><li>存储的是对象的引用（内存地址），而不是实际的对象本身。</li><li>对象的实际数据存储在堆（Heap）中，通过引用进行访问。</li><li>进行引用数据类型之间的操作时，是通过引用进行的，而不是直接操作对象的数据。</li></ul><p>通过引用数据类型，我们可以创建和使用自定义的类、接口、数组等复杂数据结构，并调用它们的方法和访问其属性。</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>方法：方法是程序中最小的执行单元</p><p>用处：重复的代码、具有独立功能的代码可以抽取到方法中</p><p>好处：提高代码的复用性、可维护性</p><h2 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h2><p>把一些代码打包在一起，该过程称为<code>方法定义</code></p><p>方法定义一：</p><p>不带参数，没有返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名() &#123;</span><br><span class="line">方法体(打包起来的代码);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sout</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;你好世界&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;Hi World&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法定义二：</p><p>带参数，没有返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名(形参<span class="number">1</span>,形参<span class="number">2</span>,...) &#123;</span><br><span class="line">方法体(打包起来的代码);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> num1 + num2;</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法定义三：</p><p>有返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 calc(<span class="type">int</span> hours) &#123;</span><br><span class="line">方法体(打包起来的代码);</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calc</span><span class="params">(<span class="type">int</span> hours)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">minutes</span> <span class="operator">=</span> hours * <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">return</span> minutes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h2><p>方法定义后并不是直接运行的，需要手动调用才能执行，该过程称为<code>方法调用</code></p><p>方法调用一：</p><p>不带参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    sout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法调用二：</p><p>带参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    sum(<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法调用三：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">hours</span> <span class="operator">=</span> calc(<span class="number">5</span>);</span><br><span class="line">    System.out.println(hours);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>在同一个类中，定义了多个<code>同名的方法</code>，这些同名的方法具有同种功能</p><p>每个方法具有<code>不同的参数</code>或<code>参数个数</code>，这些同名的方法，就构成了重载关系</p><p>即：同一个类中，方法名相同，参数不同的方法。与返回值无关。</p><p>参数不同：个数不同、类型不同、顺序不同</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b,<span class="type">int</span> c)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法内存分配"><a href="#方法内存分配" class="headerlink" title="方法内存分配"></a>方法内存分配</h2><p><strong>基本数据类型</strong>是用于存储简单数据值的数据类型，它们是Java语言的内置类型，共有8种基本数据类型：</p><ol><li><strong>整数类型</strong>：<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>，用于表示整数值。</li><li><strong>浮点类型</strong>：<code>float</code>、<code>double</code>，用于表示带小数点的数值。</li><li><strong>字符类型</strong>：<code>char</code>，用于表示单个字符。</li><li><strong>布尔类型</strong>：<code>boolean</code>，用于表示真（<code>true</code>）或假（<code>false</code>）。</li></ol><p>基本数据类型有以下特点：</p><ul><li>占用的内存空间固定，不受具体值的影响。</li><li>直接存储数据值，而不是对象引用。</li><li>在内存中存储在栈（Stack）中。</li><li>进行基本数据类型之间的操作时，是按值进行的。</li></ul><p><strong>引用数据类型</strong>是指非基本数据类型，也称为对象类型（Object Types），包括类（Class）、接口（Interface）、数组（Array）等。引用数据类型通过引用（Reference）来访问和操作对象。</p><p>引用数据类型有以下特点：</p><ul><li>占用的内存空间不固定，根据对象的大小动态分配。</li><li>存储的是对象的引用（内存地址），而不是实际的对象本身。</li><li>对象的实际数据存储在堆（Heap）中，通过引用进行访问。</li><li>进行引用数据类型之间的操作时，是通过引用进行的，而不是直接操作对象的数据。</li></ul><p>通过引用数据类型，我们可以创建和使用自定义的类、接口、数组等复杂数据结构，并调用它们的方法和访问其属性。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本数据类型</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">pi</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">letter</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用数据类型</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;John&quot;</span>;</span><br><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>num</code>、<code>pi</code>、<code>letter</code>和<code>flag</code>是基本数据类型的变量，它们直接存储相应的值。而<code>name</code>是一个引用数据类型的变量，存储的是字符串对象的引用。<code>numbers</code>是一个引用数据类型的变量，存储的是整型数组对象的引用。<code>obj</code>是一个引用数据类型的变量，存储的是一个通用的对象引用。</p><p>总结起来，基本数据类型用于存储简单的数值，而引用数据类型用于存储复杂的对象，并通过引用来访问和操作这些对象。</p><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>Java的面向对象（Object-Oriented Programming，简称OOP）是一种编程范式，它将程序设计的重点放在对象的创建、操作和交互上，通过模拟现实世界中的对象和它们之间的关系来解决问题。</p><p>面向对象的编程思想基于以下概念：</p><ol><li><strong>对象（Object）</strong>：对象是现实世界中的实体或概念，具有特定的状态（属性）和行为（方法）。</li><li><strong>类（Class）</strong>：类是对象的模板或蓝图，描述了对象具有的属性和方法。类可以看作是对象的抽象。</li><li><strong>封装（Encapsulation）</strong>：封装是将数据（属性）和操作（方法）封装在一个单元中，使其成为一个独立的、可复用的组件。通过封装，可以隐藏对象的内部实现细节，只对外提供必要的接口。</li><li><strong>继承（Inheritance）</strong>：继承是一种机制，允许从现有的类派生出新的类，新类继承了父类的属性和方法，并可以添加自己的特定内容。继承促进了代码的重用和扩展。</li><li><strong>多态（Polymorphism）</strong>：多态性允许以统一的方式处理不同类型的对象，即同一个方法可以根据调用对象的不同而表现出不同的行为。多态性增加了代码的灵活性和可扩展性。</li></ol><p>通过面向对象的方式，可以将复杂的问题分解成更小的、可管理的对象，并通过对象之间的交互来解决问题。面向对象的编程风格使得代码更易于理解、维护和扩展。</p><p>Java是一种面向对象的编程语言，它提供了丰富的面向对象的特性和机制，例如类和对象的概念、封装、继承、多态等，使得开发人员可以以面向对象的方式设计和编写程序。</p><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p><strong>对象（Object）</strong>：对象是现实世界中的实体或概念，具有特定的状态（属性）和行为（方法）。</p><p><strong>类（Class）</strong>：类是对象的模板或蓝图，描述了对象具有的属性和方法。类可以看作是对象的抽象。</p><h3 id="如何定义类"><a href="#如何定义类" class="headerlink" title="如何定义类"></a>如何定义类</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名 &#123;</span><br><span class="line"><span class="number">1.</span> 成员变量</span><br><span class="line"><span class="number">2.</span> 成员方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line"><span class="comment">// 属性（成员变量）</span></span><br><span class="line">String brand;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 行为(方法)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playGame</span><span class="params">()</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何得到类的对象"><a href="#如何得到类的对象" class="headerlink" title="如何得到类的对象"></a>如何得到类的对象</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名 对象名 = <span class="keyword">new</span> 类名();</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Phone</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br></pre></td></tr></table></figure><h3 id="如何使用对象"><a href="#如何使用对象" class="headerlink" title="如何使用对象"></a>如何使用对象</h3><p>访问属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名.成员变量</span><br></pre></td></tr></table></figure><p>访问行为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名.方法名()</span><br></pre></td></tr></table></figure><h3 id="定义类的注意事项"><a href="#定义类的注意事项" class="headerlink" title="定义类的注意事项"></a>定义类的注意事项</h3><p>用来描述一类事务的类，专业叫做：Javabean类</p><p>在Javabean类中，是不写main方法的</p><p>编写main的类，叫做测试类</p><p>可以在测试类中创建Javabean类的对象并进行赋值调用</p><p>类名首字母建议大写（驼峰命名法）</p><p>一个Java文件中可以定义多个class类，且只能一个类是public修饰，而且public修饰的类名必须称为代码文件名</p><p>实际开发中建议还是一个文件定义一个class类</p><p>成员变量的完整定义格式是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 数据类型 变量名称 = 初始化值;</span><br></pre></td></tr></table></figure><p>一般无需指定初始化值，存在默认值；</p><table><thead><tr><th>数据类型</th><th>明细</th><th>默认值</th></tr></thead><tbody><tr><td>基本类型</td><td>byte、short、int、long</td><td>0</td></tr><tr><td>基本类型</td><td>float、double</td><td>0.0</td></tr><tr><td>基本类型</td><td>boolean</td><td>false</td></tr><tr><td>引用类型</td><td>类、接口、数组、String</td><td>null</td></tr></tbody></table><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装：如何正确设计对象的属性和方法</p><p><font color='red'>对象代表什么，就得封装对应的数据，并提供数据对应的行为</font></p><h2 id="Private关键字"><a href="#Private关键字" class="headerlink" title="Private关键字"></a>Private关键字</h2><ul><li>是一个<code>权限修饰符</code></li><li>可以修饰成员（成员变量和成员方法）</li><li>被<code>private</code>修饰的成员只能在本类中才能访问</li></ul><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String picture;</span><br><span class="line">String brand;</span><br><span class="line"><span class="type">double</span> price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>针对<code>private</code>修饰的成员变量，如果需要被其他类使用，提供相应的操作</li><li>提供”setXXX(参数)”方法，用于给成员变量赋值，方法用<code>public</code>修饰</li><li>提供”getXXX()”方法，用于获取成员变量的值，方法用<code>public</code>修饰</li></ul><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><h3 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;<span class="comment">// 成员变量（全局变量）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">age</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;<span class="comment">// 局部变量</span></span><br><span class="line">System.out.println(age);<span class="comment">// 这里的age会优先获取局部变量的age（就近原则）</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想要获取到外部的变量，则需要用到<code>this</code>关键字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;<span class="comment">// 成员变量（全局变量）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">age</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;<span class="comment">// 局部变量</span></span><br><span class="line">System.out.println(<span class="built_in">this</span>.age);<span class="comment">// 这里的age会获取全部变量的age</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Java中，<code>this</code> 是一个关键字，它是一个引用，指向当前对象的实例。</p><p>当在类的实例方法中使用 <code>this</code> 关键字时，它表示对当前正在调用方法的对象的引用。它可以用于访问当前对象的成员变量、调用当前对象的其他方法，或者将当前对象作为参数传递给其他方法。</p><p>以下是一些使用 <code>this</code> 关键字的常见情况：</p><ol><li><p>访问实例变量：使用 <code>this</code> 关键字可以在方法中访问当前对象的实例变量。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，通过 <code>this.name</code> 可以访问当前对象的 <code>name</code> 实例变量。</p></li><li><p>调用其他方法：使用 <code>this</code> 关键字可以在一个方法中调用同一对象的其他方法。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.result += num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">subtract</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.result -= num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，<code>this.result</code> 用于在 <code>add</code> 和 <code>subtract</code> 方法中引用当前对象的 <code>result</code> 成员变量。</p></li><li><p>在构造方法中调用其他构造方法：使用 <code>this</code> 关键字可以在一个构造方法中调用同一类的其他构造方法。这种方式称为构造方法的重载。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 调用带参数的构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(<span class="type">int</span> width, <span class="type">int</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，无参的构造方法通过 <code>this(0, 0)</code> 调用带参数的构造方法。</p></li></ol><p>需要注意的是，<code>this</code> 关键字只能在非静态方法（实例方法）中使用，因为它指向当前对象的实例。在静态方法中无法使用 <code>this</code> 关键字，因为静态方法是与类关联而不是与对象关联的。</p><p>总而言之，<code>this</code> 关键字用于在对象的实例方法中引用当前对象，以便访问实例变量和调用其他方法。</p><p><font color='red'>this关键字的本质：代表方法<code>调用者</code>的地址值</font></p><h2 id="构造方法（构造函数）"><a href="#构造方法（构造函数）" class="headerlink" title="构造方法（构造函数）"></a>构造方法（构造函数）</h2><p>作用：在创建对象的时候给成员变量进行赋值的</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Peson</span> &#123;</span><br><span class="line">修饰符 类名(参数) &#123;</span><br><span class="line">方法体;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>方法名和类名相同，大小写敏感</li><li>没有返回值类型，也没有void</li><li>没有具体的返回值（不能由return带回结果数据）</li></ol><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;<span class="comment">// 空参构造方法</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span> &#123;<span class="comment">// 带全部参数构造方法</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行时机：</p><ol><li>创建对象的时候由虚拟机调用，不能手动调用构造方法</li><li>每创建一次对象，就会调用一次构造函数</li></ol><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;<span class="comment">// 空参构造方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span> &#123;<span class="comment">// 带全部参数构造方法</span></span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传递以及获取类的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">System.out.println(s.getName());</span><br><span class="line">System.out.println(s.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>如果没有写任何的构造方法，虚拟机会自己创建一个空参构造方法</li><li>如果定义了构造方法，系统将不再提供默认的构造方法</li></ul><p>详细说明：</p><p>构造方法（Constructor）是一种特殊的方法，在Java类中用于创建和初始化对象。构造方法的主要作用是在创建对象时对其进行初始化，确保对象在使用之前处于合理的状态。它有以下几个重要的作用：</p><ol><li>对象的创建：构造方法用于创建对象。在使用<code>new</code>关键字实例化一个类时，会调用该类的构造方法，从而创建一个对象。</li><li>对象的初始化：构造方法在创建对象时对其进行初始化，可以在构造方法中设置对象的初始状态，给成员变量赋初值，执行一些必要的初始化操作。</li><li>确保对象的合理状态：通过在构造方法中对对象进行初始化，可以确保对象在被使用之前处于合理的状态，避免了未初始化或不完整对象的使用。</li><li>可以重载：与普通方法一样，构造方法也可以进行重载。即在同一个类中可以定义多个构造方法，通过不同的参数列表来实现不同的初始化方式。</li></ol><p>构造方法的命名与类名相同，没有返回类型（甚至没有<code>void</code>关键字），且无需显式调用，它会在创建对象时自动调用。如果在类中没有显式定义构造方法，Java会提供一个默认的无参构造方法，用于创建对象，但如果在类中定义了带参构造方法，则默认的无参构造方法将不再提供，需要显式定义。</p><p>以下是一个简单的示例，展示了构造方法的作用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造方法，默认提供，可以省略显式定义</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 对象初始化</span></span><br><span class="line">        name = <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">        age = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参构造方法，重载构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="comment">// 对象初始化</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用无参构造方法创建对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        System.out.println(person1.name); <span class="comment">// Output: &quot;Unknown&quot;</span></span><br><span class="line">        System.out.println(person1.age); <span class="comment">// Output: 0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用带参构造方法创建对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        System.out.println(person2.name); <span class="comment">// Output: &quot;Alice&quot;</span></span><br><span class="line">        System.out.println(person2.age); <span class="comment">// Output: 30</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标准的JavaBean类"><a href="#标准的JavaBean类" class="headerlink" title="标准的JavaBean类"></a>标准的JavaBean类</h2><ul><li><p>类名需要见名知意</p></li><li><p>成员变量使用private修饰</p></li><li><p>提供至少两个构造方法</p><ol><li>无参构造方法</li><li>带全部参数的构造方法</li></ol></li><li><p>成员方法</p><ol><li>提供每一个成员变量的set和get</li><li>如果还有其他行为，也需要写上</li></ol></li></ul><h2 id="成员变量和局部变量-1"><a href="#成员变量和局部变量-1" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h2><p>成员变量和局部变量的区别</p><table><thead><tr><th>区别</th><th>成员变量</th><th>局部变量</th></tr></thead><tbody><tr><td>类中位置不同</td><td>类中，方法外</td><td>方法内、方法申明上</td></tr><tr><td>初始化值不同</td><td>有默认初始值</td><td>没有默认初始值，使用前需要完成赋值</td></tr><tr><td>内存位置不同</td><td>堆内存的对象</td><td>栈内存</td></tr><tr><td>生命周期不同</td><td>随着对象的创建而存在，随着对象的消失而消失</td><td>随着方法的调用存在，调用结束后消失</td></tr><tr><td>作用域</td><td>整个类中有效</td><td>当前方法中有效</td></tr></tbody></table><h1 id="API-String"><a href="#API-String" class="headerlink" title="API&amp;String"></a>API&amp;String</h1><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>API：应用程序编程接口</p><p>JavaAPI：JDK中提供的各种功能的Java类</p><p>这些类将底层的实现封装了起来，需要时直接调用即可</p><p>JDK API即官方API文档，可以查询API的具体用法、用处</p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ol><li>String是Java定义好的一个类。定义在java.lang包中，所以使用时不需要导包</li><li>Java程序中的所有字符串文字都被实为此类的对象</li><li>字符产不可改变，它们的值在创建后不能被更改</li></ol><h3 id="创建String对象的方式"><a href="#创建String对象的方式" class="headerlink" title="创建String对象的方式"></a>创建String对象的方式</h3><ol><li>直接赋值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>new</li></ol><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td>public String()</td><td>创建空白字符串，不包含任何内容</td></tr><tr><td>public String(String original)</td><td>根据传入的字符串，创建字符串对象</td></tr><tr><td>public String(char[] chs)</td><td>根据字符数组，创建字符串对象</td></tr><tr><td>public String(byte[] chs)</td><td>根据字节数组，创建字符串对象</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">System.out.println(s1);<span class="comment">// &quot;&quot;即空字符串</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">System.out.println(s2);<span class="comment">// &quot;abc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>[] chs = &#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chs);</span><br><span class="line">System.out.println(s3);<span class="comment">// &quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] bytes = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes);</span><br><span class="line">System.out.println(s4)<span class="comment">// &quot;abcd&quot; ASCII码</span></span><br></pre></td></tr></table></figure><p>当使用直接赋值的方法赋值时，系统会检查该字符串是否存在</p><p>不存在则创建新的，若存在则复用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;<span class="comment">// s1 s2执行的是同一个内存地址</span></span><br></pre></td></tr></table></figure><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><p>由于字符串属于引用数据类型，使用”&#x3D;&#x3D;”比较时，实则是比较的地址值，用new创建两个字符串，即使值是一样的，但是地址不同，则比较结果是 false</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">基本数据类型：比较数据值</span><br><span class="line">引用数据类型：比较地址值</span><br></pre></td></tr></table></figure><p>Java提供了两个方法专门用于字符串比较</p><ul><li>boolean equals方法(要比较的字符串)完全一样结果才是true，否则为false</li><li>boolean equalslgnoreCase(要比较的字符串)     忽略大小写的比较</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> s1.equals(s2);</span><br><span class="line">System.out.println(res);<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>​      </p><h3 id="遍历字符串"><a href="#遍历字符串" class="headerlink" title="遍历字符串"></a>遍历字符串</h3><p>关键字：charAt</p><p>public char charAt(int index)：根据索引返回字符串</p><p>public int length()：返回此字符串的长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i &lt; s1.length;i++) &#123;</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(i)</span><br><span class="line">System.out.println(c);<span class="comment">// 依次打印：a b c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><p>StringBuilder可以看作是一个容器，创建之后里面的<font color='red'>内容是可变的</font></p><p>作用：提高字符串的效率</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringBuilder()</td><td>创建一个空白可变字符串对象，不含有任何内容</td></tr><tr><td>public StringBuilder(String str)</td><td>根据字符串的内容，来创建可变字符串对象</td></tr><tr><td></td><td></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;abc&quot;</span>);<span class="comment">// 有参</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();<span class="comment">// 无参</span></span><br></pre></td></tr></table></figure><h4 id="stringBuilder常用方法"><a href="#stringBuilder常用方法" class="headerlink" title="stringBuilder常用方法"></a>stringBuilder常用方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringBuilder append(任意类型)</td><td>添加数据，并返回对象本身</td></tr><tr><td>public StringBuilder reverse()</td><td>反转容器中的内容</td></tr><tr><td>public int length()</td><td>返回长度(字符出现的个数)</td></tr><tr><td>public String toString()</td><td>通过toString，还原字符串类型</td></tr></tbody></table><p>具体用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建对象</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">sb.append(<span class="number">123</span>);</span><br><span class="line">sb.append(<span class="number">2.3</span>);</span><br><span class="line">sb.append(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line"><span class="comment">// Java对这个类进行了特殊处理</span></span><br><span class="line"><span class="comment">// 打印对象不是地址值而是属性值</span></span><br><span class="line">System.out.println(sb); <span class="comment">// 1232.3true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反转</span></span><br><span class="line">sb.reverse();</span><br><span class="line"><span class="comment">// 获取对象字符串长度</span></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> sb.length();</span><br><span class="line">System.out.println(sb); <span class="comment">// eurt3.2321</span></span><br><span class="line">System.out.println(len); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换为字符串类型</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">System.out.println(str); <span class="comment">// eurt3.2321</span></span><br></pre></td></tr></table></figure><p>链式编程：当调用一个方法的时候，不需要用变量接受他的结果，可以继续调用其他方法</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sb.append(<span class="number">123</span>).reverse();</span><br><span class="line">System.out.println(<span class="string">&quot;321&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="StringJoiner"><a href="#StringJoiner" class="headerlink" title="StringJoiner"></a>StringJoiner</h3><p>StringJoiner用于拼接字符串，和StringBuilder一样，也可以看作是一个容器，里面的内容是可以改变的</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringJoiner(间隔符号)</td><td>创建一个StringJoiner对象，指定拼接时的间隔符号</td></tr><tr><td>public StringJoiner(间隔符号,开始符号,结束符号)</td><td>创建一个StringJoiner对象，指定拼接时的间隔符号、开始符号、结束符号</td></tr></tbody></table><p>成员方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringJoiner add(添加的内容)</td><td>添加数据，并返回对象本身</td></tr><tr><td>public int length()</td><td>返回长度(字符出现的个数)</td></tr><tr><td>public String toString()</td><td>返回一个字符串(还原字符串)</td></tr></tbody></table><h1 id="ArrayList-集合"><a href="#ArrayList-集合" class="headerlink" title="ArrayList(集合)"></a>ArrayList(集合)</h1><h2 id="集合和数组的区别"><a href="#集合和数组的区别" class="headerlink" title="集合和数组的区别"></a>集合和数组的区别</h2><p>数组：</p><ul><li>长度固定</li><li>可以存储基本数据类型</li><li>可以存储引用数据类型</li></ul><p>集合：</p><ul><li>长度不固定</li><li>只能存储引用数据类型</li><li>如果要存储基本数据类型，需要转换成包装类</li></ul><h2 id="ArrayList基本使用"><a href="#ArrayList基本使用" class="headerlink" title="ArrayList基本使用"></a>ArrayList基本使用</h2><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建集合的对象</span></span><br><span class="line"><span class="comment">// 泛型(e)：限定集合中存储数据的类型</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 这个类在底层做了一些处理，打印对象不是地址值，而是具体的数据</span></span><br><span class="line"><span class="comment">// 在展示的时候会拿[]把所有的数据进行包裹</span></span><br><span class="line">System.out.println(list);   <span class="comment">// 打印结果：[]</span></span><br></pre></td></tr></table></figure><h3 id="ArrayList成员方法"><a href="#ArrayList成员方法" class="headerlink" title="ArrayList成员方法"></a>ArrayList成员方法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>boolean add(E e)</td><td>添加元素，返回值表示是否添加成功</td></tr><tr><td>boolean remove(E e)</td><td>删除指定元素，返回值表示是否删除成功</td></tr><tr><td>E remove(int index)</td><td>删除指定索引的元素，返回被删除元素</td></tr><tr><td>E set(int index,E e)</td><td>修改指定索引下的元素，返回原来的元素</td></tr><tr><td>E get(int index)</td><td>获取指定索引的元素</td></tr><tr><td>int size()</td><td>集合的长度，也就是集合中元素的个数</td></tr></tbody></table><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">list.add(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">System.out.println(list);   <span class="comment">// 打印结果：[你好, Hello]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line">list.remove(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">System.out.println(list);   <span class="comment">// 打印结果：[Hello]</span></span><br><span class="line"><span class="comment">// 以上两个都有返回值，且为布尔值</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">res1</span> <span class="operator">=</span> list.add(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">res2</span> <span class="operator">=</span> list.remove(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">res3</span> <span class="operator">=</span> list.remove(<span class="string">&quot;???&quot;</span>);  <span class="comment">// 删除集合中不存在的元素返回值为false</span></span><br><span class="line">System.out.println(res1 + <span class="string">&quot;-&quot;</span> + res2 + <span class="string">&quot;-&quot;</span> + res3); <span class="comment">// 打印结果：true-tr</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照索引删除元素</span></span><br><span class="line"><span class="type">String</span> <span class="variable">delete</span> <span class="operator">=</span> list.remove(<span class="number">0</span>);</span><br><span class="line">System.out.println(delete); <span class="comment">// 打印结果：Hello</span></span><br><span class="line">System.out.println(list);   <span class="comment">// 打印结果：[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改元素</span></span><br><span class="line">list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">change</span> <span class="operator">=</span> list.set(<span class="number">0</span>,<span class="string">&quot;first&quot;</span>);</span><br><span class="line">System.out.println(change); <span class="comment">// aaa</span></span><br><span class="line">System.out.println(list);   <span class="comment">// [first, bbb, ccc, ddd]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询元素</span></span><br><span class="line"><span class="type">String</span> <span class="variable">find</span> <span class="operator">=</span> list.get(<span class="number">3</span>);</span><br><span class="line">System.out.println(find);   <span class="comment">// ddd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取集合的长度</span></span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line">System.out.println(size);   <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>由于集合不能直接存储基本数据类型，所以需要将基本数据类型转换为包装类</p><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><p>规律就是将原来的数据类型改为大写开头，只需要记住<code>char</code>-<code>Character</code>,<code>int</code>-<code>Integer</code></p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建集合</span></span><br><span class="line">ArrayList&lt;Integer&gt; intArr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">ArrayList&lt;Character&gt; charArr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">intArr.add(<span class="number">1</span>);</span><br><span class="line">intArr.add(<span class="number">2</span>);</span><br><span class="line">intArr.add(<span class="number">3</span>);</span><br><span class="line">intArr.add(<span class="number">4</span>);</span><br><span class="line">intArr.add(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 遍历数字集合</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; intArr.size(); i++) &#123;</span><br><span class="line">    System.out.println(intArr.get(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">charArr.add(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">charArr.add(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">charArr.add(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">charArr.add(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">charArr.add(<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">charArr.add(<span class="string">&#x27;f&#x27;</span>);</span><br><span class="line"><span class="comment">// 遍历字符集合</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; charArr.size(); i++) &#123;</span><br><span class="line">    System.out.println(charArr.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="面向对象进阶"><a href="#面向对象进阶" class="headerlink" title="面向对象进阶"></a>面向对象进阶</h1><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>static表示静态的意思，是java中的一个修饰符，可以修饰成员方法，成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 属性：学生姓名 年龄 性别 老师姓名</span></span><br><span class="line"> <span class="keyword">private</span> String name;</span><br><span class="line"> <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"> <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有的对象都共享一个老师姓名</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> String teacherName;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有的对象都共享一个老师姓名</span></span><br><span class="line">Student.teacherName = <span class="string">&quot;Bob&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">s1.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">s1.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">s1.setAge(<span class="number">23</span>);</span><br><span class="line">s1.study();</span><br><span class="line">s1.show();</span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">s2.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">s2.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">s2.setAge(<span class="number">22</span>);</span><br><span class="line">s2.study();</span><br><span class="line">s2.show();</span><br></pre></td></tr></table></figure><p>被<code>static</code>修饰的成员变量，叫做<code>静态变量</code></p><p>特点：</p><ul><li>被该类<font color='red'>所有对象共享</font></li><li>不属于对象，属于类</li><li>随着类的加载而加载，优先于对象存在</li></ul><p>调用方式：</p><ul><li>类名调用（推荐）</li><li>对象名调用</li></ul><p>被<code>static</code>修饰的成员方法，叫做<code>静态方法</code></p><p>特点：</p><ul><li>多用在测试类和工具类中</li><li>Javabean类中很少会用</li></ul><p>调用方式：</p><ul><li>类名调用（推荐）</li><li>对象名调用</li></ul><p>目前学习的共有三种类：</p><ol><li>Javabean类<br>用来描述一类事物的类。比如：Student、Teacher、Dog、Cat</li><li>测试类<br>用来检查其他类是否书写正确，带有main方法的类，是程序的入口</li><li>工具类<br>不是用来描述一类事物的，而是帮我们做一些事情的类。比如Java里的random、math</li></ol><h3 id="static注意事项"><a href="#static注意事项" class="headerlink" title="static注意事项"></a>static注意事项</h3><ul><li>静态方法只能访问静态变量和静态方法</li><li>非静态方法可以访问静态变量或者静态方法，也可以访问非静态的成员变量和非静态的成员方法</li><li>静态方法中是没有this关键字</li></ul><p>总结：</p><ol><li>静态方法中，只能访问静态</li><li>非静态方法可以访问所有</li><li>静态方法中没有this关键字</li></ol><p>在 Java 中，静态方法（Static Method）是属于类而不是对象的，因此在静态方法中没有 <code>this</code> 关键字。</p><p>静态方法是与类相关联的，它不依赖于类的实例（对象）而存在，可以直接通过类名来调用。由于静态方法不属于特定的对象，因此在静态方法中无法使用 <code>this</code> 关键字来引用对象本身，因为静态方法不知道具体是哪个对象在调用它。</p><p>相反，在实例方法（非静态方法）中，可以使用 <code>this</code> 关键字来引用调用该方法的对象本身，因为实例方法是属于对象的。</p><p>以下是一个示例，展示了静态方法和实例方法的区别：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 静态方法无法使用 this 关键字</span></span><br><span class="line">        <span class="comment">// this.value = 10; // 编译错误：Cannot use this in a static context</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">instanceMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 实例方法可以使用 this 关键字</span></span><br><span class="line">        <span class="built_in">this</span>.value = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，<code>staticMethod</code> 是一个静态方法，它试图使用 <code>this</code> 关键字来引用 <code>value</code> 属性，但会导致编译错误。而 <code>instanceMethod</code> 是一个实例方法，它可以正常使用 <code>this</code> 关键字来引用 <code>value</code> 属性。</p><p>总结一下，静态方法是属于类的方法，不依赖于对象；而实例方法是属于对象的方法，可以使用 <code>this</code> 关键字来引用对象本身。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>Java中提供一个关键字<code>extends</code>，用这个关键字，我们可以让一个类和另一个类建立起继承关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>Student称为子类（派生类），Person称为父类（基类或超类）</p><h3 id="继承的概述"><a href="#继承的概述" class="headerlink" title="继承的概述"></a>继承的概述</h3><p>Java中的继承是面向对象编程的一种重要特性，它允许一个类（称为子类或派生类）继承另一个类（称为父类或基类）的属性和方法。通过继承，子类可以获得父类的所有非私有成员变量和方法，并且可以在此基础上添加自己的新成员变量和方法。</p><p>继承的特点和优势包括：</p><ol><li><strong>代码重用：</strong> 继承允许子类重用父类的代码，避免了重复编写相同的代码，提高了代码的可维护性和复用性。</li><li><strong>层次结构：</strong> 继承可以形成类之间的层次结构，允许按照共性和特性进行分类和组织，从而更好地组织和管理代码。</li><li><strong>多态性：</strong> 继承是实现多态性的基础。通过父类类型的引用指向子类对象，可以在运行时动态地调用子类的方法，实现了多态性。</li></ol><p>在Java中，使用 <code>extends</code> 关键字来声明继承关系。子类使用 <code>extends</code> 关键字后面跟着父类的名称来声明继承，子类就会继承父类的成员变量和方法。</p><p>以下是一个简单的Java继承示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal is eating.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类继承自Animal类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">bark</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog is barking.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.eat(); <span class="comment">// 继承自Animal类的方法</span></span><br><span class="line">        dog.bark(); <span class="comment">// 子类独有的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，<code>Animal</code> 是父类，<code>Dog</code> 是子类。<code>Dog</code> 类继承了 <code>Animal</code> 类的 <code>eat()</code> 方法，并且在此基础上添加了 <code>bark()</code> 方法。在 <code>main</code> 方法中，我们可以创建 <code>Dog</code> 类的对象并调用继承自父类的方法和子类自己的方法。</p><p><font color='cornflowerblue'>需要注意的是，Java中的继承是单继承的，一个类只能继承自一个父类。但是，一个类可以实现多个接口（接口之间是多继承的关系）。</font></p><p><font color='red'>Java只支持单继承，不支持多继承，但支持多层继承</font></p><p>单继承：一个子类只能继承一个父类</p><p>不支持多继承：子类不能同时继承多个父类</p><p>多层继承：子类A继承父类B，父类B可以继承父类C</p><p>每一个类都直接或间接的继承与Object（即虚拟机会将程序员编写的类自动继承Java中的Object）</p><h3 id="继承的使用"><a href="#继承的使用" class="headerlink" title="继承的使用"></a>继承的使用</h3><p>当类与类之间，存在相同（共性）的内容，并满足子类是父类中的一种，就可以考虑使用继承，来优化代码</p><p>当构思继承的时候，不推荐直接大脑思考，而是使用思维导图的方式，把子类的共性内容抽取到父类中</p><h3 id="子类与父类的继承"><a href="#子类与父类的继承" class="headerlink" title="子类与父类的继承"></a>子类与父类的继承</h3><h4 id="子类能继承父类中的哪些内容"><a href="#子类能继承父类中的哪些内容" class="headerlink" title="子类能继承父类中的哪些内容"></a>子类能继承父类中的哪些内容</h4><table><thead><tr><th>构造方法</th><th>非私有（不能继承）</th><th>私有&#x2F;private（不能继承）</th></tr></thead><tbody><tr><td>成员变量</td><td>非私有（能继承）</td><td>私有&#x2F;private（能继承）</td></tr><tr><td>成员方法</td><td>非私有（能继承）</td><td>私有&#x2F;private（不能继承）</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>在 Java 中，构造方法（Constructor）不是普通的方法，它有特殊的用途和规则。构造方法是用于创建对象的特殊方法，它在创建对象时被调用，并负责初始化对象的状态。</p><p>由于构造方法的特殊性，它并不能被继承。在子类中不会自动继承父类的构造方法，而是由子类自己定义构造方法。当子类创建对象时，必须调用自己的构造方法来初始化自己的实例变量。</p><p>当子类没有定义构造方法时，编译器会默认提供一个无参构造方法（如果父类有无参构造方法），或者继承父类的构造方法（如果父类有其他构造方法但没有无参构造方法）。</p><p>如果子类定义了构造方法，那么它不会继承父类的构造方法。在子类的构造方法中，可以通过使用 <code>super</code> 关键字调用父类的构造方法来完成对父类的初始化。</p><p>以下是一个简单示例来说明构造方法不会被继承的情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    Parent(<span class="type">int</span> age) &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    Child(String name, <span class="type">int</span> age) &#123;</span><br><span class="line">        <span class="built_in">super</span>(age); <span class="comment">// 调用父类的构造方法进行初始化</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，<code>Parent</code> 类有一个带参数的构造方法，<code>Child</code> 类继承自 <code>Parent</code> 类。在 <code>Child</code> 类的构造方法中，我们使用 <code>super(age)</code> 调用了父类的构造方法来初始化父类的 <code>age</code> 属性，然后再初始化子类自己的 <code>name</code> 属性。</p><p>总结一下，构造方法不会被继承，子类必须定义自己的构造方法来完成对自己和父类的初始化。但是，可以通过 <code>super</code> 关键字调用父类的构造方法来辅助完成初始化过程。</p><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><p>在Java中，继承（Inheritance）允许子类继承父类的非私有成员变量，包括公共（public）、受保护（protected）和默认（包级私有，默认修饰符，没有关键字修饰）访问修饰符修饰的成员变量。但是，子类无法直接访问继承的私有（private）成员变量。</p><p>继承允许子类获取父类的属性和方法，并在子类中进行重用。这样做的好处是可以提高代码的复用性和可维护性。继承的非私有成员变量在子类中可以使用，并且通过子类的实例可以访问这些继承的成员变量。</p><p>然而，父类的私有成员变量是被封装的，它们只能在父类的内部使用，无法被子类直接访问。子类无法继承父类的私有成员变量，因此无法通过子类的实例来访问这些私有成员变量。</p><p>以下是一个简单的示例来说明继承中对成员变量的访问权限：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> publicVar;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> protectedVar;</span><br><span class="line">    <span class="type">int</span> defaultVar; <span class="comment">// 默认访问修饰符，包级私有</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> privateVar;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Parent</span><span class="params">()</span> &#123;</span><br><span class="line">        publicVar = <span class="number">1</span>;</span><br><span class="line">        protectedVar = <span class="number">2</span>;</span><br><span class="line">        defaultVar = <span class="number">3</span>;</span><br><span class="line">        privateVar = <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printVariables</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(publicVar); <span class="comment">// 可以访问继承的公共成员变量</span></span><br><span class="line">        System.out.println(protectedVar); <span class="comment">// 可以访问继承的受保护成员变量</span></span><br><span class="line">        System.out.println(defaultVar); <span class="comment">// 可以访问继承的默认成员变量</span></span><br><span class="line">        <span class="comment">// System.out.println(privateVar); // 编译错误，无法访问继承的私有成员变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Child</span> <span class="variable">child</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">        child.printVariables();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，<code>Parent</code> 类有四个成员变量，分别使用了不同的访问修饰符。<code>Child</code> 类继承了 <code>Parent</code> 类，可以访问 <code>Parent</code> 类中的公共、受保护和默认成员变量，但无法直接访问 <code>Parent</code> 类的私有成员变量。</p><h4 id="虚方法表"><a href="#虚方法表" class="headerlink" title="虚方法表"></a>虚方法表</h4><p>虚方法表（Virtual Method Table，简称Vtable）是Java虚拟机（JVM）在运行时用于支持多态性的一种数据结构。它是面向对象编程语言中实现动态绑定（Dynamic Binding）的一种机制。</p><p>在Java中，动态绑定是指在运行时根据对象的实际类型来确定调用哪个方法，而不是在编译时根据引用变量的声明类型来确定。这使得子类可以重写父类的方法，然后在运行时根据实际的对象类型调用相应的子类方法，实现了多态性。</p><p>虚方法表是实现动态绑定的重要工具。<code>每个类在Java虚拟机中都有一个虚方法表</code>，<font color='red'>其中存储了该类的虚方法信息，包括方法的地址（指向实际的方法代码）</font>。虚方法表是针对类而不是对象的，<code>因此每个类只有一个虚方法表</code>。</p><p><font color='red'>当调用对象的虚方法时，虚方法表会根据对象的实际类型查找相应的方法地址，然后进行方法调用。这样，就能实现在运行时动态地选择正确的方法，而不依赖于引用变量的类型。</font></p><p>虚方法表的使用使得Java中的方法调用变得更加灵活和多态，使得继承和方法重写得以实现。这也是Java等面向对象语言能够实现多态性的基础。</p><p><font color='red'>只有父类中的虚方法才能被子类继承</font></p><p><code>虚方法：非private、非static、非final</code></p><h3 id="继承范围"><a href="#继承范围" class="headerlink" title="继承范围"></a>继承范围</h3><h4 id="成员变量、成员方法"><a href="#成员变量、成员方法" class="headerlink" title="成员变量、成员方法"></a>成员变量、成员方法</h4><p>就近原则：现在局部位置找，本类成员位置找，父类成员位置找，逐级往上</p><p>用<code>super</code>调用，直接访问父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Fu&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Zi&quot;</span>;<span class="comment">// 删除这行，打印结果为：Fu</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ziShow</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;ziShow&quot;</span>;<span class="comment">// 删除这行，打印结果为：Zi</span></span><br><span class="line">System.out.println(name);<span class="comment">// 结果：ziShow</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是综合案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">Id</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doThings</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am Fu&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">Id</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">idShow</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Zi:&quot;</span> + <span class="built_in">this</span>.Id);</span><br><span class="line">        System.out.println(<span class="string">&quot;Fu:&quot;</span> + <span class="built_in">super</span>.Id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doThings</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am Zi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ziShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.doThings();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fuShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.doThings();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Zi</span> <span class="variable">z1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>();</span><br><span class="line">        z1.idShow();    <span class="comment">// Zi: 20 Fu:10</span></span><br><span class="line">        z1.ziShow();</span><br><span class="line">        z1.fuShow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><p>当父类的方法不能满足子类现在的需求时，需要进行方法重写</p><h4 id="书写格式"><a href="#书写格式" class="headerlink" title="书写格式"></a>书写格式</h4><p>在继承体系中，子类出现了和父类中一摸一样的方法声明，我们就称这个方法是重写的方法</p><h4 id="Override重写注解"><a href="#Override重写注解" class="headerlink" title="@Override重写注解"></a>@Override重写注解</h4><ol><li>@Override是放在重写后的方法上，校验子类重写时语法是否正确</li><li>加上注解后如果有红色波浪线，表示语法错误</li><li>建议重写方法都加@Override注解，代码安全，优雅！</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃米饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drink</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喝开水&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃菜&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drink</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喝饮料&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ol><li>重写方法的名称、形参列表必须与父类中的一致</li><li>子类重写父类方法时，访问权限子类必须大于等于父类（暂时了解：空着不写 &lt; protected &lt; public）</li><li>子类重写父类方法时，返回值类型子类必须小于等于父类</li><li>总结（建议）：<font color='red'>重写的方法尽量和父类保持一致</font></li><li>只有被添加到虚方法表中的方法才能被重写</li></ol><h3 id="继承中：构造方法的访问特点"><a href="#继承中：构造方法的访问特点" class="headerlink" title="继承中：构造方法的访问特点"></a>继承中：构造方法的访问特点</h3><ul><li>父类中的构造方法不会被子类继承</li><li>子类中所有的构造方法默认先访问父类中的无参构造，再执行自己</li></ul><p>↑解释：</p><ul><li>子类在初始化的时候，有可能会使用到父类中的数据，如果父类没有完成初始化，子类将无法使用父类的数据</li><li>子类初始化之前，一定要调用父类构造方法先完成父类数据空间的初始化</li></ul><p>怎么调用父类构造方法？</p><ul><li><font color='red'>子类构造方法的第一行语句默认都是：super()，不写也存在，且必须在第一行</font></li><li>如果想调用父类的有参构造，必须手动写super进行调用</li></ul><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fu</span>&#123;</span><br><span class="line"><span class="type">int</span> Age;</span><br><span class="line">String Name;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Fu</span><span class="params">()</span> &#123;</span><br><span class="line">Age = <span class="number">10</span>;</span><br><span class="line">Name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Fu</span><span class="params">(<span class="type">int</span> Age,String Name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.Age = Age;</span><br><span class="line"><span class="built_in">this</span>.Name = Name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Zi</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 子类构造方法中隐藏的super()去访问父类的无参构造</span></span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Zi</span><span class="params">(String Name,<span class="type">int</span> Age)</span> &#123;</span><br><span class="line">        <span class="comment">// 访问父类的有参构造</span></span><br><span class="line">        <span class="built_in">super</span>(Name,Age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态：同类型的对象，表现出的不同形态</p><h3 id="多态的表现形式"><a href="#多态的表现形式" class="headerlink" title="多态的表现形式"></a>多态的表现形式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父类类型 对象名称 = 子类对象;</span><br></pre></td></tr></table></figure><h3 id="多态前提"><a href="#多态前提" class="headerlink" title="多态前提"></a>多态前提</h3><ul><li>有继承关系</li><li>有父类引用指向子类对象</li><li>有方法重写</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Fu</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>();</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> duotai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="comment">// 变量为父，方法为子</span></span><br><span class="line">        System.out.println(a.name); <span class="comment">// 动物</span></span><br><span class="line">        a.show();   <span class="comment">// Dog----show</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;动物&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal----show&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;狗&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog----show&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><p>成员变量：在子类的对象中，会把父类的成员变量也继承下来。</p><p>成员方法：如果子类对方法进行了<font color='red'>重写</font>，那么在虚方法表中是会把父类的方法进行覆盖的。</p><p><font color='red'>编译看左边，运行看右边</font></p><h3 id="多态的优势和弊端"><a href="#多态的优势和弊端" class="headerlink" title="多态的优势和弊端"></a>多态的优势和弊端</h3><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ul><li>在多态的形式下，右边对象可以实现解耦合，便于拓展和维护</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">p.work();</span><br><span class="line"><span class="comment">// 如果需要变成teacher的work方法，不需要修改其他地方，只需要把new Student() 改为 new Teacher()</span></span><br></pre></td></tr></table></figure><ul><li>定义方法的时候，使用父类型作为参数，可以接收所有子类对象，体现多态的扩展性与便利</li></ul><h4 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h4><ul><li>不能调用子类特有方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> duotai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="comment">// 变量为父，方法为子</span></span><br><span class="line">        System.out.println(a.name); <span class="comment">// 动物</span></span><br><span class="line">        a.show();   <span class="comment">// Dog----show</span></span><br><span class="line">        <span class="comment">// a.watchDoor(); 父类里面没有这个方法，会报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;动物&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal----show&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;狗&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog----show&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">watchDoor</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;看门&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="包、final、权限修饰符、代码块"><a href="#包、final、权限修饰符、代码块" class="headerlink" title="包、final、权限修饰符、代码块"></a>包、final、权限修饰符、代码块</h2><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>包就是文件夹。用来管理各种不同功能的Java类，方便后期代码维护</p><ul><li>包名的规则：公司域名反写 + 包的作用，需要全部英文小写，见名知意，如：com.zhaojiale.domain.student</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">com.zhaojiale.domain.<span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.zhaojiale.domain.Student()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>||</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zhaojiale.domain.Student;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用其他类的规则"><a href="#使用其他类的规则" class="headerlink" title="使用其他类的规则"></a>使用其他类的规则</h4><ul><li>使用同一个包中的类时，不需要导包</li><li>使用Java.lang包中的类时，不需要导包</li><li>其他情况都需要导包</li><li>如果同时使用两个包中的同名类，需要用全类名</li></ul><h3 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h3><p>修饰方法：表明该方法是最终方法，不能被重写</p><p>修饰类：表明该类是最终类，不能被继承</p><p>修饰变量：叫做常量，只能被赋值一次</p><h3 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h3><h4 id="权限修饰符的分类"><a href="#权限修饰符的分类" class="headerlink" title="权限修饰符的分类"></a>权限修饰符的分类</h4><p>有四种作用范围由大到小（private &lt; 缺省 &lt; protected &lt; public）</p><table><thead><tr><th>修饰符</th><th>同一类中</th><th>同一包中其他类</th><th>不同包下的子类</th><th>不同包下的无关类</th></tr></thead><tbody><tr><td>private</td><td>√</td><td></td><td></td><td></td></tr><tr><td>缺省</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><p>实际开发中，一般只用private和public</p><ul><li>成员变量私有</li><li>方法公开</li></ul><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static&#123;&#125;</span><br></pre></td></tr></table></figure><p>特点：</p><p>需要通过static关键字修饰，随着类的加载而加载，并且自动触发，只执行一次</p><p>使用场景：</p><p>在类加载的时候，做一些数据初始化的时候使用</p><p>执行时机：</p><p>随着类的加载而加载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Student&#123;</span><br><span class="line">private String name;</span><br><span class="line">private int age;</span><br><span class="line"></span><br><span class="line">static &#123;</span><br><span class="line">System.out.println(&quot;静态代码块执行了&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象类-抽象方法"><a href="#抽象类-抽象方法" class="headerlink" title="抽象类&#x2F;抽象方法"></a>抽象类&#x2F;抽象方法</h2><p><code>具体实例在资料的 day12、day13中</code></p><p>抽象方法：</p><p>将共性的行为（方法）抽取到父类之后。由于每一个子类执行的内容是不一样，所以在父类中不能确定具体的方法体。该方法就可以定义为抽象方法</p><p>抽象类：</p><p>如果一个类中存在抽象方法，那么该类就必须声明为抽象类</p><ul><li>抽象方法的定义格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> 返回值类型 方法名(参数列表);</span><br></pre></td></tr></table></figure><ul><li>抽象类的定义格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> class 类名&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象类和抽象方法的注意事项"><a href="#抽象类和抽象方法的注意事项" class="headerlink" title="抽象类和抽象方法的注意事项"></a>抽象类和抽象方法的注意事项</h3><ul><li>抽象类不能实例化（实例化：创建对象）</li><li>抽象类中不一定有抽象方法。有抽象方法，类一定是抽象类</li><li>可以有构造方法</li><li>抽象类的子类<ul><li>要么重写抽象类中的所有抽象方法</li><li>要么是抽象类</li></ul></li></ul><p>​     </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> abstractDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// Person p = new Person(); java: abstractDemo.Person是抽象的; 无法实例化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口就是一种规则，是对行为的抽象</p><h3 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h3><ul><li>接口用关键字interface来定义</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> interface 接口名 &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>接口不能实例化</li><li>接口和类之间是实现关系，通过<code>implements</code>关键字表示</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名 implements 接口名 &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>接口的子类（实现类）<ul><li>要么重写接口中的所有抽象方法</li><li>要么是抽象类</li></ul></li></ul><p>注意：</p><ol><li>接口和类的实现关系，可以单实现，也可以多实现。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名 implements 接口名<span class="number">1</span>,接口名<span class="number">2</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>实现类还可以在继承一个类的同时实现多个接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名 extends 父类 implements 接口名<span class="number">1</span>,接口名<span class="number">2</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="接口中成员的特点"><a href="#接口中成员的特点" class="headerlink" title="接口中成员的特点"></a>接口中成员的特点</h3><ul><li>成员变量<ul><li>只能是<font color='red'>常量</font></li><li>默认修饰符：<code>public static final</code></li></ul></li><li>构造方法<ul><li>没有</li></ul></li><li>成员方法<ul><li>只能是抽象方法</li><li>默认修饰符：public abstract</li></ul></li><li>JDK7以前：接口中只能定义抽象方法</li><li>JDK8的新特性：接口中可以定义有方法体的方法</li><li>JDK9的新特性：接口中可以定义私有方法</li></ul><h3 id="接口和类之间的关系"><a href="#接口和类之间的关系" class="headerlink" title="接口和类之间的关系"></a>接口和类之间的关系</h3><ul><li><p>类和类的关系：</p><p>继承关系，只能单继承，不能多继承，但是可以多层继承</p></li><li><p>类和接口的关系</p><p>实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口</p></li><li><p>接口和接口的关系</p><p>继承关系，可以单继承，也可以多继承</p></li></ul><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>JDK8以后接口中新增的方法</p><ul><li>允许在接口中定义默认方法，需要使用关键字 <code>default</code> 修饰<ul><li>作用：解决接口升级问题</li></ul></li></ul><p>接口中<font color='red'>默认方法</font>的定义格式</p><ul><li>格式：public default 返回值类型 方法名(参数列表) {}</li><li>范例：public default void show() {}</li></ul><p>接口中默认方法的<font color='red'>注意事项</font>：</p><ul><li>默认方法不是抽象方法，所以不强制被重写。但如果被重写，重写的时候去掉 default 关键字</li><li>public可以省略，default不能省略</li><li>如果实现了多个接口，多个接口中存在相同名字的默认方法，子类就必须对该方法进行重写</li></ul><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>类的五大成员：属性、方法、构造方法、代码块、内部类</p><p>内部类：在一个类的里面，再定义一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;<span class="comment">// 外部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;<span class="comment">// 内部类</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部类表示的事物是外部类的一部分</p><p>内部类单独出现没有任何意义</p><p>内部类的访问特点：</p><ul><li>内部类可以直接访问外部类的成员，包括私有</li><li>外部类要访问内部类的成员，必须创建对象</li></ul><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;<span class="comment">// 外部类</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;<span class="comment">// 内部类</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态内部类只能访问外部类中的静态变量和方法，如果想要访问非静态的需要创建对象</p><p>创建静态内部类对象的格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">外部类名.内部类名 对象名 = <span class="keyword">new</span> 外部类名.内部类名();</span><br></pre></td></tr></table></figure><p>调用非静态方法的格式：先创建对象，用对象调用</p><p>调用静态方法的格式：外部类名.内部类名.方法名()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> InnerClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show1</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">Outer</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">            System.out.println(o.a);</span><br><span class="line">            System.out.println(b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">Outer</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">            System.out.println(o.a);</span><br><span class="line">            System.out.println(b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> InnerClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">oi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>.Inner();</span><br><span class="line">        oi.show1();</span><br><span class="line">        <span class="comment">// oi.show2(); 不会报错且可以使用</span></span><br><span class="line">        Outer.Inner.show2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><ol><li>将内部类定义在<font color='red'>方法里面</font>就叫做局部内部类，类似于<font color='red'>方法里面的局部变量</font></li><li>外界是无法直接使用，需要在方法内部创建对象并使用</li><li>该类可以直接访问外部类的成员，也可以访问方法内的局部变量</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> InnerClass02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">            String name;</span><br><span class="line">            <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;局部内部类中的method1方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;局部内部类中的method2静态方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建局部内部类的对象</span></span><br><span class="line">        <span class="type">Inner</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        System.out.println(i.name);</span><br><span class="line">        System.out.println(i.age);</span><br><span class="line">        i.method1();</span><br><span class="line">        Inner.method2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>匿名内部类本质上就是隐藏了名字的内部类</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类名或接口名() &#123;</span><br><span class="line">重写方法;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Inter</span>() &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际用途：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> InnerClass03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 在测试类中调用下面的method方法？</span></span><br><span class="line">        <span class="comment">// 以前的方式如何调用？</span></span><br><span class="line">        <span class="comment">// 要自己写一个子类继承Animal类</span></span><br><span class="line">        <span class="comment">// 再创建子类的对象</span></span><br><span class="line">        <span class="comment">// Dog d = new Dog();</span></span><br><span class="line">        <span class="comment">// method(d);</span></span><br><span class="line">        <span class="comment">// 以上的方法过于繁琐，需要自己定义</span></span><br><span class="line">        <span class="comment">// 使用匿名类就会方便很多</span></span><br><span class="line">        method(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Animal</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;狗吃骨头&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Animal a)</span> &#123;</span><br><span class="line">        a.eat();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="匿名自调用"><a href="#匿名自调用" class="headerlink" title="匿名自调用"></a>匿名自调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> InnerClass03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Swim</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;重写之后的游泳方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.swim();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="综合项目————拼图"><a href="#综合项目————拼图" class="headerlink" title="综合项目————拼图"></a>综合项目————拼图</h1><p>要求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 创建一个宽603像素，高680像素的游戏主界面</span><br><span class="line">2. 创建一个宽488像素，高430像素的登陆界面</span><br><span class="line">3. 创建一个宽488像素，高500像素的注册界面</span><br></pre></td></tr></table></figure><h2 id="JFrame"><a href="#JFrame" class="headerlink" title="JFrame"></a>JFrame</h2><p>Java中创建图像化窗口的JavaBean</p><p>创建<code>JFrame</code>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JFrame</span> <span class="variable">GameJFrame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>();</span><br></pre></td></tr></table></figure><p>JFrame部分参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JFrame.setSize(<span class="type">int</span> width,<span class="type">int</span> height);<span class="comment">// 设置窗口宽高</span></span><br><span class="line">JFrame.setVisible(Boolean b);<span class="comment">// 显示窗口，建议放到最后</span></span><br><span class="line">JFrame.setTitle(String s);<span class="comment">// 设置标题</span></span><br><span class="line">JFrame.setAlwaysOnTop(Boolean b);<span class="comment">// 设置窗口置顶</span></span><br><span class="line">JFrame.setDefaultCloseOperation();<span class="comment">// 设置窗口关闭方式 参数可以填入 0-3 范围</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Ui;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GameJFrame</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="comment">// JFrame表示界面、窗体</span></span><br><span class="line">    <span class="comment">// 同理它的子类也是代表界面、窗体</span></span><br><span class="line">    <span class="comment">// GameJFrame 自定义类，表示主界面窗体</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GameJFrame</span><span class="params">(<span class="type">int</span> width,<span class="type">int</span> height,Boolean vb)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setSize(width,height);</span><br><span class="line">        <span class="built_in">this</span>.setVisible(vb);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setTitle(<span class="string">&quot;拼图单机版 v1.0&quot;</span>); <span class="comment">// 设置窗口标题</span></span><br><span class="line">        <span class="built_in">this</span>.setAlwaysOnTop(<span class="literal">true</span>);  <span class="comment">// 设置窗口置顶</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setLocationRelativeTo(<span class="literal">null</span>); <span class="comment">// 设置窗口居中</span></span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用继承，创建一个自定义类，方便后期修改和简化代码</p><h2 id="JMenu"><a href="#JMenu" class="headerlink" title="JMenu"></a>JMenu</h2><p>菜单制作流程：</p><ol><li>先创建JMenuBar</li><li>再创建JMenu</li><li>再创建JMenuItem</li><li>把JMenuItem放到JMenu里面</li><li>把JMenu放到JMenuBar里面</li></ol><p>创建<code>JMenuBar</code>、<code>JMenu</code>、<code>JMenuItem</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JMenuBar</span> <span class="variable">jMenuBar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuBar</span>();</span><br><span class="line"><span class="type">JMenu</span> <span class="variable">functionJMenu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(String s);</span><br><span class="line"><span class="type">JMenuItem</span> <span class="variable">replayItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(String s);</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化菜单</span></span><br><span class="line"><span class="comment">// 创建整个的菜单对象</span></span><br><span class="line"><span class="type">JMenuBar</span> <span class="variable">jMenuBar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuBar</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">JMenu</span> <span class="variable">functionJMenu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;功能&quot;</span>);</span><br><span class="line"><span class="type">JMenu</span> <span class="variable">aboutJMenu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;关于我们&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建选项下面的条目对象</span></span><br><span class="line"><span class="type">JMenuItem</span> <span class="variable">replayItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;重新游戏&quot;</span>);</span><br><span class="line"><span class="type">JMenuItem</span> <span class="variable">reLoginItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;重写登录&quot;</span>);</span><br><span class="line"><span class="type">JMenuItem</span> <span class="variable">closeItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;关闭游戏&quot;</span>);</span><br><span class="line"><span class="type">JMenuItem</span> <span class="variable">accountItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;公众号&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将条目添加到选项中</span></span><br><span class="line">functionJMenu.add(replayItem);</span><br><span class="line">functionJMenu.add(reLoginItem);</span><br><span class="line">functionJMenu.add(closeItem);</span><br><span class="line"></span><br><span class="line">aboutJMenu.add(accountItem);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将菜单里面的两个选项添加到菜单当中</span></span><br><span class="line">jMenuBar.add(functionJMenu);</span><br><span class="line">jMenuBar.add(aboutJMenu);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将整个页面设置菜单</span></span><br><span class="line"><span class="built_in">this</span>.setJMenuBar(jMenuBar);</span><br></pre></td></tr></table></figure><h2 id="JLabel"><a href="#JLabel" class="headerlink" title="JLabel"></a>JLabel</h2><p>JLabel负责管理区域，比如图片、文字</p><p>创建<code>JLabel</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JLabel</span> <span class="variable">jLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>();</span><br></pre></td></tr></table></figure><p>创建<code>ImageIcon</code>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ImageIcon</span> <span class="variable">icon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(String s);<span class="comment">// s 填入图片路径</span></span><br></pre></td></tr></table></figure><p>将<code>ImageIcon</code>添加到<code>JLabel</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jLabel.add(icon);</span><br></pre></td></tr></table></figure><p>指定图片位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jLabel.setBounds(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> width,<span class="type">int</span> height);</span><br></pre></td></tr></table></figure><p>将<code>JLabel</code>添加到<code>JFrame</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.getContentPane().add(jLabel);</span><br></pre></td></tr></table></figure><p><font color='red'>注意</font>：</p><p>在初始化JFrame中，需要放入以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取消默认的居中放置，只有取消了才会按照XY轴的形式添加组件</span></span><br><span class="line"><span class="built_in">this</span>.setLayout(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initImage</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 获取当前要加载的图片序号</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> data[i][j];</span><br><span class="line">            <span class="comment">// 创建一个JLabel的对象（管理容器）</span></span><br><span class="line">            <span class="type">JLabel</span> <span class="variable">jLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(<span class="string">&quot;C://&quot;</span> + num + <span class="string">&quot;.jpg&quot;</span>));</span><br><span class="line">            <span class="comment">// 指定图片位置</span></span><br><span class="line">            jLabel.setBounds(<span class="number">105</span> * i,<span class="number">105</span>*j,<span class="number">105</span>,<span class="number">105</span>);</span><br><span class="line">            <span class="comment">// 将容器添加到界面中</span></span><br><span class="line">            <span class="comment">// this.add(jLabel);</span></span><br><span class="line">            <span class="built_in">this</span>.getContentPane().add(jLabel);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul><li>事件源：按钮、图片、窗体…</li><li>事件：某些操作。如：鼠标单击、鼠标划入…</li><li>绑定监听：当事件源上发生了某个事件，则执行某段代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">键盘监听：KeyListener</span><br><span class="line">鼠标监听：MouseListener</span><br><span class="line">动作监听：ActionListener</span><br></pre></td></tr></table></figure><p>​</p><h3 id="JButton"><a href="#JButton" class="headerlink" title="JButton"></a>JButton</h3><p>创建<code>JButton</code>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JButton</span> <span class="variable">jbtn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(String s);<span class="comment">// 按钮内的文字</span></span><br></pre></td></tr></table></figure><p>设置位置、大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jbtn.setBounds(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> width,<span class="type">int</span> height);</span><br></pre></td></tr></table></figure><h3 id="ActionListener"><a href="#ActionListener" class="headerlink" title="ActionListener"></a>ActionListener</h3><p>给 <code>JButton</code> 添加 <code>ActionListener</code></p><p> 第一种：</p><p>使用接口创建实现类，再将实现类添加到ActionListener中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyActionLisntener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;按钮被点击了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jbtn.addActionListener(<span class="keyword">new</span> <span class="title class_">MyActionLisntener</span>());</span><br></pre></td></tr></table></figure><p>第二种：</p><p>利用匿名内部类直接重写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jbtn.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;匿名内部类哦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>第三种（多个按钮）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JframeButton</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line"><span class="type">JButton</span> <span class="variable">btn1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;AButton&quot;</span>);</span><br><span class="line">    <span class="type">JButton</span> <span class="variable">btn2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;BButton&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">JframeButton</span><span class="params">()</span> &#123;</span><br><span class="line">...</span><br><span class="line">        btn1.setBounds(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">50</span>);</span><br><span class="line">        <span class="comment">// 这里的this代表传入本类对象，即btn1</span></span><br><span class="line">        btn1.addActionListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        btn2.setBounds(<span class="number">200</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">50</span>);</span><br><span class="line">        <span class="comment">// 这里的this代表传入本类对象，即btn2</span></span><br><span class="line">        btn2.addActionListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.getContentPane().add(btn1);</span><br><span class="line">        <span class="built_in">this</span>.getContentPane().add(btn2);</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">source</span> <span class="operator">=</span> e.getSource();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (source == btn1) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我是第一个按钮&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (source == btn2) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我是第二个按钮&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MouseListener"><a href="#MouseListener" class="headerlink" title="MouseListener"></a>MouseListener</h3><p>使用方法和ActionListener差不多，这里只举一种例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMouseListener</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">MouseListener</span> &#123;</span><br><span class="line">    <span class="type">JButton</span> <span class="variable">btn1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyMouseListener</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">jfm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>();</span><br><span class="line">        jfm.setSize(<span class="number">600</span>,<span class="number">500</span>);</span><br><span class="line">        jfm.setAlwaysOnTop(<span class="literal">true</span>);</span><br><span class="line">        jfm.setDefaultCloseOperation(<span class="number">3</span>);</span><br><span class="line">        jfm.setLayout(<span class="literal">null</span>);</span><br><span class="line">        jfm.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        btn1.setBounds(<span class="number">10</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        btn1.addMouseListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        jfm.getContentPane().add(btn1);</span><br><span class="line"></span><br><span class="line">        jfm.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseClicked</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">source</span> <span class="operator">=</span> e.getSource();</span><br><span class="line">        <span class="keyword">if</span> (source == btn1) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;按下&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mousePressed</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;按住&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseReleased</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;松开&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseEntered</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;鼠标划入&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseExited</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;鼠标离开&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>mouseClicked(MouseEvent e)</td><td>在组件上单击（按下并释放）鼠标按钮时调用</td></tr><tr><td>mouseEntered(MouseEvent e)</td><td>当鼠标进入组件时调用</td></tr><tr><td>mouseExited(MouseEvent e)</td><td>当鼠标退出组件时调用</td></tr><tr><td>mousePressed(MouseEvent e)</td><td>在组件上按下鼠标按钮时调用</td></tr><tr><td>mouseReleased(MouseEvent e)</td><td>在组件上释放鼠标按钮时调用</td></tr></tbody></table><h3 id="KeyListener"><a href="#KeyListener" class="headerlink" title="KeyListener"></a>KeyListener</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyKeyListener</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">KeyListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyKeyListener</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">603</span>,<span class="number">680</span>);</span><br><span class="line">        <span class="built_in">this</span>.setTitle(<span class="string">&quot;测试按键&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.setAlwaysOnTop(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line">        <span class="built_in">this</span>.setAlwaysOnTop(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(<span class="number">3</span>);</span><br><span class="line">        <span class="built_in">this</span>.setLayout(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.addKeyListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyTyped</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyPressed</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;按下不松&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyReleased</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;按下且释放&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取按键编号</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> e.getKeyCode();</span><br><span class="line">        System.out.println(code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>keyPressed(KeyEvent e)</td><td>按下键时调用</td></tr><tr><td>keyReleased(KeyEvent e)</td><td>当键被释放时调用</td></tr><tr><td>keyTyped(KeyEvent e)</td><td>键入键时调用</td></tr></tbody></table><h1 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h1><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static int abs(int a)</td><td>获取参数绝对值</td></tr><tr><td>public static double ceil(double a)</td><td>向上取整</td></tr><tr><td>public static double floor(double a)</td><td>向下取整</td></tr><tr><td>public static int round(float a)</td><td>四舍五入</td></tr><tr><td>public static int max(int a,int b)</td><td>获取两个int值中的较大值</td></tr><tr><td>public static double pow(double a,double b)</td><td>返回a的b次幂的值</td></tr><tr><td>public static double random()</td><td>返回值为double的随机值，范围[0.0,1.0]</td></tr></tbody></table><h3 id="练习一"><a href="#练习一" class="headerlink" title="练习一"></a>练习一</h3><p>要求：判断一个数是否为质数</p><p>方法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">primeNum</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; number; i++) &#123;</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">if</span> (number % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(index);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：循环次数过多，效率太低</p><p>方法二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">primeNum</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= Math.sqrt(number); i++) &#123;</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">if</span> (number % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(index);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习二"><a href="#练习二" class="headerlink" title="练习二"></a>练习二</h3><p>水仙花数（Narcissistic number）也被称为<a href="https://baike.baidu.com/item/%E8%B6%85%E5%AE%8C%E5%85%A8%E6%95%B0%E5%AD%97%E4%B8%8D%E5%8F%98%E6%95%B0/2495144?fromModule=lemma_inlink">超完全数字不变数</a>（pluperfect digital invariant, PPDI）、<a href="https://baike.baidu.com/item/%E8%87%AA%E6%81%8B%E6%95%B0/8319599?fromModule=lemma_inlink">自恋数</a>、<a href="https://baike.baidu.com/item/%E8%87%AA%E5%B9%82%E6%95%B0/4397236?fromModule=lemma_inlink">自幂数</a>、阿姆斯壮数或<a href="https://baike.baidu.com/item/%E9%98%BF%E5%A7%86%E6%96%AF%E7%89%B9%E6%9C%97%E6%95%B0/7070382?fromModule=lemma_inlink">阿姆斯特朗数</a>（Armstrong number），水仙花数是指一个 3 位数，它的每个数位上的数字的 3次幂之和等于它本身。例如：1^3 + 5^3+ 3^3 &#x3D; 153。</p><p>水仙花数只是<a href="https://baike.baidu.com/item/%E8%87%AA%E5%B9%82%E6%95%B0/0?fromModule=lemma_inlink">自幂数</a>的一种，严格来说3位数的3次<a href="https://baike.baidu.com/item/%E5%B9%82%E6%95%B0/231637?fromModule=lemma_inlink">幂数</a>才称为水仙花数。</p><p>附：其他位数的自幂数名字</p><p>一位自幂数：<a href="https://baike.baidu.com/item/%E7%8B%AC%E8%BA%AB%E6%95%B0/13019786?fromModule=lemma_inlink">独身数</a></p><p>三位自幂数：水仙花数</p><p>四位自幂数：<a href="https://baike.baidu.com/item/%E5%9B%9B%E5%8F%B6%E7%8E%AB%E7%91%B0%E6%95%B0/13019609?fromModule=lemma_inlink">四叶玫瑰数</a></p><p>五位自幂数：<a href="https://baike.baidu.com/item/%E4%BA%94%E8%A7%92%E6%98%9F%E6%95%B0/13019763?fromModule=lemma_inlink">五角星数</a></p><p>六位自幂数：<a href="https://baike.baidu.com/item/%E5%85%AD%E5%90%88%E6%95%B0/13019768?fromModule=lemma_inlink">六合数</a></p><p>七位自幂数：<a href="https://baike.baidu.com/item/%E5%8C%97%E6%96%97%E4%B8%83%E6%98%9F%E6%95%B0/13019769?fromModule=lemma_inlink">北斗七星数</a></p><p>八位自幂数：<a href="https://baike.baidu.com/item/%E5%85%AB%E4%BB%99%E6%95%B0/13019781?fromModule=lemma_inlink">八仙数</a></p><p>九位自幂数：<a href="https://baike.baidu.com/item/%E4%B9%9D%E4%B9%9D%E9%87%8D%E9%98%B3%E6%95%B0/13019774?fromModule=lemma_inlink">九九重阳数</a></p><p>十位自幂数：<a href="https://baike.baidu.com/item/%E5%8D%81%E5%85%A8%E5%8D%81%E7%BE%8E%E6%95%B0/13019780?fromModule=lemma_inlink">十全十美数</a></p><p>要求：一共有多少个水仙花数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>; i &lt;= <span class="number">999</span>; i++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> i % <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span> i / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span> i / <span class="number">100</span> % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> Math.pow(ge,<span class="number">3</span>) + Math.pow(shi,<span class="number">3</span>) + Math.pow(bai,<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> (sum == i) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><p>System也是一个工具类，提供了一些与系统相关的方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static void exit(int status)</td><td>终止当前运行的 Java 虚拟机</td></tr><tr><td>public static long currentTimeMillies()</td><td>返回当前系统的事件毫秒值形式</td></tr><tr><td>public static void arraycopy(数据源数组,起始索引,目的地数组,起始索引,拷贝个数)</td><td>数组拷贝</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.exit(<span class="number">0</span>) <span class="comment">// 虚拟机正常终止</span></span><br><span class="line">System.out.println(<span class="string">&quot;我不会被打印出来&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> System.currentTimeMillies();</span><br><span class="line">System.out.println(l)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 arr1 数组的0索引上开始复制到 arr2 数组的0索引中，总共复制 10 个数</span></span><br><span class="line">System.arraycopy(arr1,<span class="number">0</span>,arr2,<span class="number">0</span>,<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h2 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h2><p>Runtime表示当前虚拟机的运行环境</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static Runtime getRuntime()</td><td>当前系统的运行环境对象</td></tr><tr><td>public void exit(int status)</td><td>停止虚拟机</td></tr><tr><td>public int availableProcessors()</td><td>获取CPU的线程数</td></tr><tr><td>public long maxMemory()</td><td>JVM能从系统中获取总内存大小（单位byte）</td></tr><tr><td>public long totalMemory()</td><td>JVM已经从系统中获取总内存大小（单位byte）</td></tr><tr><td>public long freeMemory()</td><td>JVM剩余内存大小（单位byte）</td></tr><tr><td>public Process exec(String Name)</td><td>运行CMD命令</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Runtime r1 = Runtime.getRuntime();</span></span><br><span class="line"><span class="comment">Runtime r2 = Runtime.getRuntime();</span></span><br><span class="line"><span class="comment">System.out.println(r1 == r2);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止虚拟机</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Runtime.getRuntime().exit(0);</span></span><br><span class="line"><span class="comment">System.out.println(&quot;我不会被打印&quot;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CPU线程数</span></span><br><span class="line">System.out.println(Runtime.getRuntime().availableProcessors());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 总内存大小</span></span><br><span class="line">System.out.println(Runtime.getRuntime().maxMemory() / <span class="number">1024</span> / <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 已经获取的总内存大小</span></span><br><span class="line">System.out.println(Runtime.getRuntime().totalMemory() / <span class="number">1024</span> / <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 剩余内存大小</span></span><br><span class="line">System.out.println(Runtime.getRuntime().freeMemory() / <span class="number">1024</span> / <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 cmd 命令</span></span><br><span class="line">System.out.println(Runtime.getRuntime().exec(<span class="string">&quot;notepad&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><ul><li><code>Object</code> 是java中的顶级父类。所有的类都直接或间接的继承于Object类</li><li><code>Object</code> 类中的方法可以被所有子类访问，所以要学习Object类和其中的方法</li></ul><h3 id="Object的构造方法"><a href="#Object的构造方法" class="headerlink" title="Object的构造方法"></a>Object的构造方法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public Object()</td><td>空参构造</td></tr></tbody></table><h3 id="Object的成员方法"><a href="#Object的成员方法" class="headerlink" title="Object的成员方法"></a>Object的成员方法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public String toString()</td><td>返回对象的字符串表示形式</td></tr><tr><td>public boolean equals(Obejct obj)</td><td>比较两个对象是否相等</td></tr><tr><td>protected Object clone(int a)</td><td>对象克隆</td></tr></tbody></table><p>查看数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sflag</span> <span class="operator">=</span> obj.toString();</span><br><span class="line">System.out.println(flag.getClass());    <span class="comment">// class java.lang.Boolean</span></span><br><span class="line">System.out.println(sflag.getClass());   <span class="comment">// class java.lang.String</span></span><br></pre></td></tr></table></figure><p>toString</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OpenJDK7 java.lang.Object类toString()源码</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是代表调用toString时，会返回类名 + 对象的内存地址</p><p>如果不想打印对象地址，只打印对象中的属性，那么需要在类中重写 toString()</p><p>IDEA可以直接生成如下结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>toString方法在很多地方都会被调用</p><ul><li><p>当你print一个对象的时候，会<font color='red'>自动调用toString方法</font>。</p></li><li><p>当你print一个collection的时候，其内部所持有的每个对象都会被分别调用toString方法。</p></li><li><p>当你在开发环境调用debugger看类实例的时候，大部分debugger都会调用实例的toString方法为你显示其内部的信息。（例1）</p></li><li><p>当你把一个对象写到log文件里的时候，会自动调用toString方法。</p></li><li><p>当你用断言（Assert）检查两个实例是否相同时，会自动调用toString方法。</p></li></ul><p>对象对比</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写equals，使对象的属性之间做对比</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != student.age) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(name, student.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> name != <span class="literal">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">result</span> <span class="operator">=</span> s1.equals(s2);</span><br><span class="line">System.out.println(result); <span class="comment">// 直接输出为 false，这是因为对比的是地址值，正确的对比需要重写equals</span></span><br></pre></td></tr></table></figure><p>克隆对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] data;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;角色编号为：&quot;</span> + id + <span class="string">&quot;，用户名：&quot;</span> + username + <span class="string">&quot;，密码：&quot;</span> + password + <span class="string">&quot;，data：&quot;</span> + ArrtoString(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">ArrtoString</span><span class="params">(<span class="type">int</span>[] data)</span> &#123;</span><br><span class="line">        <span class="type">StringJoiner</span> <span class="variable">sj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;，&quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            sj.add(data[i] + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sj.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由于clone在Object中是受保护的，需要重写才可以使用</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="comment">// 调用父类的clone方法</span></span><br><span class="line">        <span class="comment">// 相当于让Java帮我们克隆一个对象，并把克隆之后的对象返回出去</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] data = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>,<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;qwe123456&quot;</span>,data);</span><br><span class="line"><span class="comment">// 克隆对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> (User) u1.clone();</span><br><span class="line">System.out.println(u1);</span><br><span class="line">System.out.println(u2);</span><br></pre></td></tr></table></figure><p>浅拷贝：</p><ol><li>拷贝对象属性的地址值，假设 B 拷贝了 A，如果A改变了，B查看属性时也会是改变后的属性</li></ol><p>深拷贝：</p><ol><li>拷贝对象属性值时会重新分配地址（<font color='red'>引用数据类型重新分配</font>，基本数据类型不会，字符串复用）</li></ol><p>Object clone默认为浅克隆，需要深克隆的话需要重写方法或使用第三方工具类</p><h3 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h3><p>Objects是一个工具类，提供了一些方法去完成一些功能</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static boolean equals(Object a,Object b)</td><td>先做非空判断，比较两个对象</td></tr><tr><td>public static boolean isNull(Object obj)</td><td>判断对象是否为Null，为Null返回true，反之</td></tr><tr><td>public static boolean nonNull(Object obj)</td><td>判断对象是否为Null，跟isNull的结果相反</td></tr></tbody></table><h2 id="BigInteger和BigDecimal"><a href="#BigInteger和BigDecimal" class="headerlink" title="BigInteger和BigDecimal"></a>BigInteger和BigDecimal</h2><p>在Java中，整数有四种类型：byte、short、int、long</p><p>在底层占用的字节个数：byte1个字节、short2个字节、int4个字节、long8个字节</p><h3 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h3><p>BigInteger 理论上存储的数字是有限制的，但是实际中，没有内存可以存储它的上限，所以可以把它看作的无上限的</p><h4 id="BigInteger构造方法"><a href="#BigInteger构造方法" class="headerlink" title="BigInteger构造方法"></a>BigInteger构造方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public BigInteger(int num,Random rnd)</td><td>获取随机大整数，范围：[0~2的num次方-1]</td></tr><tr><td>public BigInteger(String val)</td><td>获取指定大整数（字符串只能写整数）</td></tr><tr><td>public BigInteger(String val,int radix)</td><td>获取指定进制的大整数（radix：进制）</td></tr></tbody></table><p>静态方法创建：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static BigInteger valueOf(long val)</td><td>静态方法获取BigInteger的对象，内部有优化</td></tr></tbody></table><ol><li>能表示范围比较小，只能在Long的取值范围之内</li><li>对内部常用数进行了优化（-16~16）</li></ol><h4 id="BigInteger常见方法"><a href="#BigInteger常见方法" class="headerlink" title="BigInteger常见方法"></a>BigInteger常见方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public BigInteger add(BigIntger val)</td><td>加法</td></tr><tr><td>public BigInteger subtract(BigInteger val)</td><td>减法</td></tr><tr><td>public BigInteger multiply(BigInteger val)</td><td>乘法</td></tr><tr><td>public BigInteger divide(BigInteger val)</td><td>除法，获取商</td></tr><tr><td>public BigInteger[] divideAndRemainder</td><td>除法，获取商和余数</td></tr><tr><td>public boolean equals(Object x)</td><td>比较是否相同</td></tr><tr><td>public BigInteger pow(int exponent)</td><td>次幂</td></tr><tr><td>public BigInteger max&#x2F;min(BigInteger val)</td><td>返回较大值&#x2F;较小值</td></tr><tr><td>public int intValue(BigInteger val)</td><td>转换为int类型整数，超出数据范围则报错</td></tr></tbody></table><h3 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h3><ul><li>用于小数的精确计算</li><li>用来表示很大的小数</li></ul><h4 id="BigDecimal构造方法"><a href="#BigDecimal构造方法" class="headerlink" title="BigDecimal构造方法"></a>BigDecimal构造方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public BigDecimal(double val)</td><td>获取指定小数（不建议使用，小数会不精确）</td></tr><tr><td>public BigDecimal(String val)</td><td>获取指定小数（字符串只能写小数）</td></tr></tbody></table><p>静态方法：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static BigDecimal valueOf(double val)</td><td>静态方法获取BigDecimal对象，也带有优化</td></tr></tbody></table><p>如果要表示的数字不大，没有超过double的取值范围，建议使用静态方法</p><p>如果要表示的数字比较大，超过了double的取值范围，建议使用<code>public BigDecimal(String val)</code></p><p>在静态方法中，如果传递的是0~10之间的整数，包含10，那么方法会返回已经创建好的对象，不会重新new一个BigDecimal对象</p><h4 id="BigDecimal常见方法"><a href="#BigDecimal常见方法" class="headerlink" title="BigDecimal常见方法"></a>BigDecimal常见方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public BigDecimal add(BigDecimal val)</td><td>加法</td></tr><tr><td>public BigDecimal subtract(BigDecimal val)</td><td>减法</td></tr><tr><td>public BigDecimal multiply(BigDecimal val)</td><td>乘法</td></tr><tr><td>public BigDecimal divide(BigDecimal val)</td><td>除法</td></tr><tr><td>public BigDecimal divide(BigDecimal val, 精确几位, 舍入模式)</td><td>除法</td></tr></tbody></table><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式可以校验字符串是否满足一定的规则，并用来校验数据格式的合法性</p><p>需求：假如现在要求校验一个QQ号码是否正确</p><p>规则：6位及20位之间，0不能在开头，必须全是数字</p><p>字符类（只匹配一个字符）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[abc] 只能是a,b,c</span><br><span class="line">[^abc] 除了a,b,c之外的任何字符</span><br><span class="line">[a-zA-Z] a到z A到Z，包括（范围）</span><br><span class="line">[a-d[m-p]] a到d，或m到p</span><br><span class="line">[a-z&amp;&amp;[def]] a-z到def的交集。即：d，e，f</span><br><span class="line">[a-z&amp;&amp;[^bc]] a-z和非bc的交集。即：[ad-z]</span><br><span class="line">[a-z&amp;&amp;[^m-p]] a到z和除了m到p的交集。即：[a-lq-z]</span><br></pre></td></tr></table></figure><p>预定义字符（只匹配一个字符）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">. 任意字符</span><br><span class="line">\d 一个数字：[0-9]</span><br><span class="line">\D 非数字：[^0-9]</span><br><span class="line">\s 一个空白字符：[\t\n\x0B\f\r]</span><br><span class="line">\S 非空字符：[^\s]</span><br><span class="line">\w 英文、数字、下划线：[a-zA-z_0-9]</span><br><span class="line">\W [^\w] 一个非单词字符</span><br></pre></td></tr></table></figure><p>数量词</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x?x，一次或0次</span><br><span class="line">x*x，零次或多次</span><br><span class="line">x+x，一次或多次</span><br><span class="line">x&#123;n&#125; x，正好n次</span><br><span class="line">x&#123;n,&#125; x,至少n次</span><br><span class="line">x&#123;n,m&#125; x,至少n但不超过m次</span><br></pre></td></tr></table></figure><h3 id="正则表达式的作用"><a href="#正则表达式的作用" class="headerlink" title="正则表达式的作用"></a>正则表达式的作用</h3><p>作用1：校验字符串是否满足规则</p><p>作用2：在一段文本中查找满足要求的内容（本地爬虫、网络爬虫）</p><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><p>Pattern：表示正则表达式</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">有如下文本，请按照要求爬取数据</span></span><br><span class="line"><span class="comment">Java自从95年问世以来，经历了很多版本，目前企业中用的最多的是 Java8 和 Java11，</span></span><br><span class="line"><span class="comment">因为这两个是长期支持版本，下一个长期支持版本是 Java17，相信在未来不久 Java17 也会逐渐登上历史舞台</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">要求：找出里面所有的 JavaXX</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Java自从95年问世以来，经历了很多版本，目前企业中用的最多的是Java8和Java11，&quot;</span> +</span><br><span class="line">        <span class="string">&quot;因为这两个是长期支持版本，下一个长期支持版本是Java17，相信在未来不久Java17 也会逐渐登上历史舞台&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pattern 表示正则表达式</span></span><br><span class="line"><span class="comment">// Matcher 文本匹配器，作用按照正则表达式的规则去读取字符串，从头开始读取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取正则表达式的对象</span></span><br><span class="line"><span class="comment">// Pattern p = Pattern.compile(&quot;Java\\d&#123;0,2&#125;&quot;);</span></span><br><span class="line"><span class="comment">// Matcher m = p.matcher(str);</span></span><br><span class="line"><span class="comment">// 代码解释：m要在str中查找符合p规则的字符小串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// boolean b = m.find();</span></span><br><span class="line"><span class="comment">// 拿着文本匹配器从头开始读取，寻找是否有满足规则的字串</span></span><br><span class="line"><span class="comment">// 如果没有，返回false，如果有返回true，在底层记录子串的 起始索引 和 结束索引+1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法底层会根据find方法记录的索引进行字符串的截取</span></span><br><span class="line"><span class="comment">// subString(起始索引, 结束索引); 包头不包尾，所以结束索引会+1</span></span><br><span class="line"><span class="comment">// String s1 = m.group();</span></span><br><span class="line"><span class="comment">// System.out.println(s1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二次在调用find的时候，会继续读取后面的内容</span></span><br><span class="line"><span class="comment">// 读取到第二个满足要求的子串，方法会继续返回true</span></span><br><span class="line"><span class="comment">// 并把第二个字串的起始索引和结束索引+1，进行记录</span></span><br><span class="line"><span class="comment">// b = m.find();</span></span><br><span class="line"><span class="comment">// String s2 = m.group();</span></span><br><span class="line"><span class="comment">// System.out.println(s2);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 规范写法：</span></span><br><span class="line"><span class="comment">// 1. 获取正则表达式的对象</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;Java\\d&#123;0,2&#125;&quot;</span>);</span><br><span class="line"><span class="comment">// 2. 获取文本匹配器的对象</span></span><br><span class="line"><span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 利用循环获取</span></span><br><span class="line"><span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> m.group();</span><br><span class="line">    System.out.println(res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="带条件的爬取数据"><a href="#带条件的爬取数据" class="headerlink" title="带条件的爬取数据"></a>带条件的爬取数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Java自从95年问世以来，经历了很多版本，目前企业中用的最多的是Java8和Java11，&quot;</span> +</span><br><span class="line">                <span class="string">&quot;因为这两个是长期支持版本，下一个长期支持版本是Java17，相信在未来不久Java17 也会逐渐登上历史舞台&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 不显示版本号,只要java</span></span><br><span class="line">        <span class="comment">// ? 理解为前面的数据 Java</span></span><br><span class="line">        <span class="comment">// = 表示在Java后面要跟随的数据</span></span><br><span class="line">        <span class="comment">// 但是在获取的时候，只获取前半部分</span></span><br><span class="line"><span class="comment">//        String regex = &quot;Java(?=8|11|17)&quot;;</span></span><br><span class="line"><span class="comment">//        Pattern p = Pattern.compile(regex);</span></span><br><span class="line"><span class="comment">//        Matcher m = p.matcher(str);</span></span><br><span class="line"><span class="comment">//        while (m.find()) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(m.group());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 显示版本号</span></span><br><span class="line"><span class="comment">//        String regex = &quot;Java(8|11|17)&quot;;</span></span><br><span class="line"><span class="comment">//        Pattern p = Pattern.compile(regex);</span></span><br><span class="line"><span class="comment">//        Matcher m = p.matcher(str);</span></span><br><span class="line"><span class="comment">//        while (m.find()) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(m.group());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 爬取版本号位 8,11,17 的Java</span></span><br><span class="line"><span class="comment">//        String regex = &quot;Java(8|11|17)&quot;;</span></span><br><span class="line"><span class="comment">//        Pattern p = Pattern.compile(regex);</span></span><br><span class="line"><span class="comment">//        Matcher m = p.matcher(str);</span></span><br><span class="line"><span class="comment">//        while (m.find()) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(m.group());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br></pre></td></tr></table></figure><h4 id="贪婪爬起和非贪婪爬取"><a href="#贪婪爬起和非贪婪爬取" class="headerlink" title="贪婪爬起和非贪婪爬取"></a>贪婪爬起和非贪婪爬取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Java自从95年问世以来，abbbbbbbbbbbaaaaaaaaaaaaa经历了很多版本，目前企业中用的最多的是Java8和Java11，&quot;</span> + <span class="string">&quot;因为这两个是长期支持版本，下一个长期支持版本是Java17，相信在未来不久Java17 也会逐渐登上历史舞台&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只写+和*表示贪婪匹配，</span></span><br><span class="line"><span class="comment">// +? 非贪婪匹配</span></span><br><span class="line"><span class="comment">// *? 非贪婪匹配</span></span><br><span class="line"><span class="comment">// Java中默认的是贪婪爬取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 按照ab+的方式爬取ab，b尽可能多获取</span></span><br><span class="line"><span class="comment">// String regex = &quot;ab+&quot;;</span></span><br><span class="line"><span class="comment">// Pattern p = Pattern.compile(regex);</span></span><br><span class="line"><span class="comment">// Matcher m = p.matcher(str);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// while (m.find()) &#123;</span></span><br><span class="line"><span class="comment">// System.out.println( m.group());</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 按照ab+的方式爬取ab，b尽可能少获取</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;ab+?&quot;</span>;</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">System.out.println( m.group());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正则表达式——字符串"><a href="#正则表达式——字符串" class="headerlink" title="正则表达式——字符串"></a>正则表达式——字符串</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public String[] matches(String regex)</td><td>判断字符串是否满足正则表达式规则</td></tr><tr><td>public String[] replaceAll(String regex,String newStr)</td><td>按照正则表达式的规则进行替换</td></tr><tr><td>public String[] split(String regex)</td><td>按照正则表达式的规则切割字符串</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;张三三qweasdzxc123李四四poilkjmnb098王五五&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> s.replaceAll(<span class="string">&quot;[\\w&amp;&amp;[^_]]+&quot;</span>,<span class="string">&quot;vs&quot;</span>);</span><br><span class="line">System.out.println(res);</span><br><span class="line"></span><br><span class="line">String[] arr = s.split(<span class="string">&quot;[\\w&amp;&amp;[^_]]+&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>分组就是一个小括号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String regex1 = &quot;\\w+@[\\w&amp;&amp;[^_]]&#123;2,6&#125;(\\.[a-zA-Z]&#123;2,3&#125;)&quot;</span><br></pre></td></tr></table></figure><p>每组是有组号的，也就是序号</p><p>规则1：从1开始，连续不间断</p><p>规则2：从左括号为基准，最左边的是第一组，其次为第二组，以此类推</p><h4 id="捕获分组"><a href="#捕获分组" class="headerlink" title="捕获分组"></a>捕获分组</h4><p>捕获分组就是把这一组的数据捕获出来，再用一次</p><p>正则表达式内部：<code>\\组号</code></p><p>正则表达式外部：<code>$组号</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断一个字符串的开始字符和结束字符是否一致</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;(.).+\\1&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;a123a&quot;</span>.matches(regex));</span><br><span class="line">System.out.println(<span class="string">&quot;a121a&quot;</span>.matches(regex));</span><br><span class="line">System.out.println(<span class="string">&quot;b121a&quot;</span>.matches(regex));</span><br><span class="line">System.out.println(<span class="string">&quot;a123b&quot;</span>.matches(regex));</span><br><span class="line">System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将重复内容替换为单个</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;我要学学编编编编程程程程程程&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> s.replaceAll(<span class="string">&quot;(.)\\1+&quot;</span>,<span class="string">&quot;$1&quot;</span>);</span><br><span class="line">System.out.println(res);</span><br></pre></td></tr></table></figure><h4 id="非捕获分组"><a href="#非捕获分组" class="headerlink" title="非捕获分组"></a>非捕获分组</h4><p>分组之后不需要再用本组数据，仅仅是把数据括起来</p><p>特点：不占用组号</p><table><thead><tr><th>符号</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td>(?:正则)</td><td>获取所有</td><td>Java(?:8|11|17)</td></tr><tr><td>(?&#x3D;正则)</td><td>获取前面部分</td><td>Java(?&#x3D;8|11|17)</td></tr><tr><td>(?!正则)</td><td>获取不是指定内容的前面部分</td><td>Java(?!8|11|17)</td></tr></tbody></table><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>全时间的时间，有一个统一的计算标准</p><p><code>格林尼治时间/格林威治时间（Greenwich Mean Time）简称GMT</code></p><p>计算核心：地球自转一天是24小时，太阳直射时为正午12点</p><p>缺点：误差过大</p><p>原子钟：利用铯原子的震动的频率计算出来的时间，作为世界标准时间（UTC）</p><p>中国标准时间：世界标准时间 + 8小时</p><p>时间换算单位：</p><ul><li>1秒 &#x3D; 1000毫秒</li><li>1毫秒 &#x3D; 1000微妙</li><li>1微妙 &#x3D; 1000纳秒</li></ul><h3 id="Date时间类"><a href="#Date时间类" class="headerlink" title="Date时间类"></a>Date时间类</h3><p>Date类是一个JDK写好的Javabean类，用来描述时间，精确到毫秒。</p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>public Date()</td><td>创建Date对象，表示当前时间</td></tr><tr><td>public Date(long time)</td><td>创建Date对象，表示指定时间</td></tr><tr><td>public void setTime(long time)</td><td>设置&#x2F;修改毫秒值</td></tr><tr><td>public long getTime()</td><td>获取时间对象的毫秒值</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">System.out.println(d1);</span><br><span class="line"></span><br><span class="line"><span class="type">Date</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">0L</span>);</span><br><span class="line">System.out.println(d2);</span><br><span class="line"></span><br><span class="line">d2.setTime(<span class="number">1000L</span>);</span><br><span class="line">System.out.println(d2);</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> d2.getTime();</span><br><span class="line">System.out.println(time);</span><br></pre></td></tr></table></figure><h3 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h3><p>作用：</p><ul><li>格式化：把时间变成喜欢的格式</li><li>解析：把字符串表示的时间变成Date对象</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public SimpleDateFormat()</td><td>构造一个SimpleDateFormat，使用默认格式</td></tr><tr><td>public SimpleDateFormat(String pattern)</td><td>构造一个SimpleDateFormat，使用指定格式</td></tr><tr><td>public final String format(Date date)</td><td>格式化（日期对象 -&gt; 字符串）</td></tr><tr><td>public Date parse(String source)</td><td>解析（字符串 -&gt; 日期对象）</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">y 年M 月 d 日</span><br><span class="line">H 时 m 分 s 秒</span><br><span class="line"></span><br><span class="line">2025-06-15 23:42:10</span><br><span class="line">yyyy-MM-dd HH:mm:ss</span><br><span class="line"></span><br><span class="line">2025年06月15日 23:42:10</span><br><span class="line">yyyy年MM月dd日 HH:mm:ss</span><br></pre></td></tr></table></figure><h3 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h3><ul><li>Calendar 代表了系统当前时间的日历对象，可以单独修改、获取时间中的年、月、日</li><li>细节：Calendar 是一个抽象类，不能直接创建对象</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static Calendar getInstance()</td><td>获取当前时间的日历对象</td></tr><tr><td>public final Date getTime()</td><td>获取日期对象</td></tr><tr><td>public final setTime(Date date)</td><td>给日历设置日历对象</td></tr><tr><td>public long getTimeInMillies()</td><td>拿到时间毫秒值</td></tr><tr><td>public void setTimeInMillies()</td><td>给日历设置时间毫秒值</td></tr><tr><td>public int get(int field)</td><td>取日历中的某个字段信息</td></tr><tr><td>public void set(int field,int value)</td><td>修改日历的某个字段信息</td></tr><tr><td>public void add(int field,int amount)</td><td>为某个字段增加&#x2F;减少指定的值</td></tr></tbody></table><h3 id="JDK8新增时间类"><a href="#JDK8新增时间类" class="headerlink" title="JDK8新增时间类"></a>JDK8新增时间类</h3><p>代码层面：</p><ul><li>JDK7：代码麻烦</li><li>JDK8：简单</li></ul><p>安全层面：</p><ul><li>JDK7：多线程环境下会导致数据安全的问题</li><li>JDK8：时间日期对象都是不可变的，解决了这个问题</li></ul><table><thead><tr><th>ZoneId</th><th>时区</th></tr></thead><tbody><tr><td>Instant</td><td>时间戳</td></tr><tr><td>ZoneDateTime</td><td>带时区的时间</td></tr><tr><td>DateTimeFormatter</td><td>用于时间的格式化和解析</td></tr><tr><td>LocalDate</td><td>年月日</td></tr><tr><td>LocalTime</td><td>时分秒</td></tr><tr><td>LocalDateTime</td><td>年月日时分秒</td></tr><tr><td>Duration</td><td>时间间隔（秒。纳秒）</td></tr><tr><td>Period</td><td>时间间隔（年月日）</td></tr><tr><td>ChronoUnit</td><td>时间间隔（所有单位）</td></tr></tbody></table><h2 id="包装类-1"><a href="#包装类-1" class="headerlink" title="包装类"></a>包装类</h2><p>包装类：基本数据类型对应的引用类型</p><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用构造方法获取Integer（JDK5以前的方式）</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用静态方法获取Integer（JDK5以前的方式）</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> Integer.valueOf(<span class="number">2</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> Integer.valueOf(<span class="string">&quot;525&quot;</span>,<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(i2);</span><br><span class="line">System.out.println(i3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这两种方式获取对象的区别</span></span><br><span class="line"><span class="comment">// 和之前学习到的BigInteger一样，内部进行优化，127~-128 提前创建对象，不会重复创建新的对象</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> Integer.valueOf(<span class="number">127</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i5</span> <span class="operator">=</span> Integer.valueOf(<span class="number">127</span>);</span><br><span class="line">System.out.println(i4 == i5);   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i6</span> <span class="operator">=</span> Integer.valueOf(<span class="number">128</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i7</span> <span class="operator">=</span> Integer.valueOf(<span class="number">128</span>);</span><br><span class="line">System.out.println(i6 == i7);   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为有new关键字，在Java中，每一次new都是创建了一个新的对象</span></span><br><span class="line"><span class="comment">// 所以下面的两个对象都是new出来的，地址值不一样</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">127</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i9</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">127</span>);</span><br><span class="line">System.out.println(i8 == i9);   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">128</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">128</span>);</span><br><span class="line">System.out.println(i10 == i11); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="自动装箱-自动拆箱"><a href="#自动装箱-自动拆箱" class="headerlink" title="自动装箱&#x2F;自动拆箱"></a>自动装箱&#x2F;自动拆箱</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在以前包装类的计算方式</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对 i1 与 i2 进行相加操作</span></span><br><span class="line"><span class="comment">// 1. 把对象进行拆箱，变成基本数据类型</span></span><br><span class="line"><span class="comment">// 2. 相加</span></span><br><span class="line"><span class="comment">// 3. 把得到的结果再次进行装箱（再变回包装类）</span></span><br><span class="line"><span class="comment">// int res = i1.intValue() + i2.intValue();</span></span><br><span class="line"><span class="comment">// Integer i3 = new Integer(res);</span></span><br><span class="line"><span class="comment">// System.out.println(i3);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在JDK5的时候提出了一个机制，自动装箱和自动拆箱</span></span><br><span class="line"><span class="comment">// 自动装箱：把基本数据类型会自动的变成其对应的包装类</span></span><br><span class="line"><span class="comment">// 自动拆箱：把包装类自动的变成其对象的基本数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动装箱动作</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i5</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动拆箱动作</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> i2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在JDK5以后，int和Integer可以看作是同一个东西，因为在内部可以自动转化</span></span><br></pre></td></tr></table></figure><h3 id="Integer成员方法"><a href="#Integer成员方法" class="headerlink" title="Integer成员方法"></a>Integer成员方法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static String toBinaryString(int i)</td><td>得到二进制</td></tr><tr><td>public static String toOctalString(int i)</td><td>得到八进制</td></tr><tr><td>public static String toHexString(int i)</td><td>得到十六进制</td></tr><tr><td>public static int parseInt(String s)</td><td>将字符串类型的整数转成int类型的整</td></tr></tbody></table><h1 id="集合进阶"><a href="#集合进阶" class="headerlink" title="集合进阶"></a>集合进阶</h1><h2 id="集合体系结构"><a href="#集合体系结构" class="headerlink" title="集合体系结构"></a>集合体系结构</h2><p>Collection：单列集合</p><p>单列集合：即一次只能添加一组数据</p><p>Map：双列集合</p><p>双列集合：即一次可以添加一对数据</p><pre class="mermaid">flowchart TB  Start["Collection"]  Start -->List  Start -->Set    List --> id1[(ArrayList)]  List --> id2[(LinkedList)]  List --> id3[(Vector)]    Set --> id4[(HashSet)]  Set --> id5[(TreeSet)]    id4[(HashSet)] --> id6[(LinkedHashSet)]    接口  id7[(实现类)]</pre><p>List系列集合：添加的元素是有序（存和取的顺序是一样的）、可重复、有索引</p><p>Set系列集合：添加的元素是无序、不重复、无索引</p><h2 id="单列集合Collection"><a href="#单列集合Collection" class="headerlink" title="单列集合Collection"></a>单列集合Collection</h2><p>Collection是单列集合的顶层接口，它的功能是全部单列集合都可以继承使用的</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public boolean add(E e)</td><td>把给定的对象添加到当前集合中</td></tr><tr><td>public void clear()</td><td>清空集合中所有的元素</td></tr><tr><td>public boolean remove(E e)</td><td>把给定的对象在当前集合中删除</td></tr><tr><td>public boolean contains(Object obj)</td><td>判断当前集合是否包含给定的对象</td></tr><tr><td>public boolean isEmpty()</td><td>判断当前集合是否为空</td></tr><tr><td>public int size()</td><td>返回集合中元素的个数&#x2F;集合的长度</td></tr></tbody></table><h3 id="Collection的遍历方式"><a href="#Collection的遍历方式" class="headerlink" title="Collection的遍历方式"></a>Collection的遍历方式</h3><ul><li>迭代器遍历</li><li>增强for遍历</li><li>Lambda表达式遍历</li></ul><h4 id="迭代器遍历"><a href="#迭代器遍历" class="headerlink" title="迭代器遍历"></a>迭代器遍历</h4><p>迭代器在Java中的类是Iterator，迭代器是集合专用的遍历方式</p><p>Collection集合</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>Iterator&lt;e&gt; iterator()</td><td>返回迭代器对象，默认指向当前集合的0索引</td></tr></tbody></table><p>Iterator中的常用方法</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>boolean hasNext()</td><td>判断当前位置是否有元素，有元素返回true，没有元素返回false</td></tr><tr><td>E next()</td><td>获取当前位置的元素，并将迭代器对象移向下一个位置</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;String&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">coll.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;eee&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;eee&quot;</span>);</span><br><span class="line"></span><br><span class="line">Iterator&lt;String&gt; it = coll.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">    System.out.println(it.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>细节注意点：</p><ol><li>当迭代器迭代完所有数据后，再强行调用 <code>next()</code> 方法，会报 <code>NoSuchElementExpection</code></li><li>迭代器遍历完毕，指针不会复位</li><li>循环中只能用一次 <code>next()</code> 方法</li><li>迭代器遍历时，不能用集合的方法进行增加或者删除</li></ol><h4 id="增强for遍历"><a href="#增强for遍历" class="headerlink" title="增强for遍历"></a>增强for遍历</h4><ul><li>增强for的底层就是迭代器，为了简化迭代器的代码书写的</li><li>它是JDK5之后出现的，其内部原理就是一个Iterator迭代器</li><li>所有的单列集合和数组才能用增强for进行遍历</li></ul><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (元素的数据类型 变量名:数组或者集合) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建集合并添加元素</span></span><br><span class="line">Collection&lt;String&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">coll.add(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;zhaoliu&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用增强for循环</span></span><br><span class="line"><span class="keyword">for</span> (String s : coll) &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>细节：</p><ul><li>修改增强for中的变量，不会改变集合中原本的数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String s : coll) &#123;</span><br><span class="line">s = <span class="string">&quot;qqq&quot;</span>; <span class="comment">// 并不会修改值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Lambda表达式遍历"><a href="#Lambda表达式遍历" class="headerlink" title="Lambda表达式遍历"></a>Lambda表达式遍历</h4><p>得益于JDK8开始的新技术Lambda表达式，提供了一种更简单、更直接的遍历集合的方式</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>default void forEach(Consumer&lt;? super T&gt; action)</td><td>结合lambda遍历集合</td></tr></tbody></table><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建集合并添加元素</span></span><br><span class="line">Collection&lt;String&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">coll.add(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;zhaoliu&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 利用匿名内部类的形式</span></span><br><span class="line"><span class="comment">// forEach底层原理：</span></span><br><span class="line"><span class="comment">// 也会自己遍历集合，依次得到每一个元素</span></span><br><span class="line"><span class="comment">// s依次表示集合中的每一个数据</span></span><br><span class="line">coll.forEach(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// s 依次表示集合中的每一个数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// lambda表达式</span></span><br><span class="line">coll.forEach(s -&gt; System.out.println(s));</span><br></pre></td></tr></table></figure><h4 id="选择哪种遍历方式"><a href="#选择哪种遍历方式" class="headerlink" title="选择哪种遍历方式"></a>选择哪种遍历方式</h4><ul><li>迭代器：在遍历的过程中需要删除元素，选择迭代器</li><li>仅仅遍历，可以使用增强for或lambda</li></ul><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>特点：</p><ul><li>有序：存和取的元素顺序一致</li><li>有索引：可以通过索引操作元素</li><li>可重复：存储的元素可以重复</li><li>List继承了Collection的所有方法</li><li>List因为有索引，所以多了很多索引操作的方法</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void add(int index,E element)</td><td>在此集合中的指定位置插入指定的元素</td></tr><tr><td>E remove(int index)</td><td>删除指定索引的元素，返回删除的元素</td></tr><tr><td>E set(int index,E element)</td><td>修改指定索引处的元素，返回被修改的元素</td></tr><tr><td>E get(int index)</td><td>返回指定索引处的元素</td></tr></tbody></table><h4 id="List遍历"><a href="#List遍历" class="headerlink" title="List遍历"></a>List遍历</h4><ul><li>迭代器遍历</li><li>列表迭代器遍历</li><li>增强for遍历</li><li>Lambda表达式遍历</li><li>普通for循环（因为List集合存在索引）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 迭代器</span></span><br><span class="line"><span class="comment">// Iterator&lt;String&gt; it = list.iterator();</span></span><br><span class="line"><span class="comment">// while (it.hasNext()) &#123;</span></span><br><span class="line"><span class="comment">//     System.out.println(it.next());</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 增强for</span></span><br><span class="line"><span class="comment">// for (String s : list) &#123;</span></span><br><span class="line"><span class="comment">//     System.out.println(s);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. lambda</span></span><br><span class="line"><span class="comment">// list.forEach(s -&gt; System.out.println(s));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 普通for循环</span></span><br><span class="line"><span class="comment">// for (int i = 0; i &lt; list.size(); i++) &#123;</span></span><br><span class="line"><span class="comment">//     System.out.println(list.get(i));</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 列表迭代器</span></span><br><span class="line"><span class="comment">// 获取一个列表迭代器的对象，里面的指针默认指向0索引</span></span><br><span class="line">ListIterator&lt;String&gt; it = list.listIterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">    <span class="comment">// 迭代器可以添加元素</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> it.next();</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;bbb&quot;</span>.equals(s)) &#123;</span><br><span class="line">        it.add(<span class="string">&quot;qqq&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br><span class="line"><span class="keyword">while</span> (it.hasPrevious()) &#123;</span><br><span class="line">    System.out.println(it.previous());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="选择遍历方式"><a href="#选择遍历方式" class="headerlink" title="选择遍历方式"></a>选择遍历方式</h5><p>迭代器遍历：在遍历过程中需要删除元素，使用迭代器</p><p>列表迭代器：在遍历的过程中需要添加元素，使用列表迭代器</p><p>增强for遍历：仅仅想遍历，使用增强for或Lambda遍历</p><p>Lambda遍历：仅仅想遍历，使用增强for或Lambda遍历</p><p>普通for遍历：想要操作索引，使用普通for遍历</p><h4 id="ArrayList集合底层原理"><a href="#ArrayList集合底层原理" class="headerlink" title="ArrayList集合底层原理"></a>ArrayList集合底层原理</h4><ol><li>ArrayLIst底层是数组结构</li><li>利用空参创建的集合，在底层创建一个<code>默认长度为0</code>的数组</li><li>添加第一个元素时，底层会创建一个新的长度为10的数组（数组名为elementData，变量size记录数组中元素的个数以及下一个元素存放的位置）</li><li>存满数组时，会扩容1.5倍</li><li>如果一次添加多个元素，1.5倍放不下，则新创建数组的长度以实际为准</li></ol><h4 id="LinkedList集合"><a href="#LinkedList集合" class="headerlink" title="LinkedList集合"></a>LinkedList集合</h4><ol><li>底层数据结构是双链表，查询慢，增删快，但是如果操作的是首尾元素，速度也是极快的</li><li>LinkedList本身多了很多直接操作首尾元素的特有API</li></ol><table><thead><tr><th>特有方法</th><th>说明</th></tr></thead><tbody><tr><td>public void addFirst(E e)</td><td>在该列表开头插入指定的元素</td></tr><tr><td>public void addLast(E e)</td><td>将指定的元素追加到此列表的末尾</td></tr><tr><td>public E getFirst()</td><td>返回此列表中的第一个元素</td></tr><tr><td>public E getLast()</td><td>返回此列表中的最后一个元素</td></tr><tr><td>public E removeFirst()</td><td>从此列表中删除并返回第一个元素</td></tr><tr><td>public E removeLast()</td><td>从此列表中删除并返回最后一个元素</td></tr></tbody></table><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>添加的元素是无序、不重复、无索引</p><ul><li>无序：存取顺序不一致</li><li>不重复：可以去除重复值</li><li>无索引：没有带索引的方法，所以不能使用普通for循环遍历，也不能通过索引来获取元素</li></ul><h4 id="Set集合的实现类"><a href="#Set集合的实现类" class="headerlink" title="Set集合的实现类"></a>Set集合的实现类</h4><ul><li>HashSet：无序、不重复、无索引</li><li>LinkedHashSet：有序、不重复、无索引</li><li>TreeSet：可排序、不重复、无索引</li></ul><p>Set接口中的方法基本上与Collection的API一致</p><h4 id="Set遍历方式"><a href="#Set遍历方式" class="headerlink" title="Set遍历方式"></a>Set遍历方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A13_SetDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建一个set对象</span></span><br><span class="line">        Set&lt;String&gt; s = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 添加元素</span></span><br><span class="line">        <span class="comment">// 如果添加的元素集合中不存在，返回值为true</span></span><br><span class="line">        <span class="comment">// 如果添加的元素集合中存在，返回值为false</span></span><br><span class="line">        s.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        s.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        s.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 迭代器遍历</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----迭代器----&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; it = s.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 增强for遍历</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----增强for----&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s1 : s) &#123;</span><br><span class="line">            System.out.println(s1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// lambda表达式</span></span><br><span class="line">        <span class="comment">// forEach遍历</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----forEach----&quot;</span>);</span><br><span class="line">        s.forEach(s1 -&gt; &#123;</span><br><span class="line">            System.out.println(s1);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><p>底层原理：</p><ul><li>HashSet集合底层采取哈希表存储数据</li><li>哈希表是一种对于增删改查数据性能都较好的结构</li></ul><p>哈希表组成：</p><ul><li>JDK8之前：数组+链表</li><li>JDK8开始：数组+链表+红黑树</li></ul><h5 id="哈希值"><a href="#哈希值" class="headerlink" title="哈希值"></a>哈希值</h5><ul><li>根据hashCode方法算出来的int类型的整数</li><li>该方法定义在Object类中，所有对象都可以调用，默认使用地址值进行计算</li><li>一般情况下，会重写hashCode方法，利用对象内部的属性值计算哈希值</li></ul><h5 id="对象的哈希值特点"><a href="#对象的哈希值特点" class="headerlink" title="对象的哈希值特点"></a>对象的哈希值特点</h5><ul><li>如果没有重写hashCode方法，不同对象计算出的哈希值是不同的</li><li>如果已经重写hashCode方法，不同的对象只要属性值相同，计算出的哈希值就是一样的</li><li>在小部分情况下，不同的属性值或者不同的地址值计算出来的哈希值也有可能一样（哈希碰撞）</li></ul><h5 id="JDK8前的底层原理"><a href="#JDK8前的底层原理" class="headerlink" title="JDK8前的底层原理"></a>JDK8前的底层原理</h5><ol><li>创建一个默认长度为16，默认加载因子为0.75的数组，数组名table</li><li>根据元素的哈希值跟数组的长度计算出应存入的位置</li></ol><p>公式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (数组长度 - <span class="number">1</span>) &amp; 哈希值;</span><br></pre></td></tr></table></figure><ol start="3"><li>判断当前位置是否为null，如果是null直接存入</li><li>如果位置不为null，表示有元素，则调用equals方法比较属性值</li><li>一样：不存     不一样：存入数组，<font color='red'>形成链表</font>（去重）</li></ol><p>JDK8以前：新元素存入数组，老元素挂在新元素下面</p><p>JDK8以后：新元素直接挂在老元素下面，当链表长度大于8且数组长度大于等于64，自动形成红黑树</p><h4 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h4><ul><li>有序、不重复、无索引</li><li>这里的有序指的是保证存储和取出的元素顺序一致</li><li>原理：底层数据结构依然是哈希表，只是每个元素又额外的多了一个双链表的机制记录存储的顺序</li></ul><h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h4><ul><li>不重复、无索引、<font color='red'>可排序</font></li><li>可排序：按照元素的默认规则（从小到大）排序</li><li>TreeSet集合底层是基于<font color='red'>红黑树</font>的数据结构实现排序的，增删改查性能都较好</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mySet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A16_TreeSetDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            需求：利用 TreeSet 存储整数并排序</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        TreeSet&lt;Integer&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        ts.add(<span class="number">1</span>);</span><br><span class="line">        ts.add(<span class="number">3</span>);</span><br><span class="line">        ts.add(<span class="number">5</span>);</span><br><span class="line">        ts.add(<span class="number">2</span>);</span><br><span class="line">        ts.add(<span class="number">4</span>);</span><br><span class="line">        ts.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(ts);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 迭代器遍历</span></span><br><span class="line">        System.out.println(<span class="string">&quot;迭代器遍历：&quot;</span>);</span><br><span class="line">        Iterator&lt;Integer&gt; it = ts.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 增强for遍历</span></span><br><span class="line">        System.out.println(<span class="string">&quot;增强for遍历：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer t : ts) &#123;</span><br><span class="line">            System.out.println(t);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// forEach遍历</span></span><br><span class="line">        System.out.println(<span class="string">&quot;forEach遍历：&quot;</span>);</span><br><span class="line">        ts.forEach(v -&gt; &#123;</span><br><span class="line">            System.out.println(v);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="排序规则"><a href="#排序规则" class="headerlink" title="排序规则"></a>排序规则</h5><ul><li>对于数值类型：Integer、Double，默认按照从小到大的顺序进行排序</li><li>对于字符类型：按照字符在ASCII码表中的数字升序进行排序</li><li>字符串：首先比较首位字符的ASCII码，若相同，则比较后一位</li></ul><h5 id="TreeSet的两种比较方式"><a href="#TreeSet的两种比较方式" class="headerlink" title="TreeSet的两种比较方式"></a>TreeSet的两种比较方式</h5><p>方式一：</p><p>默认排序&#x2F;自然排序：Javabean类实现Comparable接口指定比较规则</p><p>方式二：</p><p>比较器排序：创建TreeSet对象的时候，传递比较器Comparator指定规则</p><p>使用原则：</p><p>默认使用第一种，如果第一种不能满足当前需求，就使用它第二种</p><h2 id="双列集合Map"><a href="#双列集合Map" class="headerlink" title="双列集合Map"></a>双列集合Map</h2><p>双列集合的特点</p><ul><li>双列集合一次需要存一对数据，分别为键和值</li><li>键不能重复，值可以重复</li><li>键和值是一一对应的，每一个键只能找到自己对应的值</li><li>键+值这个整体，称之为“键值对”或者“键值对对象”，在Java中叫做“Entry对象”</li></ul><pre class="mermaid">flowchart TD    Map[Map]    Map --> HashMap[HashMap]    Map --> Hashtable[Hashtable]    Hashtable --> Properties[Properties]    HashMap --> LinkedHashMap[LinkedHashMap]    Map --> TreeMap[TreeMap]</pre><h3 id="Map的常见API"><a href="#Map的常见API" class="headerlink" title="Map的常见API"></a>Map的常见API</h3><p>Map是双列集合的顶层接口，它的功能是全部双列集合都可以继承使用的</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>V put(K key,V value)</td><td>添加元素</td></tr><tr><td>V remove(Object key)</td><td>根据键删除键值对元素</td></tr><tr><td>void clear()</td><td>移除所有的键值对元素</td></tr><tr><td>boolean containsKey(Object key)</td><td>判断集合是否包含指定的键</td></tr><tr><td>boolean containsValue(Object Value)</td><td>判断集合是否包含指定的值</td></tr><tr><td>boolean isEmpty()</td><td>判断集合是否为空</td></tr><tr><td>int size()</td><td>集合的长度，也就是集合中键值对的个数</td></tr></tbody></table><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A01_MapDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建Map集合的对象</span></span><br><span class="line">        Map&lt;String,String&gt; m = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 添加元素</span></span><br><span class="line">        <span class="comment">// 添加数据时，键不存在，则会把键值对添加到Map中，返回值为null</span></span><br><span class="line">        <span class="comment">// 添加数据时，键存在，则会覆盖原来的键值对，返回值为被覆盖的值</span></span><br><span class="line">        m.put(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;13岁&quot;</span>);</span><br><span class="line">        m.put(<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;14岁&quot;</span>);</span><br><span class="line">        m.put(<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;13岁&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">val</span> <span class="operator">=</span> m.put(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;14岁&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(val);    <span class="comment">// 13岁</span></span><br><span class="line">        System.out.println(m);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 删除元素</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> m.remove(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(res);    <span class="comment">// 14岁</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 清空集合</span></span><br><span class="line">        <span class="comment">// m.clear();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 判断包含内容</span></span><br><span class="line">        System.out.println(m);</span><br><span class="line">        <span class="keyword">if</span> (m.containsKey(<span class="string">&quot;张三&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;有一个叫张三的人&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m.containsKey(<span class="string">&quot;李四&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;有一个叫李四的人&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m.containsValue(<span class="string">&quot;14岁&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;有一个14岁的人&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 判断集合是否为空</span></span><br><span class="line">        <span class="comment">// m.clear();</span></span><br><span class="line">        <span class="keyword">if</span> (m.isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;集合为空&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;集合不为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7. 查看集合的大小</span></span><br><span class="line">        System.out.println(<span class="string">&quot;集合中元素的个数为：&quot;</span> + m.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Map遍历"><a href="#Map遍历" class="headerlink" title="Map遍历"></a>Map遍历</h3><h4 id="键找值"><a href="#键找值" class="headerlink" title="键找值"></a>键找值</h4><ol><li>利用 <code>keySet()</code>方法，获取集合中的所有值，返回值为一个单列集合</li><li>遍历单列集合，得到每一个键</li><li>在遍历体中，使用<code>get(Object key)</code>方法获取键对应的值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A02_MapDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历Map集合</span></span><br><span class="line">        Map&lt;String, String&gt; hs = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hs.put(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;18&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;13&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;王五&quot;</span>, <span class="string">&quot;15&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;赵六&quot;</span>, <span class="string">&quot;20&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;路人甲&quot;</span>, <span class="string">&quot;17&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;路人乙&quot;</span>, <span class="string">&quot;16&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;路人丙&quot;</span>, <span class="string">&quot;21&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;路人丁&quot;</span>, <span class="string">&quot;18&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 通过键找值</span></span><br><span class="line">        <span class="comment">// 1.1 获取所有的键，把这些键放到一个单列集合中</span></span><br><span class="line">        Set&lt;String&gt; keys = hs.keySet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.2 遍历单列集合，得到每一个键</span></span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            <span class="comment">// 1.3 利用键获取对应的值</span></span><br><span class="line">            System.out.println(key + <span class="string">&quot;=&quot;</span> + hs.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="键值对"><a href="#键值对" class="headerlink" title="键值对"></a>键值对</h4><ol><li>通过<code>entrySet()</code>方法，获取所有的键值对对象，方法会返回一个Set集合,Set集合中存放的是键值对对象</li><li>遍历entries集合，获取每一个键值对对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A03_MapDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历Map集合</span></span><br><span class="line">        Map&lt;String, String&gt; hs = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hs.put(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;18&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;13&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;王五&quot;</span>, <span class="string">&quot;15&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;赵六&quot;</span>, <span class="string">&quot;20&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;路人甲&quot;</span>, <span class="string">&quot;17&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;路人乙&quot;</span>, <span class="string">&quot;16&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;路人丙&quot;</span>, <span class="string">&quot;21&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;路人丁&quot;</span>, <span class="string">&quot;18&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 通过键值对对象进行遍历</span></span><br><span class="line">        <span class="comment">// 1.1 通过entrySet()方法，获取所有的键值对对象，方法会返回一个Set集合,Set集合中存放的是键值对对象</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = hs.entrySet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.2 遍历entries集合，获取每一个键值对对象</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entries) &#123;</span><br><span class="line">            <span class="comment">// System.out.println(entry);   // 直接打印</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>default void forEach(BiConsumer&lt;? super K,? super V&gt; action)</td><td>结合lambda遍历Map集合</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.function.BiConsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A04_MapDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历Map集合</span></span><br><span class="line">        Map&lt;String, String&gt; hs = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hs.put(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;18&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;13&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;王五&quot;</span>, <span class="string">&quot;15&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;赵六&quot;</span>, <span class="string">&quot;20&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;路人甲&quot;</span>, <span class="string">&quot;17&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;路人乙&quot;</span>, <span class="string">&quot;16&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;路人丙&quot;</span>, <span class="string">&quot;21&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;路人丁&quot;</span>, <span class="string">&quot;18&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 利用lambda遍历</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * hs.forEach(new BiConsumer&lt;String, String&gt;() &#123;</span></span><br><span class="line"><span class="comment">        *     @Override</span></span><br><span class="line"><span class="comment">        *     public void accept(String key, String value) &#123;</span></span><br><span class="line"><span class="comment">        *         System.out.println(key + &quot;=&quot; + value);</span></span><br><span class="line"><span class="comment">        *     &#125;</span></span><br><span class="line"><span class="comment">        * &#125;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        hs.forEach((key,value) -&gt; &#123;</span><br><span class="line">            System.out.println(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>特点：</p><ol><li>HashMap是Map里面的一个实现类</li><li>没有额外需要学习的特有方法，直接使用Map里面的方法</li><li>特点都是由键决定的：无序、不重复、无索引</li><li>HashMap跟HashSet底层原理是一摸一样的，都是哈希表结构</li></ol><p>细节：</p><ol><li>HashMap底层是哈希表结构的</li><li>依赖hashCode方法和equals方法保证键的唯一</li><li>如果键存储的是自定义对象，需要重写hashCode和equals方法。</li><li>如果值存储的是自定义对象，不需要重写hashCode和equals方法</li></ol><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><ul><li>由键决定：有序、不重复、无索引</li><li>这里的有序指的是保证存储和取出的元素顺序一致</li><li>原理：底层结构依然是哈希表，只是每个键值对元素又额外的多了一个双链表的机制记录存储顺序</li></ul><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><ul><li>TreeMap跟TreeSet底层原理一样，都是红黑树结构</li><li>由键决定特性：不重复、无索引、可排序</li><li>可排序：对键进行排序</li><li>注意：默认按照键的从小到大进行排序，也可以自己规定键的排序</li></ul><h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><ul><li>java.util.Collections：是集合工具类</li><li>作用：Collections不是集合，而是集合的工具类</li></ul><h3 id="常用API-1"><a href="#常用API-1" class="headerlink" title="常用API"></a>常用API</h3><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public static <T> boolean addAll(Collection<T> c,T…elements)</td><td>批量添加元素</td></tr><tr><td>public static void shuffle(List&lt;?&gt; list)</td><td>打乱List集合元素的顺序</td></tr><tr><td>public static <T> void sort(List<T> list)</td><td>排序</td></tr><tr><td>public static <T> void sort(List<T> list,Comparator<T> c)</td><td>根据指定的规则进行排序</td></tr><tr><td>public static <T> int binarySearch(List<T> list,T key)</td><td>以二分查找法查找元素</td></tr><tr><td>public static <T> copy(List<T> dest,List<T> src)</td><td>拷贝集合中的元素</td></tr><tr><td>public static void fill(List<T> list,T obj)</td><td>使用指定的元素填充集合</td></tr><tr><td>public static <T> max&#x2F;min(Collection<T> coll)</td><td>根据默认的自然排序获取最大&#x2F;最小值</td></tr><tr><td>public static <T> void swap(List&lt;?&gt; list,int i,int j)</td><td>交换集合中指定位置的元素</td></tr></tbody></table><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>泛型：是JDK5中引入的特性，可以在编译阶段约束操作的数据类型，并进行检查</p><p>泛型的格式：&lt;数据类型&gt;</p><p>注意：泛型只能支持引用数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A07_GenericsDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 当集合没有指定数据类型时，默认所有的元素都是Object</span></span><br><span class="line">        <span class="comment">// 此时可以往集合添加任意的数据类型</span></span><br><span class="line">        <span class="comment">// 带来一个坏处：我们在获取数据的时候，无法使用他的特有行为</span></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">18</span>,<span class="string">&quot;张三&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型带来的好处：</p><ul><li>同一数据类型</li><li>把运行时期的问题提前到了编译期间，避免了强制类型转换可能出现的问题，因为在编译阶段就能确定下来</li></ul><p>扩展知识点：Java中的泛型是伪泛型</p><p>解释：编写Java文件时（*.java），泛型是负责约束数据类型的，但在编译为机器码后（*.class），会去除泛型，将数据类型变为Object。这一过程称为泛型擦除</p><p>泛型的细节：</p><ul><li>泛型中不能写基本数据类型</li><li>指定泛型的具体类型后，传递数据时，可以传入该类类型或者子类类型</li><li>如果不写泛型，类型默认为Object</li></ul><p>泛型可以在很多地方进行定义：</p><ul><li>类后面（ArraryList&lt;数据类型&gt;）：泛型类</li><li>方法上面：泛型方法</li><li>接口后面：泛型接口</li></ul><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><p>使用场景：当一个类中，某个变量的数据类型不确定时，就可以定义带有泛型的类</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 class 类名&lt;类型&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处的E可以理解为变量，但是不是用来记录数据的，而是记录数据的类型，可以写成：T、E、K、V等</p><p>具体代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public class A08_GenericsDemo2 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        MyArrayList&lt;Integer&gt; list = new MyArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(111);</span><br><span class="line">        list.add(222);</span><br><span class="line">        list.add(333);</span><br><span class="line"></span><br><span class="line">        System.out.println(list.get(0));</span><br><span class="line">        System.out.println(list.get(1));</span><br><span class="line">        System.out.println(list.get(2));</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;-------------&quot;);</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MyArrayList&lt;E&gt; &#123;</span><br><span class="line">    Object[] obj = new Object[10];</span><br><span class="line">    int size;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    E : 表示不确定的类型</span><br><span class="line">    e : 表示形参名，变量名</span><br><span class="line">    */</span><br><span class="line">    public boolean add(E e) &#123;</span><br><span class="line">        obj[size] = e;</span><br><span class="line">        size++;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public E get(int index) &#123;</span><br><span class="line">        return (E)obj[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return Arrays.toString(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><p>方法中形参类型不确定时：</p><p>方案一：使用类名后面定义的泛型（所有的方法都可以使用）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyArrayList</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        obj[size] = e;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方案二：在方法申明上定义自己的泛型（只能在本方法中使用）</p><pre><code>public &lt;E&gt; boolean add(E e) &#123;    obj[size] = e;    size++;    return true;&#125;</code></pre><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 &lt;类型&gt; 返回值类型 方法名(类型 变量名) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 interface 接口名&lt;类型&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型接口的两种使用方式：</p><ol><li>实现类给出具体的类型</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ListIterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A09_GenericsDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyArrayList2</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyArrayList2</span>();</span><br><span class="line">        list.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        <span class="comment">// list.add(123); // 报错，因为添加的是整数类型，而该对象只能添加字符串类型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyArrayList2</span> <span class="keyword">implements</span> <span class="title class_">List</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;String&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends String&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(<span class="type">int</span> index, Collection&lt;? extends String&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, String element)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, String element)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ListIterator&lt;String&gt; <span class="title function_">listIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ListIterator&lt;String&gt; <span class="title function_">listIterator</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">subList</span><span class="params">(<span class="type">int</span> fromIndex, <span class="type">int</span> toIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>实现类延续泛型，创建实现类对象时再确定类型</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ListIterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A10_GenericsDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        MyArrayList3&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">MyArrayList3</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        MyArrayList&lt;String&gt; slist = <span class="keyword">new</span> <span class="title class_">MyArrayList</span>&lt;&gt;();</span><br><span class="line">        slist.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyArrayList3</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(<span class="type">int</span> index, Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title function_">listIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title function_">listIterator</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;E&gt; <span class="title function_">subList</span><span class="params">(<span class="type">int</span> fromIndex, <span class="type">int</span> toIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型的继承和通配符"><a href="#泛型的继承和通配符" class="headerlink" title="泛型的继承和通配符"></a>泛型的继承和通配符</h3><ul><li>泛型不具备继承性，但是数据具备继承性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A11_GenericsDemo5</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 泛型不具备继承性，但是数据具备继承性</span></span><br><span class="line">        ArrayList&lt;Fu&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Zi&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// method(list1); // 集合的数据类型为Fu，所以调用method方法时，和形参的数据类型匹配，不会报错</span></span><br><span class="line">        <span class="comment">// method(list2); // 集合的数据类型为Zi，所以调用method方法时，和形参的数据类型不匹配，会报错</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据可以具备继承性</span></span><br><span class="line">        list1.add(<span class="keyword">new</span> <span class="title class_">Fu</span>());</span><br><span class="line">        list1.add(<span class="keyword">new</span> <span class="title class_">Zi</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(ArrayList&lt;Fu&gt; list)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p>如果将method方法改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(ArrayList&lt;E&gt; list)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会有一个弊端，就是所有的数据类型都可以接受</p><p>但本方法虽然不确定类型，但只希望传递Fu、Zi</p><p>可以使用泛型的<code>通配符</code></p><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><p>泛型的通配符有两种：</p><ul><li>? extends E</li><li>? super E</li></ul><p>第一个表示可以传递E或者E所有的子类类型</p><p>第二个表示可以传递E或者E所有的父类类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A12_GenericsDemo6</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 泛型不具备继承性，但是数据具备继承性</span></span><br><span class="line">        ArrayList&lt;Fu&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Zi&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        method(list1);</span><br><span class="line">        method(list2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(ArrayList&lt;? extends Fu&gt; list)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span>&#123;&#125;;</span><br></pre></td></tr></table></figure><h1 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h1><p>方法形参的个数是可以改变的。</p><p>注意点：</p><ol><li>在方法的形参中最多只能写一个可变参数</li><li>在方法中，如果除了可变参数以外，还有其他的形参，那么可变参数要写在最后</li></ol><p>格式：形参类型…形参名</p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>...args</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArgsDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个方法，可以计算两个数的和</span></span><br><span class="line">        <span class="comment">// 创建一个方法，可以计算三个数的和</span></span><br><span class="line">        <span class="comment">// 创建一个方法，可以计算四个数的和</span></span><br><span class="line">        <span class="comment">// 创建一个方法，可以计算n个数的和</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一种：</span></span><br><span class="line">        <span class="comment">// 此时如果要计算n个数的和，就需要有n个参数的方法</span></span><br><span class="line">        System.out.println(getSum(<span class="number">10</span>,<span class="number">20</span>));</span><br><span class="line">        System.out.println(getSum(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>));</span><br><span class="line">        System.out.println(getSum(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c,<span class="type">int</span> d)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c + d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArgsDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个方法，可以计算两个数的和</span></span><br><span class="line">        <span class="comment">// 创建一个方法，可以计算三个数的和</span></span><br><span class="line">        <span class="comment">// 创建一个方法，可以计算四个数的和</span></span><br><span class="line">        <span class="comment">// 创建一个方法，可以计算n个数的和</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二种：</span></span><br><span class="line">        <span class="comment">// 虽然这种方法可以计算n个数的和，但是使用起来相对复杂</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> getSum(arr);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            sum += arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArgsDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个方法，可以计算两个数的和</span></span><br><span class="line">        <span class="comment">// 创建一个方法，可以计算三个数的和</span></span><br><span class="line">        <span class="comment">// 创建一个方法，可以计算四个数的和</span></span><br><span class="line">        <span class="comment">// 创建一个方法，可以计算n个数的和</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从JDK5开始，有了可变参数</span></span><br><span class="line">        <span class="comment">// 可变参数：方法形参的个数是个发生变化的</span></span><br><span class="line">        <span class="comment">// 格式：属性类型...形参名</span></span><br><span class="line">        <span class="comment">// int...args</span></span><br><span class="line"></span><br><span class="line">        System.out.println(getSum(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 底层：</span></span><br><span class="line">    <span class="comment">// 可变参数底层就是一个数组</span></span><br><span class="line">    <span class="comment">// 只不过不需要使用者自己创建</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span>...args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            sum += args[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用场景：</p><ol><li>如果我们在定义类、方法、接口的时候，如果类型不确定，就可以定义泛型类、泛型方法、泛型接口</li><li>如果类型不确定，但是能知道以后只能传递某个继承体系中的，就可以用泛型的通配符</li></ol><h1 id="不可变集合"><a href="#不可变集合" class="headerlink" title="不可变集合"></a>不可变集合</h1><p>不可变集合：不可以被修改的集合（长度、内容）</p><ul><li>如果某个数据不能被修改，把它防御性的拷贝到不可变集合中是个很好的实践</li><li>当集合对象被不可信的库调用时，不可变形式是安全的</li></ul><p>简单理解：</p><p>不想让别人修改集合中的内容</p><h2 id="书写格式-1"><a href="#书写格式-1" class="headerlink" title="书写格式"></a>书写格式</h2><p>在List、Set、Map接口中，都存在静态的of方法，可以获取一个不可变的集合</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>static <E> list<E> of(E…elements)</td><td>创建一个具有指定元素的List集合对象</td></tr><tr><td>static <E> Set<E> of(E…elements)</td><td>创建一个具有指定元素的Set集合对象</td></tr><tr><td>static <E> Map<E> of(E…elements)</td><td>创建一个具有指定元素的Map集合对象</td></tr></tbody></table><p>注意1：这个集合不能添加、不能删除、不能修改</p><p>注意2：<code>Map.of()</code>方法内参数最多为20个（10个键值对），如果要添加大于10个键值对的参数，先创建map可变集合，再用<code>Map.copyOf()</code>将可变集合复制给不可变集合</p><h1 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h1><h2 id="Stream流的作用"><a href="#Stream流的作用" class="headerlink" title="Stream流的作用"></a>Stream流的作用</h2><p>结合了Lambda表达式，简化集合、数组的操作</p><h2 id="Stream流的使用步骤"><a href="#Stream流的使用步骤" class="headerlink" title="Stream流的使用步骤"></a>Stream流的使用步骤</h2><ol><li>先得到一条Stream流（流水线），并把数据放上去</li><li>利用Stream流中的API进行各种操作</li></ol><table><thead><tr><th>获取方式</th><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>单列集合</td><td>default Stream<E> stream()</td><td>Collection中的默认方法</td></tr><tr><td>双列集合</td><td>无</td><td>无法直接使用stream流</td></tr><tr><td>数组</td><td>public static<T> Stream<T> stream(T[] array)</td><td>Arrays工具类中的静态方法</td></tr><tr><td>一堆零散数据</td><td>public static<T> Stream<T> of(T…values)</td><td>Stream接口中的静态方法</td></tr></tbody></table><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 单列集合获取stream流</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>);</span><br><span class="line">        list.stream().forEach(s -&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 双列集合</span></span><br><span class="line">        HashMap&lt;String,Integer&gt; hm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hm.put(<span class="string">&quot;aaa&quot;</span>,<span class="number">111</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;bbb&quot;</span>,<span class="number">222</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;ccc&quot;</span>,<span class="number">333</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;ddd&quot;</span>,<span class="number">444</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一种： ketSet方法获取stream流</span></span><br><span class="line">        hm.keySet().stream().forEach(s -&gt; System.out.println(s + <span class="string">&quot;=&quot;</span> + hm.get(s)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二种：entrySet方法获取stream流</span></span><br><span class="line">        hm.entrySet().stream().forEach(s-&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 数组获取Stream流</span></span><br><span class="line">        <span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        String[] arr2 = &#123;<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;bcd&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">        Arrays.stream(arr1).forEach(s -&gt; System.out.println(s));</span><br><span class="line">        Arrays.stream(arr2).forEach(s -&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 零散数据</span></span><br><span class="line">        Stream.of(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>).forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Stream流的中间方法"><a href="#Stream流的中间方法" class="headerlink" title="Stream流的中间方法"></a>Stream流的中间方法</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Stream<T> filter(Predicate&lt;? superT&gt; predicate)</td><td>过滤</td></tr><tr><td>Stream<T> limit(long maxSize)</td><td>获取前几个元素</td></tr><tr><td>Stream<T> skip(long n)</td><td>跳过前几个元素</td></tr><tr><td>Stream<T> distinct()</td><td>元素去重，依赖（hashCode和equals方法）</td></tr><tr><td>static <T> Stream<T> concat(Stream a,Stream b)</td><td>合并a和b两个流为一个流</td></tr><tr><td>Stream<R> map(Function&lt;T,R&gt; mapper)</td><td>转换流中的数据类型</td></tr></tbody></table><p>注意1：中间方法，返回新的Stream流，原来的Stream流只能使用一次，建议使用链式编程</p><p>注意2：修改Stream流中的数据，不会影响原来集合或者数组中的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list1,<span class="string">&quot;bob-15&quot;</span>,<span class="string">&quot;alan-20&quot;</span>,<span class="string">&quot;john-10&quot;</span>,<span class="string">&quot;bob-15&quot;</span>,<span class="string">&quot;bob-15&quot;</span>,<span class="string">&quot;alan-20&quot;</span>);</span><br><span class="line">        Collections.addAll(list2,<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;ccc&quot;</span>,<span class="string">&quot;ddd&quot;</span>,<span class="string">&quot;eee&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// distinct 去重</span></span><br><span class="line">        <span class="comment">// list1.stream().distinct().forEach(s -&gt; System.out.println(s));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// concat 合并流</span></span><br><span class="line">        <span class="comment">// Stream.concat(list1.stream(),list2.stream()).forEach(s -&gt; System.out.println(s));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// map 转换流中的数据类型</span></span><br><span class="line">        <span class="comment">// s 表示转换后的数据</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        list1.stream().map(new Function&lt;String, Integer&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public Integer apply(String s) &#123;</span></span><br><span class="line"><span class="comment">                // 获取字符串中的数字</span></span><br><span class="line"><span class="comment">                String[] arr = s.split(&quot;-&quot;);</span></span><br><span class="line"><span class="comment">                String ageString = arr[1];</span></span><br><span class="line"><span class="comment">                int age = Integer.parseInt(ageString);</span></span><br><span class="line"><span class="comment">                return age;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;).forEach(s -&gt; System.out.println(s));</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line"></span><br><span class="line">        list1.stream().map(s -&gt; Integer.parseInt(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>])).forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Stream流的终结方法"><a href="#Stream流的终结方法" class="headerlink" title="Stream流的终结方法"></a>Stream流的终结方法</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>void forEach(Consumer action)</td><td>遍历</td></tr><tr><td>long count()</td><td>统计</td></tr><tr><td>toArray()</td><td>收集流中的数据，放到数组中</td></tr><tr><td>collect(Collector collector)</td><td>收集流中的数据，放到集合中</td></tr></tbody></table><p>前三个方法使用案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        Stream.of(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;7&quot;</span>).forEach(s -&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 统计</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> Stream.of(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>).count();</span><br><span class="line">        System.out.println(<span class="string">&quot;count:&quot;</span> + count);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// toArray：创造一个指定类型的数组</span></span><br><span class="line">        <span class="comment">// 第一种使用方法：</span></span><br><span class="line">        Object[] objects = Stream.of(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>).toArray();</span><br><span class="line">        System.out.println(Arrays.toString(objects));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二种使用方法：</span></span><br><span class="line">        String[] str = Stream.of(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>).toArray(<span class="keyword">new</span> <span class="title class_">IntFunction</span>&lt;String[]&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String[] apply(<span class="type">int</span> value) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[value];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        System.out.println(Arrays.toString(str));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 第三种使用方法：</span></span><br><span class="line">        String[] strings = Stream.of(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>).toArray(value -&gt; <span class="keyword">new</span> <span class="title class_">String</span>[value]);</span><br><span class="line">        System.out.println(Arrays.toString(strings));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>collect案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// collect：收集流中的数据，放到集合中（List、Set、Map）</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="string">&quot;张三-男-15&quot;</span>,<span class="string">&quot;李四-男-14&quot;</span>,<span class="string">&quot;王五-男-16&quot;</span>,<span class="string">&quot;王若男-女-14&quot;</span>,<span class="string">&quot;赵丽-女-15&quot;</span>,<span class="string">&quot;张强-男-14&quot;</span>,<span class="string">&quot;刘莉莉-女-13&quot;</span>,<span class="string">&quot;陈念-男-15&quot;</span>,<span class="string">&quot;龚月月-女-14&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 收集到List集合当中</span></span><br><span class="line">        <span class="comment">// 需求：</span></span><br><span class="line">        <span class="comment">// 把所有的男性收集起来</span></span><br><span class="line">        List&lt;String&gt; newlist = list.stream().filter(s -&gt; <span class="string">&quot;男&quot;</span>.equals(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>])).collect(Collectors.toList());</span><br><span class="line">        System.out.println(newlist);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 收集到Set集合当中</span></span><br><span class="line">        <span class="comment">// 需求：</span></span><br><span class="line">        <span class="comment">// 把所有的男性收集起来</span></span><br><span class="line">        Set&lt;String&gt; newset = list.stream().filter(s -&gt; <span class="string">&quot;男&quot;</span>.equals(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>])).collect(Collectors.toSet());</span><br><span class="line">        System.out.println(newset);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 收集Map集合当中</span></span><br><span class="line">        <span class="comment">// 需求：</span></span><br><span class="line">        <span class="comment">// 键：名字，值：年龄</span></span><br><span class="line">        <span class="comment">// toMap方法中有两个参数，都是方法接口</span></span><br><span class="line">        <span class="comment">// 第一个参数是键的值，方法中泛型的第一个类型是流里的数据类型，第二个类型是Map集合键的数据类型</span></span><br><span class="line">        <span class="comment">// 第二个参数是值的值，用法和第一个一样</span></span><br><span class="line">        list.stream().filter(s -&gt; <span class="string">&quot;男&quot;</span>.equals(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>])).collect(Collectors.toMap(s -&gt; s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">0</span>],s -&gt; s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">2</span>])).entrySet().stream().forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方法引用（略看一遍以后再说）"><a href="#方法引用（略看一遍以后再说）" class="headerlink" title="方法引用（略看一遍以后再说）"></a>方法引用（略看一遍以后再说）</h1><p>方法：就是以前学习的方法</p><p>引用：把已经有的方法拿过来用，当作函数式接口中抽象方法的方法体</p><p>方法引用：把已经有的方法拿过来用，当作函数式接口中抽象方法的方法体</p><p>引用符号：<code>::</code></p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arrays,sort(arr,<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1,Integer o2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> o1 - o2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以变成如下形式：</p><p>假设有一个写好的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subtraction</span><span class="params">(<span class="type">int</span> n1,<span class="type">int</span> n2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 - n2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(arr,FunctionDemo::subtraction);</span><br><span class="line"><span class="comment">// FunctionDemo::subtraction：表示在FunctionDemo中有一个方法叫subtraction</span></span><br></pre></td></tr></table></figure><p>注意点：</p><ol><li>引用出必须是函数式接口</li><li>被引用的方法必须已经存在</li><li>被引用的方法的形参和返回值需要跟抽象方法保持一致</li><li>被引用的方法需要满足当前的需求</li></ol><h2 id="方法引用的分类"><a href="#方法引用的分类" class="headerlink" title="方法引用的分类"></a>方法引用的分类</h2><ol><li>引用静态方法</li><li>引用成员方法<ul><li>引用其他类的成员方法</li><li>引用本类的成员方法</li><li>引用父类的成员方法</li></ul></li><li>引用构造方法</li></ol><h3 id="引用静态方法"><a href="#引用静态方法" class="headerlink" title="引用静态方法"></a>引用静态方法</h3><p>格式：<code>类名::静态方法</code></p><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer::parseInt</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FunctionDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 集合中有以下数字，要求把它们都变成int类型</span></span><br><span class="line">        <span class="comment">// &quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建集合</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*list.stream().map(new Function&lt;String, Integer&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public Integer apply(String s) &#123;</span></span><br><span class="line"><span class="comment">                int num = Integer.parseInt(s);</span></span><br><span class="line"><span class="comment">                return num;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;).forEach(s -&gt; System.out.println(s));*/</span></span><br><span class="line"></span><br><span class="line">        list.stream().map(Integer::parseInt).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用成员方法"><a href="#引用成员方法" class="headerlink" title="引用成员方法"></a>引用成员方法</h3><p>格式：<code>对象::成员方法</code></p><ol><li>其他类：<code>其他类对象::方法名</code></li><li>本类：<code>this::方法名</code></li><li>父类：<code>super::方法名</code></li></ol><h3 id="引用构造方法"><a href="#引用构造方法" class="headerlink" title="引用构造方法"></a>引用构造方法</h3><p>格式：<code>类名::new</code></p><p>范例：<code>Student::new</code></p><h3 id="其他调用方式"><a href="#其他调用方式" class="headerlink" title="其他调用方式"></a>其他调用方式</h3><ol><li>使用类名引用成员方法<ul><li>范例：<code>String::substring</code></li></ul></li><li>引用数组的构造方法<ul><li>范例：<code>int[]::new</code></li></ul></li></ol><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>异常：异常就是代表程序出现的问题</p><p>注意：异常的作用不是让我们以后不出现异常，而是程序出了异常之后，该如何处理</p><pre class="mermaid">flowchart TD    top[Java.lang.Throwable]    top --> midleft[Error]    top --> midright[Exception]    midright --> bottomleft[RuntimeException]    midright --> bottomright[其他异常]    bottomleft --> other["。。。"]</pre><p><code>Error</code>：代表的是系统级别错误（属于严重问题），系统一旦出现问题，sun公司会把这些错误封装成Error对象。</p><p>Error是给sun公司自己用的，不是给我们程序员用的。</p><p>因此我们开发人员不用管他。</p><p><code>Exception</code>：叫做异常，代表程序可能出现的问题。我们通常会用Exception以及他的子类来封装程序出现的问题。</p><p>运行时异常：<code>RuntimeException</code>及其子类，编译阶段不会出现异常提醒。运行时出现的异常（如：数组索引越界异常）</p><p>编译时异常：编译阶段就会出现异常提醒的。（如：日期解析异常）</p><pre class="mermaid">flowchart TD    top[Java文件]    top -- Javac命令 --> mid[字节码文件]    mid -- Java命令 --> bottom[运行结果]</pre><p>Java文件到字节码文件为<code>编译时异常</code>（如：日期解析异常）</p><p>字节码文件到运行结果为<code>运行时异常</code>，RuntimeException及其子类，编译阶段不需要处理。代码运行时出现的异常（如：数组索引越界异常）</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        <span class="comment">// 编译时异常（在编译阶段，必须要手动处理，否则代码报错）</span></span><br><span class="line">        <span class="comment">/*String time = &quot;2030年1月1日&quot;;</span></span><br><span class="line"><span class="comment">        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy年MM月dd日&quot;);</span></span><br><span class="line"><span class="comment">        Date date = sdf.parse(time);</span></span><br><span class="line"><span class="comment">        System.out.println(date);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 运行时异常</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        System.out.println(arr[<span class="number">10</span>]); <span class="comment">// ArrayIndexOutOfBoundsException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译时异常和运行时异常的区别</p><ul><li>编译时异常：除了RuntimeException和它的子类，其他都是编译时异常。编译阶段需要进行处理，作用在于提醒程序员</li><li>运行时异常：RuntimeException本生和所有子类，都是运行时异常。编译阶段不报错，是程序运行时出现的。一般是由于参数传递错误带来的问题</li></ul><h2 id="异常的作用"><a href="#异常的作用" class="headerlink" title="异常的作用"></a>异常的作用</h2><p>作用一：异常是用来查询bug的关键参考信息</p><p>作用二：异常可以作为方法内部的一种特殊返回值，以便通知调用者底层的执行情况</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">// 作用一：异常是用来查询bug的关键参考信息</span></span><br><span class="line">        <span class="comment">// 案例一：</span></span><br><span class="line">        <span class="comment">// Student[] students = new Student[3];</span></span><br><span class="line">        <span class="comment">// String name = students[0].getName();</span></span><br><span class="line">        <span class="comment">// System.out.println(name); // NullPointerException</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 案例二：</span></span><br><span class="line">        <span class="comment">// Student zs = new Student(&quot;张三,23&quot;);</span></span><br><span class="line">        <span class="comment">// System.out.println(zs);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 作用二：异常可以作为方法内部的一种特殊返回值，以便通知调用者底层的执行情况</span></span><br><span class="line">        <span class="comment">// 年龄范围（18 - 40）</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s1.setAge(<span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">Student</span><span class="params">()</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">Student</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        String[] arr = str.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">this</span>.age = Integer.parseInt(arr[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">18</span> || age &gt; <span class="number">40</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常的处理方式"><a href="#异常的处理方式" class="headerlink" title="异常的处理方式"></a>异常的处理方式</h2><ol><li>JVM默认的处理方式</li><li>自己处理</li><li>抛出异常</li></ol><h3 id="JVM默认的处理方式"><a href="#JVM默认的处理方式" class="headerlink" title="JVM默认的处理方式"></a>JVM默认的处理方式</h3><ul><li>把异常的名称，异常原因及异常出现的位置等信息输出在了控制台</li><li>程序停止执行，下面的代码就不会执行了</li></ul><h3 id="自己处理（捕获异常）"><a href="#自己处理（捕获异常）" class="headerlink" title="自己处理（捕获异常）"></a>自己处理（捕获异常）</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">可能出现异常的代码;</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">异常的处理代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目的：当代码出现异常时，可以让程序继续往下执行</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myexception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">/*自己处理（捕获异常）</span></span><br><span class="line"><span class="comment">        格式：</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            可能出现异常的代码;</span></span><br><span class="line"><span class="comment">        &#125; catch &#123;</span></span><br><span class="line"><span class="comment">            异常的处理代码</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 可能出现异常的代码</span></span><br><span class="line">            System.out.println(arr[<span class="number">10</span>]); </span><br><span class="line">            <span class="comment">// 如果此处出现了异常，程序就会在这里创建一个ArrayIndexOutOfBoundsException对象</span></span><br><span class="line">            <span class="comment">// new ArrayIndexOutOfBoundsException();</span></span><br><span class="line">            <span class="comment">// 拿着这个对象到catch的小括号中对比，看括号中的变量是否可以接收这个对象</span></span><br><span class="line">            <span class="comment">// 如果能被接收，就表示该异常被捕获（抓住），执行catch里面的内容</span></span><br><span class="line">        &#125; <span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            <span class="comment">// 如果出现了ArrayIndexOutOfBoundsException该如何处理</span></span><br><span class="line">            System.out.println(<span class="string">&quot;索引越界了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;我会被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>问题一：如果try中没有遇到问题，怎么执行？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果try中没有遇到问题，怎么执行？</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(arr[<span class="number">0</span>]); <span class="comment">// 执行该行代码</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;索引越界了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;我被执行了&quot;</span>); <span class="comment">// 执行该行代码</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题二：如果try中可能遇到多个问题，怎么执行？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果try中可能遇到多个问题，怎么执行？</span></span><br><span class="line">        <span class="comment">// 写多个catch与之对应</span></span><br><span class="line">        <span class="comment">// 细节：如果要捕获多个异常，如果这些异常存在父子关系的话，那么父类一定要写在下面</span></span><br><span class="line">        <span class="comment">// 在JDK之后，可以在catch中同时捕获多个异常，中间用 | 进行隔开</span></span><br><span class="line">        <span class="comment">/*try&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(arr[10]);</span></span><br><span class="line"><span class="comment">            System.out.println(2/0);</span></span><br><span class="line"><span class="comment">            String s = null;</span></span><br><span class="line"><span class="comment">            System.out.println(s.equals(&quot;abc&quot;));</span></span><br><span class="line"><span class="comment">        &#125; catch (ArrayIndexOutOfBoundsException e) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;索引越界了&quot;);    // 执行改行代码</span></span><br><span class="line"><span class="comment">        &#125; catch (ArithmeticException e) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;除数不能为0&quot;);</span></span><br><span class="line"><span class="comment">        &#125; catch (NullPointerException e) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;空指针异常&quot;);</span></span><br><span class="line"><span class="comment">        &#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;Exception&quot;);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">            System.out.println(<span class="number">2</span>/<span class="number">0</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            System.out.println(s.equals(<span class="string">&quot;abc&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException | ArithmeticException | NullPointerException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;我被执行了&quot;</span>); <span class="comment">// 执行该行代码</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题三：如果try中遇到的问题没有被捕获，怎么执行？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="comment">// 如果try中遇到的问题没有被捕获，怎么执行？</span></span><br><span class="line">        <span class="comment">// 如果try中遇到的问题没有捕获（没有匹配到异常），就相当于try...catch的代码白写了</span></span><br><span class="line">        <span class="comment">// 最终会交给虚拟机进行处理</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空指针异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;我不会被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题四：如果try中遇到了问题，那么try下面的其他代码还会执行吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="comment">// 如果try中遇到了问题，那么try下面的其他代码还会执行吗？</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">            System.out.println(<span class="string">&quot;我不会被执行&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空指针异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;我会被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Throwable的成员方法"><a href="#Throwable的成员方法" class="headerlink" title="Throwable的成员方法"></a>Throwable的成员方法</h2><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public String getMessage()</td><td>返回此throwable的详细消息字符串</td></tr><tr><td>public String toString()</td><td>返回此可抛出的简短描述</td></tr><tr><td>public void printStackTrace()</td><td>把异常的错误信息输出在控制台</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myexception;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo9</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*| public String getMessage()    | 返回此throwable的详细消息字符串 |</span></span><br><span class="line"><span class="comment">          | public String toString()      | 返回此可抛出的简短描述          |</span></span><br><span class="line"><span class="comment">          | public void printStackTrace() | 把异常的错误信息输出在控制台    |*/</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            <span class="comment">// String message = e.getMessage();</span></span><br><span class="line">            <span class="comment">// System.out.println(message); // Index 10 out of bounds for length 5</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// String s = e.toString();</span></span><br><span class="line">            <span class="comment">// System.out.println(s);  // java.lang.ArrayIndexOutOfBoundsException: Index 10 out of bounds for length 5</span></span><br><span class="line"></span><br><span class="line">            e.printStackTrace();    <span class="comment">// 类似与JVM的默认处理方式（红色字体打印异常），但是不会结束虚拟机</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;我是否被执行了？&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抛出处理"><a href="#抛出处理" class="headerlink" title="抛出处理"></a>抛出处理</h2><p><code>throws</code></p><p>注意：写在方法定义处，表示声明一个异常，告诉调用者，使用本方法可能有哪些异常</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 方法()<span class="keyword">throws</span> 异常类名<span class="number">1</span>,异常类名<span class="number">2.</span>.. &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编译时异常：必须要写</li><li>运行时异常：可以不写</li></ul><p><code>throw</code></p><p>注意：写在方法内，结束方法。手动抛出异常对象，交给调用者。方法中下面的代码不再执行了</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 方法() &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myexception;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 需求：定义一个方法求数组最大值</span></span><br><span class="line">        <span class="type">int</span>[] arr = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            max = getMax(arr);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空指针异常&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;数组超出索引&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;我还是会打印&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span>[] arr)</span><span class="comment">/* throws NullPointerException,ArrayIndexOutOfBoundsException `RuntimeException的子类` */</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 手动创建一个异常对象，并把这个异常交给方法的调用者处理</span></span><br><span class="line">            <span class="comment">// 此时方法就会结束，下面的代码就不会再执行了</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (max &lt; arr[i]) &#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><ol><li>定义异常类</li><li>写继承关系</li><li>空参构造</li><li>带参构造</li></ol><p>意义：就是为了让控制台的报错信息更加的见名知意</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myexception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.InputMismatchException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionPractice2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入长度在3-10之间的姓名：&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">                <span class="keyword">if</span> (name.length() &lt; <span class="number">3</span> || name.length() &gt; <span class="number">10</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NameFormatException</span>(name + <span class="string">&quot;格式有误，长度应为：3~10&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;请输入18-40之间的年龄：&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">                sc.nextLine();  <span class="comment">// 清除输入流中的换行符</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (age &lt; <span class="number">18</span> || age &gt; <span class="number">40</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AgeFormatException</span>(age + <span class="string">&quot;格式有误，范围应为：18~40&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">// 如果姓名和年龄都合法，就跳出循环</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InputMismatchException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;年龄异常，请输入一个整数&quot;</span>);</span><br><span class="line">                sc.nextLine();  <span class="comment">// 清除输入流中的错误数据</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (NameFormatException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                sc.nextLine();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (AgeFormatException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                sc.nextLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myexception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NameFormatException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="comment">// 技巧：</span></span><br><span class="line">    <span class="comment">// NameFormat：当前异常的名字，表示姓名格式化问题</span></span><br><span class="line">    <span class="comment">// Exception：表示当前类是一个异常类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运行时：RuntimeException 核心 就表示由于参数错误而导致的</span></span><br><span class="line">    <span class="comment">// 编译时：Exception 核心 提醒程序员检查本地信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NameFormatException</span><span class="params">()</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NameFormatException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myexception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgeFormatException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="comment">// 技巧：</span></span><br><span class="line">    <span class="comment">// NameFormat：当前异常的名字，表示姓名格式化问题</span></span><br><span class="line">    <span class="comment">// Exception：表示当前类是一个异常类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运行时：RuntimeException 核心 就表示由于参数错误而导致的</span></span><br><span class="line">    <span class="comment">// 编译时：Exception 核心 提醒程序员检查本地信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeFormatException</span><span class="params">()</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeFormatException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="File"><a href="#File" class="headerlink" title="File"></a>File</h1><ul><li>File对象就表示一个路径，可以是文件的路径、也可以是文件夹的路径</li><li>这个路径可以是存在的，也允许是不存在</li></ul><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public File(String pathname)</td><td>根据文件路径创建文件对象</td></tr><tr><td>public File(String parent,String child)</td><td>根据父路径名字符串和子路径名字符串创建文件对象</td></tr><tr><td>public File(File parent,String child)</td><td>根据父路径对应文件对象和子路径字符串创建文件对象</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. public File(String pathname)</span></span><br><span class="line">        <span class="comment">// 根据文件路径创建文件对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\Zhao\\Desktop\\a.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(str);</span><br><span class="line">        System.out.println(f1); <span class="comment">// C:\Users\Zhao\Desktop\a.txt</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. public File(String parent,String child)</span></span><br><span class="line">        <span class="comment">// 父路径：C:\Users\Zhao\Desktop</span></span><br><span class="line">        <span class="comment">// 子路径：a.txt</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\Zhao\\Desktop&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">child</span> <span class="operator">=</span> <span class="string">&quot;a.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parent,child);</span><br><span class="line">        System.out.println(f2); <span class="comment">// C:\Users\Zhao\Desktop\a.txt</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. public File(File parent,String child)</span></span><br><span class="line">        <span class="comment">// 把一个File表示的路径和String表示的路径进行拼接</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">parent2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Zhao\\Desktop&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">child2</span> <span class="operator">=</span> <span class="string">&quot;a.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parent2,child);</span><br><span class="line">        System.out.println(f3); <span class="comment">// C:\Users\Zhao\Desktop\a.txt</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="File的常见成员方法"><a href="#File的常见成员方法" class="headerlink" title="File的常见成员方法"></a>File的常见成员方法</h2><h3 id="判断、获取"><a href="#判断、获取" class="headerlink" title="判断、获取"></a>判断、获取</h3><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public boolean isDirectory()</td><td>判断此路径名表示的File是否为文件夹</td></tr><tr><td>public boolean isFile()</td><td>判断此路径名表示的File是否为文件</td></tr><tr><td>public boolean exists()</td><td>判断此路径名表示的File是否存在</td></tr><tr><td>public long length()</td><td>返回文件的大小（字节数量）</td></tr><tr><td>public String getAbsolutePath()</td><td>返回文件的绝对路径</td></tr><tr><td>public String getPath()</td><td>返回定义文件时使用的路径</td></tr><tr><td>public String getName()</td><td>返回文件的名称，带后缀</td></tr><tr><td>public long lastModified()</td><td>返回文件的最后修改时间（时间毫秒值）</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        | 方法名称                     | 说明                               |</span></span><br><span class="line"><span class="comment">        | ---------------------------- | ---------------------------------- |</span></span><br><span class="line"><span class="comment">        | public boolean isDirectory() | 判断此路径名表示的File是否为文件夹 |</span></span><br><span class="line"><span class="comment">        | public boolean isFile()      | 判断此路径名表示的File是否为文件   |</span></span><br><span class="line"><span class="comment">        | public boolean exists()      | 判断此路径名表示的File是否存在     |</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 对一个文件的路径进行判断</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\data\\a.txt&quot;</span>);</span><br><span class="line">        System.out.println(f1.isDirectory());   <span class="comment">// false</span></span><br><span class="line">        System.out.println(f1.isFile());        <span class="comment">// true</span></span><br><span class="line">        System.out.println(f1.exists());        <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 对一个文件夹的路径进行判断</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\data\\bbb&quot;</span>);</span><br><span class="line">        System.out.println(f2.isDirectory());   <span class="comment">// true</span></span><br><span class="line">        System.out.println(f2.isFile());        <span class="comment">// false</span></span><br><span class="line">        System.out.println(f2.exists());        <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 对一个不存在的路径进行判断</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\data\\c.txt&quot;</span>);</span><br><span class="line">        System.out.println(f3.isDirectory());   <span class="comment">// false</span></span><br><span class="line">        System.out.println(f3.isFile());        <span class="comment">// false</span></span><br><span class="line">        System.out.println(f3.exists());        <span class="comment">// false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        | 方法名称                        | 说明                                 |</span></span><br><span class="line"><span class="comment">        | ------------------------------- | ------------------------------------ |</span></span><br><span class="line"><span class="comment">        | public long length()            | 返回文件的大小（字节数量）           |</span></span><br><span class="line"><span class="comment">        | public String getAbsolutePath() | 返回文件的绝对路径                   |</span></span><br><span class="line"><span class="comment">        | public String getPath()         | 返回定义文件时使用的路径             |</span></span><br><span class="line"><span class="comment">        | public String getName()         | 返回文件的名称，带后缀               |</span></span><br><span class="line"><span class="comment">        | public long lastModified()      | 返回文件的最后修改时间（时间毫秒值） |</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. length 返回文件的大小（字节数量）</span></span><br><span class="line">        <span class="comment">// 无法获取文件夹的大小，只能获取文件的大小，单位：字节</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\data\\a.txt&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\data\\bbb&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">length1</span> <span class="operator">=</span> f1.length();</span><br><span class="line">        <span class="type">long</span> <span class="variable">length2</span> <span class="operator">=</span> f2.length();</span><br><span class="line">        System.out.println(length1);</span><br><span class="line">        System.out.println(length2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. getAbsolutePath 文件绝对路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">absoluteFile1</span> <span class="operator">=</span> f1.getAbsoluteFile();</span><br><span class="line">        <span class="type">File</span> <span class="variable">absoluteFile2</span> <span class="operator">=</span> f3.getAbsoluteFile();</span><br><span class="line">        System.out.println(absoluteFile1);</span><br><span class="line">        System.out.println(absoluteFile2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. getPath</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path1</span> <span class="operator">=</span> f1.getPath();</span><br><span class="line">        <span class="type">String</span> <span class="variable">path2</span> <span class="operator">=</span> f3.getPath();</span><br><span class="line">        System.out.println(path1);</span><br><span class="line">        System.out.println(path2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. getName</span></span><br><span class="line">        <span class="comment">// 如果路径是文件的路径，返回 文件名 + 后缀名</span></span><br><span class="line">        <span class="comment">// 如果路径是文件夹，返回文件夹名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name1</span> <span class="operator">=</span> f1.getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name2</span> <span class="operator">=</span> f3.getName();</span><br><span class="line">        System.out.println(name1);</span><br><span class="line">        System.out.println(name2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. lastModified</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> f3.lastModified();</span><br><span class="line">        System.out.println(l);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建、删除"><a href="#创建、删除" class="headerlink" title="创建、删除"></a>创建、删除</h3><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public boolean createNewFile()</td><td>创建一个新的空的文件</td></tr><tr><td>public boolean mkdir()</td><td>创建单级文件夹</td></tr><tr><td>public boolean mkdirs()</td><td>创建多级文件夹</td></tr><tr><td>public boolean delete()</td><td>删除文件、空文件夹</td></tr></tbody></table><p>delete方法默认只能删除文件和空文件夹，delete方法直接删除不走<font color='orange'>回收站</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        | 方法名称                       | 说明                 |</span></span><br><span class="line"><span class="comment">        | ------------------------------ | -------------------- |</span></span><br><span class="line"><span class="comment">        | public boolean createNewFile() | 创建一个新的空的文件 |</span></span><br><span class="line"><span class="comment">        | public boolean mkdir()         | 创建单级文件夹       |</span></span><br><span class="line"><span class="comment">        | public boolean mkdirs()        | 创建多级文件夹       |</span></span><br><span class="line"><span class="comment">        | public boolean delete()        | 删除文件、空文件夹   |</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. createNewFile</span></span><br><span class="line">        <span class="comment">// 当前路径表示的文件不存在，则创建成功，方法返回 true</span></span><br><span class="line">        <span class="comment">// 当前路径表示的文件存在，则创建失败，方法返回 false</span></span><br><span class="line">        <span class="comment">// 如果父级路径不存在，方法会有异常(IOException)</span></span><br><span class="line">        <span class="comment">// 该方法创建的一定是文件，如果路径中不包含后缀名，则创建一个没有后缀的文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\test\\a.txt&quot;</span>); <span class="comment">// 假设该文件不存在</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">newFile</span> <span class="operator">=</span> f1.createNewFile();</span><br><span class="line">        System.out.println(newFile); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. mkdir</span></span><br><span class="line">        <span class="comment">// windows当中路径是唯一的，如果当前路径已经存在，则创建失败，返回 false</span></span><br><span class="line">        <span class="comment">// 该方法只能创建单级文件夹，无法创建多级文件夹</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\test\\aaa&quot;</span>); <span class="comment">// 假设该文件夹不存在</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\test\\bbb\\bbb\\bbb&quot;</span>); <span class="comment">// 假设该文件夹不存在</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">mkdir1</span> <span class="operator">=</span> f2.mkdir();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">mkdir2</span> <span class="operator">=</span> f3.mkdir();</span><br><span class="line">        System.out.println(mkdir1); <span class="comment">// true</span></span><br><span class="line">        System.out.println(mkdir2); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. mkdirs</span></span><br><span class="line">        <span class="comment">// 既可以创建单级文件夹，也可以创建多级文件夹</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\test\\bbb\\bbb\\bbb&quot;</span>); <span class="comment">// 假设该文件夹不存在</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\test\\ccc&quot;</span>); <span class="comment">// 假设该文件夹不存在</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">mkdirs1</span> <span class="operator">=</span> f4.mkdirs();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">mkdirs2</span> <span class="operator">=</span> f5.mkdirs();</span><br><span class="line">        System.out.println(mkdirs1); <span class="comment">// true</span></span><br><span class="line">        System.out.println(mkdirs2); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. delete</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\test\\a.txt&quot;</span>); <span class="comment">// 存在</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\test\\aaa&quot;</span>); <span class="comment">// 空文件夹</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\test\\bbb\\bbb\\bbb&quot;</span>); <span class="comment">// 多级文件夹</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">delete1</span> <span class="operator">=</span> f6.delete();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">delete2</span> <span class="operator">=</span> f7.delete();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">delete3</span> <span class="operator">=</span> f8.delete();</span><br><span class="line">        System.out.println(delete1); <span class="comment">// true</span></span><br><span class="line">        System.out.println(delete2); <span class="comment">// true</span></span><br><span class="line">        System.out.println(delete3); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public static File[] listRoots()</td><td>列出可用的文件系统根</td></tr><tr><td>public String[] list()</td><td>获取当前该路径下所有内容</td></tr><tr><td>public String[] list(FilenameFilter filter)</td><td>利用文件名过滤器获取当前该路径下所有内容</td></tr><tr><td><font color='red'>public File[] listFiles()</font></td><td><font color='red'>获取当前该路径下所有内容</font></td></tr><tr><td>public File[] listFiles(FileFilter filter)</td><td>利用文件名过滤器获取当前该路径下所有内容</td></tr><tr><td>public File[] listFiles(FilenameFilter filter)</td><td>利用文件名过滤器获取当前该路径下所有内容</td></tr></tbody></table><p><code>listFiles</code>：</p><ul><li>当调用者File表示的路径不存在，返回Null</li><li>当调用者File表示的路径是文件时，返回Null</li><li>当调用者File表示的路径是一个空文件夹时，返回一个长度为0的数组</li><li>当调用者File表示的路径是一个有内容的文件夹时，将里面所有文件和文件夹的路径放在File数组中返回</li><li>当调用者File表示的路径是一个有隐藏文件的文件夹时，将里面所有文件和文件夹的路径放在File数组中返回，包括隐藏文件</li><li>当调用者File表示的路径是需要权限才能访问的文件夹时，返回Null</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FilenameFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        | 方法名称                                       | 说明                                     |</span></span><br><span class="line"><span class="comment">        | ---------------------------------------------- | ---------------------------------------- |</span></span><br><span class="line"><span class="comment">        | public static File[] listRoots()               | 列出可用的文件系统根                     |</span></span><br><span class="line"><span class="comment">        | public String[] list()                         | 获取当前该路径下所有内容                 |</span></span><br><span class="line"><span class="comment">        | public String[] list(FilenameFilter filter)    | 利用文件名过滤器获取当前该路径下所有内容 |</span></span><br><span class="line"><span class="comment">        | public File[] listFiles()                      | 获取当前该路径下所有内容                 |</span></span><br><span class="line"><span class="comment">        | public File[] listFiles(FileFilter filter)     | 利用文件名过滤器获取当前该路径下所有内容 |</span></span><br><span class="line"><span class="comment">        | public File[] listFiles(FilenameFilter filter) | 利用文件名过滤器获取当前该路径下所有内容 |</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. listFiles 获取指定路径下所有文件和文件夹的路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\&quot;</span>);</span><br><span class="line"></span><br><span class="line">        File[] files = f1.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            System.out.println(file);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. listRoots</span></span><br><span class="line">        File[] filesRoots = File.listRoots();</span><br><span class="line">        System.out.println(Arrays.toString(filesRoots)); <span class="comment">// [C:\, E:\]，表示系统存在C盘和E盘</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. list 获取指定路径下所有内容（仅能获取名字）</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\&quot;</span>);</span><br><span class="line">        String[] list = f2.list();</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. list(FilenameFilter filter) 利用文件名过滤器获取当前该路径下所有内容</span></span><br><span class="line">        <span class="comment">// 获取 E:\\data 文件夹里面所有 txt 文件</span></span><br><span class="line">        <span class="comment">// accept方法的形参，依次表示aaa文件夹里面每一个文件或者文件夹的路径</span></span><br><span class="line">        <span class="comment">// 参数一：父级路径</span></span><br><span class="line">        <span class="comment">// 参数二：子级路径</span></span><br><span class="line">        <span class="comment">// 如果返回值为true，就表示当前路径保留</span></span><br><span class="line">        <span class="comment">// 如果返回值为false，就表示当前路径舍弃</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\data&quot;</span>);</span><br><span class="line">        String[] list1 = f3.list(<span class="keyword">new</span> <span class="title class_">FilenameFilter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File dir, String name)</span> &#123;</span><br><span class="line">                <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir, name);</span><br><span class="line">                <span class="keyword">return</span> src.isFile() &amp;&amp; name.endsWith(<span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(list1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><p>存储和读取数据的解决方案</p><p>File类只能对文件本身进行操作，不能读写文件里面存储的数据</p><p>IO流用于读写文件中的数据（可以读写文件，或网络中的数据）</p><pre class="mermaid">flowchart TD    top[IO流]    top --> mid1[输入流]    top --> mid2[输出流]    mid1 --> bottom1[读取]    mid2 --> bottom2[写出]</pre><pre class="mermaid">flowchart TD    top[IO流]    top --> mid1[字节流]    top --> mid2[字符流]    mid1 --> bottom1[所有类型的文件]    mid2 --> bottom2[纯文本文件]</pre><h2 id="IO流的体系"><a href="#IO流的体系" class="headerlink" title="IO流的体系"></a>IO流的体系</h2><pre class="mermaid">flowchart TD    top[IO流体系]    top --> midleft[字节流]    top --> midright[字符流]    midleft --> bottom1left[InputStream--字节输入流]    midleft --> bottom1right[OutputStream--字节输出流]    midright --> bottom2left[Reader--字节输入流]    midright --> bottom2right[Writer--字符输出流]</pre><p>InputStream、OutputStream、Reader、Writer都为抽象类</p><h3 id="基本流："><a href="#基本流：" class="headerlink" title="基本流："></a>基本流：</h3><ul><li>FileInputStream</li><li>FileOutputStream</li><li>FileReader</li><li>FileWriter</li></ul><h2 id="FileOutPutStream"><a href="#FileOutPutStream" class="headerlink" title="FileOutPutStream"></a>FileOutPutStream</h2><p>操作本地文件的字节输出流，可以把程序中的数据写到本地文件中</p><p>步骤：</p><ol><li>创建字节输出流对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 细节1：参数是字符串表示的路径或者是File对象都是可以的</span></span><br><span class="line"><span class="comment">// 细节2：如果文件不存在会创建一个新的文件，但是要保证父级路径是存在的</span></span><br><span class="line"><span class="comment">// 细节3：如果文件已经存在，则会清空文件（覆盖）</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;a.txt&quot;</span>); </span><br></pre></td></tr></table></figure><ol start="2"><li>写数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 细节：write方法的参数是整数，但是实际上写到本地文件的是整数在ASCII上对应的字符</span></span><br><span class="line">fos.write(<span class="number">97</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>释放资源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每次使用完流之后都要释放资源</span></span><br><span class="line">fos.close();</span><br></pre></td></tr></table></figure><h3 id="FileOutPutStream写数据的3种方式"><a href="#FileOutPutStream写数据的3种方式" class="headerlink" title="FileOutPutStream写数据的3种方式"></a>FileOutPutStream写数据的3种方式</h3><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>void write(int b)</td><td>一次写一个字节数据</td></tr><tr><td>void write(byte[] b)</td><td>一次写一个字节数组数据</td></tr><tr><td>void write(byte[] b,int off,int len)</td><td>一次写一个字节数组的部分数据</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteStreamDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        | 方法名称                             | 说明                         |</span></span><br><span class="line"><span class="comment">        | ------------------------------------ | ---------------------------- |</span></span><br><span class="line"><span class="comment">        | void write(int b)                    | 一次写一个字节数据           |</span></span><br><span class="line"><span class="comment">        | void write(byte[] b)                 | 一次写一个字节数组数据       |</span></span><br><span class="line"><span class="comment">        | void write(byte[] b,int off,int len) | 一次写一个字节数组的部分数据 |*/</span></span><br><span class="line">        <span class="comment">// 1.创建对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 写出数据</span></span><br><span class="line">        fos.write(<span class="number">97</span>); <span class="comment">// a</span></span><br><span class="line">        fos.write(<span class="number">98</span>); <span class="comment">// b</span></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">101</span>&#125;; <span class="comment">// abcde</span></span><br><span class="line">        fos.write(bytes);</span><br><span class="line"></span><br><span class="line">        fos.write(bytes,<span class="number">1</span>,<span class="number">3</span>); <span class="comment">// 索引 1~3，即 98、99、100</span></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FileOutPutStream写数据的两个问题"><a href="#FileOutPutStream写数据的两个问题" class="headerlink" title="FileOutPutStream写数据的两个问题"></a>FileOutPutStream写数据的两个问题</h3><p>问题一：换行</p><p>问题二：续写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteStreamDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 换行写：</span></span><br><span class="line"><span class="comment">        * 再次写出一个换行符就可以了</span></span><br><span class="line"><span class="comment">        *   windows：\r\n</span></span><br><span class="line"><span class="comment">        *   linux:   \n</span></span><br><span class="line"><span class="comment">        *   max:     \r</span></span><br><span class="line"><span class="comment">        * 细节：在windows操作系统中，java对回车换行进行了优化</span></span><br><span class="line"><span class="comment">        *      虽然完整的是 \r\n ，但是只需要写其中一个 \r 或者 \n，</span></span><br><span class="line"><span class="comment">        *      java也可以实现换行，因为java会在底层补全。</span></span><br><span class="line"><span class="comment">        *      但是还是建议写全</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 续写：</span></span><br><span class="line"><span class="comment">        * 如果想要续写，打开续写开关即可</span></span><br><span class="line"><span class="comment">        * 开关位置：创建对象的第二个参数</span></span><br><span class="line"><span class="comment">        * 默认false，表示关闭续写，此时创建对象会清空文件</span></span><br><span class="line"><span class="comment">        * 手动传递true，表示打开续写，此时创建对象不会清空文件</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;a.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 写出数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;zheshiyiduanceshiwenzi&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = str.getBytes();</span><br><span class="line">        fos.write(bytes);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写出一个换行符就可以实现换行效果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">warp</span> <span class="operator">=</span> <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] warpbytes = warp.getBytes();</span><br><span class="line">        fos.write(warpbytes);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;huanhang&quot;</span>;</span><br><span class="line">        fos.write(str2.getBytes());</span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h2><p>操作本地文件的字节输入流，可以把本地文件中的数据读取到程序中来</p><p>书写步骤</p><ol><li>创建字节输入流对象</li><li>读数据</li><li>释放资源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mybytestream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteStreamDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 操作本地文件的字节输入流，可以把本地文件中的数据读取到程序中来</span></span><br><span class="line"><span class="comment">        * 书写步骤</span></span><br><span class="line"><span class="comment">        *    1. 创建字节输入流对象</span></span><br><span class="line"><span class="comment">        *       细节1：如果文件不存在，就直接报错</span></span><br><span class="line"><span class="comment">        *       这和字节输出流不一样，输出流遇到不存在的文件，会自动创建</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *    2. 读数据</span></span><br><span class="line"><span class="comment">        *       细节2：一次读一个字节，读出来的是数据在ASCII上对应的数字</span></span><br><span class="line"><span class="comment">        *       细节3：读到文件末尾了，read方法返回-1</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *    3. 释放资源</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 读取数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b1</span> <span class="operator">=</span> fis.read();    <span class="comment">// 一次只能读取一个字节</span></span><br><span class="line">        System.out.println(b1 + <span class="string">&quot;:&quot;</span> + (<span class="type">char</span>)b1);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">b2</span> <span class="operator">=</span> fis.read();    <span class="comment">// 一次只能读取一个字节</span></span><br><span class="line">        System.out.println(b2 + <span class="string">&quot;:&quot;</span> + (<span class="type">char</span>)b2);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">b3</span> <span class="operator">=</span> fis.read();    <span class="comment">// 一次只能读取一个字节</span></span><br><span class="line">        System.out.println(b3 + <span class="string">&quot;:&quot;</span> + (<span class="type">char</span>)b3);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">b4</span> <span class="operator">=</span> fis.read();    <span class="comment">// 一次只能读取一个字节</span></span><br><span class="line">        System.out.println(b4 + <span class="string">&quot;:&quot;</span> + (<span class="type">char</span>)b4);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">b5</span> <span class="operator">=</span> fis.read();    <span class="comment">// 一次只能读取一个字节</span></span><br><span class="line">        System.out.println(b5 + <span class="string">&quot;:&quot;</span> + (<span class="type">char</span>)b5);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">b6</span> <span class="operator">=</span> fis.read();    <span class="comment">// 读取不到数据了，结果为 -1</span></span><br><span class="line">        System.out.println(b6);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FileInputStream循环读取"><a href="#FileInputStream循环读取" class="headerlink" title="FileInputStream循环读取"></a>FileInputStream循环读取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mybytestream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteStreamDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 字节输入流循环读取</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 循环读取</span></span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println((<span class="type">char</span>)b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果写成这种形式，read方法在循环中会执行两次，导致结果错误</span></span><br><span class="line"><span class="keyword">while</span> ((fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println((fis.read());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FileInputStream一次读多个字节"><a href="#FileInputStream一次读多个字节" class="headerlink" title="FileInputStream一次读多个字节"></a>FileInputStream一次读多个字节</h3><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public int read()</td><td>一次读一个字节数据</td></tr><tr><td>public int read(byte[] buffer)</td><td>一次读一个字节数组数据</td></tr></tbody></table><p>注意：一次读一个字节数组的数据，每次读取会尽可能把数组装满</p><h3 id="轻量文件拷贝"><a href="#轻量文件拷贝" class="headerlink" title="轻量文件拷贝"></a>轻量文件拷贝</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mybytestream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteStreamDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 拷贝文件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\copy\\1.jpg&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\copy\\bak.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 拷贝</span></span><br><span class="line">        <span class="comment">// 核心思想：边读边写</span></span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        <span class="comment">// 规则：先开的最后关闭</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="大文件拷贝"><a href="#大文件拷贝" class="headerlink" title="大文件拷贝"></a>大文件拷贝</h3><p>IO流：如果拷贝的文件过大，速度会变慢。</p><p>这是由于拷贝文件时，一次读取一个字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteStreamDemo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// public int read(byte[] buffer) 一次读一个字节数组数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\copy\\1.jpg&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\copy\\bak.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 拷贝</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        // 一次读一个字节数据;</span></span><br><span class="line"><span class="comment">        long timeBefore = System.currentTimeMillis();</span></span><br><span class="line"><span class="comment">        int b;</span></span><br><span class="line"><span class="comment">        while ((b = fis.read()) != -1) &#123;</span></span><br><span class="line"><span class="comment">            fos.write(b);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        long timeAfter = System.currentTimeMillis();</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;拷贝文件花费了&quot; + (timeAfter - timeBefore));   // 78</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一次读一个字节数组数据</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">timeBefore</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">5</span>];</span><br><span class="line">        <span class="type">int</span> len;    <span class="comment">// 这个变量用于记录读取到了几个数据</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">timeAfter</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;拷贝文件花费了&quot;</span> + (timeAfter - timeBefore));   <span class="comment">// 9</span></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        <span class="comment">// 规则：先开的最后关闭</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="try…catch异常处理"><a href="#try…catch异常处理" class="headerlink" title="try…catch异常处理"></a>try…catch异常处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">catch</span>() &#123;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：finally里面的代码一定被执行，除非虚拟机停止</p><p>基本做法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;a.txt&quot;</span>)<span class="string">&#x27;</span></span><br><span class="line"><span class="string">fos.write(97);</span></span><br><span class="line"><span class="string">&#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="string">e.printStackTrace();</span></span><br><span class="line"><span class="string">&#125; finally &#123;</span></span><br><span class="line"><span class="string">fos.close();</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>手动释放资源</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mybytestream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteStreamDemo8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\copy\\1.jpg&quot;</span>);</span><br><span class="line">            fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\copy\\bak.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 拷贝</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">5</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 3. 释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (fos != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK7方案（AutoCloseable）</p><p>特点：特定情况下，可以自动释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(创建流对象<span class="number">1</span>,创建流对象<span class="number">2</span>) &#123;</span><br><span class="line">可能出现异常的代码;</span><br><span class="line">&#125; <span class="keyword">catch</span>(异常类名 变量名) &#123;</span><br><span class="line">异常的处理代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>资源用完最终自动释放</p><p>JDK9方案（AutoCloseable）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">创建流对象<span class="number">1</span>;</span><br><span class="line">创建流对象<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>(流<span class="number">1</span>,流<span class="number">2</span>) &#123;</span><br><span class="line">可能出现异常的代码;</span><br><span class="line">&#125; <span class="keyword">catch</span>(异常类名 变量名) &#123;</span><br><span class="line">异常的处理代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>资源用完最终自动释放</p><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>字节流读取文件的时候，文件中不要有中文</p><h3 id="ASCII字符集"><a href="#ASCII字符集" class="headerlink" title="ASCII字符集"></a>ASCII字符集</h3><iframe src="https://www.runoob.com/w3cnote/ascii.html"></iframe><pre class="mermaid">flowchart TD    id1["a[要查询的英文]"]    id1 --查询ASCII--> id2["97(110 0001)[对应的数字]"]    id2 --编码--> id3["0110 0001"]    id3 --解码--> id4[97]    id4 --查询ASCII--> id5["a[读取到的英文]"]</pre><h3 id="计算机的存储规则"><a href="#计算机的存储规则" class="headerlink" title="计算机的存储规则"></a>计算机的存储规则</h3><ol><li>GB2312字符集：1980年发布，1981年5月1日实施ide简体中文汉字编码国家标准。收录7445个图形字符，其中包括6763个简体汉字</li><li>BIG5字符集：台湾地区繁体中文标准字符集，共收录13053个中文字，1984年实施。</li><li>GBK字符集：2000年3月17日发布，收录21003个汉字。包括国家标准GB13000-1中的全部中日韩汉字，和BIG5编码中的所有汉字（完全兼容ASCII）</li><li>Unicode字符集：国际标准字符集，他将世界各种语言的每个字符定义一个唯一的编码，以满足跨语言、跨平台的文本信息转换</li></ol><p><font color='red'>windows系统默认使用的就是GBK</font></p><h3 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h3><h4 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h4><pre class="mermaid">flowchart TD    id1["a[要查询的英文]"]    id1 --查询GBK--> id2["97(110 0001)[对应的数字]"]    id2 --编码--> id3["0110 0001"]    id3 --解码--> id4[97]    id4 --查询GBK--> id5["a[读取到的英文]"]</pre><h4 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h4><pre class="mermaid">flowchart TD    id1["汉[要查询的汉字]"]    id1 --查询GBK--> id2["47802(10111010 10111010)[对应的数字]"]    id2 --编码--> id3["10111010 10111010"]    id3 --解码--> id4[47802]    id4 --查询GBK--> id5["汉[读取到的汉字]"]</pre><p>规则1：汉字两个字节存储</p><p>规则2：高位字节（即两个字节的第一个字节）二进制一定以<code>1</code>开头，转成十进制之后是一个负数</p><h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><h4 id="英文-1"><a href="#英文-1" class="headerlink" title="英文"></a>英文</h4><pre class="mermaid">flowchart TD    id1["a[要查询的英文]"]    id1 --查询Unicode--> id2["97[对应的数字]"]    id2 --编码--> id3["00000000 01100001"]    id3 --解码--> id4[97]    id4 --查询Unicode--> id5["a[读取到的英文]"]</pre><p>UTF-8编码规则：用1~4个字节保存</p><p>UTF-8编码方式：</p><ul><li>0xxxxxxx</li><li>110xxxxx 10xxxxxx</li><li>1110xxxx 10xxxxxx 10xxxxxx</li><li>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</li></ul><p>UTF-16编码规则：用2~4个字节保存</p><p>UTF-32编码规则：固定使用四个字节保存</p><h4 id="中文-1"><a href="#中文-1" class="headerlink" title="中文"></a>中文</h4><pre class="mermaid">flowchart TD    id1["汉[要查询的中文]"]    id1 --查询Unicode--> id2["27721(01101100 01001001)[对应的数字]"]    id2 --编码--> id3["11100110 10110001 10001001"]</pre><h3 id="乱码"><a href="#乱码" class="headerlink" title="乱码"></a>乱码</h3><p>原因1：读取数据时未读完整个汉字</p><p>原因2：编码和解码时的方式不统一</p><h4 id="如何不产生乱码"><a href="#如何不产生乱码" class="headerlink" title="如何不产生乱码"></a>如何不产生乱码</h4><ol><li>不要用字节流读取文本文件</li><li>编码解码时使用同一个码表，同一个编码方式</li></ol><h3 id="Java编码的方法"><a href="#Java编码的方法" class="headerlink" title="Java编码的方法"></a>Java编码的方法</h3><table><thead><tr><th>String类中的方法</th><th>说明</th></tr></thead><tbody><tr><td>public byte[] getBytes()</td><td>使用默认方式进行编码</td></tr><tr><td>public byte[] getBytes(String charsetName)</td><td>使用指定方式进行编码</td></tr></tbody></table><h3 id="Java解码的方法"><a href="#Java解码的方法" class="headerlink" title="Java解码的方法"></a>Java解码的方法</h3><table><thead><tr><th>String类中的方法</th><th>说明</th></tr></thead><tbody><tr><td>String(byte[] bytes)</td><td>使用默认方式进行解码</td></tr><tr><td>String(byte[] bytes,String charsetName)</td><td>使用指定方式进行解码</td></tr></tbody></table><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">charsetDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * Java编码方法</span></span><br><span class="line"><span class="comment">        * | String类中的方法                           | 说明                 |</span></span><br><span class="line"><span class="comment">        * | ------------------------------------------ | -------------------- |</span></span><br><span class="line"><span class="comment">        * | public byte[] getBytes()                   | 使用默认方式进行编码 |</span></span><br><span class="line"><span class="comment">        * | public byte[] getBytes(String charsetName) | 使用指定方式进行编码 |</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * Java解码方法</span></span><br><span class="line"><span class="comment">        * | String类中的方法                        | 说明                 |</span></span><br><span class="line"><span class="comment">        * | --------------------------------------- | -------------------- |</span></span><br><span class="line"><span class="comment">        * | String(byte[] bytes)                    | 使用默认方式进行解码 |</span></span><br><span class="line"><span class="comment">        * | String(byte[] bytes,String charsetName) | 使用指定方式进行解码 |</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. 编码</span></span><br><span class="line">        <span class="comment">// 默认方式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello世界&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes1 = str.getBytes();</span><br><span class="line">        System.out.println(Arrays.toString(bytes1));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定编码方式</span></span><br><span class="line">        <span class="type">byte</span>[] bytes2 = str.getBytes(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(bytes2));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 解码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes1);</span><br><span class="line">        System.out.println(str2);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes2);   <span class="comment">// 如果使用默认解码方式，会有乱码，因为编码时采用的是GBK</span></span><br><span class="line">        System.out.println(str3);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes2,<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        System.out.println(str4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>字符流的底层其实就是字节流</p><p><code>字符流 = 字节流 + 字符集</code></p><p>特点：</p><p>输入流：一次读一个字节，遇到中文时，一次读多个字节</p><p>输出流：底层会把数据按照指定的编码方式进行编码，变成字节再写到文件中</p><p>使用场景：</p><p>对于纯文本文件进行读写操作</p><h2 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h2><ol><li>创建字符输入流对象</li></ol><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td>public FileReader(File file)</td><td>创建字符输入流关联本地文件</td></tr><tr><td>public FileReader(String pathname)</td><td>创建字符输入流关联本地文件</td></tr></tbody></table><p>细节1：如果文件不存在，就直接报错</p><ol start="2"><li>读取数据</li></ol><table><thead><tr><th>成员方法</th><th>说明</th></tr></thead><tbody><tr><td>public int read()</td><td>读取数据，读到末尾返回-1</td></tr><tr><td>public int read(char[] buffer)</td><td>读取多个数据，读到末尾返回-1</td></tr></tbody></table><p>细节1：按字节进行读取，遇到中文，一次读多个字节，读取后解码，返回一个整数</p><p>细节2：读到文件末尾了 ，read方法返回-1</p><ol start="3"><li>释放资源</li></ol><table><thead><tr><th>成员方法</th><th>说明</th></tr></thead><tbody><tr><td>public int close()</td><td>释放资源&#x2F;关流</td></tr></tbody></table><p>示例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharStreamDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;c.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 读取数据</span></span><br><span class="line">        <span class="type">int</span> ch;</span><br><span class="line">        <span class="keyword">while</span> ((ch = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>)ch);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharStreamDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;c.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 读取数据</span></span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read(chars)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(chars,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FileWrite"><a href="#FileWrite" class="headerlink" title="FileWrite"></a>FileWrite</h2><ol><li>创建字符输出流对象</li></ol><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td>public FileWriter(File file)</td><td>创建字符输出流关联本地文件</td></tr><tr><td>public FileWriter(String pathname)</td><td>创建字符输出流关联本地文件</td></tr><tr><td>public FileWriter(File file,boolean append)</td><td>创建字符输出流关联本地文件，续写</td></tr><tr><td>public FileWriter(String pathname,boolean append)</td><td>创建字符输出流关联本地文件，续写</td></tr></tbody></table><p>细节1：参数是字符串表示的路径或者File对象都是可以的</p><p>细节2：如果文件不存在会创建一个新的文件，但是要保证父级路径是存在的</p><p>细节3：如果文件已经存在，则会清空文件，如果不想清空可以打开续写开关</p><ol start="2"><li>写数据</li></ol><table><thead><tr><th>成员方法</th><th>说明</th></tr></thead><tbody><tr><td>void write(int c)</td><td>写出一个字符</td></tr><tr><td>void write(String str)</td><td>写出一个字符串</td></tr><tr><td>void write(String str,int off,int len)</td><td>写出一个字符串的一部分</td></tr><tr><td>void write(char[] cbuf)</td><td>写出一个字符数组</td></tr><tr><td>void write(char[] cbuf,int off,int len)</td><td>写出字符数组的一部分</td></tr></tbody></table><p>细节：如果write方法的参数是整数，但是实际上写道本地文件中的是整数在字符集上对应的字符</p><ol start="3"><li>释放资源</li></ol><p>细节：每次使用完流之后都要释放资源</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharStreamDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;d.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 写出数据</span></span><br><span class="line">        <span class="comment">// fw.write(25105);</span></span><br><span class="line">        fw.write(<span class="string">&quot;我是写出的数据&quot;</span>);</span><br><span class="line"></span><br><span class="line">        fw.write(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] chars = &#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;张&#x27;</span>,<span class="string">&#x27;三&#x27;</span>&#125;;</span><br><span class="line">        fw.write(chars);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符流原理解析"><a href="#字符流原理解析" class="headerlink" title="字符流原理解析"></a>字符流原理解析</h2><ol><li>创建字符输入流对象</li></ol><p>底层：关联文件，并创建缓冲区（长度为8192的字节数组）</p><ol start="2"><li>读取数据</li></ol><p>底层：1. 判断缓冲区中是否有数据可以读取</p><p>​         2. 缓冲区没有数据：就从文件中获取数据，装到缓冲区中，每次尽可能装满缓冲区</p><pre><code>           3. 缓冲区有数据：就从缓冲区中读取</code></pre><p>空参read方法：一次读取一个字节，遇到中文一次读多个字节，并把字节解码转成十进制返回</p><p>有参read方法：把读取字节，解码，强转三步合并了，强转之后的字符放到数组中</p><h3 id="flush和close"><a href="#flush和close" class="headerlink" title="flush和close"></a>flush和close</h3><table><thead><tr><th>成员方法</th><th>说明</th></tr></thead><tbody><tr><td>public void flush()</td><td>将缓冲区中的数据，刷新到本地文件中</td></tr><tr><td>public void close()</td><td>释放资源&#x2F;关流</td></tr></tbody></table><p>flush：刷新之后，还可以继续往文件中写出数据</p><p>close：断开通道，无法再往文件中写出数据</p><h2 id="字节流和字符流的使用场景"><a href="#字节流和字符流的使用场景" class="headerlink" title="字节流和字符流的使用场景"></a>字节流和字符流的使用场景</h2><p>字节流：</p><p>拷贝任意类型的文件</p><p>字符流：</p><p>读取纯文本文件中的数据</p><p>往纯文本文件中写出数据</p><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><ul><li><p>BufferedInputStream</p></li><li><p>BufferedOutputStream</p></li><li><p>BufferedReader</p></li><li><p>BufferedWriter</p></li></ul><h3 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h3><p>原理：底层自带了长度为8192缓冲区提高性能</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public BufferedInputStream(InputStream is)</td><td>把基本流包装成高级流，提高读取数据的性能</td></tr><tr><td>public BufferedOutputStream(OutputStream os)</td><td>把基本流包装成高级流，提高写出数据的性能</td></tr></tbody></table><h4 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h4><p>利用字节缓冲流拷贝文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedStreamDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 利用字节缓冲流拷贝文件</span></span><br><span class="line">        <span class="comment">// 一次读写一个字节</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建缓冲流的对象</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>));</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;copy.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 循环读取并写到目的地</span></span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedStreamDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 利用字节缓冲流拷贝文件</span></span><br><span class="line">        <span class="comment">// 一次读写多个字节</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建缓冲流的对象</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>));</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;copy.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 循环读取并写到目的地</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字节缓冲流提高效率的原理"><a href="#字节缓冲流提高效率的原理" class="headerlink" title="字节缓冲流提高效率的原理"></a>字节缓冲流提高效率的原理</h4><p>在Java中，缓冲流（Buffered Streams）可以提高I&#x2F;O操作的效率。这是因为缓冲流在内部维护了一个数据缓冲区，可以<font color='red'>减少直接对硬盘或网络的读写次数</font>。</p><p>当我们进行读取操作时，缓冲流会一次性从硬盘或网络中读取多个数据到缓冲区，然后我们可以从缓冲区中逐个读取这些数据。这样，即使每次只需要读取一个数据，也不需要每次都进行硬盘或网络操作，从而提高了效率。</p><p>同样，当我们进行写入操作时，缓冲流会先将数据写入到缓冲区，当缓冲区满了之后，再一次性将缓冲区中的数据写入到硬盘或网络。这样，即使我们每次只写入一个数据，也不需要每次都进行硬盘或网络操作，从而提高了效率。</p><p>总的来说，<font color='red'>缓冲流通过减少对硬盘或网络的直接操作次数，从而提高了I&#x2F;O操作的效率。</font></p><h3 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h3><p>原理：底层自带了长度为8192的缓冲区提高性能</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public BufferedReader(Reader r)</td><td>把基本流包装为高级流</td></tr><tr><td>public BufferedWriter(Writer w)</td><td>把基本流包装为高级流</td></tr></tbody></table><h4 id="字符缓冲流特有方法"><a href="#字符缓冲流特有方法" class="headerlink" title="字符缓冲流特有方法"></a>字符缓冲流特有方法</h4><table><thead><tr><th>字符缓冲输入流特有方法</th><th>说明</th></tr></thead><tbody><tr><td>public String readLine()</td><td>读取一行数据，如果没有数据可读了，会返回Null</td></tr></tbody></table><table><thead><tr><th>字符缓冲输出流特有方法</th><th>说明</th></tr></thead><tbody><tr><td>public void newLine()</td><td>跨平台换行</td></tr></tbody></table><p>输入流示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedStreamDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 字符缓冲输入流</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建字符缓冲输入流的对象</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;test.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 读取数据</span></span><br><span class="line">        <span class="comment">// 细节：</span></span><br><span class="line">        <span class="comment">// readLine方法在读取的时候，一次读一整行，遇到回车换行结束</span></span><br><span class="line">        <span class="comment">// 但是并不会把回车换行读到内存当中</span></span><br><span class="line">        <span class="comment">// String line = br.readLine();</span></span><br><span class="line">        <span class="comment">// System.out.println(line);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取所有文本内容</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出流示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedStreamDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 字符缓冲输出流</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建字符缓冲输入流的对象</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;e.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 写出数据</span></span><br><span class="line">        bw.write(<span class="string">&quot;这是一段写入缓冲区流的测试文字&quot;</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.write(<span class="string">&quot;这也是一段字符写入缓冲流的测试文字&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><p>转换流是字符流和字节流之间的桥梁</p><p>作用一：指定字符集读写（淘汰）</p><p>作用二：字节流想要使用字符流中的方法</p><h3 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConvertStreamDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 利用转换流按照指定字符编码读取</span></span><br><span class="line">        <span class="comment">// 该方法已经被JDK11淘汰了</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*// 1. 创建对象并指定字符编码</span></span><br><span class="line"><span class="comment">        InputStreamReader isr = new InputStreamReader(new FileInputStream(&quot;gbkFile.txt&quot;),&quot;GBK&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // 2. 读取数据</span></span><br><span class="line"><span class="comment">        int ch;</span></span><br><span class="line"><span class="comment">        while ((ch = isr.read()) != -1) &#123;</span></span><br><span class="line"><span class="comment">            System.out.print((char) ch);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // 3. 释放资源</span></span><br><span class="line"><span class="comment">        isr.close();*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 替代方案</span></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;gbkFile.txt&quot;</span>, Charset.forName(<span class="string">&quot;GBK&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 读取数据</span></span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read(chars)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(chars,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出流"><a href="#输出流" class="headerlink" title="输出流"></a>输出流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConvertStreamDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 利用转换流按照指定字符编码写出</span></span><br><span class="line">        <span class="comment">// 以下方法同样也是被被淘汰了</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        // 1. 创建转换流对象</span></span><br><span class="line"><span class="comment">        OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(&quot;OutPutGBKFile.txt&quot;),&quot;GBK&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // 2. 写出数据</span></span><br><span class="line"><span class="comment">        osw.write(&quot;Hello，世界&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // 3. 释放资源</span></span><br><span class="line"><span class="comment">        osw.close();*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 替代方案</span></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;OutPutGBKFile.txt&quot;</span>, Charset.forName(<span class="string">&quot;GBK&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 写出数据</span></span><br><span class="line">        fw.write(<span class="string">&quot;你好，世界&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="转换文件编码"><a href="#转换文件编码" class="headerlink" title="转换文件编码"></a>转换文件编码</h3><p>方法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConvertStreamDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 将本地GBK文件转换为UTF-8</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// JDK11之前的方案</span></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;gbkFile.txt&quot;</span>),<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;OldOutPutUTF.txt&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 循环读取/写出</span></span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            osw.write(b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        osw.close();</span><br><span class="line">        isr.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConvertStreamDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 将本地GBK文件转换为UTF-8</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// JDK11之后的方案</span></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;gbkFile.txt&quot;</span>, Charset.forName(<span class="string">&quot;GBK&quot;</span>));</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;NewOutPutGBKFile.txt&quot;</span>,Charset.forName(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 写出数据</span></span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fw.write(b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字节流使用字符流方法"><a href="#字节流使用字符流方法" class="headerlink" title="字节流使用字符流方法"></a>字节流使用字符流方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConvertStreamDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 利用字节流读取文件中的数据，每次读取一整行，而且不能出现乱码</span></span><br><span class="line">        <span class="comment">// 字节流在读取中文时，会出现乱码，这时需要字符流</span></span><br><span class="line">        <span class="comment">// 字节流里面是没有读取一整行的方法的，这时需要缓冲流</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="comment">/*FileInputStream fis = new FileInputStream(&quot;gbkFile.txt&quot;);</span></span><br><span class="line"><span class="comment">        InputStreamReader isr = new InputStreamReader(fis,Charset.forName(&quot;GBK&quot;));</span></span><br><span class="line"><span class="comment">        BufferedReader br = new BufferedReader(isr);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;gbkFile.txt&quot;</span>),<span class="string">&quot;GBK&quot;</span>));</span><br><span class="line"></span><br><span class="line">        String s;</span><br><span class="line">        <span class="keyword">while</span> ((s = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="序列化流-反序列化流"><a href="#序列化流-反序列化流" class="headerlink" title="序列化流&#x2F;反序列化流"></a>序列化流&#x2F;反序列化流</h2><p>序列化流(ObjectOutputStream)：可以把Java中的对象写到本地文件中，所以也叫对象操作输出流</p><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td>public ObjectOutputStream(OutputStream out)</td><td>把基本流包装为高级流</td></tr></tbody></table><table><thead><tr><th>成员方法</th><th>说明</th></tr></thead><tbody><tr><td>public final void writeObejct(Object obj)</td><td>把对象序列化（写出）到文件中去</td></tr></tbody></table><p>细节：使用对象输出流将对象保存到文件时会出现<code>NotSerializableException</code>异常</p><p>解决方案：需要让JavaBean类实现Serializable接口</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectStreamDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 需求：利用序列化流/对象操作输出流，把一个对象写到本地文件中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建序列化流对象</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;zhangsan.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 写出数据</span></span><br><span class="line">        oos.writeObject(stu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 释放资源</span></span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反序列化流(ObjectInputStream)</p><p>可以把序列化到本地文件中的对象，读取到程序中来</p><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td>public ObjectInputStream(InputStream out)</td><td>把基本流变成高级流</td></tr></tbody></table><table><thead><tr><th>成员方法</th><th>说明</th></tr></thead><tbody><tr><td>public Object readObject()</td><td>序列化到本地文件中的对象，读取到程序中来</td></tr></tbody></table><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectStreamDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建反序列化流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;zhangsan.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 读取数据</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="comment">// 要打印对象值而不是地址值，需要在Javabean中重写toString方法</span></span><br><span class="line">        System.out.println(o.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h3><p>假设最初的Javabean如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Serializable接口里面是没有抽象方法的，所以也叫这种接口为标记型接口</span></span><br><span class="line"><span class="comment">* 一旦实现了这个接口，那么就表示当前的Student类可以被序列化</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将对象序列化输出到文本后，又对Javabean进行了修改，修改为以下内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Serializable接口里面是没有抽象方法的，所以也叫这种接口为标记型接口</span></span><br><span class="line"><span class="comment">* 一旦实现了这个接口，那么就表示当前的Student类可以被序列化</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> String[] hobby;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getHobby() &#123;</span><br><span class="line">        <span class="keyword">return</span> hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHobby</span><span class="params">(String[] hobby)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hobby = hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，如果将序列化对象进行反序列化操作，就会提示报错，这是由于Javabean内的<code>版本号</code>不一致导致的</p><p>解决方法：</p><p>在Javabean中定义常量版本号（固定版本号），写法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br></pre></td></tr></table></figure><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ol><li>使用序列化流将对象写到文件时，需要让Javabean类实现<code>Serializable</code>接口。否则，会出现<code>NotSerializableException</code>异常</li><li>序列化流写到文件中的数据是不能修改的，一旦修改就无法再次读回来了</li><li>序列化对象后，修改了Javabean类，再次反序列化，会出问题，会抛出<code>InvalidClassException</code>异常<ul><li>解决方案：给Javabean类添加serialVersionUID（序列号、版本号）</li></ul></li><li>如果一个对象中的某个成员变量的值不想被序列化，可以给该成员变量加<code>transient</code>关键字修饰，该关键字标记的成员变量不参与序列化过程</li></ol><h3 id="多个对象序列化"><a href="#多个对象序列化" class="headerlink" title="多个对象序列化"></a>多个对象序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mytest.Student;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 需求：将多个自定义对象序列化到文件中，但是对象的个数不确定</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="string">&quot;苏州&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>,<span class="string">&quot;南京&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>,<span class="number">17</span>,<span class="string">&quot;无锡&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;objectsFile.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 序列化多个对象</span></span><br><span class="line">        oos.writeObject(s1);</span><br><span class="line">        oos.writeObject(s2);</span><br><span class="line">        oos.writeObject(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.EOFException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建反序列化流的对象</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;objectsFile.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 读取数据</span></span><br><span class="line">        <span class="comment">// 执行一次方法返回一个对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">                System.out.println(o.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (EOFException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行完毕&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><p>只有输出流，即<code>OutputStream</code>和<code>Writer</code>的子类：</p><ul><li>PrintStream</li><li>PrintWriter</li></ul><p>特点：</p><ol><li>打印流只操作文件目的地，不操作数据源</li><li>特有的写出方法可以实现，数据原样写出</li><li>特有的写出方法，可以实现自动刷新，自动换行<ul><li>打印一次数据 &#x3D; 写出 + 换行 + 刷新</li></ul></li></ol><h3 id="字节打印流"><a href="#字节打印流" class="headerlink" title="字节打印流"></a>字节打印流</h3><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td>public PrintStream(OutputStream&#x2F;File&#x2F;String)</td><td>关联字节输出流&#x2F;文件&#x2F;文件路径</td></tr><tr><td>public PrintStream(String fileName,Charset charset)</td><td>指定字符编码</td></tr><tr><td>public PrintStream(OutputStream out,boolean autoFlush)</td><td>自动刷新</td></tr><tr><td>public PrintStream(OutputStream out,boolean autoFlush,String encoding)</td><td>指定字符编码且自动刷新</td></tr></tbody></table><p>字节流底层没有缓冲区，开不开自动刷新都一样</p><table><thead><tr><th>成员方法</th><th>说明</th></tr></thead><tbody><tr><td>public void write(int b)</td><td>常规方法：规则跟之前一样，将指定的字节写出</td></tr><tr><td>public void println(Xxx xx)</td><td>特有方法：打印任意数据，自动刷新，自动换行</td></tr><tr><td>public void print(Xxx xx)</td><td>特有方法：打印任意数据，不换行</td></tr><tr><td>public void printf(String format,Object… args)</td><td>特有方法：带有占位符的打印语句，不换行</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintStreamDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException, UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建字节打印流对象</span></span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;PrintStreamFile1.txt&quot;</span>),<span class="literal">true</span>,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 写出数据</span></span><br><span class="line">        ps.println(<span class="number">97</span>);</span><br><span class="line">        ps.print(<span class="literal">true</span>);</span><br><span class="line">        ps.println();</span><br><span class="line">        ps.printf(<span class="string">&quot;%s 一段 %s&quot;</span>,<span class="string">&quot;这是&quot;</span>,<span class="string">&quot;文字&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        ps.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符打印流"><a href="#字符打印流" class="headerlink" title="字符打印流"></a>字符打印流</h3><table><thead><tr><th>构造方法</th><th>说明说明</th></tr></thead><tbody><tr><td>public PrintWriter(Writer&#x2F;File&#x2F;String)</td><td>关联字节输出流&#x2F;文件&#x2F;文件路径</td></tr><tr><td>public PrintWriter(String fileName,Charset charset)</td><td>指定字符编码</td></tr><tr><td>public PrintWriter(Write w,boolean autoFlush)</td><td>自动刷新</td></tr><tr><td>public PrintWriter(OutputStream out,boolean autoFlush,String encoding)</td><td>指定字符编码且自动刷新</td></tr></tbody></table><p>字符流底层有缓冲区，想要自动刷新需要开启</p><table><thead><tr><th>成员方法</th><th>说明</th></tr></thead><tbody><tr><td>public void write(int b)</td><td>常规方法：规则跟之前一样，将指定的字节写出</td></tr><tr><td>public void println(Xxx xx)</td><td>特有方法：打印任意数据，自动刷新，自动换行</td></tr><tr><td>public void print(Xxx xx)</td><td>特有方法：打印任意数据，不换行</td></tr><tr><td>public void printf(String format,Object… args)</td><td>特有方法：带有占位符的打印语句，不换行</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintStreamDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建字符打印流对象</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;PrintWriterFile.txt&quot;</span>),<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 写出数据</span></span><br><span class="line">        pw.println(<span class="string">&quot;PrintWriter方法很好用&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintStreamDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 打印流的应用场景</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取打印流的对象，此打印流在虚拟机启动的时候，由虚拟机创建，默认指向控制台</span></span><br><span class="line">        <span class="comment">// 特殊的打印流，系统中的标准输出流，不能关闭，在系统中是唯一的（如果误关，需要重启虚拟机）</span></span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> System.out;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用打印流中的方法println</span></span><br><span class="line">        ps.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="（解）压缩流"><a href="#（解）压缩流" class="headerlink" title="（解）压缩流"></a>（解）压缩流</h2><h3 id="解压缩流"><a href="#解压缩流" class="headerlink" title="解压缩流"></a>解压缩流</h3><p>解压的本质：把压缩包里面的每一个文件或者文件夹读取出来，按照层级拷贝到目的地当中</p><p>Java中只能识别<code>zip</code>压缩文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZipStreamDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建一个File表示要解压的压缩包</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\test.zip&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建一个File表示解压的目的地</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Zhao\\Desktop&quot;</span>);</span><br><span class="line"></span><br><span class="line">        unzip(src,dest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个方法用来解压</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unzip</span><span class="params">(File src,File dest)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 解压的本质：把压缩包里面的每一个文件或者文件夹读取出来，按照层级拷贝到目的地当中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个解压缩流用来读取压缩包中的数据</span></span><br><span class="line">        <span class="type">ZipInputStream</span> <span class="variable">zip</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(src));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 要先获取到压缩包里面的每一个zipEntry对象</span></span><br><span class="line">        <span class="comment">/*for (int i = 0; i &lt; 100; i++) &#123;</span></span><br><span class="line"><span class="comment">            ZipEntry entry = zip.getNextEntry();</span></span><br><span class="line"><span class="comment">            System.out.println(entry);  // 会遍历压缩包里的所有文件，遍历完所有后继续遍历会返回null</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        ZipEntry entry;</span><br><span class="line">        <span class="keyword">while</span> ((entry = zip.getNextEntry()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(entry);</span><br><span class="line">            <span class="keyword">if</span> (entry.isDirectory()) &#123;</span><br><span class="line">                <span class="comment">// 文件夹：需要在目的地dest处创建一个同样的文件夹</span></span><br><span class="line">                <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dest,entry.toString());</span><br><span class="line">                file.mkdirs();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 文件：需要读取到压缩包中的文件，并把他存放到目的地dest文件夹中（按照层级目录进行存放）</span></span><br><span class="line">                <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(dest,entry.toString()));</span><br><span class="line">                <span class="type">int</span> b;</span><br><span class="line">                <span class="keyword">while</span> ((b = zip.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// 写到目的地</span></span><br><span class="line">                    fos.write(b);</span><br><span class="line">                &#125;</span><br><span class="line">                fos.close();</span><br><span class="line">                zip.closeEntry();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        zip.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="压缩流"><a href="#压缩流" class="headerlink" title="压缩流"></a>压缩流</h3><p>压缩本质：把每一个（文件&#x2F;文件夹）看成<code>ZipEntry</code>对象放到压缩包中</p><p>单文件压缩</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZipStreamDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 压缩流：</span></span><br><span class="line"><span class="comment">        *   需求：</span></span><br><span class="line"><span class="comment">        *       把E:\\test.txt打包成一个压缩包</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 该示例只支持单文件压缩</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建File对象表示要压缩的文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\test.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建File对象表示压缩包的位置</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Zhao\\Desktop&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 调用方法用来压缩</span></span><br><span class="line">        toZip(src,dest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 作用：</span></span><br><span class="line"><span class="comment">    * 参数一：表示要压缩的文件</span></span><br><span class="line"><span class="comment">    * 参数二：表示压缩包的位置</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">toZip</span><span class="params">(File src,File dest)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建压缩流关联压缩包</span></span><br><span class="line">        <span class="type">ZipOutputStream</span> <span class="variable">zos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(dest,<span class="string">&quot;a.zip&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建ZipEntry对象，表示压缩包里面的每一个文件和文件夹</span></span><br><span class="line">        <span class="type">ZipEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipEntry</span>(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 把ZipEntry对象放到压缩包当中</span></span><br><span class="line">        zos.putNextEntry(entry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 把src中的数据写到压缩包中</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(src);</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            zos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 释放资源</span></span><br><span class="line">        zos.closeEntry();</span><br><span class="line">        zos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件夹压缩&#x2F;多文件压缩</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZipStreamDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 多文件压缩</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建File对象表示要压缩的文件夹</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\ziptest&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建File对象表示压缩包的父级路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">destParent</span> <span class="operator">=</span> src.getParentFile();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 创建File对象表示压缩包的路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(destParent,src.getName() + <span class="string">&quot;.zip&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 创建压缩流关联压缩包</span></span><br><span class="line">        <span class="type">ZipOutputStream</span> <span class="variable">zos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(dest));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 获取src里面的每一个文件，变成ZipEntry对象，放入到压缩包当中</span></span><br><span class="line">        toZip(src,zos, src.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 释放资源</span></span><br><span class="line">        zos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 作用：获取src里面的每一个文件，变成ZipEntry对象，放入到压缩包当中</span></span><br><span class="line"><span class="comment">    * 参数一：数据源</span></span><br><span class="line"><span class="comment">    * 参数二：压缩流</span></span><br><span class="line"><span class="comment">    * 参数三：压缩包内部的路径</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">toZip</span><span class="params">(File src,ZipOutputStream zos,String name)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 进入src文件夹</span></span><br><span class="line">        File[] files = src.listFiles();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">                <span class="comment">// 3. 判断-文件，变成ZipEntry对象，放入到压缩包当中</span></span><br><span class="line">                <span class="type">ZipEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipEntry</span>(name + <span class="string">&quot;\\&quot;</span> + file.getName());</span><br><span class="line">                zos.putNextEntry(entry);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 读取文件中的数据，写到压缩包</span></span><br><span class="line">                <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">                <span class="type">int</span> b;</span><br><span class="line">                <span class="keyword">while</span> ((b = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    zos.write(b);</span><br><span class="line">                &#125;</span><br><span class="line">                fis.close();</span><br><span class="line">                zos.closeEntry();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 4. 判断-文件夹，递归</span></span><br><span class="line">                toZip(file,zos,name + <span class="string">&quot;\\&quot;</span> + file.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Commons-io"><a href="#Commons-io" class="headerlink" title="Commons-io"></a>Commons-io</h2><p>Commons-io是apache开源基金组织提供的一组有关IO操作的开源工具包</p><p>作用：提高IO流的开发效率</p><p>Commons有以下工具类：</p><ul><li>StringUtils 字符串工具类</li><li>NumberUtils 数字工具类</li><li>ArrayUtils 数组工具类</li><li>RandomUtils 随机数工具类</li><li>DateUtils 日期工具类</li><li>StopWatch 秒表工具类</li><li>ClassUtils 反射工具类</li><li>SystemUtils 系统工具类</li><li>MapUtils 集合工具类</li><li>Beanutils bean工具类</li><li>…等等</li></ul><h3 id="Commons-io使用步骤"><a href="#Commons-io使用步骤" class="headerlink" title="Commons-io使用步骤"></a>Commons-io使用步骤</h3><ol><li>在项目中创建一个文件夹：lib</li><li>将jar包复制粘贴到lib文件夹</li><li>右键点击jar包，选择 Add as Library -&gt; 点击OK</li><li>在类中导包使用</li></ol><h3 id="FileUtils"><a href="#FileUtils" class="headerlink" title="FileUtils"></a>FileUtils</h3><table><thead><tr><th>FileUtils类（文件&#x2F;文件夹相关）</th><th>说明</th></tr></thead><tbody><tr><td>static void copyFile(File srcFile,File destFile)</td><td>复制文件</td></tr><tr><td>static void copyDirectory(File srcDir,File destDir)</td><td>复制文件夹</td></tr><tr><td>static void copyDirectoryToDirectory(File srcDir,File destDir)</td><td>复制文件夹</td></tr><tr><td>static void deleteDirectory(File directory)</td><td>删除文件夹</td></tr><tr><td>static void cleanDirectory(File directory)</td><td>清空文件夹</td></tr><tr><td>static String readFileToString(File file,Charset encoding)</td><td>读取文件中的数据变成字符串</td></tr><tr><td>static void write(File file,CharSequence data,String encoding)</td><td>写出数据</td></tr></tbody></table><h3 id="IOUtils类"><a href="#IOUtils类" class="headerlink" title="IOUtils类"></a>IOUtils类</h3><table><thead><tr><th>IOUtils类</th><th>说明</th></tr></thead><tbody><tr><td>public static int copy(InputStream input,OutputStream output)</td><td>复制文件</td></tr><tr><td>public static int copyLarge(Reader input,Writer output)</td><td>复制大文件</td></tr><tr><td>public static String readLines(Reader input)</td><td>读取数据</td></tr><tr><td>public static void write(String data,OutputStream output)</td><td>写出数据</td></tr></tbody></table><h2 id="Hutool工具包"><a href="#Hutool工具包" class="headerlink" title="Hutool工具包"></a>Hutool工具包</h2><p>API文档：<a href="https://www.hutool.cn/docs/#/">入门和安装 (hutool.cn)</a></p><table><thead><tr><th>相关类</th><th>说明</th></tr></thead><tbody><tr><td>IoUtil</td><td>流操作工具类</td></tr><tr><td>FileUtil</td><td>文件读写和操作的工具类</td></tr><tr><td>FileTypeUtil</td><td>文件类型判断工具类</td></tr><tr><td>WatchMonitor</td><td>目录、文件监听</td></tr><tr><td>ClassPathResource</td><td>针对ClassPath中资源的访问封装</td></tr><tr><td>FileReader</td><td>封装文件读取</td></tr><tr><td>FileWriter</td><td>封装文件写入</td></tr></tbody></table><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p>线程：</p><p>线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。</p><p>进程：</p><p>进程是程序的基本执行实体。</p><p>多线程的应用场景：</p><ul><li>软件中的耗时操作：拷贝、迁移大文件，加载大量的资源文件</li><li>所有的聊天软甲</li><li>所有的后台服务器</li></ul><h2 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h2><p>并发：在同一时刻，有多个指令在单个CPU上<code>交替</code>执行</p><p>并行：在同一时刻，有多个指令在多个CPU上<code>同时</code>执行</p><h2 id="多线程的实现方式"><a href="#多线程的实现方式" class="headerlink" title="多线程的实现方式"></a>多线程的实现方式</h2><ol><li>继承<code>Thread</code>类的方式进行实现</li><li>实现<code>Runnable</code>接口的方式进行实现</li><li>利用<code>Callable</code>接口和<code>Future</code>接口方式实现</li></ol><h3 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h3><p>自定义类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 书写线程要执行代码</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;：Hello World!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 多线程的第一种启动方式：</span></span><br><span class="line"><span class="comment">        *   1. 自己定义一个类继承Thread</span></span><br><span class="line"><span class="comment">        *   2. 重写run方法</span></span><br><span class="line"><span class="comment">        *   3. 创建子类对象，并启动线程</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 开启线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Runnable接口"><a href="#Runnable接口" class="headerlink" title="Runnable接口"></a>Runnable接口</h3><p>自定义类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> threadcase2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRun</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 获取到当前线程的对象</span></span><br><span class="line">            <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">            System.out.println(thread.getName() +  <span class="string">&quot;：Hello World!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> threadcase2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 多线程的第二种启动方式：</span></span><br><span class="line"><span class="comment">        *   1. 自己定义一个类实现Runnable接口</span></span><br><span class="line"><span class="comment">        *   2. 重写里面的run方法</span></span><br><span class="line"><span class="comment">        *   3. 创建自己的类的对象</span></span><br><span class="line"><span class="comment">        *   4. 创建一个Thread类的对象，并开启线程</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建自己的类的对象</span></span><br><span class="line">        <span class="comment">// 表示多线程要执行的任务</span></span><br><span class="line">        <span class="type">MyRun</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRun</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给线程设置名字</span></span><br><span class="line">        t1.setName(<span class="string">&quot;线程1：&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程2：&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Callable接口和Future接口"><a href="#Callable接口和Future接口" class="headerlink" title="Callable接口和Future接口"></a>Callable接口和Future接口</h3><p>自定义类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 求 1~100之间的和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 多线程的第三种实现方式：</span></span><br><span class="line"><span class="comment">        *   特点：可以获取到多线程运行的结果</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *   1. 创建一个类MyCallable实现Callable接口</span></span><br><span class="line"><span class="comment">        *   2. 重写call方法（是有返回值的，表示多线程运行的结果）</span></span><br><span class="line"><span class="comment">        *   3. 创建MyCallable的对象（表示多线程要执行的任务）</span></span><br><span class="line"><span class="comment">        *   4. 创建FutureTask的对象（作用：管理多线程运行的结果）</span></span><br><span class="line"><span class="comment">        *   5. 创建Thread类的对象，并启动（表示线程）</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建自己的类的对象</span></span><br><span class="line">        <span class="type">MyCallable</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建FutureTask的对象</span></span><br><span class="line">        FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(mc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程的对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ft);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取多线程的结果</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">res</span> <span class="operator">=</span> ft.get();</span><br><span class="line"></span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择方式"><a href="#选择方式" class="headerlink" title="选择方式"></a>选择方式</h3><table><thead><tr><th>方式</th><th>优先</th><th>缺点</th></tr></thead><tbody><tr><td>继承Thread类</td><td>编程比较简单，可以直接使用Thread类中的方法</td><td>可拓展性较差，不能再继承其他的类</td></tr><tr><td>实现Runnable接口</td><td>扩展性强，实现该接口的同时还可以继承其他的类</td><td>编程相对复杂，不能直接使用Thread类中的方法</td></tr><tr><td>实现Callable接口</td><td>扩展性强，实现该接口的同时还可以继承其他的类</td><td>编程相对复杂，不能直接使用Thread类中的方法</td></tr></tbody></table><h2 id="Thread常见成员方法"><a href="#Thread常见成员方法" class="headerlink" title="Thread常见成员方法"></a>Thread常见成员方法</h2><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>String getName()</td><td>返回此线程的名称</td></tr><tr><td>void setName(String name)</td><td>设置线程的名称</td></tr><tr><td>static Thread currentThread()</td><td>获取当前线程的对象</td></tr><tr><td>static void sleep(long time)</td><td>让线程休眠指定的时间，单位毫秒</td></tr><tr><td>setPriority(int newPriority)</td><td>设置线程的优先级</td></tr><tr><td>final int getPriority()</td><td>获取线程的优先级</td></tr><tr><td>final void setDaemon(boolean on)</td><td>设置为守护线程</td></tr><tr><td>public static void yield()</td><td>出让线程&#x2F;礼让线程</td></tr><tr><td>public static void join()</td><td>插入线程&#x2F;插队线程</td></tr></tbody></table><p>方法<code>setName(String name)</code>细节：</p><ol><li>如果没有个线程设置名字，线程也是会有默认的名字的。<ul><li>格式：Thread-X（X表示序号，从0开始）</li></ul></li><li>构造方法中可以设置名称</li></ol><p>方法<code>static Thread currentThread()</code>细节：</p><p>当<code>JVM</code>虚拟机启动之后，会自动的启动多条线程</p><p>其中有一条线程就叫做<code>main</code>线程</p><p>它的作用就是去调用main方法，并执行里面的代码</p><p>方法<code>static void sleep(long time)</code>细节：</p><ol><li>哪条线程执行到这个方法，哪条线程就会在这个地方停留相应的时间</li><li>方法的参数：表示睡眠的时间，单位毫秒</li><li>当时间到了之后，线程会自动醒来，继续执行下面的其他代码</li></ol><p>方法<code>setDaemon(boolean on)</code>细节：</p><p>当其他的非守护线程执行完毕之后，守护线程会陆续结束</p><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><p>抢占式调度：随机的选择线程执行</p><p>非抢占式调度：按照顺序执行线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> threadmethod2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * setPriority(int newPriority)  设置线程优先级</span></span><br><span class="line"><span class="comment">         * final int getPriority()       获取线程优先级</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程要执行的参数对象</span></span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr,<span class="string">&quot;Thread01&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr,<span class="string">&quot;Thread02&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(t1.getPriority());   <span class="comment">// 不设置的情况下，优先级默认为5</span></span><br><span class="line">        System.out.println(t2.getPriority());   <span class="comment">// 不设置的情况下，优先级默认为5</span></span><br><span class="line"></span><br><span class="line">        t1.setPriority(<span class="number">1</span>);</span><br><span class="line">        t2.setPriority(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            虽然t2优先级比t1高，但是不代表执行的时候会先完全执行完t2再执行t1</span></span><br><span class="line"><span class="comment">            只不过t2优先执行的概率更高</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><pre class="mermaid">flowchart LR    START["创建线程对象"] -- "start()" --> THEN1["有执行资格<br>没有执行权"]    THEN1 -- 抢到CPU的执行权 --> THEN2["有执行资格<br>有执行权"]    THEN2 -- 其他线程抢走CPU的执行权 --> THEN1    THEN2 --> THEN3["没有执行资格<br>没有执行权"]    THEN3 -- sleep或者其他阻塞方法 --> THEN1    THEN2 --> END["线程死亡<br>变成垃圾"]</pre><h2 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h2><p>在 Java 中，线程安全是指在多线程环境中，多个线程同时访问共享资源时，不会导致数据不一致或其他意外情况。线程安全的主要目标是确保数据的一致性和正确性。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> threadsafe1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticket &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                ticket++;</span><br><span class="line">                System.out.println(getName() + <span class="string">&quot;正在卖第&quot;</span> + ticket + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><ol><li><strong>数据竞争</strong>：多个线程同时读取和修改 <code>ticket</code> 变量，可能会导致多个线程同时增加 <code>ticket</code>，从而导致票数不正确。</li></ol><h3 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h3><p>把操作共享数据的代码锁起来</p><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">synchronized(锁)&#123;</span><br><span class="line">操作共享数据的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点1：锁默认打开，有一个线程进去了，锁自动关闭</p><p>特点2：里面的代码全部执行完毕后，线程出来，锁自动打开</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> threadsafe1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 锁对象，一定要是唯一的</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ticket &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    ticket++;</span><br><span class="line">                    System.out.println(getName() + <span class="string">&quot;正在卖第&quot;</span> + ticket + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常来说，锁对象一般为当前类的字节码对象，如以上示例，锁对象可以为MyThread.class</p><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><p>就是把<code>synchronized</code>关键字加到方法上</p><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符synchronized 返回值类型 方法名(方法参数) &#123;...&#125;</span><br></pre></td></tr></table></figure><p>特点1：同步方法是锁住方法里面所有的代码</p><p>特点2：锁对象不能自己指定</p><p>若为非静态方法：this</p><p>若为静态方法：当前类的字节码文件对象</p><h3 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h3><p>由于<code>synchronized</code>并不能清晰的表达如何加锁和释放锁，所以JDK5以后提供了一个新的锁的对象</p><p>Lock实现提供比使用synchronized方法和语句可以获得更广泛的锁定操作</p><p>Lock中提供了获得锁的释放锁的方法</p><p><code>void lock()</code>：获得锁</p><p><code>void unlock()</code>：释放锁</p><p>Lock是接口不能直接实例化，这里采用它的实现类<code>ReentrantLock</code>来实例化</p><p>ReentrantLock的构造方法</p><p><code>ReentrantLock()</code>：创建一个ReentranLock的实例</p><p>实现案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> threadsafe3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加上static，是防止该类的实现方法创建多个锁</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ticket &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    ticket++;</span><br><span class="line">                    System.out.println(getName() + <span class="string">&quot;正在卖第&quot;</span> + ticket + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用<code>try...catch...finally</code>的格式，是需要保证每个线程可以将锁释放，否则会导致程序无法自动结束</p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>简单理解：死锁就是两个锁嵌套，需要避免这种<font color='red'>错误</font></p><h2 id="生产者和消费者（等待唤醒机制）"><a href="#生产者和消费者（等待唤醒机制）" class="headerlink" title="生产者和消费者（等待唤醒机制）"></a>生产者和消费者（等待唤醒机制）</h2><p>生产者消费者模式是一个十分经典的多线程协作的模式</p><p>生产者：生产数据</p><p>消费者：消费数据</p><h3 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h3><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>void wait()</td><td>当前线程等待，直到被其他线程唤醒</td></tr><tr><td>void notify()</td><td>随机唤醒单个线程</td></tr><tr><td>void notifyAll()</td><td>唤醒所有线程</td></tr></tbody></table><p>示例：</p><p>生产者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> waitandnotify;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Creater</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            生产者</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            1. 循环</span></span><br><span class="line"><span class="comment">            2. 同步代码块（后期可以改同步方法或lock锁）</span></span><br><span class="line"><span class="comment">            3. 判断共享数据是否到了末尾（是）</span></span><br><span class="line"><span class="comment">            4. 判断共享数据是否到了末尾（否）</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Middle.lock) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Middle.count == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 判断中间体状态</span></span><br><span class="line">                    <span class="keyword">if</span> (Middle.flag == <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="comment">// 如果为1，表示停止生产，等待消费者消费</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Middle.lock.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 如果为0，表示需要生产者生产</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;生产者生产了一个物品&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 修改中间体状态</span></span><br><span class="line">                        Middle.flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 唤醒消费者</span></span><br><span class="line">                        Middle.lock.notifyAll();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> waitandnotify;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            消费者</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            1. 循环</span></span><br><span class="line"><span class="comment">            2. 同步代码块（后期可以改同步方法或lock锁）</span></span><br><span class="line"><span class="comment">            3. 判断共享数据是否到了末尾（是）</span></span><br><span class="line"><span class="comment">            4. 判断共享数据是否到了末尾（否）</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Middle.lock)&#123;</span><br><span class="line">                <span class="keyword">if</span> (Middle.count == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 先判断中间体是否存放了生产者的生成物</span></span><br><span class="line">                    <span class="keyword">if</span> (Middle.flag == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// 如果没有，就等待</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Middle.lock.wait();<span class="comment">// 让当前线程跟锁进行绑定</span></span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 把消费的次数-1</span></span><br><span class="line">                        Middle.count--;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 如果有，就由消费者消费</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;消费者在消费，还能消费&quot;</span> + Middle.count + <span class="string">&quot;次&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 消费完后，唤醒生产者继续生产</span></span><br><span class="line">                        Middle.lock.notifyAll();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 修改中间体状态</span></span><br><span class="line">                        Middle.flag = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中间体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> waitandnotify;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Middle</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        作用：控制生产者和消费者的执行</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产者是否产出，有：1，没有：0</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 总个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 锁对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> waitandnotify;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            需求：完成生产者和消费者（等待唤醒机制）的代码</span></span><br><span class="line"><span class="comment">            实现线程轮流交替执行的效果</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程对象</span></span><br><span class="line">        <span class="type">Creater</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Creater</span>();</span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给线程设置名称</span></span><br><span class="line">        c.setName(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">        u.setName(<span class="string">&quot;消费者&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启线程</span></span><br><span class="line">        c.start();</span><br><span class="line">        u.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="阻塞队列方式"><a href="#阻塞队列方式" class="headerlink" title="阻塞队列方式"></a>阻塞队列方式</h3><h4 id="阻塞队列的继承结构"><a href="#阻塞队列的继承结构" class="headerlink" title="阻塞队列的继承结构"></a>阻塞队列的继承结构</h4><p>接口：<code>Iterable</code>、<code>Collection</code>、<code>Queue</code>、<code>BlockingQueue</code></p><p>实现类：<code>ArrayBlockQueue</code>、<code>LinkedBlockingQueue</code></p><p>生产者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> waitandnotify2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Creater</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    ArrayBlockingQueue&lt;String&gt; queue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Creater</span><span class="params">(ArrayBlockingQueue&lt;String&gt; queue)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.queue = queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 不断的将产物放到阻塞队列当中</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                queue.put(<span class="string">&quot;产物&quot;</span>);    <span class="comment">// 底层已经创建了锁对象，不需要写同步代码块</span></span><br><span class="line">                System.out.println(<span class="string">&quot;生产者生产了一个产物&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> waitandnotify2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    ArrayBlockingQueue&lt;String&gt; queue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(ArrayBlockingQueue&lt;String&gt; queue)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.queue = queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 不断的将产物放到阻塞队列当中</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">take</span> <span class="operator">=</span> queue.take(); <span class="comment">// 底层已经创建了锁对象，不需要写同步代码块</span></span><br><span class="line">                System.out.println(take);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> waitandnotify2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            需求：利用阻塞队列完成生产者和消费者（等待唤醒机制）的代码</span></span><br><span class="line"><span class="comment">            细节：生产者和消费者必须使用同一个阻塞队列</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建阻塞队列的对象</span></span><br><span class="line">        ArrayBlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建线程对象，并把阻塞队列传递到对象中去</span></span><br><span class="line">        <span class="type">Creater</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Creater</span>(queue);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(queue);</span><br><span class="line"></span><br><span class="line">        c.setName(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">        u.setName(<span class="string">&quot;消费者&quot;</span>);</span><br><span class="line"></span><br><span class="line">        c.start();</span><br><span class="line">        u.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h2><p>线程可以处于下列状态之一：</p><ul><li>NEW（新建状态）：至今尚未启动的线程处于这种状态</li><li>RUNNABLE（就绪状态）：正在Java虚拟机中执行的线程处于这种状态</li><li>BLOCKED（阻塞状态）：受阻塞并等待某个监视器锁的线程处于这种状态</li><li>WAITING（等待状态）：无限期地等待另一个线程来执行某一特定操作的线程处于这种状态</li><li>TIMED_WAITING（计时状态）：等待另一个线程来执行取决于指定等待时间的操作的线程处于这种状态</li><li>TERMINATED（结束状态）：已退出的线程处于这种状态</li></ul><p>在给定时间点上，<font color='red'>一个线程只能处于一种状态</font>。这些状态是虚拟机状态，它们并没有反映所有操作系统线程状态。</p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h3 id="以前的多线程弊端"><a href="#以前的多线程弊端" class="headerlink" title="以前的多线程弊端"></a>以前的多线程弊端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">多线程执行的一些代码</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MyThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"><span class="type">MyThread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br></pre></td></tr></table></figure><p>弊端一：用到线程的时候就创建</p><p>弊端二：用完之后线程就消失</p><h3 id="核心原理"><a href="#核心原理" class="headerlink" title="核心原理"></a>核心原理</h3><ol><li>创建一个池子，池子中是空的</li><li>提交任务时，池子会创建新的线程对象，任务执行完成，线程归还给池子。下回再次提交任务时，不需要创建任务时，不需要创建新的线程，直接复用已有的线程即可</li><li>如果提交任务时，池子中没有空闲线程，也无法创建新的线程，任务就会排队等待</li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ol><li><p>创建线程池</p></li><li><p>提交任务</p></li><li><p>所有的任务全部执行完毕，关闭线程池</p></li></ol><h4 id="创建线程池"><a href="#创建线程池" class="headerlink" title="创建线程池"></a>创建线程池</h4><p>Executors：线程池工具通过调用方法返回不同类型的线程池对象</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public static ExecutorService newCachedThreadPool()</td><td>创建一个没有上限的线程池</td></tr><tr><td>public static ExecutorService newFixedThreadPool(int nThreads)</td><td>创建有上限的线程池</td></tr></tbody></table><p>方法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Y0threadpool1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadPoolDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public static ExecutorService newCachedThreadPool() 创建一个没有上限的线程池</span></span><br><span class="line"><span class="comment">            public static ExecutorService newFixedThreadPool(int nThreads) 创建一个有上限的线程池</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 获取线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">pool1</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 提交任务（线程复用）</span></span><br><span class="line">        pool1.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        pool1.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        pool1.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        pool1.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        pool1.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 销毁线程池</span></span><br><span class="line">        <span class="comment">// pool1.shutdown();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Y0threadpool1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Y0threadpool1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadPoolDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public static ExecutorService newCachedThreadPool() 创建一个没有上限的线程池</span></span><br><span class="line"><span class="comment">            public static ExecutorService newFixedThreadPool(int nThreads) 创建一个有上限的线程池</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 获取线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">pool1</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 提交任务</span></span><br><span class="line">        pool1.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        pool1.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        pool1.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        pool1.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        pool1.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());<span class="comment">// 最多只会出现pool-1-thread-3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 销毁线程池</span></span><br><span class="line">        <span class="comment">// pool1.shutdown();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h3><p>核心元素一：核心线程数量</p><p>核心元素二：线程池中最大线程的数量</p><p>核心元素三：空闲时间（值）</p><p>核心元素四：空闲时间（单位）</p><p>核心元素五：阻塞队列</p><p>核心元素六：创建线程的方式</p><p>核心元素七：要执行的任务过多时的解决方案</p><p>注意点：</p><ol><li>当核心线程满时，再提交任务就会排队</li><li>当核心线程满时，队伍也满时，会创建临时线程</li><li>当核心线程、队伍、临时线程都满时，会触发任务拒绝策略</li></ol><h4 id="任务拒绝策略"><a href="#任务拒绝策略" class="headerlink" title="任务拒绝策略"></a>任务拒绝策略</h4><table><thead><tr><th>任务拒绝策略</th><th>说明</th></tr></thead><tbody><tr><td>ThreadPoolExecutor.AbortPolicy</td><td>默认策略：丢弃任务并抛出RejectedExecutionException异常</td></tr><tr><td>ThreadPoolExecutor.DiscardPolicy</td><td>丢弃任务，但是不抛出异常（不推荐）</td></tr><tr><td>ThreadPoolExecutor.DiscardOldestPolicy</td><td>抛弃队列中等待最久的任务，然后把当前任务加入队列中</td></tr><tr><td>ThreadPoolExecutor.CallerRunsPolicy</td><td>调用任务的run()方法绕过线程池直接执行</td></tr></tbody></table><h3 id="线程池的大小"><a href="#线程池的大小" class="headerlink" title="线程池的大小"></a>线程池的大小</h3><p>CPU密集型计算：<code>最大并行数+1</code></p><p>假设CPU是4核8线程，那么计算过程就是：8 + 1</p><p>I&#x2F;O密集型运算：<code>最大并行数 * 期望CPU利用率 * (总时间(CPU计算时间 + 等待时间) / CPU计算时间)</code></p><p>假设CPU是4核8线程，希望CPU利用率为100%，且需要进行以下操作：</p><ol><li>读取两个数据（耗时：1s）</li><li>相加（耗时：1s）</li></ol><p>那么计算过程就是</p><p>8 * 100% * ((50% + 50%) &#x2F; 50%) &#x3D; 16</p><h4 id="并行数"><a href="#并行数" class="headerlink" title="并行数"></a>并行数</h4><p>查看Java虚拟机可以的处理器的数目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class="line">System.out.println(count)</span><br></pre></td></tr></table></figure><h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><p>Java中可以使用<code>Java.net</code>包下的技术轻松开发出常见的网络应用程序</p><h2 id="常见的软件架构"><a href="#常见的软件架构" class="headerlink" title="常见的软件架构"></a>常见的软件架构</h2><p>C&#x2F;S——Client&#x2F;Server（客户端&#x2F;服务器）：</p><p>在用户本地需要下载并安装客户端程序， 在远程有一个服务器端程序</p><p>B&#x2F;S——Browser&#x2F;Server（浏览器&#x2F;服务器）：</p><p>只需要一个浏览器，用户通过不同的网址。客户访问不同的服务器</p><h3 id="B-S架构的优缺点"><a href="#B-S架构的优缺点" class="headerlink" title="B&#x2F;S架构的优缺点"></a>B&#x2F;S架构的优缺点</h3><ol><li>不需要开发客户端，只需要页面+服务端</li><li>用户不需要下载，打开浏览器就能使用</li><li>如果应用过大，用户体验受到影响</li></ol><h3 id="C-S架构的优缺点"><a href="#C-S架构的优缺点" class="headerlink" title="C&#x2F;S架构的优缺点"></a>C&#x2F;S架构的优缺点</h3><ol><li>画面可以做的非常精美，用户体验好</li><li>需要开发客户端</li><li>用户需要下载和更新的时候太麻烦</li></ol><h2 id="网络编程三要素"><a href="#网络编程三要素" class="headerlink" title="网络编程三要素"></a>网络编程三要素</h2><p>IP + 端口号 + 协议</p><p>IP：设备在网络中的地址，是唯一的标识</p><p>端口号：应用程序在设备中唯一的标识</p><p>协议：数据在网络传输中的规则，常见的协议有：UDP、TCP、HTTP、HTTPS、FTP</p><h3 id="InetAddress"><a href="#InetAddress" class="headerlink" title="InetAddress"></a>InetAddress</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>static InetAddress getByName(String host)</td><td>确定主机名称的IP地址。主机名称可以是机器名称，也可以是IP地址</td></tr><tr><td>String getHostName()</td><td>获取此IP地址的主机名</td></tr><tr><td>String getHostAddress()</td><td>返回文本显示中的IP地址字符串</td></tr></tbody></table><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><p>端口号范围：0~65535</p><p>其中，0~1023之间的端口号预留给系统，1024以上的端口可以提供开发</p><p>注意：一个端口只能由一个应用占用</p><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>TCP&#x2F;IP：</p><ol><li>应用层</li><li>表示层</li><li>会话层</li><li>传输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ol><p>应用层：HTTP、FTP、Telnet、DNS</p><p>传输层：TCP、UDP</p><p>网络层：IP、ICMP、ARP</p><h4 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h4><ul><li>用户数据包协议（User Datagram Protocol）</li><li>UDP是面向无连接通信协议。速度快，有大小限制一次最多发送64K，数据不安全，易丢失数据。</li></ul><h4 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h4><ul><li>传输控制协议TCP（Transmission Control Protocol）</li><li>TCP协议是面向连接的通信协议。速度慢，没有大小限制，数据安全。</li></ul><h2 id="UDP通信程序"><a href="#UDP通信程序" class="headerlink" title="UDP通信程序"></a>UDP通信程序</h2><h3 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h3><ol><li>创建发送端的<code>DatagramSocket对象</code></li><li>数据打包（DatagramPacket）</li><li>发送数据</li><li>释放资源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> udpdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMessageDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 发送数据</span></span><br><span class="line">        <span class="comment">// 创建DatagramSocket对象</span></span><br><span class="line">        <span class="comment">// 细节：</span></span><br><span class="line">        <span class="comment">// 空参：所有可用的端口中随机一个进行使用</span></span><br><span class="line">        <span class="comment">// 有参：指定端口进行绑定</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 打包数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;你好啊！！！&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = str.getBytes();</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">10086</span>;</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes,bytes.length,address,port);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 发送数据</span></span><br><span class="line">        ds.send(dp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 释放资源</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h3><ol><li>创建接收端的DatagramSocket对象</li><li>接收打包好的数据</li><li>解析数据包</li><li>释放资源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> udpdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveMessageDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 接收数据</span></span><br><span class="line">        <span class="comment">// 创建DatagramSocket对象</span></span><br><span class="line">        <span class="comment">// 细节：</span></span><br><span class="line">        <span class="comment">// 在接收的时候，一定要绑定端口</span></span><br><span class="line">        <span class="comment">// 并且绑定的端口一定要和发送的端口保持一致</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">10086</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 接收数据包</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, bytes.length);</span><br><span class="line">        <span class="comment">// 该方法是阻塞的</span></span><br><span class="line">        <span class="comment">// 程序执行到这一步的时候，会在这里等待</span></span><br><span class="line">        <span class="comment">// 等发送端发送消息</span></span><br><span class="line">        ds.receive(dp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 解析数据包</span></span><br><span class="line">        <span class="type">byte</span>[] data = dp.getData();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> dp.getLength();</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> dp.getAddress();</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> dp.getPort();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;接收到的数据为：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(data,<span class="number">0</span>, length));</span><br><span class="line">        System.out.println(<span class="string">&quot;该数据是从&quot;</span> + address + <span class="string">&quot;这台电脑的&quot;</span> + port + <span class="string">&quot;端口发出的&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>按照下面的要求实现程序</p><p>UDP发送数据：数据来自于键盘录入，直到输入的数据为886，发送数据结束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> udpdemo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMessageDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        按照下面的要求实现程序</span></span><br><span class="line"><span class="comment">        UDP发送数据：数据来自于键盘录入，直到输入的数据为886，发送数据结束</span></span><br><span class="line"><span class="comment">        UDP接收数据：因为接收端不知道发送端什么时候停止发送，故采用死循环接收</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 打包数据</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;886&quot;</span>.equals(str)) <span class="keyword">break</span>;</span><br><span class="line">            <span class="type">byte</span>[] bytes = str.getBytes();</span><br><span class="line"></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">10086</span>;</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, bytes.length,address,port);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 发送数据</span></span><br><span class="line">            ds.send(dp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 释放资源</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UDP接收数据：因为接收端不知道发送端什么时候停止发送，故采用死循环接收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> udpdemo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveMessageDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 接收数据</span></span><br><span class="line">        <span class="comment">// 创建DatagramSocket对象</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">10086</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 接收数据包</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, bytes.length);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            ds.receive(dp);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 解析数据包</span></span><br><span class="line">            <span class="type">byte</span>[] data = dp.getData();</span><br><span class="line">            <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> dp.getLength();</span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> dp.getAddress();</span><br><span class="line">            <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> dp.getPort();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;接收到的数据为：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(data,<span class="number">0</span>, length));</span><br><span class="line">            System.out.println(<span class="string">&quot;该数据是从&quot;</span> + address + <span class="string">&quot;这台电脑的&quot;</span> + port + <span class="string">&quot;端口发出的&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UDP的三种通信方式"><a href="#UDP的三种通信方式" class="headerlink" title="UDP的三种通信方式"></a>UDP的三种通信方式</h3><ol><li><p>单播：之前的练习就是单播</p></li><li><p>组播：</p><ol><li>组播地址：224.0.0.0 ~ 239.255.255.255</li><li>其中：224.0.0.0 ~ 224.0.0.255 为预留的组播地址</li></ol><p>发送端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> udpdemo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.MulticastSocket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMessageDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        按照下面的要求实现程序</span></span><br><span class="line"><span class="comment">        UDP发送数据：数据来自于键盘录入，直到输入的数据为886，发送数据结束</span></span><br><span class="line"><span class="comment">        UDP接收数据：因为接收端不知道发送端什么时候停止发送，故采用死循环接收</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">MulticastSocket</span> <span class="variable">ms</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MulticastSocket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 打包数据</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;886&quot;</span>.equals(str)) <span class="keyword">break</span>;</span><br><span class="line">            <span class="type">byte</span>[] bytes = str.getBytes();</span><br><span class="line"></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;224.0.0.1&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, bytes.length,address,port);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 发送数据</span></span><br><span class="line">            ms.send(dp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 释放资源</span></span><br><span class="line">        ms.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> udpdemo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.MulticastSocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveMessageDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 接收数据</span></span><br><span class="line">        <span class="comment">// 创建MuticastSocket对象</span></span><br><span class="line">        <span class="type">MulticastSocket</span> <span class="variable">ms</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MulticastSocket</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将当前本机，添加到224.0.0.1的这一组当中</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;224.0.0.1&quot;</span>);</span><br><span class="line">        ms.joinGroup(address);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 接收数据包</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, bytes.length);</span><br><span class="line"></span><br><span class="line">        ms.receive(dp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 解析数据</span></span><br><span class="line">        <span class="type">byte</span>[] data = dp.getData();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> dp.getLength();</span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> dp.getAddress().getHostAddress();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> dp.getAddress().getHostName();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;ip为：&quot;</span> + ip +<span class="string">&quot;主机名为：&quot;</span> + name + <span class="string">&quot;的人，发送了数据&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(data,<span class="number">0</span>,len));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        ms.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> udpdemo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.MulticastSocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveMessageDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 接收数据</span></span><br><span class="line">        <span class="comment">// 创建MuticastSocket对象</span></span><br><span class="line">        <span class="type">MulticastSocket</span> <span class="variable">ms</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MulticastSocket</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将当前本机，添加到224.0.0.1的这一组当中</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;224.0.0.1&quot;</span>);</span><br><span class="line">        ms.joinGroup(address);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 接收数据包</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, bytes.length);</span><br><span class="line"></span><br><span class="line">        ms.receive(dp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 解析数据</span></span><br><span class="line">        <span class="type">byte</span>[] data = dp.getData();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> dp.getLength();</span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> dp.getAddress().getHostAddress();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> dp.getAddress().getHostName();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;ip为：&quot;</span> + ip +<span class="string">&quot;主机名为：&quot;</span> + name + <span class="string">&quot;的人，发送了数据&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(data,<span class="number">0</span>,len));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        ms.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>广播：</p><ol><li>广播地址：255.255.255.255</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> udpdemo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMessageDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        按照下面的要求实现程序</span></span><br><span class="line"><span class="comment">        UDP发送数据：数据来自于键盘录入，直到输入的数据为886，发送数据结束</span></span><br><span class="line"><span class="comment">        UDP接收数据：因为接收端不知道发送端什么时候停止发送，故采用死循环接收</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 打包数据</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;886&quot;</span>.equals(str)) <span class="keyword">break</span>;</span><br><span class="line">            <span class="type">byte</span>[] bytes = str.getBytes();</span><br><span class="line"></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;255.255.255.255&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">10086</span>;</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, bytes.length,address,port);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 发送数据</span></span><br><span class="line">            ds.send(dp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 释放资源</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="TCP通信程序"><a href="#TCP通信程序" class="headerlink" title="TCP通信程序"></a>TCP通信程序</h2><p>TCP通信协议是一种可靠的网络协议，它在通信的两端各建立一个Socket对象</p><p>通信之前要保证连接已经建立</p><p>通过Socket产生IO流来进行网络通信</p><p>客户端：</p><ol><li>创建客户端的Socket对象（Socket）与指定服务端连接<ol><li>Socket(String host, int port)</li></ol></li><li>获取输出流，写数据<ol><li>OutputStream getOutputStream()</li></ol></li><li>释放资源<ol><li>void close()</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tcpdemo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// TCP协议，发送数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建Socket对象</span></span><br><span class="line">        <span class="comment">// 细节：在创建对象的同时会连接服务端</span></span><br><span class="line">        <span class="comment">//      如果连接不上，代码会报错</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 可以从连接通道中获取输出流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">        os.write(<span class="string">&quot;你好&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        os.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器：</p><ol><li><p>创建服务器端的Socket对象（ServerSocket）</p><ol><li>ServerSocket(int port)</li></ol></li><li><p>监听客户端连接，返回一个Socket对象</p><ol><li>Socket accept()</li></ol></li><li><p>获取输入流，读数据，并把数据显示在控制台</p><ol><li>InputStream getInputStream()</li></ol></li><li><p>释放资源</p><ol><li>void close()</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tcpdemo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// TCP协议，接收数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建对象ServerSocket</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 监听客户端的连接</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 从连接通道中获取输入流读取数据</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is);</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println((<span class="type">char</span>)b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多发多收"><a href="#多发多收" class="headerlink" title="多发多收"></a>多发多收</h3><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tcppractice1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 需求：</span></span><br><span class="line">        <span class="comment">// 客户端多次发送数据</span></span><br><span class="line">        <span class="comment">// 服务器多次接收数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9999</span>);</span><br><span class="line">                <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">                    os.write((str + <span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">                    os.flush(); <span class="comment">// 确保数据立即发送</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;关闭&quot;</span>.equals(str)) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                os.close();</span><br><span class="line">                socket.close();</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 退出外层循环</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;连接失败，重新连接中...&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>); <span class="comment">// 等待2秒后重试</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">                    ie.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tcppractice1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">            <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> b;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">while</span> ((b = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>)b);</span><br><span class="line">                sb = sb.append((<span class="type">char</span>)b);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (sb.toString().equals(<span class="string">&quot;关闭&quot;</span>)) &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">                ss.close();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接收和反馈"><a href="#接收和反馈" class="headerlink" title="接收和反馈"></a>接收和反馈</h3><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tcppractice2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 需求：</span></span><br><span class="line">        <span class="comment">// 客户端发送数据，并将服务端的响应数据打印出来</span></span><br><span class="line">        <span class="comment">// 服务端接收数据，并给客户端发送响应数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">10001</span>);</span><br><span class="line">                <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">                <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is);</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">                    os.write((str + <span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">                    os.flush(); <span class="comment">// 确保数据立即发送</span></span><br><span class="line"></span><br><span class="line">                    <span class="type">int</span> b;</span><br><span class="line">                    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                    <span class="keyword">while</span> ((b = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> (<span class="type">char</span>) b;</span><br><span class="line">                        <span class="keyword">if</span> (c == <span class="string">&#x27;\n&#x27;</span>) <span class="keyword">break</span>; <span class="comment">// 读取到换行符时结束</span></span><br><span class="line">                        sb.append(c);</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;服务器响应：&quot;</span> + sb.toString());</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;关闭&quot;</span>.equals(str)) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                os.close();</span><br><span class="line">                socket.close();</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 退出外层循环</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;连接失败，重新连接中...&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>); <span class="comment">// 等待2秒后重试</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">                    ie.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tcppractice2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">10001</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">            <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is);</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 解析数据</span></span><br><span class="line">                <span class="type">int</span> b;</span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                <span class="keyword">while</span> ((b = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> (<span class="type">char</span>) b;</span><br><span class="line">                    System.out.print(c);</span><br><span class="line">                    sb.append(c);</span><br><span class="line">                    <span class="keyword">if</span> (c == <span class="string">&#x27;\n&#x27;</span>) <span class="keyword">break</span>; <span class="comment">// 读取到换行符时结束</span></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 响应数据</span></span><br><span class="line">                os.write(<span class="string">&quot;收到\n&quot;</span>.getBytes());</span><br><span class="line">                os.flush();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 关闭连接</span></span><br><span class="line">                <span class="keyword">if</span> (sb.toString().trim().equals(<span class="string">&quot;关闭&quot;</span>)) &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                    ss.close();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tcppractice3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">10002</span>)) &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">fis</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">                 <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">                 <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;A_test.txt&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">int</span> b;</span><br><span class="line">                <span class="keyword">while</span> ((b = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> (<span class="type">char</span>) b;</span><br><span class="line">                    fos.write(b);</span><br><span class="line">                    <span class="keyword">if</span> (c == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">                        os.write(<span class="string">&quot;接收完毕&quot;</span>.getBytes());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tcppractice3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">10002</span>);</span><br><span class="line">             <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">             <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">             <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">             <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">5</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                os.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            os.write(<span class="string">&quot;\n&quot;</span>.getBytes());</span><br><span class="line">            os.flush(); <span class="comment">// 确保数据被发送</span></span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> b;</span><br><span class="line">            <span class="keyword">while</span> ((b = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>) b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>反射允许对封装类的字段，方法和构造函数的信息进行编程访问</p><h2 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h2><p>共有三种方法：</p><ol><li>Class.forName(“全类名”);</li><li>类名.class</li><li>对象.getClass();</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 第一种方式</span></span><br><span class="line"><span class="comment">// Class.forName(&quot;全类名&quot;)</span></span><br><span class="line"><span class="comment">// 全类名：包名+类名</span></span><br><span class="line"><span class="comment">// 最常用</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;MyReflectDemo1.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 第二种方式</span></span><br><span class="line"><span class="comment">// 一般当作参数进行传递，如多线程的锁</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz2</span> <span class="operator">=</span> Student.class;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 第三种方式</span></span><br><span class="line"><span class="comment">// 当有类的对象时才可以使用</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz3</span> <span class="operator">=</span> s.getClass();</span><br><span class="line">System.out.println(clazz1 == clazz2);   <span class="comment">// true</span></span><br><span class="line">System.out.println(clazz2 == clazz3);   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="获取构造方法"><a href="#获取构造方法" class="headerlink" title="获取构造方法"></a>获取构造方法</h2><p>Class类中用于获取构造方法的方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Constructor&lt;?&gt;[] getConstructors()</td><td>返回所有公共构造方法对象的数组</td></tr><tr><td>Constructor&lt;?&gt;[] getDeclaredConstructors()</td><td>返回所有构造方法对象的数组</td></tr><tr><td>Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;… parameterTypes)</td><td>返回单个公共构造方法对象</td></tr><tr><td>Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</td><td>返回单个构造方法对象</td></tr></tbody></table><p>Constructor类中用于创建对象的方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>T newInstance(Object… initargs)</td><td>根据指定的构造方法创建对象</td></tr><tr><td>setAccessible(boolean flag)</td><td>设置为true，表示取消访问检查</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyReflectDemo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Parameter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myreflectdemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">// 1. 获取class字节码文件对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;MyReflectDemo2.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取构造方法</span></span><br><span class="line">        Constructor[] cons1 = clazz.getConstructors();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Constructor con : cons1) &#123;</span><br><span class="line">            <span class="comment">// public MyReflectDemo2.Student()</span></span><br><span class="line">            <span class="comment">// public MyReflectDemo2.Student(java.lang.String,int)</span></span><br><span class="line">            System.out.println(con);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Constructor[] cons2 = clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor con : cons2) &#123;</span><br><span class="line">            <span class="comment">// public MyReflectDemo2.Student()</span></span><br><span class="line">            <span class="comment">// public MyReflectDemo2.Student(java.lang.String,int)</span></span><br><span class="line">            <span class="comment">// protected MyReflectDemo2.Student(java.lang.String)</span></span><br><span class="line">            <span class="comment">// private MyReflectDemo2.Student(int)</span></span><br><span class="line">            System.out.println(con);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">decon1</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">        <span class="comment">// public MyReflectDemo2.Student()</span></span><br><span class="line">        System.out.println(decon1);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">decon2</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class);</span><br><span class="line">        <span class="comment">// protected MyReflectDemo2.Student(java.lang.String)</span></span><br><span class="line">        System.out.println(decon2);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">decon3</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="comment">// public MyReflectDemo2.Student(java.lang.String,int)</span></span><br><span class="line">        System.out.println(decon3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取权限修饰符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> decon3.getModifiers();  <span class="comment">// public == 1 | protected == 4 | private == 2</span></span><br><span class="line">        System.out.println(modifiers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取参数</span></span><br><span class="line">        Parameter[] parameters = decon3.getParameters();</span><br><span class="line">        <span class="keyword">for</span> (Parameter parameter : parameters) &#123;</span><br><span class="line">            <span class="comment">// java.lang.String arg0</span></span><br><span class="line">            <span class="comment">// int arg1</span></span><br><span class="line">            System.out.println(parameter);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student) decon3.newInstance(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>);</span><br><span class="line">        <span class="comment">// Student&#123;name=&#x27;张三&#x27;, age=23&#125;</span></span><br><span class="line">        System.out.println(stu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 暴力反射：表示临时取消权限校验</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">decon4</span> <span class="operator">=</span> clazz.getDeclaredConstructor(<span class="type">int</span>.class);</span><br><span class="line">        decon4.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) decon4.newInstance(<span class="number">13</span>);</span><br><span class="line">        <span class="comment">// Student&#123;name=&#x27;null&#x27;, age=13&#125;</span></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyReflectDemo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取字段（成员变量）"><a href="#获取字段（成员变量）" class="headerlink" title="获取字段（成员变量）"></a>获取字段（成员变量）</h2><p>Class类中用于获取成员变量的方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Field[] getFields()</td><td>返回所有公共成员变量对象的数组</td></tr><tr><td>Field[] getDeclaredFields()</td><td>返回所有成员变量对象的数组</td></tr><tr><td>Field getField(String name)</td><td>返回单个公共成员变量对象</td></tr><tr><td>Field getDeclaredField(String name)</td><td>返回单个成员变量对象</td></tr></tbody></table><p>Field类中用于创建对象的方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>void set(Object obj,Object value)</td><td>赋值</td></tr><tr><td>Object get(Object obj)</td><td>获取值</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyReflectDemo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> MyReflectDemo3.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myreflectdemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">// 1. 获取class字节码文件的对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;MyReflectDemo3.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取成员变量</span></span><br><span class="line">        Field[] fields1 = clazz.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields1) &#123;</span><br><span class="line">            <span class="comment">// public java.lang.String MyReflectDemo3.Student.gender</span></span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Field[] fields2 = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields2) &#123;</span><br><span class="line">            <span class="comment">// private java.lang.String MyReflectDemo3.Student.name</span></span><br><span class="line">            <span class="comment">// private int MyReflectDemo3.Student.age</span></span><br><span class="line">            <span class="comment">// public java.lang.String MyReflectDemo3.Student.gender</span></span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 获取单个成员变量</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">gender</span> <span class="operator">=</span> clazz.getField(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line">        <span class="comment">// public java.lang.String MyReflectDemo3.Student.gender</span></span><br><span class="line">        System.out.println(gender);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">// private java.lang.String MyReflectDemo3.Student.name</span></span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取权限修饰符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> name.getModifiers();</span><br><span class="line">        System.out.println(modifiers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取数据类型</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">type</span> <span class="operator">=</span> name.getType();</span><br><span class="line">        System.out.println(type);   <span class="comment">// class java.lang.String</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取成员变量记录的值</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(name.get(s));    <span class="comment">// 张三</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改成员变量记录的值</span></span><br><span class="line">        name.set(s,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        <span class="comment">// Student&#123;name=&#x27;李四&#x27;, age=18&#125;</span></span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyReflectDemo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取成员方法"><a href="#获取成员方法" class="headerlink" title="获取成员方法"></a>获取成员方法</h2><p>Class类中用于获取成员方法的方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Method[] getMethods()</td><td>返回所有公共成员方法对象的数组，包括继承的</td></tr><tr><td>Method[] getDeclaredMethods()</td><td>返回所有成员方法对象的数组，包括继承的</td></tr><tr><td>Method getMethod(String name,Class&lt;?&gt;… parameterTypes)</td><td>返回单个公共成员方法对象</td></tr><tr><td>Method getDeclaredMethod(String name,Class&lt;?&gt;… parameterTypes)</td><td>返回单个公共成员方法对象</td></tr></tbody></table><p>Method类中用于创建对象的方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Object invoke(Object obj,Object… args)</td><td>运行方法</td></tr><tr><td>参数一：用obj对象调用该方法 参数二：调用方法的传递的参数（没有就不写）</td><td>返回值：方法的返回值（没有就不写）</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyReflectDemo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Parameter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myflectdemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">// 1. 获取</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;MyReflectDemo4.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取里面所有的方法对象</span></span><br><span class="line">        Method[] methods1 = clazz.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods1) &#123;</span><br><span class="line">            System.out.println(method); <span class="comment">// 会打印所有的公共方法，包括继承的（如Object类）</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Method[] methods2 = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods2) &#123;</span><br><span class="line">            System.out.println(method); <span class="comment">// 会打印所有的方法，包括继承的（如Object类）</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 获取单个方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">eat</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;eat&quot;</span>, String.class);</span><br><span class="line">        System.out.println(eat);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 获取方法的形参</span></span><br><span class="line">        Parameter[] parameters = eat.getParameters();</span><br><span class="line">        <span class="keyword">for</span> (Parameter parameter : parameters) &#123;</span><br><span class="line">            System.out.println(parameter);  <span class="comment">// java.lang.String arg0</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取方法的修饰符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> eat.getModifiers();</span><br><span class="line">        System.out.println(modifiers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取方法的抛出的异常</span></span><br><span class="line">        Class[] exceptionTypes = eat.getExceptionTypes();</span><br><span class="line">        <span class="keyword">for</span> (Class exceptionType : exceptionTypes) &#123;</span><br><span class="line">            <span class="comment">// class java.io.IOException</span></span><br><span class="line">            <span class="comment">// class java.lang.NullPointerException</span></span><br><span class="line">            <span class="comment">// class java.lang.ClassCastException</span></span><br><span class="line">            System.out.println(exceptionType);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法运行</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        eat.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> eat.invoke(s, <span class="string">&quot;炒饭&quot;</span>);</span><br><span class="line">        System.out.println(res);    <span class="comment">// 吃完啦</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyReflectDemo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">eat</span><span class="params">(String something)</span> <span class="keyword">throws</span> IOException,NullPointerException,ClassCastException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在吃&quot;</span> + something);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;吃完啦&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射的作用"><a href="#反射的作用" class="headerlink" title="反射的作用"></a>反射的作用</h2><ol><li>获取一个类里面的所有信息，获取到了之后，再执行其他的业务逻辑</li><li>结合配置文件，动态的创建对象并调用方法</li></ol><p>将对象的成员变量输出为文本文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyReflectDemo5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myreflectdemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            将任意一个对象的所有字段名和值保存到文件中去</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Student s= <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>,<span class="number">177</span>,<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">        Teacher t= <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;小王&quot;</span>,<span class="number">10000</span>);</span><br><span class="line">        saveObject(s);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IllegalAccessException, IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 获取字节码文件的对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> obj.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建IO流</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;a.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取所有的成员变量</span></span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> field.getName();</span><br><span class="line">            <span class="type">Object</span> <span class="variable">val</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 写出数据</span></span><br><span class="line">            bw.write(name + <span class="string">&quot;=&quot;</span> + val);</span><br><span class="line">            bw.newLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><p>特点：无侵入式的给代码增加额外的功能</p><pre class="mermaid">flowchart TB    A[调用者] --> B[代理]    B --> C[对象]</pre><p>Java中，通过接口保证，后面的对象和代理需要实现同一个接口</p><p>接口中就是被代理的所有方法</p><h2 id="创建代理"><a href="#创建代理" class="headerlink" title="创建代理"></a>创建代理</h2><p><code>public static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</code></p><p>参数一：用于指定用哪个类加载器，去加载生成的代理类</p><p>参数二：指定接口，这些接口用于指定生成的代理长什么样子，也就是有哪些方法</p><p>参数三：用来指定生成的代理对象要干什么事情</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mydynamicproxydemo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Helper</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 唱歌</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sing</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;正在唱&quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;谢谢&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跳舞</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dance</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;正在跳舞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mydynamicproxydemo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Helper</span> &#123;</span><br><span class="line">    <span class="comment">// 可以把所有想要被代理的方法定义在接口中</span></span><br><span class="line">    <span class="comment">// 唱歌</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">sing</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跳舞</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">dance</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mydynamicproxydemo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyUtil</span> &#123;</span><br><span class="line">    <span class="comment">// 方法作用：给对象创建一个代理</span></span><br><span class="line">    <span class="comment">// 形参：被代理的对象</span></span><br><span class="line">    <span class="comment">// 返回值：给对象创建的代理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需求：</span></span><br><span class="line">    <span class="comment">// 需要用户唱歌</span></span><br><span class="line">    <span class="comment">// 1. 获取代理的对象</span></span><br><span class="line">    <span class="comment">// 代理对象 = ProxyUtil.createProxy()</span></span><br><span class="line">    <span class="comment">// 2. 再调用代理的唱歌方法</span></span><br><span class="line">    <span class="comment">// 代理对象.唱歌的方法()</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Helper <span class="title function_">createProxy</span><span class="params">(User u)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        参数一：用于指定用哪个类加载器，去加载生成的代理类</span></span><br><span class="line"><span class="comment">        参数二：指定接口，这些接口用于指定生成的代理长什么样子，也就是有哪些方法</span></span><br><span class="line"><span class="comment">        参数三：用来指定生成的代理对象要干什么事情</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Helper</span> <span class="variable">helper</span> <span class="operator">=</span> (Helper) Proxy.newProxyInstance(</span><br><span class="line">                ProxyUtil.class.getClassLoader(),   <span class="comment">// 参数一：用于指定用哪个类加载器，去加载生成的代理类</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Helper.class&#125;,  <span class="comment">// 参数二：指定接口，这些接口用于指定生成的代理长什么样子，也就是有哪些方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;   <span class="comment">// 参数三：用来指定生成的代理对象要干什么事情</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        <span class="comment">// 参数一：代理的对象</span></span><br><span class="line">                        <span class="comment">// 参数二：要运行的方法</span></span><br><span class="line">                        <span class="comment">// 参数三：调用方法时，传递的实参</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">&quot;sing&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;准备话筒，收钱&quot;</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;dance&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;准备场地，收钱&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">return</span> method.invoke(u,args);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> helper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mydynamicproxydemo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 获取代理的对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="type">Helper</span> <span class="variable">proxy</span> <span class="operator">=</span> ProxyUtil.createProxy(u);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 调用唱歌的方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> proxy.sing(<span class="string">&quot;乱唱&quot;</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 调用跳舞的方法</span></span><br><span class="line">        proxy.dance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><p>输出语句记录日志的弊端：</p><ul><li>信息只能展示在控制台</li><li>不能将其记录到其他位置（文件，数据库）</li><li>想取消记录的信息需要修改代码才能完成</li></ul><p>日志技术具备的优势：</p><ul><li>可以将系统执行的信息选择性的记录到指定的位置（控制台、文件中、数据库中）</li><li>可以随时以开关的形式控制是否记录日志，无需修改源代码</li><li>多线程性能较好</li></ul><h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><p>日志规范：一些接口，提供给日志的<font color='red'>实现框架设计</font>的标准</p><p>Commons Logging（简称：JCL）</p><p>Simple Logging Facade for Java（简称：slf4j）</p><p>日志框架：第三方已经做好的日志记录实现代码，程序员可以直接拿走使用</p><ul><li>Log4j</li><li>JUL（java.util.logging）</li><li>Logback</li><li>其他实现</li></ul><p>Tips：因为对<code>Commons Logging</code>的接口不满意，就有了后来<code>SLF4J</code>。之后又对<code>Log4j</code>的性能不满意，就有了后来的<code>Logback</code></p><h2 id="Logback日志框架"><a href="#Logback日志框架" class="headerlink" title="Logback日志框架"></a>Logback日志框架</h2><ul><li><code>Logback</code>是基于<code>slf4j</code>的日志规范实现的框架，性能比之前使用的<code>log4j</code>要好</li><li>官网：<a href="https://logback.qos.ch/index.html">https://logback.qos.ch/index.html</a></li></ul><p>Logback主要分为三个技术模块：</p><ul><li><p>slf4j-api：日志规范</p></li><li><p>logback-core：该模块为其他两个模块提供基础代码，必须有</p></li><li><p>logback-classic：完整实现了<code>slf4j API</code>的模块</p></li><li><p>logback-access模块与Tomcat和Jetty等Servlet容器继承，以提供HTTP访问日志功能</p></li></ul><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ol><li><p>在项目下新建文件夹lib，导入Logback的相关jar包到该文件夹下，并添加到项目依赖库中去</p></li><li><p>将Logback的核心配置文件logback.xml直接拷贝到src目录下</p></li><li><p>在代码中获取日志的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="string">&quot;类对象&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>使用日志对象的方法记录系统的日志信息</p></li></ol><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggerDemo1</span> &#123;</span><br><span class="line">    <span class="comment">// 获取日志对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(LoggerDemo1.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 记录用户的操作日志</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 登录操作</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入用户名&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;zhangsan&quot;</span>.equals(username) &amp;&amp; <span class="string">&quot;123&quot;</span>.equals(password)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">            LOGGER.info(<span class="string">&quot;用户于 xxxx年xx月xx日 xx:xx:xx 登录成功，用户名为：&quot;</span> + username + <span class="string">&quot;，密码为：&quot;</span> + password);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登陆失败&quot;</span>);</span><br><span class="line">            LOGGER.info(<span class="string">&quot;用户于 xxxx年xx月xx日 xx:xx:xx 登录失败，用户名为：&quot;</span> + username + <span class="string">&quot;，密码为：&quot;</span> + password);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tips：日志输出的位置在<code>logback.xml</code>文件中修改</p><p>Logback日志系统的特性都是通过核心配置文件logback.xml控制的</p><h3 id="Logback日志输出位置、格式设置"><a href="#Logback日志输出位置、格式设置" class="headerlink" title="Logback日志输出位置、格式设置"></a>Logback日志输出位置、格式设置</h3><ul><li>通过logback.xml中的&lt;appender&gt;标签可以设置输出位置和日志信息的详细格式</li><li>通常可以设置两个日志输出位置：一个是控制台、一个是系统文件中</li></ul><p>输出到控制台的配置标志</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出到系统文件的配置标志</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><ul><li>级别程度依次是：TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR；默认级别是debug（忽略大小写），对应其方法</li><li>作用：用于控制系统中哪些日志级别是可以输出的，只输出级别不低于设定级别的日志信息</li><li><code>ALL</code>和<code>OFF</code>分别是打开全部日志信息，以及关闭全部日志信息</li></ul><p>具体在&lt;root level&#x3D;”INFO”&gt;标签的<code>level</code>属性中设置日志级别</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><p>作用：负责将<code>.class</code>文件（存储的物理文件）加载到内存中</p><h2 id="类加载时机"><a href="#类加载时机" class="headerlink" title="类加载时机"></a>类加载时机</h2><ol><li>创建类的实例（对象）</li><li>调用类的类方法（静态方法）</li><li>访问类或接口的类变量，或者为该变量赋值（静态变量）</li><li>使用反射方式来强制创建某个类或接口对应的<code>java.lang.Class</code>对象</li><li>初始化某个类的子类</li><li>直接使用<code>java.exe</code>命令来运行某个主类</li></ol><p><font color='red'>用到就加载，不用不加载</font></p><h2 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h2><pre class="mermaid">flowchart LR    A[加载] --> B[验证]    B --> C[准备]    C --> D[解析]    D --> E[初始化]</pre><p>其中，<code>验证、准备、解析</code>为链接阶段</p><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><ul><li>通过一个类的全限定名来获取定义此类的二进制字节流<ul><li>即：通过包名+类名，获取这个类，准备用流进行传输</li></ul></li><li>将这个字节流所代表的静态存储结构转化为运行时数据结构<ul><li>即：在这个类加载到内存中</li></ul></li><li>在内存中生成一个代表这个类的<code>java.lang.Class</code>对象，任何类被使用时，系统都会为之建立一个<code>java.lang.Class</code>对象<ul><li>即：加载完毕创建一个class对象</li></ul></li></ul><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>链接阶段的第一步，这一阶段为了确保Class文件字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身安全</p><p>即：文件中的信息是否符合虚拟机规范，是否存在安全隐患</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>负责为类的类变量（静态变量）分配内存，并设置默认初始化值</p><p>即：初始化静态变量</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>将类的二进制数据流中的符号引用替换为直接引用</p><p>即：本类中如果用到了其他类，此时就需要找到对应的类</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>根据程序员通过程序制定的主观计划去初始化变量和其他资源</p><p>即：静态变量赋值以及初始化其他资源</p><h2 id="类加载器的分类"><a href="#类加载器的分类" class="headerlink" title="类加载器的分类"></a>类加载器的分类</h2><p>启动类加载器（Bootstrap ClassLoader）：虚拟机内置的类加载器</p><p>平台类加载器（Platfrom ClassLoader）：负责加载JDK中一些特殊的模块</p><p>系统类加载器（System ClassLoader）：负责加载用户类路径上所指定的类库</p><h2 id="类加载方法"><a href="#类加载方法" class="headerlink" title="类加载方法"></a>类加载方法</h2><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static ClassLoader getSystemClassLoader()</td><td>获取系统类加载器</td></tr><tr><td>public InputStream getResourceAsStream(String name)</td><td>加载某一个资源文件</td></tr></tbody></table><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p>作用：对程序进行标注，通过注解可以给类增加额外的信息</p><p>注解是给编译器或JVM看的，编译器或JVM可以根据注解来完成对应的功能</p><p>@override：表示方法的重写</p><p>@Deprecated：表示方法已经过时，但是仍然可以使用，并且有更好的替代方案</p><p>@SuppressWarnings(“all”)：压制警告</p><p>初次之外，还需要掌握第三方框架中提供的注解</p><h2 id="自定义注解（了解即可）"><a href="#自定义注解（了解即可）" class="headerlink" title="自定义注解（了解即可）"></a>自定义注解（了解即可）</h2><p>自定义注解单独存在是没有什么意义的，<font color='red'>一般会跟反射结合起来使用</font>，会用反射去解析注解</p><p>针对于注解，只要掌握会使用别人已经写好的注解即可</p><p>关于注解的解析，一般是在框架的底层已经写好了</p><h3 id="自定义注解格式"><a href="#自定义注解格式" class="headerlink" title="自定义注解格式"></a>自定义注解格式</h3><ul><li>自定义注解就是自己做一个注解来使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名称&#123;</span><br><span class="line"><span class="keyword">public</span> 属性类型 属性名() <span class="keyword">default</span> 默认值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>使用自定义注解时要保证注解每个属性都有值</li><li>注解可以使用默认值</li></ul><p>使用自定义注解格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@注解名(属性名1=值1,属性名2=值2)</span><br></pre></td></tr></table></figure><h3 id="特殊属性"><a href="#特殊属性" class="headerlink" title="特殊属性"></a>特殊属性</h3><ul><li>value属性，如果只有一个value属性的情况下，使用value属性的时候可以省略value名称不写</li><li>但是如果有多个属性，且多个属性没有默认值，那么value名称是不能省略的</li></ul><p>如：<code>@SuppressWarnings(&quot;all&quot;)</code>，其中的”all”就是value属性，不需要写<code>value=&quot;all&quot;</code></p><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><p>元注解：就是注解注解的注解（写在注解上面的注解）</p><p>元注解有两个：</p><ul><li>@Target：约束自定义注解只能在哪些地方使用</li><li>@Retention：申明注解的生命周期</li></ul><p>@Target中可以使用的值定义在ElementType中，常用值如下：</p><ul><li>TYPE：类，接口</li><li>FIELD：成员变量</li><li>METHOD：成员方法</li><li>PARAMETER：方法参数</li><li>CONSTRUCTOR：构造器</li><li>LOCAL_VARILABLE：局部变量</li></ul><p>例如：<code>@Target(ElementType.METHOD)</code></p><p>@Retention中可以使用的值定义在RetentionPolicy枚举类中，常用值如下：</p><ul><li>SOURCE：注解只作用在源码阶段，生成的字节码文件中不存在</li><li>CLASS：注解作用在源码阶段，字节码文件阶段，运行阶段不存在，默认值</li><li>RUNTIME：注解作用在源码阶段，字节码文件阶段，运行阶段（开发常用）</li></ul><p>例如：<code>@Retention(RetentionPolicy.RUNTIME)</code></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 自学系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA导入Jar包详细流程</title>
      <link href="/2024/10/06/IDEA%E5%AF%BC%E5%85%A5Jar%E5%8C%85%E8%AF%A6%E7%BB%86%E6%B5%81%E7%A8%8B/"/>
      <url>/2024/10/06/IDEA%E5%AF%BC%E5%85%A5Jar%E5%8C%85%E8%AF%A6%E7%BB%86%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><ol><li>以Logback为例，获取三个Jar包</li></ol><p><img src="/img/importJar/1.png" alt="1"></p><ol start="2"><li>在IDEA中创建一个新项目，项目结构如下</li></ol><p><img src="/img/importJar/2.png" alt="2"></p><ol start="3"><li>在项目的根目录下创建一个文件夹，名称为<code>lib</code>，并将Jar放入其中</li></ol><p><img src="/img/importJar/3.png" alt="3"></p><ol start="4"><li>选择新放入的Jar包，右键选择<code>Add as Library...</code></li></ol><p><img src="/img/importJar/4.png" alt="4"></p><ol start="5"><li>确认是否导包成功，右键项目，选择<code>Open Modules Settings</code>，再选择<code>Libraries</code></li></ol><p><img src="/img/importJar/5.png" alt="5"></p><p><img src="/img/importJar/6.png" alt="6"></p><p>如果出现了想要导入的Jar包的名称，则说明导入成功</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>病虫害识别以及分类的实现</title>
      <link href="/2024/09/24/%E7%97%85%E8%99%AB%E5%AE%B3%E8%AF%86%E5%88%AB%E4%BB%A5%E5%8F%8A%E5%88%86%E7%B1%BB%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2024/09/24/%E7%97%85%E8%99%AB%E5%AE%B3%E8%AF%86%E5%88%AB%E4%BB%A5%E5%8F%8A%E5%88%86%E7%B1%BB%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="病虫害识别以及分类的实现"><a href="#病虫害识别以及分类的实现" class="headerlink" title="病虫害识别以及分类的实现"></a>病虫害识别以及分类的实现</h1><h2 id="模型生成"><a href="#模型生成" class="headerlink" title="模型生成"></a>模型生成</h2><h3 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h3><p>数据集地址：<a href="https://www.kaggle.com/datasets/rtlmhjbn/ip02-dataset">IP102-Dataset (kaggle.com)</a></p><p>数据集说明：</p><p>IP102 是一个用于害虫识别的大规模基准数据集。以下是它的一些主要特点：</p><ul><li><strong>图像数量</strong>：包含超过 75,000 张图像</li><li><strong>类别</strong>：涵盖 102 个不同的昆虫害虫类别</li><li><strong>数据分布</strong>：呈现自然的长尾分布，模拟了现实世界中的不平衡样本情况</li><li><strong>目标检测</strong>：为约 19,000 张图像标注了边界框，用于目标检测任务</li></ul><p>这个数据集的独特之处在于它的层次分类系统和数据分布不平衡的特点，使其在害虫识别和农业应用中具有重要意义。</p><h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><p>具体训练过程：<a href="https://www.kaggle.com/code/iamolivia/pytorch-vit-insect-classifier">Pytorch_VIT Insect Classifier (kaggle.com)</a></p><p>可以使用<code>kaggle</code>里的<code>notebook</code>，也可以使用<code>colab</code>在云端运行</p><p>点击<a href="https://www.kaggle.com/kernels/fork/25244292"><strong>Edit My Copy</strong></a>，可以直接进入notebook，但是由于要下载<code>timm</code>库，要在notebook中开启网络功能，需要手机验证。</p><p>我搞了半天验证，一直出问题。。。后面选择使用colab。</p><h3 id="Colab"><a href="#Colab" class="headerlink" title="Colab"></a>Colab</h3><p>先在notebook的导航栏中找到<code>file</code>选项，里面有一个<code>open in colab</code>选项，可以直接将项目转到colab中。</p><p>在跑代码之前，要注意硬件加速器选择<code>GPU</code></p><p>具体操作方法：</p><ol><li>导航栏中的修改选项</li><li>笔记本设置</li><li>选择GPU</li></ol><p>（没选这玩意会出错，之前跑一半才发现没开GPU）</p><p>然后依次执行代码，全部执行完后，就会获得<code>vit_best.pth</code>这个模型文件了</p><p>详细的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> textwrap <span class="keyword">import</span> wrap</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> albumentations <span class="keyword">as</span> A</span><br><span class="line"><span class="keyword">from</span> albumentations.pytorch.transforms <span class="keyword">import</span> ToTensorV2</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> timm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取类别文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;../input/ip02-dataset/classes.txt&#x27;</span>)</span><br><span class="line">label = []</span><br><span class="line">name = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">    label.append(<span class="built_in">int</span>(line.split()[<span class="number">0</span>]))</span><br><span class="line">    name.append(<span class="string">&#x27; &#x27;</span>.join(line.split()[<span class="number">1</span>:]))</span><br><span class="line">classes = pd.DataFrame([label, name]).T</span><br><span class="line">classes.columns = [<span class="string">&#x27;label&#x27;</span>,<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">classes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取训练集、测试集和验证集</span></span><br><span class="line">train_df = pd.read_csv(<span class="string">&#x27;../input/ip02-dataset/train.txt&#x27;</span>,sep=<span class="string">&#x27; &#x27;</span>,header=<span class="literal">None</span>, engine=<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">train_df.columns = [<span class="string">&#x27;image_path&#x27;</span>,<span class="string">&#x27;label&#x27;</span>]</span><br><span class="line"></span><br><span class="line">test_df = pd.read_csv(<span class="string">&#x27;../input/ip02-dataset/test.txt&#x27;</span>,sep=<span class="string">&#x27; &#x27;</span>,header=<span class="literal">None</span>, engine=<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">test_df.columns = [<span class="string">&#x27;image_path&#x27;</span>,<span class="string">&#x27;label&#x27;</span>]</span><br><span class="line"></span><br><span class="line">val_df = pd.read_csv(<span class="string">&#x27;../input/ip02-dataset/val.txt&#x27;</span>,sep=<span class="string">&#x27; &#x27;</span>,header=<span class="literal">None</span>, engine=<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">val_df.columns = [<span class="string">&#x27;image_path&#x27;</span>,<span class="string">&#x27;label&#x27;</span>]</span><br><span class="line"></span><br><span class="line">train_df.head()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义目录和超参数</span></span><br><span class="line">TRAIN_DIR = <span class="string">&#x27;../input/ip02-dataset/classification/train&#x27;</span></span><br><span class="line">TEST_DIR = <span class="string">&#x27;../input/ip02-dataset/classification/test&#x27;</span></span><br><span class="line">VAL_DIR = <span class="string">&#x27;../input/ip02-dataset/classification/val&#x27;</span></span><br><span class="line">LR = <span class="number">2e-5</span></span><br><span class="line">BATCH_SIZE = <span class="number">8</span></span><br><span class="line">EPOCH = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">device = torch.device(<span class="string">&#x27;cuda&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化部分训练数据</span></span><br><span class="line">fig, axs = plt.subplots(<span class="number">10</span>,<span class="number">11</span>,figsize=(<span class="number">30</span>,<span class="number">30</span>))</span><br><span class="line">images = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> classes.label:</span><br><span class="line">    random_img = random.choice(train_df[train_df.label==i-<span class="number">1</span>].image_path.values)</span><br><span class="line">    label = classes.name[i-<span class="number">1</span>]</span><br><span class="line">    img = plt.imread(os.path.join(TRAIN_DIR,<span class="built_in">str</span>(i-<span class="number">1</span>),random_img))</span><br><span class="line">    images.append(img)</span><br><span class="line"></span><br><span class="line">[ax.imshow(image) <span class="keyword">for</span> image,ax <span class="keyword">in</span> <span class="built_in">zip</span>(images,axs.ravel())]</span><br><span class="line">[ax.set_title(<span class="string">&quot;\n&quot;</span>.join(wrap(label,<span class="number">20</span>))) <span class="keyword">for</span> label,ax <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">list</span>(classes.name),axs.ravel())]</span><br><span class="line">[ax.set_axis_off() <span class="keyword">for</span> ax <span class="keyword">in</span> axs.ravel()]</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InsectModel</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,num_classes</span>):</span><br><span class="line">        <span class="built_in">super</span>(InsectModel, self).__init__()</span><br><span class="line">        self.num_classes = num_classes</span><br><span class="line">        self.model = timm.create_model(<span class="string">&#x27;vit_base_patch16_224&#x27;</span>,pretrained=<span class="literal">True</span>,num_classes=num_classes)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, image</span>):</span><br><span class="line">        <span class="keyword">return</span> self.model(image)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义数据增强</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train_transform</span>():</span><br><span class="line">    <span class="keyword">return</span> A.Compose([</span><br><span class="line">        A.HorizontalFlip(),</span><br><span class="line">        A.RandomRotate90(),</span><br><span class="line">        A.RandomBrightnessContrast(),</span><br><span class="line">        A.Resize(<span class="number">224</span>, <span class="number">224</span>),</span><br><span class="line">        ToTensorV2()])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid_transform</span>():</span><br><span class="line">    <span class="keyword">return</span> A.Compose([</span><br><span class="line">        A.Resize(<span class="number">224</span>,<span class="number">224</span>),</span><br><span class="line">        ToTensorV2()])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">collate_fn</span>(<span class="params">batch</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">tuple</span>(<span class="built_in">zip</span>(*batch))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义数据集</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InsectDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, image, image_dir, transforms=<span class="literal">None</span></span>):</span><br><span class="line">        self.image_info = image</span><br><span class="line">        self.transforms = transforms</span><br><span class="line">        self.imgdir = image_dir</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.image_info.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        image_info = self.image_info[index]</span><br><span class="line">        image = cv2.imread(os.path.join(self.imgdir,<span class="built_in">str</span>(image_info[<span class="number">1</span>]),image_info[<span class="number">0</span>]),cv2.IMREAD_COLOR)</span><br><span class="line">        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)</span><br><span class="line">        image /= <span class="number">255.</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> self.transforms <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            image = self.transforms(image = image)[<span class="string">&#x27;image&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        label = image_info[<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        image = torch.as_tensor(image, dtype=torch.float32)</span><br><span class="line">        label = torch.as_tensor(label, dtype=torch.long)</span><br><span class="line">        <span class="keyword">return</span> image, label</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据加载器</span></span><br><span class="line">train_dataset = InsectDataset(image=train_df.values, </span><br><span class="line">                              image_dir=TRAIN_DIR, </span><br><span class="line">                              transforms=train_transform())</span><br><span class="line">train_data_loader = DataLoader(train_dataset,</span><br><span class="line">                              batch_size=BATCH_SIZE,</span><br><span class="line">                              shuffle=<span class="literal">True</span>,</span><br><span class="line">                              num_workers=<span class="number">2</span>)</span><br><span class="line">val_dataset = InsectDataset(image=val_df.values,</span><br><span class="line">                            image_dir=VAL_DIR,</span><br><span class="line">                            transforms=valid_transform())</span><br><span class="line">val_data_loader = DataLoader(val_dataset,</span><br><span class="line">                             batch_size=BATCH_SIZE,</span><br><span class="line">                             shuffle=<span class="literal">True</span>,</span><br><span class="line">                             num_workers=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义平均计量器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AverageMeter</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.reset()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset</span>(<span class="params">self</span>):</span><br><span class="line">        self.loss = <span class="number">0</span></span><br><span class="line">        self.correct = <span class="number">0</span></span><br><span class="line">        self.avg = <span class="number">0</span></span><br><span class="line">        self.<span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, loss,correct, n=<span class="number">1</span></span>):</span><br><span class="line">        self.loss = loss</span><br><span class="line">        self.correct += correct</span><br><span class="line">        self.<span class="built_in">sum</span> += loss * n</span><br><span class="line">        self.count += n</span><br><span class="line">        </span><br><span class="line">        self.avg = self.<span class="built_in">sum</span> / self.count</span><br><span class="line">        self.acc = self.correct / self.count</span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Accuracy</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.reset</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义训练函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train_fn</span>(<span class="params">data_loader, model, criterion, device, optimizer, epoch</span>):</span><br><span class="line">    model.train()</span><br><span class="line">    criterion.train()</span><br><span class="line">    </span><br><span class="line">    summary = AverageMeter()</span><br><span class="line">    tk0 = tqdm(data_loader, total=<span class="built_in">len</span>(data_loader))</span><br><span class="line">    <span class="keyword">for</span> step, (images, labels) <span class="keyword">in</span> <span class="built_in">enumerate</span>(tk0):</span><br><span class="line">        images = images.to(device, non_blocking = <span class="literal">True</span>).<span class="built_in">float</span>()</span><br><span class="line">        labels = labels.to(device, non_blocking = <span class="literal">True</span>).long()</span><br><span class="line">    </span><br><span class="line">        output = model(images)</span><br><span class="line">        loss = criterion(output, labels)</span><br><span class="line">        </span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        </span><br><span class="line">        preds = output.softmax(<span class="number">1</span>).argmax(<span class="number">1</span>)</span><br><span class="line">        correct = (preds == labels).<span class="built_in">sum</span>().item()</span><br><span class="line">        </span><br><span class="line">        summary.update(loss.item(),correct, BATCH_SIZE)</span><br><span class="line">        tk0.set_postfix(loss=summary.avg, acc=summary.acc, epoch=epoch+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> summary</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义验证函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eval_fn</span>(<span class="params">data_loader, model, criterion, device, epoch</span>):</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    criterion.<span class="built_in">eval</span>()</span><br><span class="line">    </span><br><span class="line">    summary = AverageMeter()</span><br><span class="line">    tk0 = tqdm(data_loader, total=<span class="built_in">len</span>(data_loader))</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> step, (images, labels) <span class="keyword">in</span> <span class="built_in">enumerate</span>(tk0):</span><br><span class="line">            images = images.to(device, non_blocking = <span class="literal">True</span>).<span class="built_in">float</span>()</span><br><span class="line">            labels = labels.to(device, non_blocking = <span class="literal">True</span>).long()</span><br><span class="line">            </span><br><span class="line">            output = model(images)</span><br><span class="line">            loss = criterion(output, labels)</span><br><span class="line">            </span><br><span class="line">            preds = output.softmax(<span class="number">1</span>).argmax(<span class="number">1</span>)</span><br><span class="line">            correct = (preds == labels).<span class="built_in">sum</span>().item()</span><br><span class="line">            </span><br><span class="line">            summary.update(loss.item(), correct, BATCH_SIZE)</span><br><span class="line">            tk0.set_postfix(loss=summary.avg, acc=summary.acc, epoch=epoch+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> summary</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&#x27;WANDB_CONSOLE&#x27;</span>] = <span class="string">&#x27;off&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行训练和验证</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    model = InsectModel(num_classes=<span class="number">102</span>)</span><br><span class="line">    model = model.to(device)</span><br><span class="line">    criterion = nn.CrossEntropyLoss()</span><br><span class="line">    criterion = criterion.to(device)</span><br><span class="line">    optimizer = torch.optim.AdamW(model.parameters(), lr=LR)</span><br><span class="line">    best_loss = <span class="number">10</span>**<span class="number">5</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, EPOCH):</span><br><span class="line">        train_loss = train_fn(train_data_loader, model, criterion, device, optimizer, epoch)</span><br><span class="line">        val_loss = eval_fn(val_data_loader, model, criterion, device, epoch)</span><br><span class="line">        <span class="keyword">if</span> val_loss.avg &lt; best_loss:</span><br><span class="line">            best_loss = val_loss.avg</span><br><span class="line">            torch.save(model.state_dict(), <span class="string">f&#x27;vit_best.pth&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Epoch <span class="subst">&#123;epoch+<span class="number">1</span>+<span class="number">0</span>:03&#125;</span>: | Train Loss: <span class="subst">&#123;train_loss.avg:<span class="number">.5</span>f&#125;</span> | Val Loss: <span class="subst">&#123;val_loss.avg:<span class="number">.5</span>f&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">run()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载最佳模型并进行预测</span></span><br><span class="line">model = InsectModel(num_classes=<span class="number">102</span>)</span><br><span class="line">model.load_state_dict(torch.load(<span class="string">&quot;./vit_best.pth&quot;</span>))</span><br><span class="line">images, labels = <span class="built_in">next</span>(<span class="built_in">iter</span>(val_data_loader))</span><br><span class="line">preds = model(images).softmax(<span class="number">1</span>).argmax(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化预测结果</span></span><br><span class="line">fig, axs = plt.subplots(<span class="number">2</span>,<span class="number">4</span>,figsize=(<span class="number">13</span>,<span class="number">8</span>))</span><br><span class="line">[ax.imshow(image.permute((<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>))) <span class="keyword">for</span> image,ax <span class="keyword">in</span> <span class="built_in">zip</span>(images,axs.ravel())]</span><br><span class="line">[ax.set_title(<span class="string">&quot;\n&quot;</span>.join(wrap(<span class="string">f&#x27;实际: <span class="subst">&#123;classes.name[label.item()]&#125;</span> 预测: <span class="subst">&#123;classes.name[pred.item()]&#125;</span>&#x27;</span>,<span class="number">30</span>)),color = <span class="string">&#x27;g&#x27;</span> <span class="keyword">if</span> label.item()==pred.item() <span class="keyword">else</span> <span class="string">&#x27;r&#x27;</span>) <span class="keyword">for</span> label,pred,ax <span class="keyword">in</span> <span class="built_in">zip</span>(labels,preds,axs.ravel())]</span><br><span class="line">[ax.set_axis_off() <span class="keyword">for</span> ax <span class="keyword">in</span> axs.ravel()]</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="模型使用"><a href="#模型使用" class="headerlink" title="模型使用"></a>模型使用</h2><p>结合我博客中的手写体案例，视频捕获以及成像都是一样的，但是由于之前的模型是<code>tflite</code>格式的，而现在的模型是<code>pth</code>格式的，而且类别繁多，需要进行部分的修改，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> timm</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> textwrap <span class="keyword">import</span> wrap</span><br><span class="line"></span><br><span class="line"><span class="comment"># 视频流地址</span></span><br><span class="line">url = <span class="string">&quot;http://192.168.2.8/stream&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开摄像头</span></span><br><span class="line">cap = cv2.VideoCapture(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InsectModel</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num_classes</span>):</span><br><span class="line">        <span class="built_in">super</span>(InsectModel, self).__init__()</span><br><span class="line">        self.num_classes = num_classes</span><br><span class="line">        self.model = timm.create_model(<span class="string">&#x27;vit_base_patch16_224&#x27;</span>, pretrained=<span class="literal">True</span>, num_classes=num_classes)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, image</span>):</span><br><span class="line">        <span class="keyword">return</span> self.model(image)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    model = InsectModel(num_classes=<span class="number">102</span>)</span><br><span class="line">    model.load_state_dict(torch.load(<span class="string">&quot;./vit_best.pth&quot;</span>))</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;模型加载成功&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;模型加载失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义图像预处理函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">preprocess</span>(<span class="params">image</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)</span><br><span class="line">        image /= <span class="number">255.0</span></span><br><span class="line">        image = cv2.resize(image, (<span class="number">224</span>, <span class="number">224</span>))</span><br><span class="line">        image = torch.tensor(image).permute(<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>).unsqueeze(<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;图像预处理成功&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> image</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;图像预处理失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取类别名称</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;classes.txt&#x27;</span>)</span><br><span class="line">    label = []</span><br><span class="line">    name = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        label.append(<span class="built_in">int</span>(line.split()[<span class="number">0</span>]))</span><br><span class="line">        name.append(<span class="string">&#x27; &#x27;</span>.join(line.split()[<span class="number">1</span>:]))</span><br><span class="line">    classes = pd.DataFrame([label, name]).T</span><br><span class="line">    classes.columns = [<span class="string">&#x27;label&#x27;</span>, <span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;类别名称读取成功&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;类别名称读取失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">last_recognition_time = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 读取摄像头的帧</span></span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;无法读取视频流，尝试重新连接...&quot;</span>)</span><br><span class="line">        cap.release()</span><br><span class="line">        cap = cv2.VideoCapture(url)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 在窗口中显示帧</span></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;Camera&#x27;</span>, frame)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 每隔10秒进行一次识别</span></span><br><span class="line">    <span class="keyword">if</span> time.time() - last_recognition_time &gt; <span class="number">10</span>:</span><br><span class="line">        image = preprocess(frame)</span><br><span class="line">        <span class="keyword">if</span> image <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                output = model(image)</span><br><span class="line">                pred = output.softmax(<span class="number">1</span>).argmax(<span class="number">1</span>).item()</span><br><span class="line">                <span class="keyword">if</span> pred &lt; <span class="built_in">len</span>(classes):</span><br><span class="line">                    label_name = classes.name[pred]</span><br><span class="line">                <span class="comment"># else:</span></span><br><span class="line">                <span class="comment">#     label_name = &quot;无法识别&quot;   暂时不起作用</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;识别结果: <span class="subst">&#123;label_name&#125;</span>&quot;</span>)</span><br><span class="line">        last_recognition_time = time.time()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 按下&#x27;q&#x27;键退出循环</span></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放摄像头并关闭窗口</span></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li><p><code>vit_best.pth</code>就是刚刚生成的模型文件</p></li><li><p><code>classes.txt</code>是数据集内的同名文件</p></li><li><pre><code class="python">if not ret:    print(&quot;无法读取视频流，尝试重新连接...&quot;)    cap.release()    cap = cv2.VideoCapture(url)    continue</code></pre><p>这段代码可以防止<code>Stream ends prematurely at ......</code>报错</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> AI classification </tag>
            
            <tag> ESP32 </tag>
            
            <tag> Kaggle </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP32S3-EYE的WIFI图传方法</title>
      <link href="/2024/09/17/ESP32S3-EYE%E7%9A%84WIFI%E5%9B%BE%E4%BC%A0%E6%96%B9%E6%B3%95/"/>
      <url>/2024/09/17/ESP32S3-EYE%E7%9A%84WIFI%E5%9B%BE%E4%BC%A0%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="ESP32捕获实时视频"><a href="#ESP32捕获实时视频" class="headerlink" title="ESP32捕获实时视频"></a>ESP32捕获实时视频</h1><p>环境：ESP-IDF v5.1.4，Python v3.12.4</p><p>在<a href="https://www.espressif.com.cn/zh-hans/products/sdks/esp-idf">乐鑫官网</a>查找相关示例，<code>ESP-IoT-Solution</code>符合需求，从<code>github</code>拉取相关代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive https://github.com/espressif/esp-iot-solution</span><br></pre></td></tr></table></figure><h2 id="第一步——配置"><a href="#第一步——配置" class="headerlink" title="第一步——配置"></a>第一步——配置</h2><p>进入<code>esp-iot-solution/examples/camera/video_stream_server</code>，输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">idf.py set-target esp32s3</span><br><span class="line">idf.py menuconfig</span><br></pre></td></tr></table></figure><p>进入菜单后，进入<code>Camera Pin Configuration</code>选项，选择对应的开发板（这个没配置似乎会出问题）</p><p>如果想要改变ESP32的WIFI设置，进入<code>Example Connection Configuration</code>选项。里面包含如：设置AP模式下WIFI的SSID、IP地址、密码，或者设置STA模式（就是要连入的WIFI的SSID和密码）</p><p>默认情况下，ESP32为AP模式，且没有密码，最大连入数量为1，默认IP地址为：<code>192.168.4.1</code></p><h2 id="第二步——烧录"><a href="#第二步——烧录" class="headerlink" title="第二步——烧录"></a>第二步——烧录</h2><p>在Ubuntu系统下，直接输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">idf.py build flash monitor</span><br></pre></td></tr></table></figure><p>外部端口会自动匹配</p><h2 id="第三步——测试"><a href="#第三步——测试" class="headerlink" title="第三步——测试"></a>第三步——测试</h2><p>在连入到ESP32的WIFI后，先进行PING通测试，然后在浏览器中输入<code>192.168.4.1/stream</code>就可以查看摄像头捕获镜头</p><p>如果是STA模式，那么就需要知道ESP32被DHCP分配到的IP地址，假设为<code>192.168.1.10</code>，进行PING通测试，然后在浏览器中输入<code>192.168.1.10.stream</code></p><h1 id="主机获取视频流"><a href="#主机获取视频流" class="headerlink" title="主机获取视频流"></a>主机获取视频流</h1><h2 id="第一步——环境配置"><a href="#第一步——环境配置" class="headerlink" title="第一步——环境配置"></a>第一步——环境配置</h2><p>Python版本：3.8.19</p><p>代码中会使用opencv库，需要提前下好：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install python-opencv</span><br></pre></td></tr></table></figure><h2 id="第二步——图传代码"><a href="#第二步——图传代码" class="headerlink" title="第二步——图传代码"></a>第二步——图传代码</h2><p>具体代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 视频流地址</span></span><br><span class="line">url = <span class="string">&quot;http://192.168.2.8/stream&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开摄像头</span></span><br><span class="line">cap = cv2.VideoCapture(url)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 读取摄像头的帧</span></span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 在窗口中显示帧</span></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;Camera&#x27;</span>, frame)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 按下&#x27;q&#x27;键退出循环</span></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 释放摄像头并关闭窗口</span></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>运行上面的代码，就可以获取到ESP32捕获的视频流了</p><h1 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h1><p>这里直接选用MNIST手写体模型，如果想自己训练的话可以直接按照我的另一篇文章走流程：</p><p><a href="https://norlcyan.netlify.app/2024/09/16/seeed-studio-mnist%E5%AE%9E%E4%BE%8B%E5%AE%9E%E7%8E%B0%E9%83%A8%E5%88%86/">Seeed_Studio_MNIST实例实现部分 | Norlcyan’s Blog</a></p><p>我就直接用现成的模型了，模型在下面的网页下方获取：</p><p><a href="https://github.com/Seeed-Studio/sscma-model-zoo/blob/main/docs/en/MNIST_Classification_MobileNetV2_0.5_Rep_32.md">MNIST_Classification</a></p><h1 id="模型部署"><a href="#模型部署" class="headerlink" title="模型部署"></a>模型部署</h1><p>这部分搞了最久，没接触过相关领域，基本上都是网上各种示例，再加上点AI的魔法，东拼西凑出来的。</p><p>我模型采用的是TFLITE，这个部署起来感觉简单点<br>下面是详细的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 视频流地址</span></span><br><span class="line">url = <span class="string">&quot;http://192.168.2.8/stream&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TFLite模型导入</span></span><br><span class="line">model_path = <span class="string">&#x27;best_accuracy_top1_epoch_10_float32.tflite&#x27;</span></span><br><span class="line">interpreter = tf.lite.Interpreter(model_path=model_path)</span><br><span class="line">interpreter.allocate_tensors()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取输入和输出张量</span></span><br><span class="line">input_details = interpreter.get_input_details()</span><br><span class="line">output_details = interpreter.get_output_details()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开摄像头</span></span><br><span class="line">cap = cv2.VideoCapture(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前时间</span></span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义预处理函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">preprocess</span>(<span class="params">image_path</span>):</span><br><span class="line">    img = Image.<span class="built_in">open</span>(image_path).convert(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">    img = img.resize((<span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line">    img = np.array(img).astype(np.float32)</span><br><span class="line">    img = img.reshape(<span class="number">1</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">1</span>)  <span class="comment"># TFLite expects NHWC format</span></span><br><span class="line">    img /= <span class="number">255.0</span></span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推理</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">image_path</span>):</span><br><span class="line">    img = preprocess(image_path)</span><br><span class="line">    interpreter.set_tensor(input_details[<span class="number">0</span>][<span class="string">&#x27;index&#x27;</span>], img)</span><br><span class="line">    interpreter.invoke()</span><br><span class="line">    output_data = interpreter.get_tensor(output_details[<span class="number">0</span>][<span class="string">&#x27;index&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> np.argmax(output_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将灰色图片转换为黑白图片(之前卡在这部分，不将图片转换为黑白图片识别出的结果基本都是8)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_to_binary</span>(<span class="params">image</span>):</span><br><span class="line">    threshold_value = <span class="number">144</span></span><br><span class="line">    _, binary_image = cv2.threshold(image, threshold_value, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">    <span class="keyword">return</span> binary_image</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 读取摄像头的帧</span></span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 去除镜像</span></span><br><span class="line">    frame = cv2.flip(frame, <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将帧转换为灰色单通道</span></span><br><span class="line">    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将灰色图片转换为黑白图片</span></span><br><span class="line">    binary_frame = convert_to_binary(gray_frame)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在窗口中显示黑白帧</span></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;Camera&#x27;</span>, binary_frame)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取当前时间</span></span><br><span class="line">    current_time = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每隔10秒保存一张图片</span></span><br><span class="line">    <span class="keyword">if</span> current_time - start_time &gt;= <span class="number">10</span>:</span><br><span class="line">        cv2.imwrite(<span class="string">f&#x27;image_<span class="subst">&#123;<span class="built_in">int</span>(current_time)&#125;</span>.jpg&#x27;</span>, binary_frame)</span><br><span class="line">        image_path = (<span class="string">f&#x27;image_<span class="subst">&#123;<span class="built_in">int</span>(current_time)&#125;</span>.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 推理</span></span><br><span class="line">        prediction = predict(image_path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Prediction: <span class="subst">&#123;prediction&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        start_time = current_time</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 按下&#x27;q&#x27;键退出循环</span></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放摄像头并关闭窗口</span></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>在原来的基础上添加点内容，包括模型导入、图片截取等等。</p>]]></content>
      
      
      
        <tags>
            
            <tag> esp32s3-eye </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Seeed_Studio_MNIST实例实现部分</title>
      <link href="/2024/09/16/Seeed-Studio-MNIST%E5%AE%9E%E4%BE%8B%E5%AE%9E%E7%8E%B0%E9%83%A8%E5%88%86/"/>
      <url>/2024/09/16/Seeed-Studio-MNIST%E5%AE%9E%E4%BE%8B%E5%AE%9E%E7%8E%B0%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p><font color="red">!!!全部操作均在Linux系统下，Linux为Ubuntu24.04!!!</font></p><h1 id="实例网址"><a href="#实例网址" class="headerlink" title="实例网址"></a>实例网址</h1><p><a href="https://colab.research.google.com/github/seeed-studio/sscma-model-zoo/blob/main/notebooks/zh_CN/MNIST_Classification_MobileNetV2_0.5_Rep_32.ipynb#scrollTo=3mt9sLF93brT">MNIST_Classification_MobileNetV2_0.5_Rep_32.ipynb - Colab (google.com)</a></p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><font color="red">实例需要带有CUDA核心的显卡，linux中还需要提前将显卡驱动安装完成</font></p><p>先安装<code>Anaconda</code>，具体为啥后面会提。</p><p>我一开始用python3.12的版本，但是会有报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module &#x27;pkgutil&#x27; has no attribute &#x27;ImpImporter&#x27;. Did you mean: &#x27;zipimporter&#x27;?</span><br></pre></td></tr></table></figure><p>后面将版本降低为<code>python3.11</code>就没问题了</p><p>其次是<code>pip</code>的问题</p><p>由于在linux系统下，使用pip安装包会出现以下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">error: externally-managed-environment</span><br><span class="line"></span><br><span class="line">× This environment is externally managed</span><br><span class="line">╰─&gt; To install Python packages system-wide, try apt install</span><br><span class="line">    python3-xyz, where xyz is the package you are trying to</span><br><span class="line">    install.</span><br><span class="line"></span><br><span class="line">    If you wish to install a non-Debian-packaged Python package,</span><br><span class="line">    create a virtual environment using python3 -m venv path/to/venv.</span><br><span class="line">    Then use path/to/venv/bin/python and path/to/venv/bin/pip. Make</span><br><span class="line">    sure you have python3-full installed.</span><br><span class="line"></span><br><span class="line">    If you wish to install a non-Debian packaged Python application,</span><br><span class="line">    it may be easiest to use `pipx` install xyz, which will manage a</span><br><span class="line">    virtual environment for you. Make sure you have `pipx` installed.</span><br><span class="line"></span><br><span class="line">    See /usr/share/doc/python3.11/README.venv for more information.</span><br><span class="line"></span><br><span class="line">note: If you believe this is a mistake, please contact your Python installation or OS distribution provider. You can override this, at the risk of breaking your Python installation or OS, by passing --break-system-packages.</span><br><span class="line">hint: See PEP 668 for the detailed specification.</span><br></pre></td></tr></table></figure><p>大致意思就是推荐在虚拟环境使用pip命令，或者使用其他方法也行（创建个虚拟环境还是方便点）</p><p>所以先安装<code>Anaconda</code>用于构建虚拟环境，网上有很多教程，略过…….</p><p>由于案例中安装的包比较多，所以推荐pip切换到国内源，以下是全局换源的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.index-url https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple</span><br></pre></td></tr></table></figure><h1 id="操作流程（踩坑）"><a href="#操作流程（踩坑）" class="headerlink" title="操作流程（踩坑）"></a>操作流程（踩坑）</h1><p>实例的具体操作在网址中都有，主要讲的是踩坑的部分</p><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p>前面环境都搭建完成后，基本上跟着流程走没啥问题，但是在训练模型的步骤会有个坑人的地方</p><p>因为里面的数据集下载来自<code>https://yann.lecun.com/exdb/mnist/</code>，但是国内下载网址内的文件会被403，所以需要自己找对应的数据集，并且将网址修改为自己的数据集。</p><p>我找到的数据集放到了度盘：<code>https://pan.baidu.com/s/16k9LrXsGVPnPGQlC5ffvrw?pwd=norl</code></p><p>防止以后丢了…</p><p>拿到数据集后，还要自己启动服务器，将数据集放到服务器上（因为代码中是使用的网址，直接改成文件地址不行）</p><p>这里就直接用Express创建了，方便又简单（装个<code>nodejs</code>，用<code>npm</code>装个express包，敲几行代码就行）</p><h2 id="代码修改"><a href="#代码修改" class="headerlink" title="代码修改"></a>代码修改</h2><p>然后就是修改代码部分了，只需要修改一处，文件位置在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$HOME/anaconda/envs/[yourEnvsName]/lib/python3.11/site-packages/mmcls/datasets/mnist.py</span><br></pre></td></tr></table></figure><p>找到<code>url_prefix</code>这行，将里面的网址替换为你自己的</p><p>注意：<font color='red'>这里的网址不能是<code>127.0.0.1</code>这种，要用<code>http://localhost:端口号</code></font></p><p>下面的MD5校验码改成None就行了</p><h2 id="导出模型"><a href="#导出模型" class="headerlink" title="导出模型"></a>导出模型</h2><p>之前在另一台电脑上导出的时候没啥问题，但是换了台电脑就出了点状况</p><p>首先是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sscma.export configs/classification/mobnetv2_0.35_rep_1bx16_300e_mnist.py <span class="variable">$CHECKPOINT_FILE_PATH</span> --cfg-options  \</span><br><span class="line">    work_dir=MNIST_Classification_MobileNetV2_0.5_Rep_32 \</span><br><span class="line">    num_classes=10 \</span><br><span class="line">    epochs=10  \</span><br><span class="line">    height=32 \</span><br><span class="line">    width=32 \</span><br><span class="line">    load_from=MNIST_Classification_MobileNetV2_0.5_Rep_32/pretrain.pth</span><br></pre></td></tr></table></figure><p>需要将里面的<code>$CHECKPOINT_FILE_PATH</code>替换为自己的检查点文件路径</p><p>默认是<code>MNIST_Classification_MobileNetV2_0.5_Rep_32/best_accuracy_top1_epoch_10.pth</code></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>其次，执行完命令后，我的环境出现了：<code>version &#39;GLIBCXX_3.5.32&#39; not found</code></p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>检查过后发现是虚拟环境的lib库缺少<code>libstdc++.so.6.0.33</code></p><p>将系统中<code>usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33</code>复制到<code>~/anaconda3/envs/myenv/lib</code>下</p><p>其次建立链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -sf libstdc++.so.6.0.33 libstdc++.so.6</span><br></pre></td></tr></table></figure><p>最后检查链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll | grep libstdc++.so.6.</span><br></pre></td></tr></table></figure><p>结果中有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libstdc++.6 -&gt; libstdc++so.6.0.33</span><br></pre></td></tr></table></figure><p>就表示完成了</p><p>重新执行导出模型命令</p>]]></content>
      
      
      
        <tags>
            
            <tag> SSCMA </tag>
            
            <tag> AI classification </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见算法</title>
      <link href="/2024/07/12/%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/"/>
      <url>/2024/07/12/%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><ol><li>基本查找</li><li>二分查找&#x2F;折半查找</li><li>分块查找</li><li>插值查找</li><li>斐波那契查找</li><li>树表查找</li><li>哈希查找</li></ol><h2 id="基本查找"><a href="#基本查找" class="headerlink" title="基本查找"></a>基本查找</h2><p><code>核心：从0索引开始逐个往后查找</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 需求：定义一个方法利用基本查找，查询某个元素是否存在</span></span><br><span class="line">    <span class="comment">// 数据如下：&#123;131,127,147,81,103,23,7,79&#125;</span></span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">131</span>,<span class="number">127</span>,<span class="number">147</span>,<span class="number">81</span>,<span class="number">103</span>,<span class="number">23</span>,<span class="number">7</span>,<span class="number">79</span>&#125;;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> basicSearch(arr,<span class="number">100</span>);</span><br><span class="line">    System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">basicSearch</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> number)</span> &#123;</span><br><span class="line">    <span class="comment">// 利用基本查找来查找number是否存在</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == number) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>前提条件：<code>数组中的数据必须是有序的</code></p><p>核心逻辑：<code>每次排除一般的查找范围</code></p><p>优势：<code>提高查找效率</code></p><p>假设有一个数组为：[7, 23, 79, 81, 103, 127, 131, 147]</p><p>那么，可以得到两个值，min&#x3D;0，max&#x3D;7，这两个值表示最大索引值和最小索引值，</p><p>接着 (max + min) &#x2F; 2，得出来的值就是mid值</p><ul><li>如果查找的元素在mid的左边，缩小范围时，min不变，max等于mid减1</li><li>如果查找的元素在mid的右边，缩小范围时，max不变，min等于mid加1</li><li>如果 min 大于 max 时，说明数据不存在</li></ul><p>如果数据是乱的，先排序再用二分查找得到的索引没有实际意义，只能确定当前数字在数组中是否存在，因为排序之后数字的位置就可能发生变化了（排序浪费的性能比查找高得多）</p><h3 id="插值查找（二分查找改进）"><a href="#插值查找（二分查找改进）" class="headerlink" title="插值查找（二分查找改进）"></a>插值查找（二分查找改进）</h3><p>假设，数组的数据都是均匀分布的，如[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]，那么可以套用以下公式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mid = min + ((key-arr[min]) / (arr[max]-arr[min])) * (max-min)</span><br></pre></td></tr></table></figure><p>通过以上公式，可以获得目标数据在索引中的大概位置</p><p>缺点也很明显：需要数据均匀分布，若是不均匀的则会导致资源浪费或查找不到</p><h3 id="斐波那契查找（二分查找改进）"><a href="#斐波那契查找（二分查找改进）" class="headerlink" title="斐波那契查找（二分查找改进）"></a>斐波那契查找（二分查找改进）</h3><p>斐波那契查找就是在二分查找的基础上，根据斐波那契数列进行分割的</p><p>斐波那契数列：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]</span><br></pre></td></tr></table></figure><p>首先，将要查找的数组长度看为 <code>F(k)</code>，mid的左侧看作 <code>F(k-1)-1</code>，mid的右侧看作 <code>F(k-2)</code></p><p>可以得出：<code>F(k)=F(k-1)-1+F(k-2)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mid = arr[min] + F(k-1) - 1</span><br></pre></td></tr></table></figure><p>解释：<br>在斐波那契数列找一个等于略大于查找表中元素个数的数<code>f(n)</code>，将原查找表扩展为长度<code>F(n)</code>（如果要补充元素，则补充重复最后一个元素，直到满足<code>F(n)</code>），完成后进行斐波那契分割，即<code>F(n)</code>个元素分割为前半部分<code>F(n-1)</code>个元素，后半部分<code>F(n-2)</code>个元素，找出要查找的元素在哪一部分并递归，直到找到</p><ul><li><p>相等，则mid位置的元素即为所求</p></li><li><p>&gt;，则low&#x3D;mid+1，k-&#x3D;2</p><p>解释：low&#x3D;mid+1说明待查找的元素在<code>[mid+1,high]</code>范围内，k-&#x3D;2说明范围<code>[mid+1,high]</code>内的元素个数为</p><p><code>n-(F(k-1)) = Fk-1-F(k-1) = Fk-F(k-1)-1=F(k-2)-1</code></p></li><li><p>&lt;，则high&#x3D;mid-1，k-&#x3D;1</p></li></ul><h2 id="分块查找"><a href="#分块查找" class="headerlink" title="分块查找"></a>分块查找</h2><p>假设有这样一个无序的数组：</p><p>[7, 10, 13, 19, 16, 20, 27, 22, 30, 40, 36, 43, 50, 48]</p><p>把这个数组分成几个不同的块，变成：</p><p>[7,10][13,19,16,20][27,22,30,40,36][43,50,48]</p><p>分块原则1：前一块中的最大数据，小于后一块中每一个数据（块内无序，块间有序）</p><p>分块原则2：块数数量一般等于数字的个数开根号。比如：16个数字一般分为4块左右</p><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序：</p><ol><li>相邻的数据两两比较，小的放前面，大的放后面</li><li>第一轮循环结束，最大值已经找到，在数组的最右边</li><li>第二轮循环，只需要找剩余数组的最大值</li><li>以此类推，如果数组中有n个数据，总共只要执行n-1轮的代码就可以</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外层循环代表需要执行几轮对比</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 内层代表索引为0的数据逐一往后对比</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">            arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">            arr[j+<span class="number">1</span>]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序：从0索引开始，拿着每一个索引上的元素<code>跟后面的元素依次比较</code>，小的放前面，大的放后面，以此类推</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            arr[j] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>插入排序：将0索引的元素到N索引的元素看作是有序的，把N+1索引的元素到最后一个当成是无序的。遍历无序的数据，将遍历到的元素插入有序序列中适当的位置，如遇到相同数据，插在后面</p><p>类似与打牌时整理牌的过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">44</span>,<span class="number">38</span>,<span class="number">5</span>,<span class="number">47</span>,<span class="number">15</span>,<span class="number">36</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">2</span>,<span class="number">46</span>,<span class="number">4</span>,<span class="number">19</span>,<span class="number">50</span>,<span class="number">48</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 找到无序的那一组是从哪个索引开始</span></span><br><span class="line"><span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &gt; arr[i+<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="comment">// 确定无序数组开始索引</span></span><br><span class="line">        startIndex = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 遍历从startIndex开始到最后一个元素，依次得到无序的那一组数据中的每一个元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">// System.out.print(arr[i] + &quot; &quot;);</span></span><br><span class="line">    <span class="comment">// 将遍历到的数组，插入到前面有序的这一组当中</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 记录当前要插入数据的索引</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 从后往前开始排序</span></span><br><span class="line">    <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; arr[j] &lt; arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">        arr[j] = arr[j-<span class="number">1</span>];</span><br><span class="line">        arr[j-<span class="number">1</span>] = tmp;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前的排序的方法，速度对比：选择排序 &gt; 插入排序 &gt; 冒泡排序</p><p>如果数组本身不是很乱的，如 [2,5,12,43,23,11,65] 这种，插入排序是最快的</p><h2 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h2><p>递归指的是方法中调用方法本身的现象</p><p>递归的注意点：递归一定要有出口，否则就会出现内存溢出</p><h3 id="递归算法的作用"><a href="#递归算法的作用" class="headerlink" title="递归算法的作用"></a>递归算法的作用</h3><p>把一个复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解</p><p>递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算</p><h3 id="书写递归的两个核心"><a href="#书写递归的两个核心" class="headerlink" title="书写递归的两个核心"></a>书写递归的两个核心</h3><ul><li>找出口：什么时候不再调用方法</li><li>找规则：如何把大问题变成规模较小的问题</li></ul><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>第一轮：把0索引的数字作为基准数，确定基准数在数组中正确的位置。比基准数小的全部在左边，比基准数大的全部在右边</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> i,<span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="comment">// 定义两个变量记录要查找的范围</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> j;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归的出口</span></span><br><span class="line">    <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">baseNumber</span> <span class="operator">=</span> arr[i];</span><br><span class="line">    <span class="keyword">while</span> (start != end) &#123;</span><br><span class="line">        <span class="comment">// 利用end，从后往前找，找比基准数小的数字</span></span><br><span class="line">        </span><br><span class="line">       <span class="comment">// 这里的 end 和 start 两个循环不能交换位置，否则会导致基准数归位的位置不正</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (end &lt;= start || arr[end] &lt; baseNumber) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 利用start，从前往后找，找比基准数大的数字</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (end &lt;= start || arr[start] &gt; baseNumber) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把end和start指向的元素进行交换</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[start];</span><br><span class="line">        arr[start] = arr[end];</span><br><span class="line">        arr[end] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当 start 和 end 指向了同一个数字，那么上面的循环就会结束</span></span><br><span class="line">    <span class="comment">// 表示已经找到了基准数在数组中应存入的位置</span></span><br><span class="line">    <span class="comment">// 基准数归位</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">    arr[i] = arr[start];</span><br><span class="line">    arr[start] = tmp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确定基准数左边的范围和基准数右边的范围</span></span><br><span class="line">    quickSort(arr,i,start - <span class="number">1</span>);</span><br><span class="line">    quickSort(arr,start + <span class="number">1</span>,j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>冒泡排序：</p><p>相邻的元素两两比较，小的放前面，大的放后面</p></li><li><p>选择排序：</p><p>从0索引开始，拿着每一个索引上的元素跟后面的元素依次比较</p><p>小的放前面，大的放后面，以此类推</p></li><li><p>插入排序：</p><p>将数组分为有序和无序两组，遍历无序数据，将元素插入有序序列中即可</p></li><li><p>快速排序：</p><ul><li>将排序范围中的第一个数字作为基准数，再定义两个变量start，end</li><li>start从前往后找比基准数大的，end从后往前找比基准数小的（end先开始找，然后start再找）</li><li>找到之后交换start和end指向的元素，并循环这一过程，直到start和end处于同一个位置，该位置是基准数在数组中应存入的位置，再让基准数归位</li></ul></li></ol><h1 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h1><p>操作数组的工具类</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static String toString(数组)</td><td>把数组拼接成一个字符串</td></tr><tr><td>public static int binarySearch(数组, 查找元素)</td><td>二分查找法找元素</td></tr><tr><td>public static int[] copyOf(原数组, 新数组长度)</td><td>拷贝数组</td></tr><tr><td>public static int[] copyOfRange(原数组, 起始索引, 结束索引)</td><td>拷贝数组（指定范围）</td></tr><tr><td>public static void fill(数组, 元素)</td><td>填充数组</td></tr><tr><td>public static void sort(数组)</td><td>按照默认方式进行数组排序</td></tr><tr><td>public static void sort(数组, 排序规则)</td><td>按照指定的规则排序</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// toString 把数组变为字符串</span></span><br><span class="line">System.out.println(<span class="string">&quot;------- toString -------&quot;</span>);</span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// binarySearch：二分查找法查找元素</span></span><br><span class="line"><span class="comment">// 注意：需要查找的数组必须是升序的</span></span><br><span class="line"><span class="comment">// 如果数据不存在，则返回数据应该所在位置的 - 索引 - 1</span></span><br><span class="line">System.out.println(<span class="string">&quot;------- binarySearch -------&quot;</span>);</span><br><span class="line">System.out.println(Arrays.binarySearch(arr,<span class="number">5</span>));</span><br><span class="line">System.out.println(Arrays.binarySearch(arr,<span class="number">10</span>));</span><br><span class="line">System.out.println(Arrays.binarySearch(arr,<span class="number">15</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// copyOf：拷贝数组</span></span><br><span class="line">System.out.println(<span class="string">&quot;------- copyOf -------&quot;</span>);</span><br><span class="line"><span class="type">int</span>[] newArr1 = Arrays.copyOf(arr,<span class="number">20</span>);</span><br><span class="line">System.out.println(Arrays.toString(newArr1));</span><br><span class="line"></span><br><span class="line"><span class="comment">// copyOfRange：指定拷贝数组的范围</span></span><br><span class="line"><span class="comment">// 细节：包头不包尾</span></span><br><span class="line">System.out.println(<span class="string">&quot;------- copyOfRange -------&quot;</span>);</span><br><span class="line"><span class="type">int</span>[] newArr2 = Arrays.copyOfRange(arr,<span class="number">0</span>,<span class="number">9</span>);</span><br><span class="line">System.out.println(Arrays.toString(newArr2));</span><br><span class="line"></span><br><span class="line"><span class="comment">// fill：填充数组</span></span><br><span class="line">System.out.println(<span class="string">&quot;------- fill -------&quot;</span>);</span><br><span class="line">Arrays.fill(arr,<span class="number">100</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// sort：排序，默认情况下，给基本数据类型进行升序排序</span></span><br><span class="line">System.out.println(<span class="string">&quot;------- sort -------&quot;</span>);</span><br><span class="line"><span class="type">int</span>[] arr2 = &#123;<span class="number">10</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">9</span>&#125;;</span><br><span class="line">Arrays.sort(arr2);</span><br><span class="line">System.out.println(Arrays.toString(arr2));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Integer[] arr=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个参数，是一个接口，所以在调用方法的时候，需要传递这个接口的实现类对象，作为排序规则</span></span><br><span class="line"><span class="comment">// 但是这个实现类，只要用一次，所以就没有必要单独的去写一个类，直接采取匿名内部类的方式就可以了</span></span><br><span class="line">Arrays.sort(arr, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="comment">// 底层原理：</span></span><br><span class="line">    <span class="comment">// 利用插入排序 + 二分查找的方式进行排序的</span></span><br><span class="line">    <span class="comment">// 默认把0索引的数据当作是有序的序列，1索引到最后认为是无序的序列</span></span><br><span class="line">    <span class="comment">// 遍历无序的序列得到里面的每一个元素，假设当前遍历得到的元素是A元素</span></span><br><span class="line">    <span class="comment">// 把A往有序序列中进行插入，在插入的时候，是利用二分查找确定A元素的插入点</span></span><br><span class="line">    <span class="comment">// 拿着A元素，跟插入点的元素进行比较，比较的规则就是compare方法的方法体</span></span><br><span class="line">    <span class="comment">// 如果方法的返回值是负数，拿着A继续跟前面的数据进行比较</span></span><br><span class="line">    <span class="comment">// 如果方法的返回值是正数，拿着A继续跟后面的数据进行比较</span></span><br><span class="line">    <span class="comment">// 如果方法的返回值是0，也拿着A跟后面的数据进行比较</span></span><br><span class="line">    <span class="comment">// 直到能确定A的最终位置为止</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// compare的形参：</span></span><br><span class="line">    <span class="comment">// o1：表示在无序序列中遍历得到的每一个元素</span></span><br><span class="line">    <span class="comment">// o2：表示在有序序列中的元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回值：</span></span><br><span class="line">    <span class="comment">// 负数：表示当前要插入的元素，是小的，要放在前面</span></span><br><span class="line">    <span class="comment">// 正数：表示当前要插入的元素，是大的，要放在后面</span></span><br><span class="line">    <span class="comment">// 0：表示当前要插入的元素跟现在的元素比是一样的，也会放在后面</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 简单理解：</span></span><br><span class="line">    <span class="comment">// o1 - o2 升序排列</span></span><br><span class="line">    <span class="comment">// o2 - o1 降序排列</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// Integer[] arr=&#123;2,3,1,5,6,7,8,4,9&#125;;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;o1：&quot;</span> + o1);</span><br><span class="line">        System.out.println(<span class="string">&quot;o2：&quot;</span> + o2);</span><br><span class="line">        <span class="keyword">return</span> o1 - o2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br></pre></td></tr></table></figure><h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p>对 <code>Arrary.sort()</code> 进行简化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Integer[] arr=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">9</span>&#125;;</span><br><span class="line">Arrays.sort(arr, (Integer o1,Integer o2) -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> o1 - o2;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br></pre></td></tr></table></figure><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><p>函数式编程（Functional programming）是一种思想特点</p><p>面向对象：先找对象，让对象做事情</p><p>函数式编程思想，忽略面向对象的复杂语法，<font color='red'>强调做什么，而不是谁去做</font></p><p>而Lambda表达式就是函数式思想的体现</p><h2 id="Lambda表达式的标准格式"><a href="#Lambda表达式的标准格式" class="headerlink" title="Lambda表达式的标准格式"></a>Lambda表达式的标准格式</h2><p>Lambda表达式是JDK8开始后的一种新语法形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">() -&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>()</code> 对应着方法的形参</li><li><code>-&gt;</code> 固定格式</li><li><code>&#123;&#125;</code>对应着方法的方法体</li></ul><p>注意点：</p><ul><li><p>Lambda表达式可以用来简化匿名内部类的书写</p></li><li><p>Lambda表达式只能简化函数式接口的匿名内部类的写法</p></li><li><p>函数式接口：</p><p>有且仅有一个抽象方法的接口叫做函数式接口，接口上方可以加@FunctionalInterface注解</p></li></ul><h2 id="Lambda表达式的省略写法"><a href="#Lambda表达式的省略写法" class="headerlink" title="Lambda表达式的省略写法"></a>Lambda表达式的省略写法</h2><p>省略核心：可推导，可省略</p><ul><li>参数类型可以省略不写</li><li>如果只有一个参数，参数类型可以省略，同时<code>()</code>也可以省略</li><li>如果lambda表达式的方法体只有一行，大括号，分号，return可以省略不写，需要同时省略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrarys.sort(arr,(o1,o2) -&gt; o1 - o2)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 自学系列 </tag>
            
            <tag> 常见算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2024/07/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2024/07/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>数据结构是计算机底层存储、组织数据的方式</p><p>是指数据相互之间是以什么方式排列在一起的</p><p>数据结构是为了更加方便的管理和使用数据，需要结合具体的业务场景来进行选择</p><p>一般情况下，精心选择的数据结构可以带来更高的运行或存储效果</p><p>常见的数据结构</p><ul><li>栈</li><li>队列</li><li>数组</li><li>链表</li><li>二叉树</li><li>二叉查找树</li><li>平衡二叉树</li><li>红黑树</li></ul><p>重点掌握：</p><ol><li>数据结构的样式</li><li>如何添加数据</li><li>如何删除数据</li></ol><h2 id="数据结构（栈）"><a href="#数据结构（栈）" class="headerlink" title="数据结构（栈）"></a>数据结构（栈）</h2><p>栈的特点：后进先出，先进后出</p><p>数据进入栈模型的过程称为：<code>压栈/进栈</code></p><p>数据离开栈模型的过程称为：<code>弹栈/出栈</code></p><p>栈内最后进入的元素（处于顶部的元素）称为<code>栈顶元素</code></p><p>栈内最先进入的元素（处于底部的元素）称为<code>栈底元素</code></p><h2 id="数据结构（队列）"><a href="#数据结构（队列）" class="headerlink" title="数据结构（队列）"></a>数据结构（队列）</h2><p>队列的特点：先进先出，后进后出，将数据进入的一端称为后端，数据出去的一端称为前端</p><p>数据从后端进入队列模型的过程称为：入队列</p><p>数据从前端离开队列模型的过程称为：出队列</p><h2 id="数据结构（数组）"><a href="#数据结构（数组）" class="headerlink" title="数据结构（数组）"></a>数据结构（数组）</h2><ul><li>查询速度快：查询数据通过地址值和索引定位，查询任意数据耗时相同（元素在内存中是连续存储的）</li><li>删除效率低：要将原始数据删除，同时后面每个数据前移</li><li>添加效率极低：添加位置后的每个数据后移，再添加元素</li></ul><h2 id="数据结构（链表）"><a href="#数据结构（链表）" class="headerlink" title="数据结构（链表）"></a>数据结构（链表）</h2><p>链表内的每一个元素都称为结点，每一个结点都是一个对象</p><p>结点中，会存储如下内容：</p><ul><li>存储具体的数据</li><li>地址值</li><li>下一个结点的地址（当不存在下一个结点时，地址为空）</li></ul><p>链表中的结点是独立的对象，在内存中是不连续的，每个结点包含数据值和下一个结点的地址</p><p>特点：</p><p>链表查询慢，无论查询哪个数据都要从头开始找</p><p>链表的增删相对快（只需要修改对应结点记录的地址值）</p><p>以上就是最基础的单向链表，还有一种链表为双向链表，即结点中存储三个部分：数据、前一个结点的地址、后一个结点的地址</p><h2 id="数据结构（树）"><a href="#数据结构（树）" class="headerlink" title="数据结构（树）"></a>数据结构（树）</h2><p>示例：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD    A((22))    A --&gt; B((18))    A --&gt; C((26))    B --&gt; D((16))    B --&gt; E((20))    D --&gt; F((15))    D --&gt; G((17))    E --&gt; N((19))    E --&gt; O((21))    C --&gt; H((24))    C --&gt; I((28))    H --&gt; J((23))    H --&gt; K((25))    I --&gt; L((27))    I --&gt; M((29))  </pre></div><p>其中，16可以看作是15、17的父节点，15是16的左子节点，17是16的右子节点</p><p>每一个结点都会存储四个值，分别是：</p><ol><li>数据</li><li>父节点地址</li><li>左子节点地址</li><li>右子节点地址</li></ol><p>若是没有父节点地址、子节点地址，记为null</p><p>度：每一个节点的子节点数量</p><p>树高：树的总层数（示例中，树的高度为4）</p><p>根节点：最顶层的结点（示例中，树的根为22）</p><p>左子节点：左下方的节点</p><p>右子节点：右下方的结点</p><p>根节点的左子树：就是根节点的左子节点以及子子节点（示例中，左子树为18、16、20、15、17、19、12）</p><p>根节点的右子树：就是根节点的右子节点以及子子节点（示例中，左子树为26、24、28、23、25、27、29）</p><h3 id="数据结构（二叉树）"><a href="#数据结构（二叉树）" class="headerlink" title="数据结构（二叉树）"></a>数据结构（二叉树）</h3><p>二叉树中，任意节点的度&lt;&#x3D;2</p><p>普通的二叉树</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD9((9))    9 --&gt; 7((7))    9 --&gt; R((2))    R --&gt; D((1))    D --&gt; 10((10))    7 --&gt; 3((3))    7 --&gt; 8((8))    3 --&gt; 4((4))    3 --&gt; 6((6))    8 --&gt; 5((5))  </pre></div><p>排列没有规则</p><h4 id="数据结构（二叉查找树）"><a href="#数据结构（二叉查找树）" class="headerlink" title="数据结构（二叉查找树）"></a>数据结构（二叉查找树）</h4><p>二叉查找树，又称二叉排序树或者二叉搜索树</p><p>特点：</p><ol><li>每个节点上最多有两个子节点</li><li>任意节点左子树上的值都小于当前节点</li><li>任意节点右子树上的值都大于当前节点</li></ol><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))4 --&gt; 2((2))4 --&gt; 5((5))5 --&gt; 6((6))2 --&gt; 1((1))2 --&gt; 3((3))7 --&gt; 10((10))10 --&gt; 11((11))11 --&gt; 12((12))  </pre></div><p>规则：小的存左边，大的存右边，一样的不存</p><h4 id="数据结构（平衡二叉树）"><a href="#数据结构（平衡二叉树）" class="headerlink" title="数据结构（平衡二叉树）"></a>数据结构（平衡二叉树）</h4><p>规则：任意节点左右子树高度差不超过1</p><p>示例：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 8((8))8 --&gt; 9((9))9 --&gt; 10((10))10 --&gt; 11((11))  </pre></div><p>假设要查询数据10，效率太低。此时需要平衡二叉树</p><p>示例：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD9((9))9 --&gt; 8((8))8 --&gt; 7((7))9 --&gt; 10((10))10 --&gt; 11((11))  </pre></div><h5 id="旋转机制"><a href="#旋转机制" class="headerlink" title="旋转机制"></a>旋转机制</h5><p>规则1：左旋</p><p>规则2：右旋</p><p>触发时机：当添加一个节点后，该树不再是一棵平衡二叉树</p><h6 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h6><p>确定支点：从添加的节点开始，不断的往父节点找不平衡的节点</p><p>步骤：</p><ol><li>以不平衡的点作为支点</li><li>把支点左旋降级，变成左子节点</li><li>晋升原来的右子节点</li></ol><p>不平衡二叉树示例1：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))7 --&gt; 10((10))10 --&gt; 11((11))11 --&gt; 12((12))  </pre></div><p>以上图例，不平衡点为10</p><p>将10作为左子节点，再晋升11、12</p><p>经过左旋后的平衡二叉树：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))7 --&gt; 11((11))11 --&gt; 10((10))11 --&gt; 12((12))  </pre></div><p>不平衡二叉树示例2：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))7 --&gt; 10((10))10 --&gt; 11((11))10 --&gt; 9((9))11 --&gt; 12((12))  </pre></div><p>此时，不平衡点就不再是10，而是根节点7</p><p>且左旋的步骤也发生了改变：</p><ul><li>以不平衡点为支点</li><li>将根节点的右侧往左拉</li><li>原先的右子节点变成新的父节点，并把多余的左子节点出让，给已经降级的根节点当右子节点</li></ul><p>经过左旋后的平衡二叉树：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD10((10))10 --&gt; 7((7))7 --&gt; 4((4))7 --&gt; 9((9))10 --&gt; 11((11))11 --&gt; 12((12))  </pre></div><h6 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h6><p>确定支点：从添加的节点开始，不断的往父节点找不平衡的节点</p><p>步骤：</p><ol><li>以不平衡的点作为支点</li><li>把支点右旋降级，变成右子节点</li><li>晋升原来的左子节点</li></ol><p>使用方法和左旋类似</p><h5 id="平衡树需要旋转情况"><a href="#平衡树需要旋转情况" class="headerlink" title="平衡树需要旋转情况"></a>平衡树需要旋转情况</h5><ol><li>左左</li><li>左右</li><li>右右</li><li>右左</li></ol><h6 id="左左"><a href="#左左" class="headerlink" title="左左"></a>左左</h6><p>当根节点左子树的左子树有节点插入，导致二叉树不平衡</p><p>节点插入前的平衡二叉树：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))4 --&gt; 2((2))4 --&gt; 5((5))7 --&gt; 10((10))  </pre></div><p>左左，在根节点左子树的左子树插入节点，导致不平衡二叉树：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))4 --&gt; 2((2))4 --&gt; 5((5))2 --&gt; 1((1))7 --&gt; 10((10))  </pre></div><p>一次右旋就可以保持平衡：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD4((4))4 --&gt; 2((2))4 --&gt; 7((7))7 --&gt; 5((5))7 --&gt; 10((10))2 --&gt; 1((1))  </pre></div><h6 id="左右"><a href="#左右" class="headerlink" title="左右"></a>左右</h6><p>当根节点左子树的右子树有节点插入，导致二叉树不平衡</p><p>节点插入前的平衡二叉树：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))4 --&gt; 2((2))4 --&gt; 5((5))7 --&gt; 10((10))  </pre></div><p>左右，在根节点左子树的右子树插入节点，导致不平衡二叉树：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))4 --&gt; 2((2))4 --&gt; 5((5))5 --&gt; 6((6))7 --&gt; 10((10))  </pre></div><p>先在局部进行左旋，使其成为左左</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 5((5))5 --&gt; 4((4))5 --&gt; 6((6))4 --&gt; 2((2))7 --&gt; 10((10))  </pre></div><p>再整体右旋</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD5((5))5 --&gt; 4((4))4 --&gt; 2((2))5 --&gt; 7((7))7 --&gt; 6((6))7 --&gt; 10((10))  </pre></div><h6 id="右右"><a href="#右右" class="headerlink" title="右右"></a>右右</h6><p>当根节点右子树的右子树有节点插入，导致二叉树不平衡</p><p>节点插入前的平衡二叉树：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))7 --&gt; 10((10))10 --&gt; 9((9))10 --&gt; 11((11))  </pre></div><p>右右，在根节点右子树的右子树插入节点，导致不平衡二叉树：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))7 --&gt; 10((10))10 --&gt; 9((9))10 --&gt; 11((11))11 --&gt; 12((12))  </pre></div><p>一次左旋就可以保持平衡：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD10((10))10 --&gt; 7((7))7 --&gt; 4((4))7 --&gt; 9((9))10 --&gt; 11((11))11 --&gt; 12((12))  </pre></div><h6 id="右左"><a href="#右左" class="headerlink" title="右左"></a>右左</h6><p>当根节点右子树的左子树有节点插入，导致二叉树不平衡</p><p>节点插入前的平衡二叉树：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))7 --&gt; 10((10))10 --&gt; 9((9))10 --&gt; 11((11))  </pre></div><p>右左，在根节点右子树的左子树插入节点，导致不平衡二叉树：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))7 --&gt; 10((10))10 --&gt; 9((9))9 --&gt; 8((8))10 --&gt; 11((11))  </pre></div><p>局部右旋</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))7 --&gt; 9((9))9 --&gt; 10((10))9 --&gt; 8((8))10 --&gt; 11((11))  </pre></div><p>再整体左旋</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD9((9))9 --&gt; 7((7))7 --&gt; 4((4))7 --&gt; 8((8))9 --&gt; 10((10))10 --&gt; 11((11))  </pre></div><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>左左和右右只需一次旋转就可以保持平衡，而左右和右左需要进行局部旋转，再整体旋转才能保持平衡</p><h4 id="二叉树遍历方式"><a href="#二叉树遍历方式" class="headerlink" title="二叉树遍历方式"></a>二叉树遍历方式</h4><p>前序遍历：</p><p>从根节点开始，然后按照当前节点，左子节点，右子节点的顺序遍历</p><p>示例：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD20((20))20 --&gt; 18((18))18 --&gt; 16((16))18 --&gt; 19((19))20 --&gt; 23((23))23 --&gt; 22((22))23 --&gt; 24((24))  </pre></div><p>遍历获取元素顺序为：20 ➡ 18 ➡ 16 ➡ 19 ➡ 23 ➡ 22 ➡ 24</p><p>中序遍历：</p><p>从最左边的子节点开始，然后按照左子节点，当前节点，右子节点的顺序遍历</p><p>遍历获取元素顺序为：16 ➡ 18 ➡ 19 ➡ 20 ➡ 22 ➡ 23 ➡ 24</p><p>后序遍历：</p><p>从最左边的子节点开始，然后按照左子节点，右子节点，当前节点的顺序遍历</p><p>遍历获取元素顺序为：16 ➡ 19 ➡ 18 ➡ 22 ➡ 24 ➡ 23 ➡ 20</p><p>层序遍历：</p><p>从根节点开始，一层一层的遍历</p><p>遍历获取元素顺序为：20 ➡  18 ➡ 23 ➡ 16 ➡ 19 ➡ 22 ➡  24</p><p>总结：</p><ol><li>前序遍历：<font color='red'>当前节点</font>，左子节点，右子节点</li><li>中序遍历：左子节点，<font color='red'>当前节点</font>，右子节点</li><li>后序遍历：左子节点，右子节点，<font color='red'>当前节点</font></li><li>层序遍历：一层一层的去遍历</li></ol><h4 id="二叉树的演变"><a href="#二叉树的演变" class="headerlink" title="二叉树的演变"></a>二叉树的演变</h4><p>二叉树 ➡ 二叉查找树 ➡ 平衡二叉树</p><p>查找效率：从左往右，从小到大</p><h3 id="数据结构（红黑树）"><a href="#数据结构（红黑树）" class="headerlink" title="数据结构（红黑树）"></a>数据结构（红黑树）</h3><ul><li>红黑树是一种自平衡的二叉查找树，是计算机科学中用到的一种数据结构</li><li>1972年出现，当时被称为平衡二叉B树。直到1978年，被正式修改为如今的<code>红黑树</code></li><li>它是一种特殊的二叉查找树，红黑树的每一个节点上都有存储位表示<code>节点的颜色</code></li><li>每一个节点可以是红或者黑；红黑树不是高度平衡的，它的平衡是通过<code>红黑规则</code>进行实现的</li></ul><h4 id="红黑规则"><a href="#红黑规则" class="headerlink" title="红黑规则"></a>红黑规则</h4><ol><li>每一个节点或是黑色的，或者是红色的</li><li>根节点必须是黑色</li><li>如果一个节点没有子节点或者父节点，则该节点相应的指针属性值为Nil，这些Nil视为叶节点，每个叶节点是黑色的</li><li>如果某个节点是红色，那么它的子节点必须是黑色（不能出现两个红色节点相连的情况）</li><li>对每一个节点，从该节点到其所有后代叶节点的简单路径上，均包含相同数目的黑色节点</li></ol><p>示例：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD13((13)):::black13 --&gt; 8((8)):::red13 --&gt; 17((17)):::red8 --&gt; 1((1)):::black8 --&gt; 11((11)):::black1 --&gt; Nil1((Nil)):::black1 --&gt; 6((6)):::red11 --&gt; Nil2((Nil)):::black11 --&gt; Nil3((Nil)):::black17 --&gt; 15((15)):::black17 --&gt; 25((25)):::black15 --&gt; Nil4((Nil)):::black15 --&gt; Nil5((Nil)):::black25 --&gt; 22((22)):::red25 --&gt; Nil6((Nil)):::black22 --&gt; Nil7((Nil)):::black22 --&gt; Nil8((Nil)):::black6 --&gt; Nil9((Nil)):::black6 --&gt; Nil10((Nil)):::blackclassDef black fill:#000,color:#fffclassDef red fill:red,color:#fff  </pre></div><h4 id="节点添加规则"><a href="#节点添加规则" class="headerlink" title="节点添加规则"></a>节点添加规则</h4><p>默认颜色：添加节点默认是红色的（效率高）</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LRid1[添加节点]id1 --&gt; id2[根]id2 --&gt; id3[直接变成黑色]id1 --&gt; id4[非根]id4 --&gt; id5[父黑色]id5 --&gt; id6[则不需要任何操作]id4 --&gt; id7[父红色]id7 --&gt; id8[叔叔红色]id8 --&gt; id9[&quot;将父设为黑色,将叔叔设为黑色&quot;]id8 --&gt; id10[&quot;将祖父设为红色&quot;]id8 --&gt; id11[&quot;如果祖父为根，再将根变回黑色&quot;]id8 --&gt; id12[&quot;如果祖父为非根，将祖父设置为当前节点再进行其他判断&quot;]id7 --&gt; id13[&quot;叔叔黑色，当前节点是父的右孩子&quot;]id13 --&gt; id14[&quot;把父作为当前节点并左旋，再进行判断&quot;]id7 --&gt; id15[&quot;叔叔黑色，当前节点是父的左孩子&quot;]id15 --&gt; id16[&quot;将父设为黑色&quot;]id15 --&gt; id17[&quot;将祖父变为红色&quot;]id15 --&gt; id18[&quot;以祖父为支点进行右旋&quot;]  </pre></div><p>红黑树旋转时，不需要将Nil叶节点进行旋转</p><p><font color='red'>红黑树增删改查的性能都很好</font></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 自学系列 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu基本使用</title>
      <link href="/2024/07/10/ubuntu%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/07/10/ubuntu%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="压缩包管理——ZIP"><a href="#压缩包管理——ZIP" class="headerlink" title="压缩包管理——ZIP"></a>压缩包管理——ZIP</h1><h2 id="安装ZIP"><a href="#安装ZIP" class="headerlink" title="安装ZIP"></a>安装ZIP</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-install zip</span><br></pre></td></tr></table></figure><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a>压缩文件</h3><ol><li>压缩文件单个文件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip test.zip myfile</span><br></pre></td></tr></table></figure><p>test.zip：压缩文件的名称</p><p>myfile：压缩的目标文件</p><ol start="2"><li>压缩多个文件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip test.zip file1 file2 file3</span><br></pre></td></tr></table></figure><h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><ol><li>解压缩到当前目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip test.zip</span><br></pre></td></tr></table></figure><ol start="2"><li>解压缩到指定目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip test.zip -d directory</span><br></pre></td></tr></table></figure><h1 id="AppImage安装"><a href="#AppImage安装" class="headerlink" title="AppImage安装"></a>AppImage安装</h1><p>将文件权限设置为如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x &lt;AppImage File&gt;</span><br></pre></td></tr></table></figure><p>然后直接打开文件就可以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./&lt;AppImage File&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java测试题</title>
      <link href="/2024/06/29/Java%E6%B5%8B%E8%AF%95%E9%A2%98/"/>
      <url>/2024/06/29/Java%E6%B5%8B%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>1. 借助随机函数生成100以内的整数表示成绩，将得到的10名同学3门课的成绩存储在一个二维数组中。分别统计每个人的平均成绩，每门课的平均成绩，并分别显示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] score =<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; score.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; score[i].length; j++) &#123;</span><br><span class="line">                score[i][j] = r.nextInt(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 显示成绩</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; score.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; score[i].length; j++) &#123;</span><br><span class="line">                System.out.print(score[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 求每个人的平均成绩</span></span><br><span class="line">        <span class="type">int</span>[] personal_avg_score = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; score.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; score[i].length; j++) &#123;</span><br><span class="line">                sum += score[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            personal_avg_score[i] = sum / score[i].length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; personal_avg_score.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;个人的平均成绩：&quot;</span> + personal_avg_score[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 求每科的平均成绩</span></span><br><span class="line">        <span class="type">int</span>[] subject_avg_score = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; score[i].length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; score.length; j++) &#123;</span><br><span class="line">                sum += score[j][i];</span><br><span class="line">            &#125;</span><br><span class="line">            subject_avg_score[i] = sum / score.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; subject_avg_score.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;科目：&quot;</span> + subject_avg_score[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2. 编写程序统计用户从键盘输入的任意一个字符串中数字字符出现的总数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountCharacter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count_num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count_letter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (Character.isDigit(ch)) &#123;</span><br><span class="line">                count_num++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(Character.isLetter(ch)) &#123;</span><br><span class="line">                count_letter++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;数字的个数：&quot;</span> + count_num);</span><br><span class="line">        System.out.println(<span class="string">&quot;字符的个数：&quot;</span> + count_letter);</span><br><span class="line">        System.out.println(<span class="string">&quot;其他的个数：&quot;</span> + (str.length() - (count_num + count_letter)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3. 编程实现：获取某个给定的整型数组中最小的能整除5的数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">findMinNum</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">50</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> r.nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (temp % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                arr[i] = temp;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                arr[i] = <span class="number">999</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        <span class="keyword">if</span> (arr[<span class="number">0</span>] == <span class="number">999</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;数组中没有能被5整除的数字&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;数组中最小能被5整除的数字是：&quot;</span> + arr[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4. 编程实现：判断用户从键盘输入的任意字符串，在忽略了非数字和字母符号后，</p><p>是否为回文串。例如：用户输入的字符串是“123ab-&amp;*;2332@b#a3%21”,忽略非数</p><p>字字母符号后的串为“123ab2332ba321”，这是一个回文串（正向和逆向的序列相</p><p>同）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Palindromic_String</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        sc.close();</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; checkInput = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Character.isLetter(str.charAt(i)) || Character.isDigit(str.charAt(i))) &#123;</span><br><span class="line">                checkInput.add(Character.toString(str.charAt(i)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; checkReverse= <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; checkInput.size(); i++) &#123;</span><br><span class="line">            checkReverse.add(checkInput.get(checkInput.size() - i - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (checkReverse.equals(checkInput)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;是回文串&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不是回文串&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5. 从给定的二进制文件test.dat中读取50个整数，过滤3和5的倍数，将剩余元素送到</p><p>屏幕上显示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDataFilter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readDigs</span><span class="params">(File fd, <span class="type">int</span>[] digs)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">DataInputStream</span> <span class="variable">din</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(fd)));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; digs.length; i++) &#123;</span><br><span class="line">            digs[i] = din.readInt();</span><br><span class="line">            din.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printDigs</span><span class="params">(<span class="type">int</span>[] digs)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; digs.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (digs[i] % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (digs[i] % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(digs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">fd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;test.dat&quot;</span>);</span><br><span class="line">        <span class="type">int</span>[] digs = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">        FileDataFilter.readDigs(fd,digs);</span><br><span class="line">        FileDataFilter.printDigs(digs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6. 编写一个Java程序，求出整数1～100内的所有素数，并在屏幕上显示这些数，每5</p><p>个一行。同时算出这些素数的累加和，并独立一行显示到屏幕上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrimeNumber</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">changeLine</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isPrime(i)) &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">                System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                changeLine++;</span><br><span class="line">                <span class="keyword">if</span> (changeLine == <span class="number">5</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                    changeLine=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; x; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x % i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7. 编程实现：随机生成100个不大于100的正整数，去除重复值后，按一行5个将不重</p><p>复的数输出到屏幕上，并显示不重复数一共有多少个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomNumber</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">Set</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">101</span>; i++) &#123;</span><br><span class="line">            s.add(r.nextInt(<span class="number">100</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s.forEach(<span class="keyword">new</span> <span class="title class_">Consumer</span>() &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">                index++;</span><br><span class="line">                System.out.print(o + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (index == <span class="number">5</span>) &#123;</span><br><span class="line">                    System.out.println();</span><br><span class="line">                    index = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;不重复数的个数为：&quot;</span> + s.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8. 列出当前文件夹及其子文件夹下所有文件的文件名（文件夹的名字无需列出）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShowFileName</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">listAll</span><span class="params">(File fd)</span> &#123;</span><br><span class="line">        File[] FList = fd.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; FList.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (FList[i].isFile()) &#123;</span><br><span class="line">                System.out.println(FList[i].getName());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                listAll(FList[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">fd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        listAll(fd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9. 编写一个矩形类，包含：</p><p>长和宽两个属性；</p><p>依据指定的长和宽构建矩形；</p><p>不指定长和宽时，默认两者为1.0；</p><p>能求矩形的面积；</p><p>能求矩形的周长；</p><p>能显示矩形的长和宽的基本信息，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RectangleClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> height;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RectangleClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = <span class="built_in">this</span>.height = <span class="number">1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RectangleClass</span><span class="params">(<span class="type">int</span> width, <span class="type">int</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取面积</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.height * <span class="built_in">this</span>.width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取周长</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getLength</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">this</span>.height * <span class="number">2</span>) + (<span class="built_in">this</span>.width * <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取、设置长宽</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getWidth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWidth</span><span class="params">(<span class="type">double</span> width)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHeight</span><span class="params">(<span class="type">double</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10. 编程实现：从键盘输入若干个正整数，输入为负数时表示输入结束。求输入的若</p><p>干元素中的最大值，以及它们的累加和、乘积，并将结果送到屏幕显示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ScannerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 输入数据且判断退出时机</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入整数：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sc.next();</span><br><span class="line">            <span class="keyword">if</span> (Integer.parseInt(s) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                list.add(Integer.parseInt(s));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Integer.parseInt(s) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将输入数据转换为数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[list.size()];</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cj</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            arr[i] = list.get(i);</span><br><span class="line">            <span class="comment">// 计算累加和以及乘积</span></span><br><span class="line">            sum += list.get(i);</span><br><span class="line">            cj *= list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排序得到最大值</span></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：&quot;</span>);</span><br><span class="line">        System.out.println(arr[arr.length - <span class="number">1</span>]);</span><br><span class="line">        System.out.println(<span class="string">&quot;累加和：&quot;</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;乘积：&quot;</span>);</span><br><span class="line">        System.out.println(cj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>11.\ 随机生成50个不大于1000的正整数，将大于等于平均值的那些正整数按个位数的</p><p>升序排列，并将它们以5个一行，空格间隔的形式输出到屏幕。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RandomSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">50</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成随机数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">avgNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = r.nextInt(<span class="number">1001</span>);</span><br><span class="line">            sum += arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算平均值</span></span><br><span class="line">        avgNum = sum / arr.length;</span><br><span class="line">        System.out.println(avgNum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 过滤出高于平均值的数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">arrLength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt;= avgNum) &#123;</span><br><span class="line">                arrLength++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将高于平均值的数重新组成一个数组</span></span><br><span class="line">        <span class="type">int</span>[] avgArr = <span class="keyword">new</span> <span class="title class_">int</span>[arrLength];</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt;= avgNum) &#123;</span><br><span class="line">                avgArr[index] = arr[i];</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;平均值：&quot;</span> + avgNum);</span><br><span class="line">        System.out.println(Arrays.toString(avgArr));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 冒泡排序，对个位数进行升序排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; avgArr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; avgArr.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (avgArr[j] % <span class="number">10</span> &gt; avgArr[j + <span class="number">1</span>] % <span class="number">10</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> avgArr[j];</span><br><span class="line">                    avgArr[j] = avgArr[j + <span class="number">1</span>];</span><br><span class="line">                    avgArr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出格式化</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">changeLine</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; avgArr.length; i++) &#123;</span><br><span class="line">            changeLine++;</span><br><span class="line">            System.out.print(avgArr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (changeLine == <span class="number">5</span>) &#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">                changeLine = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>12. 编程实现：定义通信簿中的一个联系方式，内容包括：</p><p>身份证，姓名和电话三个属性；</p><p>能够依据给定的身份证、姓名和电话生成一个联系项（构造函数）；</p><p>能修改联系电话；</p><p>能依据身份证号查找某个联系项是否与当前项相同（equals方法）；</p><p>能够显示详细的联系项信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AddressList</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数生成练习簿</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressList</span><span class="params">(String id, String name, <span class="type">int</span> phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改号码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(<span class="type">int</span> phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 比较身份证的值（这地方存疑，答案上是这么写的）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(AddressList a)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a.id.equals(<span class="built_in">this</span>.id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出详细信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;AddressList&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&#x27;&quot;</span> + id + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, phone=&quot;</span> + phone +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressListTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AddressList</span> <span class="variable">adL1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AddressList</span>(<span class="string">&quot;1234567890x&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>,<span class="number">1333333333</span>);</span><br><span class="line">        <span class="type">AddressList</span> <span class="variable">adL2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AddressList</span>(<span class="string">&quot;1234567890&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>,<span class="number">1333333333</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(adL1.equals(adL2));</span><br><span class="line">        adL1.setPhone(<span class="number">1344444444</span>);</span><br><span class="line">        System.out.println(adL1.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 自学系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP32-SSCMA</title>
      <link href="/2024/06/05/ESP32-SSCMA/"/>
      <url>/2024/06/05/ESP32-SSCMA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="项目获取"><a href="#项目获取" class="headerlink" title="项目获取"></a>项目获取</h2><p>github地址：<a href="https://github.com/Seeed-Studio/sscma-example-esp32">https://github.com/Seeed-Studio/sscma-example-esp32</a></p><h2 id="环境要求（我自己的）"><a href="#环境要求（我自己的）" class="headerlink" title="环境要求（我自己的）"></a>环境要求（我自己的）</h2><p>Python 3.11.2</p><p>ESP-IDF 5.1.2</p><ol><li>克隆仓库</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Seeed-Studio/sscma-example-esp32</span><br></pre></td></tr></table></figure><ol start="2"><li>进入 sscma-example-esp32 文件夹</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> sscma<span class="literal">-example-esp32</span></span><br></pre></td></tr></table></figure><ol start="3"><li>获取子模块</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update <span class="literal">--init</span></span><br></pre></td></tr></table></figure><p>进入examples&#x2F;mobilenetv2_classification_demo 目录</p><p>由于我使用的是ESP32S3-EYE，在上传到板子前，需要在 cmake&#x2F;CMakeLists.txt 修改开发板型号</p><p>在文件尾部，修改如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">target_compile_definitions(</span><br><span class="line">    $&#123;COMPONENT_TARGET&#125;</span><br><span class="line">    PUBLIC</span><br><span class="line">    -DCONFIG_EL_TARGET_ESPPRESSIF</span><br><span class="line">    -DCONFIG_EL_BOARD_ESPRESSIF_ESP32S3_EYE</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>此外，要注意由于是非官方开发板，官方提供的代码中<font color="red">缺少 <code>LED_0_PIN </code>的定义</font></p><p>文件修改位置：</p><p>sscma-example-esp32\components\sscma-micro\porting\espressif\boards\espressif_esp32s3_eye</p><p>在文件中添加如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define LED_0_PIN                    GPIO_NUM_21</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ESP32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esp32s3-eye </tag>
            
            <tag> SSCMA </tag>
            
            <tag> AI classification </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序的一些疑难杂症</title>
      <link href="/2024/05/09/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
      <url>/2024/05/09/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h2 id="引入样式的问题"><a href="#引入样式的问题" class="headerlink" title="引入样式的问题"></a>引入样式的问题</h2><p>微信小程序在引入样式时，不允许有id选择器，所以需要把id修改为class</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在微信小程序中引入font awesome</title>
      <link href="/2024/05/08/WeChatBlog/"/>
      <url>/2024/05/08/WeChatBlog/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h2 id="获取图标"><a href="#获取图标" class="headerlink" title="获取图标"></a>获取图标</h2><p>现在官网下载压缩包<a href="https://fontawesome.dashgame.com/">Font Awesome，一套绝佳的图标字体库和CSS框架 (dashgame.com)</a>，将文件解压后，得到以下文件：</p><p><img src="/img/wechatblog/1.png"></p><h2 id="转换字体文件"><a href="#转换字体文件" class="headerlink" title="转换字体文件"></a>转换字体文件</h2><p>将font&#x2F;fontawesome-webfont.ttf文件</p><p>通过<a href="https://transfonter.org/">Online @font-face generator — Transfonter</a>获得Base64编码格式的文件，具体操作配置如下：</p><p><img src="/img/wechatblog/2.png"></p><p>下载后得到一个压缩包</p><h2 id="修改样式文件"><a href="#修改样式文件" class="headerlink" title="修改样式文件"></a>修改样式文件</h2><p>解压压缩包，将解压出的文件中的stylesheet.css改名为stylesheet.wxss</p><p>将fontawesome文件下的css&#x2F;font-awesome.css改名为font-awesome.wxss</p><p>最后将这两个文件放入微信小程序的项目文件中，在app.wxss中引入就可以使用了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span>&quot;./stylesheet.wxss&quot;;</span><br><span class="line"><span class="keyword">@import</span>&quot;./font-awesome.wxss&quot;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wechat </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo相关命令</title>
      <link href="/2024/05/05/%E7%94%9F%E6%88%90%E6%96%87%E7%AB%A0/"/>
      <url>/2024/05/05/%E7%94%9F%E6%88%90%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h2 id="网站生成以及部署"><a href="#网站生成以及部署" class="headerlink" title="网站生成以及部署"></a>网站生成以及部署</h2><p>生成一个新的博客（Hexo框架），在对应的目录下打开终端，输入Hexo初始化命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;Blog&#x27;name&gt; </span><br></pre></td></tr></table></figure><p>生成静态文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>在本地部署网站：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>上传网站（部署网站至服务器）:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>注意：</p><p><font color="red">部署之前预先生成静态文件</font></p><p>当对项目文件进行修改后，发现网站并没有生效时，可以尝试清楚文件缓存:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h2 id="生成文章"><a href="#生成文章" class="headerlink" title="生成文章"></a>生成文章</h2><p>在命令行中，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n 文章名称</span><br></pre></td></tr></table></figure><p>即可生成新文章，生成文章默认路径会在source&#x2F;_post文件夹中</p><p>而使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n page ABC</span><br></pre></td></tr></table></figure><p>以上命令则会生成：source&#x2F;ABC 这样路径的文件夹，文件夹中包含了index.md文件，该文件就是新的文章页</p><h2 id="文章格式"><a href="#文章格式" class="headerlink" title="文章格式"></a>文章格式</h2><p>Front-matter 是文件开头的 YAML 或 JSON 代码块，用于配置写作设置。 以 YAML 格式书写时，Front-matter 以三个破折号结束；以 JSON 格式书写时，Front-matter 以三个分号结束。</p><h3 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a><strong>YAML</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2013/7/13 20:46:25</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="Post-Front-matter"><a href="#Post-Front-matter" class="headerlink" title="Post Front-matter"></a>Post Front-matter</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top_img:</span><br><span class="line">comments:</span><br><span class="line">cover:</span><br><span class="line">toc:</span><br><span class="line">toc_number:</span><br><span class="line">toc_style_simple:</span><br><span class="line">copyright:</span><br><span class="line">copyright_author:</span><br><span class="line">copyright_author_href:</span><br><span class="line">copyright_url:</span><br><span class="line">copyright_info:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br><span class="line">aside:</span><br><span class="line">abcjs:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><table><thead><tr><th>寫法</th><th>解釋</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章標題</td></tr><tr><td>date</td><td>【必需】文章創建日期</td></tr><tr><td>updated</td><td>【可選】文章更新日期</td></tr><tr><td>tags</td><td>【可選】文章標籤</td></tr><tr><td>categories</td><td>【可選】文章分類</td></tr><tr><td>keywords</td><td>【可選】文章關鍵字</td></tr><tr><td>description</td><td>【可選】文章描述</td></tr><tr><td>top_img</td><td>【可選】文章頂部圖片</td></tr><tr><td>cover</td><td>【可選】文章縮略圖(如果沒有設置top_img,文章頁頂部將顯示縮略圖，可設為false&#x2F;圖片地址&#x2F;留空)</td></tr><tr><td>comments</td><td>【可選】顯示文章評論模塊(默認 true)</td></tr><tr><td>toc</td><td>【可選】顯示文章TOC(默認為設置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可選】顯示toc_number(默認為設置中toc的number配置)</td></tr><tr><td>toc_style_simple</td><td>【可選】顯示 toc 簡潔模式</td></tr><tr><td>copyright</td><td>【可選】顯示文章版權模塊(默認為設置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可選】文章版權模塊的<code>文章作者</code></td></tr><tr><td>copyright_author_href</td><td>【可選】文章版權模塊的<code>文章作者</code>鏈接</td></tr><tr><td>copyright_url</td><td>【可選】文章版權模塊的<code>文章連結</code>鏈接</td></tr><tr><td>copyright_info</td><td>【可選】文章版權模塊的<code>版權聲明</code>文字</td></tr><tr><td>mathjax</td><td>【可選】顯示mathjax(當設置 mathjax 的 per_page: false 時，才需要配置，默認 false )</td></tr><tr><td>katex</td><td>【可選】顯示 katex (當設置 katex 的 per_page: false 時，才需要配置，默認 false )</td></tr><tr><td>aplayer</td><td>【可選】在需要的頁面加載 aplayer 的 js 和 css,請參考文章下面的<code>音樂</code> 配置</td></tr><tr><td>highlight_shrink</td><td>【可選】配置代碼框是否展開(true&#x2F;false)(默認為設置中 highlight_shrink 的配置)</td></tr><tr><td>aside</td><td>【可選】顯示側邊欄 (默認 true)</td></tr><tr><td>abcjs</td><td>【可選】加載 abcjs (當設置 abcjs 的 per_page: false 時，才需要配置，默認 false )</td></tr></tbody></table><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p><a href="https://hexo.io/zh-cn/docs/commands">指令 | Hexo</a></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无题啊，想不出题啊</title>
      <link href="/2024/05/05/%E8%8A%9C%E6%B9%96/"/>
      <url>/2024/05/05/%E8%8A%9C%E6%B9%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>框架有了，开搞开搞咯</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/04/hello-world/"/>
      <url>/2024/05/04/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="彩蛋？"><a href="#彩蛋？" class="headerlink" title="彩蛋？"></a>彩蛋？</h2><p>不想删这文章是因为想记录一下网站生成的那一瞬间，🤭</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
