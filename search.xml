<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>病虫害识别以及分类的实现</title>
      <link href="/2024/09/24/%E7%97%85%E8%99%AB%E5%AE%B3%E8%AF%86%E5%88%AB%E4%BB%A5%E5%8F%8A%E5%88%86%E7%B1%BB%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2024/09/24/%E7%97%85%E8%99%AB%E5%AE%B3%E8%AF%86%E5%88%AB%E4%BB%A5%E5%8F%8A%E5%88%86%E7%B1%BB%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="病虫害识别以及分类的实现"><a href="#病虫害识别以及分类的实现" class="headerlink" title="病虫害识别以及分类的实现"></a>病虫害识别以及分类的实现</h1><h2 id="模型生成"><a href="#模型生成" class="headerlink" title="模型生成"></a>模型生成</h2><h3 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h3><p>数据集地址：<a href="https://www.kaggle.com/datasets/rtlmhjbn/ip02-dataset">IP102-Dataset (kaggle.com)</a></p><p>数据集说明：</p><p>IP102 是一个用于害虫识别的大规模基准数据集。以下是它的一些主要特点：</p><ul><li><strong>图像数量</strong>：包含超过 75,000 张图像</li><li><strong>类别</strong>：涵盖 102 个不同的昆虫害虫类别</li><li><strong>数据分布</strong>：呈现自然的长尾分布，模拟了现实世界中的不平衡样本情况</li><li><strong>目标检测</strong>：为约 19,000 张图像标注了边界框，用于目标检测任务</li></ul><p>这个数据集的独特之处在于它的层次分类系统和数据分布不平衡的特点，使其在害虫识别和农业应用中具有重要意义。</p><h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><p>具体训练过程：<a href="https://www.kaggle.com/code/iamolivia/pytorch-vit-insect-classifier">Pytorch_VIT Insect Classifier (kaggle.com)</a></p><p>可以使用<code>kaggle</code>里的<code>notebook</code>，也可以使用<code>colab</code>在云端运行</p><p>点击<a href="https://www.kaggle.com/kernels/fork/25244292"><strong>Edit My Copy</strong></a>，可以直接进入notebook，但是由于要下载<code>timm</code>库，要在notebook中开启网络功能，需要手机验证。</p><p>我搞了半天验证，一直出问题。。。后面选择使用colab。</p><h3 id="Colab"><a href="#Colab" class="headerlink" title="Colab"></a>Colab</h3><p>先在notebook的导航栏中找到<code>file</code>选项，里面有一个<code>open in colab</code>选项，可以直接将项目转到colab中。</p><p>在跑代码之前，要注意硬件加速器选择<code>GPU</code></p><p>具体操作方法：</p><ol><li>导航栏中的修改选项</li><li>笔记本设置</li><li>选择GPU</li></ol><p>（没选这玩意会出错，之前跑一半才发现没开GPU）</p><p>然后依次执行代码，全部执行完后，就会获得<code>vit_best.pth</code>这个模型文件了</p><p>详细的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> textwrap <span class="keyword">import</span> wrap</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> albumentations <span class="keyword">as</span> A</span><br><span class="line"><span class="keyword">from</span> albumentations.pytorch.transforms <span class="keyword">import</span> ToTensorV2</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> timm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取类别文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;../input/ip02-dataset/classes.txt&#x27;</span>)</span><br><span class="line">label = []</span><br><span class="line">name = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">    label.append(<span class="built_in">int</span>(line.split()[<span class="number">0</span>]))</span><br><span class="line">    name.append(<span class="string">&#x27; &#x27;</span>.join(line.split()[<span class="number">1</span>:]))</span><br><span class="line">classes = pd.DataFrame([label, name]).T</span><br><span class="line">classes.columns = [<span class="string">&#x27;label&#x27;</span>,<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">classes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取训练集、测试集和验证集</span></span><br><span class="line">train_df = pd.read_csv(<span class="string">&#x27;../input/ip02-dataset/train.txt&#x27;</span>,sep=<span class="string">&#x27; &#x27;</span>,header=<span class="literal">None</span>, engine=<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">train_df.columns = [<span class="string">&#x27;image_path&#x27;</span>,<span class="string">&#x27;label&#x27;</span>]</span><br><span class="line"></span><br><span class="line">test_df = pd.read_csv(<span class="string">&#x27;../input/ip02-dataset/test.txt&#x27;</span>,sep=<span class="string">&#x27; &#x27;</span>,header=<span class="literal">None</span>, engine=<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">test_df.columns = [<span class="string">&#x27;image_path&#x27;</span>,<span class="string">&#x27;label&#x27;</span>]</span><br><span class="line"></span><br><span class="line">val_df = pd.read_csv(<span class="string">&#x27;../input/ip02-dataset/val.txt&#x27;</span>,sep=<span class="string">&#x27; &#x27;</span>,header=<span class="literal">None</span>, engine=<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">val_df.columns = [<span class="string">&#x27;image_path&#x27;</span>,<span class="string">&#x27;label&#x27;</span>]</span><br><span class="line"></span><br><span class="line">train_df.head()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义目录和超参数</span></span><br><span class="line">TRAIN_DIR = <span class="string">&#x27;../input/ip02-dataset/classification/train&#x27;</span></span><br><span class="line">TEST_DIR = <span class="string">&#x27;../input/ip02-dataset/classification/test&#x27;</span></span><br><span class="line">VAL_DIR = <span class="string">&#x27;../input/ip02-dataset/classification/val&#x27;</span></span><br><span class="line">LR = <span class="number">2e-5</span></span><br><span class="line">BATCH_SIZE = <span class="number">8</span></span><br><span class="line">EPOCH = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">device = torch.device(<span class="string">&#x27;cuda&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化部分训练数据</span></span><br><span class="line">fig, axs = plt.subplots(<span class="number">10</span>,<span class="number">11</span>,figsize=(<span class="number">30</span>,<span class="number">30</span>))</span><br><span class="line">images = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> classes.label:</span><br><span class="line">    random_img = random.choice(train_df[train_df.label==i-<span class="number">1</span>].image_path.values)</span><br><span class="line">    label = classes.name[i-<span class="number">1</span>]</span><br><span class="line">    img = plt.imread(os.path.join(TRAIN_DIR,<span class="built_in">str</span>(i-<span class="number">1</span>),random_img))</span><br><span class="line">    images.append(img)</span><br><span class="line"></span><br><span class="line">[ax.imshow(image) <span class="keyword">for</span> image,ax <span class="keyword">in</span> <span class="built_in">zip</span>(images,axs.ravel())]</span><br><span class="line">[ax.set_title(<span class="string">&quot;\n&quot;</span>.join(wrap(label,<span class="number">20</span>))) <span class="keyword">for</span> label,ax <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">list</span>(classes.name),axs.ravel())]</span><br><span class="line">[ax.set_axis_off() <span class="keyword">for</span> ax <span class="keyword">in</span> axs.ravel()]</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InsectModel</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,num_classes</span>):</span><br><span class="line">        <span class="built_in">super</span>(InsectModel, self).__init__()</span><br><span class="line">        self.num_classes = num_classes</span><br><span class="line">        self.model = timm.create_model(<span class="string">&#x27;vit_base_patch16_224&#x27;</span>,pretrained=<span class="literal">True</span>,num_classes=num_classes)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, image</span>):</span><br><span class="line">        <span class="keyword">return</span> self.model(image)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义数据增强</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train_transform</span>():</span><br><span class="line">    <span class="keyword">return</span> A.Compose([</span><br><span class="line">        A.HorizontalFlip(),</span><br><span class="line">        A.RandomRotate90(),</span><br><span class="line">        A.RandomBrightnessContrast(),</span><br><span class="line">        A.Resize(<span class="number">224</span>, <span class="number">224</span>),</span><br><span class="line">        ToTensorV2()])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid_transform</span>():</span><br><span class="line">    <span class="keyword">return</span> A.Compose([</span><br><span class="line">        A.Resize(<span class="number">224</span>,<span class="number">224</span>),</span><br><span class="line">        ToTensorV2()])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">collate_fn</span>(<span class="params">batch</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">tuple</span>(<span class="built_in">zip</span>(*batch))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义数据集</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InsectDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, image, image_dir, transforms=<span class="literal">None</span></span>):</span><br><span class="line">        self.image_info = image</span><br><span class="line">        self.transforms = transforms</span><br><span class="line">        self.imgdir = image_dir</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.image_info.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        image_info = self.image_info[index]</span><br><span class="line">        image = cv2.imread(os.path.join(self.imgdir,<span class="built_in">str</span>(image_info[<span class="number">1</span>]),image_info[<span class="number">0</span>]),cv2.IMREAD_COLOR)</span><br><span class="line">        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)</span><br><span class="line">        image /= <span class="number">255.</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> self.transforms <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            image = self.transforms(image = image)[<span class="string">&#x27;image&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        label = image_info[<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        image = torch.as_tensor(image, dtype=torch.float32)</span><br><span class="line">        label = torch.as_tensor(label, dtype=torch.long)</span><br><span class="line">        <span class="keyword">return</span> image, label</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据加载器</span></span><br><span class="line">train_dataset = InsectDataset(image=train_df.values, </span><br><span class="line">                              image_dir=TRAIN_DIR, </span><br><span class="line">                              transforms=train_transform())</span><br><span class="line">train_data_loader = DataLoader(train_dataset,</span><br><span class="line">                              batch_size=BATCH_SIZE,</span><br><span class="line">                              shuffle=<span class="literal">True</span>,</span><br><span class="line">                              num_workers=<span class="number">2</span>)</span><br><span class="line">val_dataset = InsectDataset(image=val_df.values,</span><br><span class="line">                            image_dir=VAL_DIR,</span><br><span class="line">                            transforms=valid_transform())</span><br><span class="line">val_data_loader = DataLoader(val_dataset,</span><br><span class="line">                             batch_size=BATCH_SIZE,</span><br><span class="line">                             shuffle=<span class="literal">True</span>,</span><br><span class="line">                             num_workers=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义平均计量器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AverageMeter</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.reset()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset</span>(<span class="params">self</span>):</span><br><span class="line">        self.loss = <span class="number">0</span></span><br><span class="line">        self.correct = <span class="number">0</span></span><br><span class="line">        self.avg = <span class="number">0</span></span><br><span class="line">        self.<span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, loss,correct, n=<span class="number">1</span></span>):</span><br><span class="line">        self.loss = loss</span><br><span class="line">        self.correct += correct</span><br><span class="line">        self.<span class="built_in">sum</span> += loss * n</span><br><span class="line">        self.count += n</span><br><span class="line">        </span><br><span class="line">        self.avg = self.<span class="built_in">sum</span> / self.count</span><br><span class="line">        self.acc = self.correct / self.count</span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Accuracy</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.reset</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义训练函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train_fn</span>(<span class="params">data_loader, model, criterion, device, optimizer, epoch</span>):</span><br><span class="line">    model.train()</span><br><span class="line">    criterion.train()</span><br><span class="line">    </span><br><span class="line">    summary = AverageMeter()</span><br><span class="line">    tk0 = tqdm(data_loader, total=<span class="built_in">len</span>(data_loader))</span><br><span class="line">    <span class="keyword">for</span> step, (images, labels) <span class="keyword">in</span> <span class="built_in">enumerate</span>(tk0):</span><br><span class="line">        images = images.to(device, non_blocking = <span class="literal">True</span>).<span class="built_in">float</span>()</span><br><span class="line">        labels = labels.to(device, non_blocking = <span class="literal">True</span>).long()</span><br><span class="line">    </span><br><span class="line">        output = model(images)</span><br><span class="line">        loss = criterion(output, labels)</span><br><span class="line">        </span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        </span><br><span class="line">        preds = output.softmax(<span class="number">1</span>).argmax(<span class="number">1</span>)</span><br><span class="line">        correct = (preds == labels).<span class="built_in">sum</span>().item()</span><br><span class="line">        </span><br><span class="line">        summary.update(loss.item(),correct, BATCH_SIZE)</span><br><span class="line">        tk0.set_postfix(loss=summary.avg, acc=summary.acc, epoch=epoch+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> summary</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义验证函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eval_fn</span>(<span class="params">data_loader, model, criterion, device, epoch</span>):</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    criterion.<span class="built_in">eval</span>()</span><br><span class="line">    </span><br><span class="line">    summary = AverageMeter()</span><br><span class="line">    tk0 = tqdm(data_loader, total=<span class="built_in">len</span>(data_loader))</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> step, (images, labels) <span class="keyword">in</span> <span class="built_in">enumerate</span>(tk0):</span><br><span class="line">            images = images.to(device, non_blocking = <span class="literal">True</span>).<span class="built_in">float</span>()</span><br><span class="line">            labels = labels.to(device, non_blocking = <span class="literal">True</span>).long()</span><br><span class="line">            </span><br><span class="line">            output = model(images)</span><br><span class="line">            loss = criterion(output, labels)</span><br><span class="line">            </span><br><span class="line">            preds = output.softmax(<span class="number">1</span>).argmax(<span class="number">1</span>)</span><br><span class="line">            correct = (preds == labels).<span class="built_in">sum</span>().item()</span><br><span class="line">            </span><br><span class="line">            summary.update(loss.item(), correct, BATCH_SIZE)</span><br><span class="line">            tk0.set_postfix(loss=summary.avg, acc=summary.acc, epoch=epoch+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> summary</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&#x27;WANDB_CONSOLE&#x27;</span>] = <span class="string">&#x27;off&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行训练和验证</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    model = InsectModel(num_classes=<span class="number">102</span>)</span><br><span class="line">    model = model.to(device)</span><br><span class="line">    criterion = nn.CrossEntropyLoss()</span><br><span class="line">    criterion = criterion.to(device)</span><br><span class="line">    optimizer = torch.optim.AdamW(model.parameters(), lr=LR)</span><br><span class="line">    best_loss = <span class="number">10</span>**<span class="number">5</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, EPOCH):</span><br><span class="line">        train_loss = train_fn(train_data_loader, model, criterion, device, optimizer, epoch)</span><br><span class="line">        val_loss = eval_fn(val_data_loader, model, criterion, device, epoch)</span><br><span class="line">        <span class="keyword">if</span> val_loss.avg &lt; best_loss:</span><br><span class="line">            best_loss = val_loss.avg</span><br><span class="line">            torch.save(model.state_dict(), <span class="string">f&#x27;vit_best.pth&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Epoch <span class="subst">&#123;epoch+<span class="number">1</span>+<span class="number">0</span>:03&#125;</span>: | Train Loss: <span class="subst">&#123;train_loss.avg:<span class="number">.5</span>f&#125;</span> | Val Loss: <span class="subst">&#123;val_loss.avg:<span class="number">.5</span>f&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">run()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载最佳模型并进行预测</span></span><br><span class="line">model = InsectModel(num_classes=<span class="number">102</span>)</span><br><span class="line">model.load_state_dict(torch.load(<span class="string">&quot;./vit_best.pth&quot;</span>))</span><br><span class="line">images, labels = <span class="built_in">next</span>(<span class="built_in">iter</span>(val_data_loader))</span><br><span class="line">preds = model(images).softmax(<span class="number">1</span>).argmax(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化预测结果</span></span><br><span class="line">fig, axs = plt.subplots(<span class="number">2</span>,<span class="number">4</span>,figsize=(<span class="number">13</span>,<span class="number">8</span>))</span><br><span class="line">[ax.imshow(image.permute((<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>))) <span class="keyword">for</span> image,ax <span class="keyword">in</span> <span class="built_in">zip</span>(images,axs.ravel())]</span><br><span class="line">[ax.set_title(<span class="string">&quot;\n&quot;</span>.join(wrap(<span class="string">f&#x27;实际: <span class="subst">&#123;classes.name[label.item()]&#125;</span> 预测: <span class="subst">&#123;classes.name[pred.item()]&#125;</span>&#x27;</span>,<span class="number">30</span>)),color = <span class="string">&#x27;g&#x27;</span> <span class="keyword">if</span> label.item()==pred.item() <span class="keyword">else</span> <span class="string">&#x27;r&#x27;</span>) <span class="keyword">for</span> label,pred,ax <span class="keyword">in</span> <span class="built_in">zip</span>(labels,preds,axs.ravel())]</span><br><span class="line">[ax.set_axis_off() <span class="keyword">for</span> ax <span class="keyword">in</span> axs.ravel()]</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="模型使用"><a href="#模型使用" class="headerlink" title="模型使用"></a>模型使用</h2><p>结合我博客中的手写体案例，视频捕获以及成像都是一样的，但是由于之前的模型是<code>tflite</code>格式的，而现在的模型是<code>pth</code>格式的，而且类别繁多，需要进行部分的修改，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> timm</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> textwrap <span class="keyword">import</span> wrap</span><br><span class="line"></span><br><span class="line"><span class="comment"># 视频流地址</span></span><br><span class="line">url = <span class="string">&quot;http://192.168.2.8/stream&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开摄像头</span></span><br><span class="line">cap = cv2.VideoCapture(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InsectModel</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num_classes</span>):</span><br><span class="line">        <span class="built_in">super</span>(InsectModel, self).__init__()</span><br><span class="line">        self.num_classes = num_classes</span><br><span class="line">        self.model = timm.create_model(<span class="string">&#x27;vit_base_patch16_224&#x27;</span>, pretrained=<span class="literal">True</span>, num_classes=num_classes)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, image</span>):</span><br><span class="line">        <span class="keyword">return</span> self.model(image)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    model = InsectModel(num_classes=<span class="number">102</span>)</span><br><span class="line">    model.load_state_dict(torch.load(<span class="string">&quot;./vit_best.pth&quot;</span>))</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;模型加载成功&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;模型加载失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义图像预处理函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">preprocess</span>(<span class="params">image</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)</span><br><span class="line">        image /= <span class="number">255.0</span></span><br><span class="line">        image = cv2.resize(image, (<span class="number">224</span>, <span class="number">224</span>))</span><br><span class="line">        image = torch.tensor(image).permute(<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>).unsqueeze(<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;图像预处理成功&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> image</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;图像预处理失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取类别名称</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;classes.txt&#x27;</span>)</span><br><span class="line">    label = []</span><br><span class="line">    name = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        label.append(<span class="built_in">int</span>(line.split()[<span class="number">0</span>]))</span><br><span class="line">        name.append(<span class="string">&#x27; &#x27;</span>.join(line.split()[<span class="number">1</span>:]))</span><br><span class="line">    classes = pd.DataFrame([label, name]).T</span><br><span class="line">    classes.columns = [<span class="string">&#x27;label&#x27;</span>, <span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;类别名称读取成功&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;类别名称读取失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">last_recognition_time = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 读取摄像头的帧</span></span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;无法读取视频流，尝试重新连接...&quot;</span>)</span><br><span class="line">        cap.release()</span><br><span class="line">        cap = cv2.VideoCapture(url)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 在窗口中显示帧</span></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;Camera&#x27;</span>, frame)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 每隔10秒进行一次识别</span></span><br><span class="line">    <span class="keyword">if</span> time.time() - last_recognition_time &gt; <span class="number">10</span>:</span><br><span class="line">        image = preprocess(frame)</span><br><span class="line">        <span class="keyword">if</span> image <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                output = model(image)</span><br><span class="line">                pred = output.softmax(<span class="number">1</span>).argmax(<span class="number">1</span>).item()</span><br><span class="line">                <span class="keyword">if</span> pred &lt; <span class="built_in">len</span>(classes):</span><br><span class="line">                    label_name = classes.name[pred]</span><br><span class="line">                <span class="comment"># else:</span></span><br><span class="line">                <span class="comment">#     label_name = &quot;无法识别&quot;   暂时不起作用</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;识别结果: <span class="subst">&#123;label_name&#125;</span>&quot;</span>)</span><br><span class="line">        last_recognition_time = time.time()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 按下&#x27;q&#x27;键退出循环</span></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放摄像头并关闭窗口</span></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li><p><code>vit_best.pth</code>就是刚刚生成的模型文件</p></li><li><p><code>classes.txt</code>是数据集内的同名文件</p></li><li><pre><code class="python">if not ret:    print(&quot;无法读取视频流，尝试重新连接...&quot;)    cap.release()    cap = cv2.VideoCapture(url)    continue</code></pre><p>这段代码可以防止<code>Stream ends prematurely at ......</code>报错</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> AI classification </tag>
            
            <tag> ESP32 </tag>
            
            <tag> Kaggle </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP32S3-EYE的WIFI图传方法</title>
      <link href="/2024/09/17/ESP32S3-EYE%E7%9A%84WIFI%E5%9B%BE%E4%BC%A0%E6%96%B9%E6%B3%95/"/>
      <url>/2024/09/17/ESP32S3-EYE%E7%9A%84WIFI%E5%9B%BE%E4%BC%A0%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="ESP32捕获实时视频"><a href="#ESP32捕获实时视频" class="headerlink" title="ESP32捕获实时视频"></a>ESP32捕获实时视频</h1><p>环境：ESP-IDF v5.1.4，Python v3.12.4</p><p>在<a href="https://www.espressif.com.cn/zh-hans/products/sdks/esp-idf">乐鑫官网</a>查找相关示例，<code>ESP-IoT-Solution</code>符合需求，从<code>github</code>拉取相关代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive https://github.com/espressif/esp-iot-solution</span><br></pre></td></tr></table></figure><h2 id="第一步——配置"><a href="#第一步——配置" class="headerlink" title="第一步——配置"></a>第一步——配置</h2><p>进入<code>esp-iot-solution/examples/camera/video_stream_server</code>，输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">idf.py set-target esp32s3</span><br><span class="line">idf.py menuconfig</span><br></pre></td></tr></table></figure><p>进入菜单后，进入<code>Camera Pin Configuration</code>选项，选择对应的开发板（这个没配置似乎会出问题）</p><p>如果想要改变ESP32的WIFI设置，进入<code>Example Connection Configuration</code>选项。里面包含如：设置AP模式下WIFI的SSID、IP地址、密码，或者设置STA模式（就是要连入的WIFI的SSID和密码）</p><p>默认情况下，ESP32为AP模式，且没有密码，最大连入数量为1，默认IP地址为：<code>192.168.4.1</code></p><h2 id="第二步——烧录"><a href="#第二步——烧录" class="headerlink" title="第二步——烧录"></a>第二步——烧录</h2><p>在Ubuntu系统下，直接输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">idf.py build flash monitor</span><br></pre></td></tr></table></figure><p>外部端口会自动匹配</p><h2 id="第三步——测试"><a href="#第三步——测试" class="headerlink" title="第三步——测试"></a>第三步——测试</h2><p>在连入到ESP32的WIFI后，先进行PING通测试，然后在浏览器中输入<code>192.168.4.1/stream</code>就可以查看摄像头捕获镜头</p><p>如果是STA模式，那么就需要知道ESP32被DHCP分配到的IP地址，假设为<code>192.168.1.10</code>，进行PING通测试，然后在浏览器中输入<code>192.168.1.10.stream</code></p><h1 id="主机获取视频流"><a href="#主机获取视频流" class="headerlink" title="主机获取视频流"></a>主机获取视频流</h1><h2 id="第一步——环境配置"><a href="#第一步——环境配置" class="headerlink" title="第一步——环境配置"></a>第一步——环境配置</h2><p>Python版本：3.8.19</p><p>代码中会使用opencv库，需要提前下好：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install python-opencv</span><br></pre></td></tr></table></figure><h2 id="第二步——图传代码"><a href="#第二步——图传代码" class="headerlink" title="第二步——图传代码"></a>第二步——图传代码</h2><p>具体代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 视频流地址</span></span><br><span class="line">url = <span class="string">&quot;http://192.168.2.8/stream&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开摄像头</span></span><br><span class="line">cap = cv2.VideoCapture(url)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 读取摄像头的帧</span></span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 在窗口中显示帧</span></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;Camera&#x27;</span>, frame)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 按下&#x27;q&#x27;键退出循环</span></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 释放摄像头并关闭窗口</span></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>运行上面的代码，就可以获取到ESP32捕获的视频流了</p><h1 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h1><p>这里直接选用MNIST手写体模型，如果想自己训练的话可以直接按照我的另一篇文章走流程：</p><p><a href="https://norlcyan.netlify.app/2024/09/16/seeed-studio-mnist%E5%AE%9E%E4%BE%8B%E5%AE%9E%E7%8E%B0%E9%83%A8%E5%88%86/">Seeed_Studio_MNIST实例实现部分 | Norlcyan’s Blog</a></p><p>我就直接用现成的模型了，模型在下面的网页下方获取：</p><p><a href="https://github.com/Seeed-Studio/sscma-model-zoo/blob/main/docs/en/MNIST_Classification_MobileNetV2_0.5_Rep_32.md">MNIST_Classification</a></p><h1 id="模型部署"><a href="#模型部署" class="headerlink" title="模型部署"></a>模型部署</h1><p>这部分搞了最久，没接触过相关领域，基本上都是网上各种示例，再加上点AI的魔法，东拼西凑出来的。</p><p>我模型采用的是TFLITE，这个部署起来感觉简单点<br>下面是详细的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 视频流地址</span></span><br><span class="line">url = <span class="string">&quot;http://192.168.2.8/stream&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TFLite模型导入</span></span><br><span class="line">model_path = <span class="string">&#x27;best_accuracy_top1_epoch_10_float32.tflite&#x27;</span></span><br><span class="line">interpreter = tf.lite.Interpreter(model_path=model_path)</span><br><span class="line">interpreter.allocate_tensors()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取输入和输出张量</span></span><br><span class="line">input_details = interpreter.get_input_details()</span><br><span class="line">output_details = interpreter.get_output_details()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开摄像头</span></span><br><span class="line">cap = cv2.VideoCapture(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前时间</span></span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义预处理函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">preprocess</span>(<span class="params">image_path</span>):</span><br><span class="line">    img = Image.<span class="built_in">open</span>(image_path).convert(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">    img = img.resize((<span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line">    img = np.array(img).astype(np.float32)</span><br><span class="line">    img = img.reshape(<span class="number">1</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">1</span>)  <span class="comment"># TFLite expects NHWC format</span></span><br><span class="line">    img /= <span class="number">255.0</span></span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推理</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">image_path</span>):</span><br><span class="line">    img = preprocess(image_path)</span><br><span class="line">    interpreter.set_tensor(input_details[<span class="number">0</span>][<span class="string">&#x27;index&#x27;</span>], img)</span><br><span class="line">    interpreter.invoke()</span><br><span class="line">    output_data = interpreter.get_tensor(output_details[<span class="number">0</span>][<span class="string">&#x27;index&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> np.argmax(output_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将灰色图片转换为黑白图片(之前卡在这部分，不将图片转换为黑白图片识别出的结果基本都是8)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_to_binary</span>(<span class="params">image</span>):</span><br><span class="line">    threshold_value = <span class="number">144</span></span><br><span class="line">    _, binary_image = cv2.threshold(image, threshold_value, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">    <span class="keyword">return</span> binary_image</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 读取摄像头的帧</span></span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 去除镜像</span></span><br><span class="line">    frame = cv2.flip(frame, <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将帧转换为灰色单通道</span></span><br><span class="line">    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将灰色图片转换为黑白图片</span></span><br><span class="line">    binary_frame = convert_to_binary(gray_frame)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在窗口中显示黑白帧</span></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;Camera&#x27;</span>, binary_frame)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取当前时间</span></span><br><span class="line">    current_time = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每隔10秒保存一张图片</span></span><br><span class="line">    <span class="keyword">if</span> current_time - start_time &gt;= <span class="number">10</span>:</span><br><span class="line">        cv2.imwrite(<span class="string">f&#x27;image_<span class="subst">&#123;<span class="built_in">int</span>(current_time)&#125;</span>.jpg&#x27;</span>, binary_frame)</span><br><span class="line">        image_path = (<span class="string">f&#x27;image_<span class="subst">&#123;<span class="built_in">int</span>(current_time)&#125;</span>.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 推理</span></span><br><span class="line">        prediction = predict(image_path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Prediction: <span class="subst">&#123;prediction&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        start_time = current_time</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 按下&#x27;q&#x27;键退出循环</span></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放摄像头并关闭窗口</span></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>在原来的基础上添加点内容，包括模型导入、图片截取等等。</p>]]></content>
      
      
      
        <tags>
            
            <tag> esp32s3-eye </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Seeed_Studio_MNIST实例实现部分</title>
      <link href="/2024/09/16/Seeed-Studio-MNIST%E5%AE%9E%E4%BE%8B%E5%AE%9E%E7%8E%B0%E9%83%A8%E5%88%86/"/>
      <url>/2024/09/16/Seeed-Studio-MNIST%E5%AE%9E%E4%BE%8B%E5%AE%9E%E7%8E%B0%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p><font color="red">!!!全部操作均在Linux系统下，Linux为Ubuntu24.04!!!</font></p><h1 id="实例网址"><a href="#实例网址" class="headerlink" title="实例网址"></a>实例网址</h1><p><a href="https://colab.research.google.com/github/seeed-studio/sscma-model-zoo/blob/main/notebooks/zh_CN/MNIST_Classification_MobileNetV2_0.5_Rep_32.ipynb#scrollTo=3mt9sLF93brT">MNIST_Classification_MobileNetV2_0.5_Rep_32.ipynb - Colab (google.com)</a></p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><font color="red">实例需要带有CUDA核心的显卡，linux中还需要提前将显卡驱动安装完成</font></p><p>先安装<code>Anaconda</code>，具体为啥后面会提。</p><p>我一开始用python3.12的版本，但是会有报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module &#x27;pkgutil&#x27; has no attribute &#x27;ImpImporter&#x27;. Did you mean: &#x27;zipimporter&#x27;?</span><br></pre></td></tr></table></figure><p>后面将版本降低为<code>python3.11</code>就没问题了</p><p>其次是<code>pip</code>的问题</p><p>由于在linux系统下，使用pip安装包会出现以下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">error: externally-managed-environment</span><br><span class="line"></span><br><span class="line">× This environment is externally managed</span><br><span class="line">╰─&gt; To install Python packages system-wide, try apt install</span><br><span class="line">    python3-xyz, where xyz is the package you are trying to</span><br><span class="line">    install.</span><br><span class="line"></span><br><span class="line">    If you wish to install a non-Debian-packaged Python package,</span><br><span class="line">    create a virtual environment using python3 -m venv path/to/venv.</span><br><span class="line">    Then use path/to/venv/bin/python and path/to/venv/bin/pip. Make</span><br><span class="line">    sure you have python3-full installed.</span><br><span class="line"></span><br><span class="line">    If you wish to install a non-Debian packaged Python application,</span><br><span class="line">    it may be easiest to use `pipx` install xyz, which will manage a</span><br><span class="line">    virtual environment for you. Make sure you have `pipx` installed.</span><br><span class="line"></span><br><span class="line">    See /usr/share/doc/python3.11/README.venv for more information.</span><br><span class="line"></span><br><span class="line">note: If you believe this is a mistake, please contact your Python installation or OS distribution provider. You can override this, at the risk of breaking your Python installation or OS, by passing --break-system-packages.</span><br><span class="line">hint: See PEP 668 for the detailed specification.</span><br></pre></td></tr></table></figure><p>大致意思就是推荐在虚拟环境使用pip命令，或者使用其他方法也行（创建个虚拟环境还是方便点）</p><p>所以先安装<code>Anaconda</code>用于构建虚拟环境，网上有很多教程，略过…….</p><p>由于案例中安装的包比较多，所以推荐pip切换到国内源，以下是全局换源的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.index-url https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple</span><br></pre></td></tr></table></figure><h1 id="操作流程（踩坑）"><a href="#操作流程（踩坑）" class="headerlink" title="操作流程（踩坑）"></a>操作流程（踩坑）</h1><p>实例的具体操作在网址中都有，主要讲的是踩坑的部分</p><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p>前面环境都搭建完成后，基本上跟着流程走没啥问题，但是在训练模型的步骤会有个坑人的地方</p><p>因为里面的数据集下载来自<code>https://yann.lecun.com/exdb/mnist/</code>，但是国内下载网址内的文件会被403，所以需要自己找对应的数据集，并且将网址修改为自己的数据集。</p><p>我找到的数据集放到了度盘：<code>https://pan.baidu.com/s/16k9LrXsGVPnPGQlC5ffvrw?pwd=norl</code></p><p>防止以后丢了…</p><p>拿到数据集后，还要自己启动服务器，将数据集放到服务器上（因为代码中是使用的网址，直接改成文件地址不行）</p><p>这里就直接用Express创建了，方便又简单（装个<code>nodejs</code>，用<code>npm</code>装个express包，敲几行代码就行）</p><h2 id="代码修改"><a href="#代码修改" class="headerlink" title="代码修改"></a>代码修改</h2><p>然后就是修改代码部分了，只需要修改一处，文件位置在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$HOME/anaconda/envs/[yourEnvsName]/lib/python3.11/site-packages/mmcls/datasets/mnist.py</span><br></pre></td></tr></table></figure><p>找到<code>url_prefix</code>这行，将里面的网址替换为你自己的</p><p>注意：<font color='red'>这里的网址不能是<code>127.0.0.1</code>这种，要用<code>http://localhost:端口号</code></font></p><p>下面的MD5校验码改成None就行了</p><h2 id="导出模型"><a href="#导出模型" class="headerlink" title="导出模型"></a>导出模型</h2><p>之前在另一台电脑上导出的时候没啥问题，但是换了台电脑就出了点状况</p><p>首先是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sscma.export configs/classification/mobnetv2_0.35_rep_1bx16_300e_mnist.py <span class="variable">$CHECKPOINT_FILE_PATH</span> --cfg-options  \</span><br><span class="line">    work_dir=MNIST_Classification_MobileNetV2_0.5_Rep_32 \</span><br><span class="line">    num_classes=10 \</span><br><span class="line">    epochs=10  \</span><br><span class="line">    height=32 \</span><br><span class="line">    width=32 \</span><br><span class="line">    load_from=MNIST_Classification_MobileNetV2_0.5_Rep_32/pretrain.pth</span><br></pre></td></tr></table></figure><p>需要将里面的<code>$CHECKPOINT_FILE_PATH</code>替换为自己的检查点文件路径</p><p>默认是<code>MNIST_Classification_MobileNetV2_0.5_Rep_32/best_accuracy_top1_epoch_10.pth</code></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>其次，执行完命令后，我的环境出现了：<code>version &#39;GLIBCXX_3.5.32&#39; not found</code></p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>检查过后发现是虚拟环境的lib库缺少<code>libstdc++.so.6.0.33</code></p><p>将系统中<code>usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33</code>复制到<code>~/anaconda3/envs/myenv/lib</code>下</p><p>其次建立链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -sf libstdc++.so.6.0.33 libstdc++.so.6</span><br></pre></td></tr></table></figure><p>最后检查链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll | grep libstdc++.so.6.</span><br></pre></td></tr></table></figure><p>结果中有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libstdc++.6 -&gt; libstdc++so.6.0.33</span><br></pre></td></tr></table></figure><p>就表示完成了</p><p>重新执行导出模型命令</p>]]></content>
      
      
      
        <tags>
            
            <tag> SSCMA </tag>
            
            <tag> AI classification </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="/2024/07/27/Java/"/>
      <url>/2024/07/27/Java/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="IDEA快捷键"><a href="#IDEA快捷键" class="headerlink" title="** IDEA快捷键 **"></a>** IDEA快捷键 **</h1><p>ALT + Ins 快速创建Javabean</p><p>CTRL + P 查看方法的具体参数</p><p>ALT + ENTER 选择 Extract Method 快速生成方法</p><p>CTRL + ALT + L 格式化代码</p><p>CTRL + B 查看方法详细</p><p>CTRL + ALT + V 生成生成接收返回值的变量名</p><p>CTRL + ALT + T 将选中的代码以某种方式包裹起来（如<code>try...catch</code>）</p><h1 id="Java基础语法"><a href="#Java基础语法" class="headerlink" title="Java基础语法"></a>Java基础语法</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p><font color='orange'>注释内容不会参与编译和运行，仅仅是对代码的解释说明</font></p><h3 id="注释概念"><a href="#注释概念" class="headerlink" title="注释概念"></a>注释概念</h3><ul><li>注释是在程序指定位置添加的说明性信息</li><li>简单理解为：对代码的一种解释，方便阅读</li></ul><h3 id="注释分类"><a href="#注释分类" class="headerlink" title="注释分类"></a>注释分类</h3><p>单行注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注释信息</span></span><br></pre></td></tr></table></figure><p>多行注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注释信息 */</span></span><br></pre></td></tr></table></figure><p>文档注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 注释信息 **/</span></span><br></pre></td></tr></table></figure><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p><font color='orange'>关键字：被java赋予了特定涵义的英文单词</font></p><h3 id="关键字特点"><a href="#关键字特点" class="headerlink" title="关键字特点"></a>关键字特点</h3><ul><li>关键字字母全部小写</li><li>常用的代码编辑器，针对关键字有特殊的颜色标记，非常直观</li></ul><hr><p>class：用于创建&#x2F;定义一个类，后面跟随类目。<font color='cornflowerblue'>类是Java最基本的组成单元</font></p><h2 id="⭐字面量⭐"><a href="#⭐字面量⭐" class="headerlink" title="⭐字面量⭐"></a>⭐字面量⭐</h2><p><font color='orange'>数据在程序中的书写格式</font></p><h4 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h4><table><thead><tr><th align="center">字面量类型</th><th align="center">说明</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">整数类型</td><td align="center">不带小数点的数字</td><td align="center">666，-666</td></tr><tr><td align="center">小数类型</td><td align="center">带小数点的数字</td><td align="center">3.1415，-3.1415</td></tr><tr><td align="center">字符串类型</td><td align="center">用双引号括起来的内容</td><td align="center">“123”，”ABC”,”你好”</td></tr><tr><td align="center">字符类型</td><td align="center">用单引号括起来的内容，内容只能有一个</td><td align="center">‘A’，’0’,’嗨‘</td></tr><tr><td align="center">布尔类型</td><td align="center">布尔值，表示真、假</td><td align="center">只有两个值：true，false</td></tr><tr><td align="center">空类型</td><td align="center">一个特殊的值，空值</td><td align="center">null</td></tr></tbody></table><h4 id="拓展——特殊字符"><a href="#拓展——特殊字符" class="headerlink" title="拓展——特殊字符"></a>拓展——特殊字符</h4><h5 id="t-制表符"><a href="#t-制表符" class="headerlink" title="\t 制表符"></a>\t 制表符</h5><p>在打印的时候，把前面字符串的长度补齐到8，或者8的整数倍。最少补1个空格，最多补8个空格</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 补上5个空格</span></span><br><span class="line">        System.out.println(<span class="string">&quot;abc&quot;</span> + <span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>作用：是文本输出时，更加美观、整齐</font></p><h3 id="⭐变量⭐"><a href="#⭐变量⭐" class="headerlink" title="⭐变量⭐"></a>⭐变量⭐</h3><p><font color='orange'>变量：在程序的执行过程中，其值可能发生改变的量（数据）</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据类型 变量名 = 数据值;</span></span><br></pre></td></tr></table></figure><p>数据类型：限定了变量能存储数据的类型</p><p>变量名：存储空间的名称</p><p>数据值：真正存在变量中的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义变量</span></span><br><span class="line"><span class="comment">// 数据类型 变量名 = 数据值;</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">System.out.println(a); <span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 变量参与计算</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">System.out.println(a + b); <span class="comment">// 30</span></span><br><span class="line"><span class="comment">// 修改记录的值</span></span><br><span class="line">a = -<span class="number">10</span>;</span><br><span class="line">System.out.println(a); <span class="comment">// -10</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>数据类型</th><th>关键字</th></tr></thead><tbody><tr><td>整数</td><td>int</td></tr><tr><td>浮点数</td><td>double</td></tr></tbody></table><h4 id="变量的注意事项"><a href="#变量的注意事项" class="headerlink" title="变量的注意事项"></a>变量的注意事项</h4><ul><li><p>只能存一个值</p></li><li><p>变量名不允许重复定义</p></li><li><p>一条语句可以定义多个变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在一条语句中可以定义多个变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">100</span>, e = <span class="number">200</span>, f = <span class="number">300</span>;</span><br><span class="line">System.out.println(d + e + f); <span class="comment">// 600</span></span><br></pre></td></tr></table></figure></li><li><p>变量在使用之前一定要赋值</p></li><li><p>变量的作用域范围</p></li></ul><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p>不同进制在代码中的表现形式</p><p>二进制：由 0 和 1 组成，代码中以 0b 开头</p><p>十进制：由 0 ~ 9 组成，前面不添加前缀</p><p>八进制：由 0 ~ 7 组成，代码中以 0 开头</p><p>十六进制：由 0 ~ 9 以及 a ~ f 组成，代码中以 0x 开头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">data</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="number">15</span>); <span class="comment">// 十进制</span></span><br><span class="line">System.out.println(<span class="number">015</span>); <span class="comment">// 八进制</span></span><br><span class="line">System.out.println(<span class="number">0b1101</span>); <span class="comment">// 二进制</span></span><br><span class="line">System.out.println(<span class="number">0x19f</span>); <span class="comment">// 十六进制</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>在计算机中，任意数据都是以二进制的形式来存储的 </font></p><h3 id="⭐数据类型⭐"><a href="#⭐数据类型⭐" class="headerlink" title="⭐数据类型⭐"></a>⭐数据类型⭐</h3><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><table><thead><tr><th>数据类型</th><th>关键字</th><th>范围</th><th>内存占用</th></tr></thead><tbody><tr><td>整数</td><td>byte</td><td>-128 ~ 127</td><td>1</td></tr><tr><td></td><td>short</td><td>-32768 ~ 32767</td><td>2</td></tr><tr><td></td><td>int</td><td>-2147483648 ~ 2147483647 (<font color='red'>10位数</font>)</td><td>4</td></tr><tr><td></td><td>long</td><td>-9223372036854774808 ~ 9223372036854774807 (<font color='red'>19位数</font>)</td><td>8</td></tr><tr><td>浮点数</td><td>float</td><td>-3.40E + 38 ~ 3.40E + 38</td><td>4</td></tr><tr><td></td><td>double</td><td>-1.79E + 308 ~ 1.79E + 308</td><td>8</td></tr><tr><td>字符</td><td>char</td><td>0 ~ 65535</td><td>2</td></tr><tr><td>布尔</td><td>boolean</td><td>true，false</td><td>1</td></tr></tbody></table><p><font color='red'>注意：如果要定义long类型的变量，要在数据后面加一个 L 作为后缀（大小写都可以）</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">num01</span> <span class="operator">=</span> <span class="number">99999L</span>；</span><br></pre></td></tr></table></figure><p><font color='red'>注意：如果要定义float类型的变量，要在数据后面加一个 F 作为后缀（大小写都可以）</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">num02</span> <span class="operator">=</span> <span class="number">10.1F</span>;</span><br></pre></td></tr></table></figure><p>整数和小数取值范围大小关系</p><p><font color='red'>double &gt; float &gt; long &gt; int &gt; short &gt; byte</font></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p><font color='orange'>标识符：就是给类、方法、变量起的名字</font></p><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><ul><li>由数字、字母、下划线 (_) 、美元符号 ($)组成</li><li>不能以数字开头</li><li>不能是关键字</li><li>区分大小写</li></ul><h3 id="驼峰命名法"><a href="#驼峰命名法" class="headerlink" title="驼峰命名法"></a>驼峰命名法</h3><ul><li>小驼峰命名法</li></ul><p>适用于方法、变量</p><p>例如：name、firstName</p><ul><li>大驼峰命名法</li></ul><p>适用于类名</p><p>例如：Student，MyCode</p><h2 id="⭐键盘录入⭐"><a href="#⭐键盘录入⭐" class="headerlink" title="⭐键盘录入⭐"></a>⭐键盘录入⭐</h2><p>Java中有一个类：Scanner，这个类就可以接收键盘输入的<font color='red'>数字</font></p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li>导包 — Scanner这个类在哪</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建对象 — 表示要开始使用Scanner这个类了</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in)</span><br></pre></td></tr></table></figure><ol start="3"><li>接受数据 — 正式开始工作</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sc.nextInt();</span><br></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p><font color='orange'>运算符：对字面量或者变量进行操作的符号</font></p><p><font color='orange'>表达式：用运算符把字面量或者变量连接起来，符合Java语法的式子就可以称为表达式</font></p><p>举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br></pre></td></tr></table></figure><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p><font color='red'>注意：在代码中，如果有小数参与计算，可能会丢失精度</font></p><h3 id="“-”-操作的三种情况"><a href="#“-”-操作的三种情况" class="headerlink" title="“+” 操作的三种情况"></a>“+” 操作的三种情况</h3><ul><li>数字相加</li><li>字符串相加</li><li>字符相加</li></ul><h4 id="数字相加"><a href="#数字相加" class="headerlink" title="数字相加"></a>数字相加</h4><p>数字进行运算时，数据类型不一样不能运算，需要<font color='red'>转成</font>一样的才能运算</p><h5 id="隐式转换（自动类型提升）"><a href="#隐式转换（自动类型提升）" class="headerlink" title="隐式转换（自动类型提升）"></a>隐式转换（自动类型提升）</h5><p>取值范围<font color='red'>小</font>的数值 → 取值范围<font color='red'>大</font>的数值</p><ul><li>取值范围小的，和取值范围大的进行运算，小的会提升为大的，再进行运算</li><li>byte short char 三种类型的数据在运算的时候，都会直接先提升为 int，然后再进行运算</li></ul><h5 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h5><p>取值范围<font color='red'>大</font>的数值 → 取值范围<font color='red'>小</font>的数值</p><ul><li>如果要把一个取值范围大的数值，赋值给取值范围小的变量，是不允许直接赋值的。如果一定要这么做，就需要加入强制转换</li><li>格式：目标数据类型 变量名 &#x3D; （目标数据类型）被强转的数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">12.3</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">int</span>) a;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">result</span> <span class="operator">=</span> (<span class="type">byte</span>)(a + b);</span><br></pre></td></tr></table></figure><h4 id="字符串相加"><a href="#字符串相加" class="headerlink" title="字符串相加"></a>字符串相加</h4><ul><li>当”+”操作中出现字符串时，这个”+”是字符串连接符，而不是算术运算符了。会将前后的数据进行拼接，并产生一个新的字符串</li><li>连续进行”+”，从左到右逐个执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">10</span> + <span class="number">10</span> + <span class="string">&quot;岁&quot;</span>); <span class="comment">// 20岁</span></span><br></pre></td></tr></table></figure><h4 id="字符的-操作"><a href="#字符的-操作" class="headerlink" title="字符的 + 操作"></a>字符的 + 操作</h4><ul><li>当 字符 + 字符&#x2F;字符 + 数字 时，会把字符通过 ASCII 码表查询到对应的数字再进行计算</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">1</span> + <span class="string">&#x27;a&#x27;</span>); <span class="comment">// 98</span></span><br><span class="line">System.out.println(<span class="string">&#x27;a&#x27;</span> + <span class="string">&quot;a&quot;</span>); <span class="comment">// aa</span></span><br></pre></td></tr></table></figure><h2 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h2><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>++</td><td>加</td><td>变量的值加1</td></tr><tr><td>–</td><td>减</td><td>变量的值减1</td></tr></tbody></table><p>单独使用：++ 和 – 无论是放在变量的前面还是后面，单独写一行<font color='red'>结果是一样</font>的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">a++;</span><br><span class="line">System.out.println(a); <span class="comment">// 6</span></span><br><span class="line">++a;</span><br><span class="line">System.out.println(a); <span class="comment">// 7</span></span><br><span class="line">a--;</span><br><span class="line">System.out.println(a); <span class="comment">// 6</span></span><br><span class="line">--a;</span><br><span class="line">System.out.println(a); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>参与计算：</p><p>先用后加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a++;<span class="comment">// b=10,a=11</span></span><br></pre></td></tr></table></figure><p>先加后用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> ++a;<span class="comment">// b=11,a=11</span></span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>&#x3D;</td><td>赋值</td><td>int a&#x3D;10,将10赋值给a</td></tr><tr><td>+&#x3D;</td><td>加后赋值</td><td>a+&#x3D;b,将a+b的值给a</td></tr><tr><td>-&#x3D;</td><td>减后赋值</td><td>a-&#x3D;b,将a-b的值给a</td></tr><tr><td>*&#x3D;</td><td>乘后赋值</td><td>a*&#x3D;b,将a*b的值给a</td></tr><tr><td>&#x2F;&#x3D;</td><td>除后赋值</td><td>a&#x2F;&#x3D;b,将a÷b的值给a</td></tr><tr><td>%&#x3D;</td><td>取余后赋值</td><td>a%&#x3D;b,将a%b的值给a</td></tr></tbody></table><p><font color='red'>注意事项：扩展的赋值运算符隐含了强制类型转换</font></p><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>a&#x3D;&#x3D;b,判断a和b的值是否相等，成立为true，不成立为false</td></tr><tr><td>!&#x3D;</td><td>a!&#x3D;b,判断a和b的值是否不相等，成立为false，不成立为true</td></tr><tr><td>&gt;</td><td>a&gt;b,判断a是否大于b，成立为true，不成立为false</td></tr><tr><td>&gt;&#x3D;</td><td>a&gt;&#x3D;b,判断a是否大于等于b，成立为true，不成立为false</td></tr><tr><td>&lt;</td><td>a&lt;b,判断a是否小于b，成立为true，不成立为false</td></tr><tr><td>&lt;&#x3D;</td><td>a&lt;&#x3D;b,判断a是否小于等于b，成立为true，不成立为false</td></tr></tbody></table><p><font color='red'>注意事项：关系运算符的结果都是boolean类型，要么是true，要么是false</font></p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>&amp;</td><td>逻辑与（且）</td><td>并且，两边都为真，结果才是真</td></tr><tr><td>|</td><td>逻辑或</td><td>或者，两边都是假，结果才是假</td></tr><tr><td>^</td><td>逻辑异或</td><td>相同为false，不同为 true</td></tr><tr><td>!</td><td>逻辑非</td><td>取反</td></tr></tbody></table><h3 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符"></a>短路逻辑运算符</h3><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>短路与</td><td>结果和&amp;相同，但是有短路效果</td></tr><tr><td>||</td><td>短路或</td><td>结果和|相同，但是有短路效果</td></tr></tbody></table><p><font color='red'>注意事项：</font></p><ul><li>&amp; | ，无论左边true或false，右边都要执行</li><li>&amp;&amp; || ，当左边的表达式能确定最终的结果，那么右边的表达式则不参与计算了</li></ul><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>关系表达式 ? 表达式1 : 表达式2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> a &gt; b ? a : b;<span class="comment">// 把三元运算符的结果赋值给一个变量</span></span><br><span class="line">System.out.println(a &gt; b ? a : b);<span class="comment">// 把三元运算符的结果直接打印</span></span><br></pre></td></tr></table></figure><h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><table><thead><tr><th>优先级</th><th>运算符</th></tr></thead><tbody><tr><td>1</td><td>. （） {}</td></tr><tr><td>2</td><td>! ~ ++ –</td></tr><tr><td>3</td><td>* &#x2F; %</td></tr><tr><td>4</td><td>+ -</td></tr><tr><td>5</td><td>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td></tr><tr><td>6</td><td>&lt; &lt;&#x3D; &gt; &gt;&#x3D; instanceof</td></tr><tr><td>7</td><td>&#x3D;&#x3D; !&#x3D;</td></tr><tr><td>8</td><td>&amp;</td></tr><tr><td>9</td><td>^</td></tr><tr><td>10</td><td>|</td></tr><tr><td>11</td><td>&amp;&amp;</td></tr><tr><td>12</td><td>||</td></tr><tr><td>13</td><td>?:</td></tr><tr><td>14</td><td>&#x3D; +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; %&#x3D; &amp;&#x3D;</td></tr></tbody></table><h1 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="**原码、反码、补码**"></a>**原码、反码、补码**</h1><p>原码：十进制数据的二进制表示，最左边的符号位，0为正，1为负</p><p>反码：正数的补码反码是其本身，负数的反码是符号位不变，其余位取反</p><p>补码：正数的补码是其本身，负数的补码是在其反码的基础上 +1</p><p>原码：利用原码对正数进行计算是不会有问题的。但是如果是负数计算，结果就会出错，实际运算的结果，跟预期是相反的</p><p>反码：为了解决原码不能计算负数的问题而出现的</p><p>计算规则：正数的反码不变，负数的反码在原码的基础上，符号位不变。数值取反，0变1，1变0</p><p>反码的弊端：负数运算的时候，如果结果不跨0，是没有任何问题的，但是如果结果跨0，跟实际结果会有1的偏差</p><p>补码：为了解决负数计算时跨0的问题出现的</p><p>补码的计算规则：正数的补码不变，负数的补码在反码的基础上+1</p><p>另外补码还能多记录一个特殊的值-128，该数据在一个字节下，没有原码和反码</p><p><font color='red'>补码的注意点：计算机中的存储和计算都是以补码的形式进行的</font></p><table><thead><tr><th>十进制数字</th><th>原码</th><th>反码</th><th>补码</th></tr></thead><tbody><tr><td>+0</td><td>0000 0000</td><td>0000 0000</td><td>0000 0000</td></tr><tr><td>-0</td><td>1000 0000</td><td>1111 1111</td><td>0000 0000</td></tr><tr><td>-1</td><td>1000 0001</td><td>1111 1110</td><td>1111 1111</td></tr><tr><td>-2</td><td>1000 0010</td><td>1111 1101</td><td>1111 1110</td></tr><tr><td>-3</td><td>1000 0011</td><td>1111 1100</td><td>1111 1101</td></tr><tr><td>-4</td><td>1000 0100</td><td>1111 1011</td><td>1111 1100</td></tr><tr><td>-5</td><td>1000 0101</td><td>1111 1010</td><td>1111 1011</td></tr><tr><td>-6</td><td>1000 0110</td><td>1111 1001</td><td>1111 1010</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="位运算"><a href="#位运算" class="headerlink" title="?位运算?"></a>?位运算?</h3><table><thead><tr><th>运算符</th><th>含义</th><th>运算规则</th></tr></thead><tbody><tr><td>&amp;</td><td>逻辑与</td><td>0为false 1为true</td></tr><tr><td>|</td><td>逻辑或</td><td>0为false 1为true</td></tr><tr><td>&lt;&lt;</td><td>左移</td><td>向左移动，低位补0</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td>向右移动，高位补0或1</td></tr><tr><td>&gt;&gt;&gt;</td><td>无符号右移</td><td>向右移动，高位补0</td></tr></tbody></table><p>​0000 0000 0000 0000 0000 1100 1000</p><p>&amp; 0000 0000 0000 0000 0000 0000 1010</p><p>-———————————————————-</p><p>​0000 0000 0000 0000 0000 0000 1000</p><p>​0000 0000 0000 0000 0000 1100 1000</p><p>|  0000 0000 0000 0000 0000 0000 1010</p><p>-———————————————————-</p><p>​0000 0000 0000 0000 0000 1100 1010</p><h1 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h1><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><h3 id="IF语句第一种书写格式"><a href="#IF语句第一种书写格式" class="headerlink" title="IF语句第一种书写格式"></a>IF语句第一种书写格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">语句体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><ol><li>首先计算关系表达式</li><li>如果关系表达式的值为true，就执行语句体</li><li>如果关系表达式为false，就不执行语句体</li><li>继续执行后面的其他语句</li></ol><p>if的注意点：</p><ol><li>大括号的开头可以另起一行书写，但是建议写在第一行的末尾</li><li>在语句体中，如果只有一句代码，大括号可以省略不写</li><li>如果对一个布尔类型的变量进行判断，不要用 &#x3D;&#x3D; 号，直接输入就可以</li></ol><h3 id="IF语句第二种书写格式"><a href="#IF语句第二种书写格式" class="headerlink" title="IF语句第二种书写格式"></a>IF语句第二种书写格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">语句体<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">语句体<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><ol><li>首先计算关系表达式的值</li><li>如果关系表达式的值为true就执行语句体1</li><li>如果关系表达式的值为false就执行语句体2</li><li>继续执行后面的其他语句</li></ol><h3 id="IF语句第三种书写格式"><a href="#IF语句第三种书写格式" class="headerlink" title="IF语句第三种书写格式"></a>IF语句第三种书写格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (关系表达式<span class="number">1</span>) &#123;</span><br><span class="line">语句体<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (关系表达式<span class="number">2</span>) &#123;</span><br><span class="line">语句体<span class="number">2</span>;</span><br><span class="line">&#125; ... <span class="keyword">else</span> &#123;</span><br><span class="line">语句体n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><ol><li>首先计算关系表达式1的值</li><li>如果为true就执行语句体1；如果为false就计算关系表达式2的值</li><li>如果true就执行语句体2；如果为false就计算关系表达式3的值</li><li>如果所有关系表达式结果都为false，就执行语句体n</li></ol><h3 id="switch语句格式"><a href="#switch语句格式" class="headerlink" title="switch语句格式"></a>switch语句格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">语句体<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">3</span>:</span><br><span class="line">    语句体<span class="number">3</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    语句体n;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><ol><li>首先计算表达式的值</li><li>依次和case后面的值进行比较，如果有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结束</li><li>如果所有的case后面的值和表达式的值都不匹配，就会执行default里面的语句体，然后结束整个switch语句</li></ol><p>格式说明：</p><ol><li>表达式：（将要匹配的值）取值为byte、short、int、char。JDK5以后可以是枚举，JDK7以后可以是String</li><li>case：后面跟的是要和表达式进行比较的值（被匹配的值）</li><li>break：表示中断，结束的意思，用来结束switch语句</li><li>default：表示所有情况都不匹配的时候，就执行该处的内容，和if语句的else相似</li><li>case后面的值只能是字面量，不能是变量</li><li>case给出的值不允许重复</li></ol><h3 id="switch其他知识点"><a href="#switch其他知识点" class="headerlink" title="switch其他知识点"></a>switch其他知识点</h3><ul><li>default的位置和省略</li></ul><p>省略：default可以省略，语法没问题，但不建议省略</p><p>位置：default不一定要写在最下面，但是为了方便理解和阅读，习惯写在底部</p><ul><li>case穿透</li></ul><p>如果break漏写，会导致case穿透</p><p>执行流程：</p><ol><li>首先还是会拿着小括号中表达式的值跟下面每一个case进行匹配</li><li>如果匹配上了，就会执行相应的语句体，如果发现了break，则会结束整个switch语句</li><li>如果没有发现break，那么程序会继续执行下一个case的语句体，一直遇到break或者右大括号为止</li></ol><p>使用场景：</p><p>​如果多个case的语句体重复了，则可以考虑case穿透去简化代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">dayOfWeek</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">String dayType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (dayOfWeek) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        dayType = <span class="string">&quot;Weekday&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        dayType = <span class="string">&quot;Weekend&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        dayType = <span class="string">&quot;Invalid day&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;The day is: &quot;</span> + dayType);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>switch新特性</li></ul><p>**JDK12以上的版本产生的新特性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">switch</span> (num) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> -&gt; System.out.println(<span class="string">&quot;一&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span> -&gt; System.out.println(<span class="string">&quot;二&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span> -&gt; System.out.println(<span class="string">&quot;三&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span> -&gt; System.out.println(<span class="string">&quot;None&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用这种语法，可以在case里写表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">switch</span> (number) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> -&gt; <span class="string">&quot;Number is 1, 2, or 3&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span> + <span class="number">6</span> -&gt; <span class="string">&quot;Number is 10&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> (<span class="type">int</span>) Math.PI -&gt; <span class="string">&quot;Number is approximately 3&quot;</span>;</span><br><span class="line">    <span class="keyword">default</span> -&gt; <span class="string">&quot;Number is not recognized&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(result);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">switch</span> (a) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>, <span class="number">2</span> -&gt; <span class="string">&quot;a is 1 or 2&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> x <span class="keyword">if</span> x &lt; <span class="number">10</span> -&gt; <span class="string">&quot;a is less than 10&quot;</span>;</span><br><span class="line">    <span class="keyword">default</span> -&gt; <span class="string">&quot;a is neither 1 nor less than 10&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(result);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>switch和if第三种格式各自的使用场景</li></ul><ol><li>if的第三种格式一般用于对范围的判断</li><li>switch则是把有限个数据一一列举出来，任选其一</li></ol><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p>循环的分类：</p><ul><li>for</li><li>while</li><li>do…while</li></ul><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化语句;条件判断语句;条件控制语句)&#123;</span><br><span class="line">循环语句体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= <span class="number">10</span>;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><ol><li>执行初始化语句</li><li>条件判断语句，看其结果是true还是false</li></ol><p>如果是<code>false</code>，循环结束</p><p>如果是<code>true</code>，执行循环体语句</p><ol start="3"><li>执行条件控制语句</li><li>回到 2 继续执行条件判断语句</li></ol><p>注意点：</p><ul><li>初始化语句只执行一次</li><li>判断语句为true，循环继续</li><li>判断语句为false，循环结束</li></ul><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件判断语句) &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">条件控制语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for和while的对比：</p><p>相同点：运行规则都是一样的</p><p>区别：</p><ul><li><code>for</code> 循环中，控制循环的变量，因为归属for循环的语句结构中 在for循环结束后，就不能再次访问到了</li><li><code>while</code> 循环中，控制循环的变量，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以接续使用</li></ul><h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 循环体代码</span></span><br><span class="line">&#125; <span class="keyword">while</span> (条件);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">    i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Sum: &quot;</span> + sum);</span><br></pre></td></tr></table></figure><p>解释：<code>do-while</code>循环是一种后测试循环结构，它首先执行循环体中的代码，然后在条件判断之前检查循环条件。只有在循环体执行完毕后，才会判断条件是否满足，如果满足则继续执行下一次循环，否则退出循环</p><p>区别：<code>do-while</code>和<code>while</code>的区别就是<code>do-while</code>会先执行循环体，再判断循环体是否符合条件</p><h3 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h3><p>三种格式</p><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在后面写代码会报错，因为系统会一直卡在无限循环中，不会执行下面的操作,其他无限循环同理</p><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h4><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">while</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h4 id="跳转控制语句"><a href="#跳转控制语句" class="headerlink" title="跳转控制语句"></a>跳转控制语句</h4><p>关键词：continue</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="comment">// 结束本次循环，继续下次循环</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> System.out.println(i); <span class="comment">// 输出结果：0,1,2,4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键词：break</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">// 结束本次循环，继续下次循环</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i);<span class="comment">// 输出结果：0,1,2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组：数组指一种容器，可以用来存储<code>同种类型</code>的多个值</p><h2 id="数组的定义："><a href="#数组的定义：" class="headerlink" title="数组的定义："></a>数组的定义：</h2><p>格式1：</p><p>数据类型 [] 数组名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> [] array</span><br></pre></td></tr></table></figure><p>格式2“</p><p>数据类型 数组名[]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> array[]</span><br></pre></td></tr></table></figure><h2 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h2><p>初始化：就是在内存中，为数组开辟空间，并将数据存放入容器中的过程</p><h3 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h3><p>完整格式：</p><p>数据类型[] 数组名 &#x3D; new 数据类型[] {元素1, 元素2, 元素3…} ;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>&#125;;</span><br></pre></td></tr></table></figure><p>简化格式：</p><p>数据类型[] 数组名 &#x3D; {元素1, 元素2, 元素3…} ;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>&#125;;</span><br></pre></td></tr></table></figure><p>地址值：如果直接打印数组名，打印结果会是数组的地址值，即数组在内存中的地址</p><h3 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h3><p>动态初始化：初始化时只指定数组长度，由系统为数组分配初始值</p><p>格式：数据类型[] 数组名 &#x3D; new 数组类型[数组长度];</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[] arr = new int[3];</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存50个人的姓名</span></span><br><span class="line">String[] arrName = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">50</span>];</span><br><span class="line"><span class="comment">// 添加数据</span></span><br><span class="line">arrName[<span class="number">0</span>] = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">arrName[<span class="number">1</span>] = <span class="string">&quot;李四&quot;</span>;</span><br></pre></td></tr></table></figure><p>动态初始化、静态初始化的区别</p><p>动态初始化：手动指定数组长度，由系统给出默认初始化值</p><p>静态初始化：手动指定数组长度。系统会根据元素个数，计算出数组的长度</p><h3 id="数组元素访问"><a href="#数组元素访问" class="headerlink" title="数组元素访问"></a>数组元素访问</h3><p>格式：数组名[索引];</p><p>索引：也叫下标，角标</p><p>索引的特点：从<code>0</code>开始，逐个+1增长，持续不间断</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义三个身高</span></span><br><span class="line"><span class="type">double</span>[] height = &#123;<span class="number">160.2</span>,<span class="number">151.5</span>,<span class="number">170.6</span>&#125;;</span><br><span class="line"><span class="comment">// 定义三个年龄</span></span><br><span class="line"><span class="type">int</span>[] age = &#123;<span class="number">18</span>,<span class="number">20</span>,<span class="number">19</span>&#125;;</span><br><span class="line"><span class="comment">// 定义五个姓名</span></span><br><span class="line">String[] name = &#123;<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>,<span class="string">&quot;孙七&quot;</span>&#125;;</span><br><span class="line">System.out.println(height[<span class="number">1</span>]);  <span class="comment">// 151.1</span></span><br><span class="line">System.out.println(age[<span class="number">2</span>]);     <span class="comment">// 19</span></span><br><span class="line">System.out.println(name[<span class="number">4</span>]);    <span class="comment">// 孙七</span></span><br></pre></td></tr></table></figure><h3 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h3><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] num = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num.length; i++) &#123;</span><br><span class="line">System.out.println(num[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组的常见问题"><a href="#数组的常见问题" class="headerlink" title="数组的常见问题"></a>数组的常见问题</h3><p>索引越界：当访问了数组中不存在的索引值，就会引发索引越界</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] num = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">System.out.println(num[<span class="number">10</span>]);<span class="comment">// 索引越界</span></span><br></pre></td></tr></table></figure><h3 id="数组的常见操作"><a href="#数组的常见操作" class="headerlink" title="数组的常见操作"></a>数组的常见操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求最值</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">95</span>,<span class="number">77</span>,<span class="number">81</span>,<span class="number">90</span>,<span class="number">69</span>,<span class="number">121</span>,<span class="number">55</span>,<span class="number">17</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (max &lt; arr[i]) &#123;max = arr[i];&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(max);</span><br><span class="line"><span class="comment">// 求和</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    sum += arr[i];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line"><span class="comment">// 交换数据</span></span><br><span class="line">System.out.println(<span class="string">&quot;beforeChange：&quot;</span> + arr[<span class="number">1</span>] + <span class="string">&#x27;|&#x27;</span> + arr[<span class="number">3</span>]);</span><br><span class="line"><span class="type">int</span> <span class="variable">box</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">box = arr[<span class="number">1</span>];</span><br><span class="line">arr[<span class="number">1</span>] = arr[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">3</span>] = box;</span><br><span class="line">System.out.println(<span class="string">&quot;afterChange：&quot;</span> + arr[<span class="number">1</span>] + <span class="string">&#x27;|&#x27;</span> + arr[<span class="number">3</span>]);</span><br></pre></td></tr></table></figure><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><h3 id="二维数组的静态初始化"><a href="#二维数组的静态初始化" class="headerlink" title="二维数组的静态初始化"></a>二维数组的静态初始化</h3>格式：数据类型[]\[] 数组名 = new 数据类型[]\[] {{元素1, 元素2, 元素3},{元素4, 元素5, 元素6},{元素7, 元素8, 元素9}}<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[][] &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;</span><br></pre></td></tr></table></figure>简化格式：数据类型[]\[] 数组名 = {{元素1, 元素2, 元素3},{元素4, 元素5, 元素6},{元素7, 元素8, 元素9}}<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组的动态初始化"><a href="#二维数组的动态初始化" class="headerlink" title="二维数组的动态初始化"></a>二维数组的动态初始化</h3><p>格式：数据类型[][] 数组名 &#x3D; new 数据类型[行数][列数]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] twoDimensionalArray = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>请注意，每行的列数可以不同，因此可以创建不规则的二维数组。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] irregularArray = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][];</span><br><span class="line">irregularArray[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">irregularArray[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line">irregularArray[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>在上述示例中，我们创建了一个不规则的二维数组<code>irregularArray</code>，其中第一行有2个元素，第二行有4个元素，第三行有3个元素</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态初始化一个 3x3 的二维数组</span></span><br><span class="line"><span class="type">int</span>[][] twoDimensionalArray = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给二维数组赋值</span></span><br><span class="line">twoDimensionalArray[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">twoDimensionalArray[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">twoDimensionalArray[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">twoDimensionalArray[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line">twoDimensionalArray[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">twoDimensionalArray[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">6</span>;</span><br><span class="line">twoDimensionalArray[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">7</span>;</span><br><span class="line">twoDimensionalArray[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">8</span>;</span><br><span class="line">twoDimensionalArray[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印二维数组的内容</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; twoDimensionalArray.length; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; twoDimensionalArray[i].length; j++) &#123;</span><br><span class="line">    System.out.print(twoDimensionalArray[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组的调用"><a href="#二维数组的调用" class="headerlink" title="二维数组的调用"></a>二维数组的调用</h3><p>在Java中，二维数组的索引使用行索引和列索引来访问特定的元素。可以通过在数组名称后使用方括号来指定索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 3x3 的二维数组</span></span><br><span class="line"><span class="type">int</span>[][] twoDimensionalArray = &#123;</span><br><span class="line">  &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">  &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">  &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问二维数组的元素</span></span><br><span class="line">System.out.println(twoDimensionalArray[<span class="number">0</span>][<span class="number">0</span>]); <span class="comment">// 输出: 1</span></span><br><span class="line">System.out.println(twoDimensionalArray[<span class="number">1</span>][<span class="number">2</span>]); <span class="comment">// 输出: 6</span></span><br><span class="line">System.out.println(twoDimensionalArray[<span class="number">2</span>][<span class="number">1</span>]); <span class="comment">// 输出: 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改二维数组的元素</span></span><br><span class="line">twoDimensionalArray[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">10</span>;</span><br><span class="line">System.out.println(twoDimensionalArray[<span class="number">1</span>][<span class="number">1</span>]); <span class="comment">// 输出: 10</span></span><br></pre></td></tr></table></figure><h1 id="Java内存分配"><a href="#Java内存分配" class="headerlink" title="**Java内存分配**"></a>**Java内存分配**</h1><p>栈：方法运行时使用的内存，比如main方法运行，进入方法栈中执行</p><p>堆：存储对象或者数组，new来创建的，都存储在堆内存</p><p>方法区：存储可以运行的class文件</p><p>本地方法栈：JVM在使用操作系统功能的时候使用，和开发无关</p><p>寄存器：给CPU使用，和开发无关</p><p>在Java中，数据类型分为两大类：基本数据类型（Primitive Data Types）和引用数据类型（Reference Data Types）。</p><p><strong>基本数据类型</strong>是用于存储简单数据值的数据类型，它们是Java语言的内置类型，共有8种基本数据类型：</p><ol><li><strong>整数类型</strong>：<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>，用于表示整数值。</li><li><strong>浮点类型</strong>：<code>float</code>、<code>double</code>，用于表示带小数点的数值。</li><li><strong>字符类型</strong>：<code>char</code>，用于表示单个字符。</li><li><strong>布尔类型</strong>：<code>boolean</code>，用于表示真（<code>true</code>）或假（<code>false</code>）。</li></ol><p>基本数据类型有以下特点：</p><ul><li>占用的内存空间固定，不受具体值的影响。</li><li>直接存储数据值，而不是对象引用。</li><li>在内存中存储在栈（Stack）中。</li><li>进行基本数据类型之间的操作时，是按值进行的。</li></ul><p><strong>引用数据类型</strong>是指非基本数据类型，也称为对象类型（Object Types），包括类（Class）、接口（Interface）、数组（Array）等。引用数据类型通过引用（Reference）来访问和操作对象。</p><p>引用数据类型有以下特点：</p><ul><li>占用的内存空间不固定，根据对象的大小动态分配。</li><li>存储的是对象的引用（内存地址），而不是实际的对象本身。</li><li>对象的实际数据存储在堆（Heap）中，通过引用进行访问。</li><li>进行引用数据类型之间的操作时，是通过引用进行的，而不是直接操作对象的数据。</li></ul><p>通过引用数据类型，我们可以创建和使用自定义的类、接口、数组等复杂数据结构，并调用它们的方法和访问其属性。</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>方法：方法是程序中最小的执行单元</p><p>用处：重复的代码、具有独立功能的代码可以抽取到方法中</p><p>好处：提高代码的复用性、可维护性</p><h2 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h2><p>把一些代码打包在一起，该过程称为<code>方法定义</code></p><p>方法定义一：</p><p>不带参数，没有返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名() &#123;</span><br><span class="line">方法体(打包起来的代码);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sout</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;你好世界&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;Hi World&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法定义二：</p><p>带参数，没有返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名(形参<span class="number">1</span>,形参<span class="number">2</span>,...) &#123;</span><br><span class="line">方法体(打包起来的代码);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> num1 + num2;</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法定义三：</p><p>有返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 calc(<span class="type">int</span> hours) &#123;</span><br><span class="line">方法体(打包起来的代码);</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calc</span><span class="params">(<span class="type">int</span> hours)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">minutes</span> <span class="operator">=</span> hours * <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">return</span> minutes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h2><p>方法定义后并不是直接运行的，需要手动调用才能执行，该过程称为<code>方法调用</code></p><p>方法调用一：</p><p>不带参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    sout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法调用二：</p><p>带参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    sum(<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法调用三：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">hours</span> <span class="operator">=</span> calc(<span class="number">5</span>);</span><br><span class="line">    System.out.println(hours);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>在同一个类中，定义了多个<code>同名的方法</code>，这些同名的方法具有同种功能</p><p>每个方法具有<code>不同的参数</code>或<code>参数个数</code>，这些同名的方法，就构成了重载关系</p><p>即：同一个类中，方法名相同，参数不同的方法。与返回值无关。</p><p>参数不同：个数不同、类型不同、顺序不同</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b,<span class="type">int</span> c)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法内存分配"><a href="#方法内存分配" class="headerlink" title="方法内存分配"></a>方法内存分配</h2><p><strong>基本数据类型</strong>是用于存储简单数据值的数据类型，它们是Java语言的内置类型，共有8种基本数据类型：</p><ol><li><strong>整数类型</strong>：<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>，用于表示整数值。</li><li><strong>浮点类型</strong>：<code>float</code>、<code>double</code>，用于表示带小数点的数值。</li><li><strong>字符类型</strong>：<code>char</code>，用于表示单个字符。</li><li><strong>布尔类型</strong>：<code>boolean</code>，用于表示真（<code>true</code>）或假（<code>false</code>）。</li></ol><p>基本数据类型有以下特点：</p><ul><li>占用的内存空间固定，不受具体值的影响。</li><li>直接存储数据值，而不是对象引用。</li><li>在内存中存储在栈（Stack）中。</li><li>进行基本数据类型之间的操作时，是按值进行的。</li></ul><p><strong>引用数据类型</strong>是指非基本数据类型，也称为对象类型（Object Types），包括类（Class）、接口（Interface）、数组（Array）等。引用数据类型通过引用（Reference）来访问和操作对象。</p><p>引用数据类型有以下特点：</p><ul><li>占用的内存空间不固定，根据对象的大小动态分配。</li><li>存储的是对象的引用（内存地址），而不是实际的对象本身。</li><li>对象的实际数据存储在堆（Heap）中，通过引用进行访问。</li><li>进行引用数据类型之间的操作时，是通过引用进行的，而不是直接操作对象的数据。</li></ul><p>通过引用数据类型，我们可以创建和使用自定义的类、接口、数组等复杂数据结构，并调用它们的方法和访问其属性。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本数据类型</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">pi</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">letter</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用数据类型</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;John&quot;</span>;</span><br><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>num</code>、<code>pi</code>、<code>letter</code>和<code>flag</code>是基本数据类型的变量，它们直接存储相应的值。而<code>name</code>是一个引用数据类型的变量，存储的是字符串对象的引用。<code>numbers</code>是一个引用数据类型的变量，存储的是整型数组对象的引用。<code>obj</code>是一个引用数据类型的变量，存储的是一个通用的对象引用。</p><p>总结起来，基本数据类型用于存储简单的数值，而引用数据类型用于存储复杂的对象，并通过引用来访问和操作这些对象。</p><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>Java的面向对象（Object-Oriented Programming，简称OOP）是一种编程范式，它将程序设计的重点放在对象的创建、操作和交互上，通过模拟现实世界中的对象和它们之间的关系来解决问题。</p><p>面向对象的编程思想基于以下概念：</p><ol><li><strong>对象（Object）</strong>：对象是现实世界中的实体或概念，具有特定的状态（属性）和行为（方法）。</li><li><strong>类（Class）</strong>：类是对象的模板或蓝图，描述了对象具有的属性和方法。类可以看作是对象的抽象。</li><li><strong>封装（Encapsulation）</strong>：封装是将数据（属性）和操作（方法）封装在一个单元中，使其成为一个独立的、可复用的组件。通过封装，可以隐藏对象的内部实现细节，只对外提供必要的接口。</li><li><strong>继承（Inheritance）</strong>：继承是一种机制，允许从现有的类派生出新的类，新类继承了父类的属性和方法，并可以添加自己的特定内容。继承促进了代码的重用和扩展。</li><li><strong>多态（Polymorphism）</strong>：多态性允许以统一的方式处理不同类型的对象，即同一个方法可以根据调用对象的不同而表现出不同的行为。多态性增加了代码的灵活性和可扩展性。</li></ol><p>通过面向对象的方式，可以将复杂的问题分解成更小的、可管理的对象，并通过对象之间的交互来解决问题。面向对象的编程风格使得代码更易于理解、维护和扩展。</p><p>Java是一种面向对象的编程语言，它提供了丰富的面向对象的特性和机制，例如类和对象的概念、封装、继承、多态等，使得开发人员可以以面向对象的方式设计和编写程序。</p><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p><strong>对象（Object）</strong>：对象是现实世界中的实体或概念，具有特定的状态（属性）和行为（方法）。</p><p><strong>类（Class）</strong>：类是对象的模板或蓝图，描述了对象具有的属性和方法。类可以看作是对象的抽象。</p><h3 id="如何定义类"><a href="#如何定义类" class="headerlink" title="如何定义类"></a>如何定义类</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名 &#123;</span><br><span class="line"><span class="number">1.</span> 成员变量</span><br><span class="line"><span class="number">2.</span> 成员方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line"><span class="comment">// 属性（成员变量）</span></span><br><span class="line">String brand;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 行为(方法)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playGame</span><span class="params">()</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何得到类的对象"><a href="#如何得到类的对象" class="headerlink" title="如何得到类的对象"></a>如何得到类的对象</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名 对象名 = <span class="keyword">new</span> 类名();</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Phone</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br></pre></td></tr></table></figure><h3 id="如何使用对象"><a href="#如何使用对象" class="headerlink" title="如何使用对象"></a>如何使用对象</h3><p>访问属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名.成员变量</span><br></pre></td></tr></table></figure><p>访问行为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名.方法名()</span><br></pre></td></tr></table></figure><h3 id="定义类的注意事项"><a href="#定义类的注意事项" class="headerlink" title="定义类的注意事项"></a>定义类的注意事项</h3><p>用来描述一类事务的类，专业叫做：Javabean类</p><p>在Javabean类中，是不写main方法的</p><p>编写main的类，叫做测试类</p><p>可以在测试类中创建Javabean类的对象并进行赋值调用</p><p>类名首字母建议大写（驼峰命名法）</p><p>一个Java文件中可以定义多个class类，且只能一个类是public修饰，而且public修饰的类名必须称为代码文件名</p><p>实际开发中建议还是一个文件定义一个class类</p><p>成员变量的完整定义格式是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 数据类型 变量名称 = 初始化值;</span><br></pre></td></tr></table></figure><p>一般无需指定初始化值，存在默认值；</p><table><thead><tr><th>数据类型</th><th>明细</th><th>默认值</th></tr></thead><tbody><tr><td>基本类型</td><td>byte、short、int、long</td><td>0</td></tr><tr><td>基本类型</td><td>float、double</td><td>0.0</td></tr><tr><td>基本类型</td><td>boolean</td><td>false</td></tr><tr><td>引用类型</td><td>类、接口、数组、String</td><td>null</td></tr></tbody></table><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装：如何正确设计对象的属性和方法</p><p><font color='red'>对象代表什么，就得封装对应的数据，并提供数据对应的行为</font></p><h2 id="Private关键字"><a href="#Private关键字" class="headerlink" title="Private关键字"></a>Private关键字</h2><ul><li>是一个<code>权限修饰符</code></li><li>可以修饰成员（成员变量和成员方法）</li><li>被<code>private</code>修饰的成员只能在本类中才能访问</li></ul><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String picture;</span><br><span class="line">String brand;</span><br><span class="line"><span class="type">double</span> price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>针对<code>private</code>修饰的成员变量，如果需要被其他类使用，提供相应的操作</li><li>提供”setXXX(参数)”方法，用于给成员变量赋值，方法用<code>public</code>修饰</li><li>提供”getXXX()”方法，用于获取成员变量的值，方法用<code>public</code>修饰</li></ul><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><h3 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;<span class="comment">// 成员变量（全局变量）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">age</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;<span class="comment">// 局部变量</span></span><br><span class="line">System.out.println(age);<span class="comment">// 这里的age会优先获取局部变量的age（就近原则）</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想要获取到外部的变量，则需要用到<code>this</code>关键字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;<span class="comment">// 成员变量（全局变量）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">age</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;<span class="comment">// 局部变量</span></span><br><span class="line">System.out.println(<span class="built_in">this</span>.age);<span class="comment">// 这里的age会获取全部变量的age</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Java中，<code>this</code> 是一个关键字，它是一个引用，指向当前对象的实例。</p><p>当在类的实例方法中使用 <code>this</code> 关键字时，它表示对当前正在调用方法的对象的引用。它可以用于访问当前对象的成员变量、调用当前对象的其他方法，或者将当前对象作为参数传递给其他方法。</p><p>以下是一些使用 <code>this</code> 关键字的常见情况：</p><ol><li><p>访问实例变量：使用 <code>this</code> 关键字可以在方法中访问当前对象的实例变量。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，通过 <code>this.name</code> 可以访问当前对象的 <code>name</code> 实例变量。</p></li><li><p>调用其他方法：使用 <code>this</code> 关键字可以在一个方法中调用同一对象的其他方法。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.result += num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">subtract</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.result -= num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，<code>this.result</code> 用于在 <code>add</code> 和 <code>subtract</code> 方法中引用当前对象的 <code>result</code> 成员变量。</p></li><li><p>在构造方法中调用其他构造方法：使用 <code>this</code> 关键字可以在一个构造方法中调用同一类的其他构造方法。这种方式称为构造方法的重载。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 调用带参数的构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(<span class="type">int</span> width, <span class="type">int</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，无参的构造方法通过 <code>this(0, 0)</code> 调用带参数的构造方法。</p></li></ol><p>需要注意的是，<code>this</code> 关键字只能在非静态方法（实例方法）中使用，因为它指向当前对象的实例。在静态方法中无法使用 <code>this</code> 关键字，因为静态方法是与类关联而不是与对象关联的。</p><p>总而言之，<code>this</code> 关键字用于在对象的实例方法中引用当前对象，以便访问实例变量和调用其他方法。</p><p><font color='red'>this关键字的本质：代表方法<code>调用者</code>的地址值</font></p><h2 id="构造方法（构造函数）"><a href="#构造方法（构造函数）" class="headerlink" title="构造方法（构造函数）"></a>构造方法（构造函数）</h2><p>作用：在创建对象的时候给成员变量进行赋值的</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Peson</span> &#123;</span><br><span class="line">修饰符 类名(参数) &#123;</span><br><span class="line">方法体;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>方法名和类名相同，大小写敏感</li><li>没有返回值类型，也没有void</li><li>没有具体的返回值（不能由return带回结果数据）</li></ol><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;<span class="comment">// 空参构造方法</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span> &#123;<span class="comment">// 带全部参数构造方法</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行时机：</p><ol><li>创建对象的时候由虚拟机调用，不能手动调用构造方法</li><li>每创建一次对象，就会调用一次构造函数</li></ol><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;<span class="comment">// 空参构造方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span> &#123;<span class="comment">// 带全部参数构造方法</span></span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传递以及获取类的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">System.out.println(s.getName());</span><br><span class="line">System.out.println(s.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>如果没有写任何的构造方法，虚拟机会自己创建一个空参构造方法</li><li>如果定义了构造方法，系统将不再提供默认的构造方法</li></ul><p>详细说明：</p><p>构造方法（Constructor）是一种特殊的方法，在Java类中用于创建和初始化对象。构造方法的主要作用是在创建对象时对其进行初始化，确保对象在使用之前处于合理的状态。它有以下几个重要的作用：</p><ol><li>对象的创建：构造方法用于创建对象。在使用<code>new</code>关键字实例化一个类时，会调用该类的构造方法，从而创建一个对象。</li><li>对象的初始化：构造方法在创建对象时对其进行初始化，可以在构造方法中设置对象的初始状态，给成员变量赋初值，执行一些必要的初始化操作。</li><li>确保对象的合理状态：通过在构造方法中对对象进行初始化，可以确保对象在被使用之前处于合理的状态，避免了未初始化或不完整对象的使用。</li><li>可以重载：与普通方法一样，构造方法也可以进行重载。即在同一个类中可以定义多个构造方法，通过不同的参数列表来实现不同的初始化方式。</li></ol><p>构造方法的命名与类名相同，没有返回类型（甚至没有<code>void</code>关键字），且无需显式调用，它会在创建对象时自动调用。如果在类中没有显式定义构造方法，Java会提供一个默认的无参构造方法，用于创建对象，但如果在类中定义了带参构造方法，则默认的无参构造方法将不再提供，需要显式定义。</p><p>以下是一个简单的示例，展示了构造方法的作用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造方法，默认提供，可以省略显式定义</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 对象初始化</span></span><br><span class="line">        name = <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">        age = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参构造方法，重载构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="comment">// 对象初始化</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用无参构造方法创建对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        System.out.println(person1.name); <span class="comment">// Output: &quot;Unknown&quot;</span></span><br><span class="line">        System.out.println(person1.age); <span class="comment">// Output: 0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用带参构造方法创建对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        System.out.println(person2.name); <span class="comment">// Output: &quot;Alice&quot;</span></span><br><span class="line">        System.out.println(person2.age); <span class="comment">// Output: 30</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标准的JavaBean类"><a href="#标准的JavaBean类" class="headerlink" title="标准的JavaBean类"></a>标准的JavaBean类</h2><ul><li><p>类名需要见名知意</p></li><li><p>成员变量使用private修饰</p></li><li><p>提供至少两个构造方法</p><ol><li>无参构造方法</li><li>带全部参数的构造方法</li></ol></li><li><p>成员方法</p><ol><li>提供每一个成员变量的set和get</li><li>如果还有其他行为，也需要写上</li></ol></li></ul><h2 id="成员变量和局部变量-1"><a href="#成员变量和局部变量-1" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h2><p>成员变量和局部变量的区别</p><table><thead><tr><th>区别</th><th>成员变量</th><th>局部变量</th></tr></thead><tbody><tr><td>类中位置不同</td><td>类中，方法外</td><td>方法内、方法申明上</td></tr><tr><td>初始化值不同</td><td>有默认初始值</td><td>没有默认初始值，使用前需要完成赋值</td></tr><tr><td>内存位置不同</td><td>堆内存的对象</td><td>栈内存</td></tr><tr><td>生命周期不同</td><td>随着对象的创建而存在，随着对象的消失而消失</td><td>随着方法的调用存在，调用结束后消失</td></tr><tr><td>作用域</td><td>整个类中有效</td><td>当前方法中有效</td></tr></tbody></table><h1 id="API-String"><a href="#API-String" class="headerlink" title="API&amp;String"></a>API&amp;String</h1><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>API：应用程序编程接口</p><p>JavaAPI：JDK中提供的各种功能的Java类</p><p>这些类将底层的实现封装了起来，需要时直接调用即可</p><p>JDK API即官方API文档，可以查询API的具体用法、用处</p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ol><li>String是Java定义好的一个类。定义在java.lang包中，所以使用时不需要导包</li><li>Java程序中的所有字符串文字都被实为此类的对象</li><li>字符产不可改变，它们的值在创建后不能被更改</li></ol><h3 id="创建String对象的方式"><a href="#创建String对象的方式" class="headerlink" title="创建String对象的方式"></a>创建String对象的方式</h3><ol><li>直接赋值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>new</li></ol><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td>public String()</td><td>创建空白字符串，不包含任何内容</td></tr><tr><td>public String(String original)</td><td>根据传入的字符串，创建字符串对象</td></tr><tr><td>public String(char[] chs)</td><td>根据字符数组，创建字符串对象</td></tr><tr><td>public String(byte[] chs)</td><td>根据字节数组，创建字符串对象</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">System.out.println(s1);<span class="comment">// &quot;&quot;即空字符串</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">System.out.println(s2);<span class="comment">// &quot;abc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>[] chs = &#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chs);</span><br><span class="line">System.out.println(s3);<span class="comment">// &quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] bytes = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes);</span><br><span class="line">System.out.println(s4)<span class="comment">// &quot;abcd&quot; ASCII码</span></span><br></pre></td></tr></table></figure><p>当使用直接赋值的方法赋值时，系统会检查该字符串是否存在</p><p>不存在则创建新的，若存在则复用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;<span class="comment">// s1 s2执行的是同一个内存地址</span></span><br></pre></td></tr></table></figure><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><p>由于字符串属于引用数据类型，使用”&#x3D;&#x3D;”比较时，实则是比较的地址值，用new创建两个字符串，即使值是一样的，但是地址不同，则比较结果是 false</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">基本数据类型：比较数据值</span><br><span class="line">引用数据类型：比较地址值</span><br></pre></td></tr></table></figure><p>Java提供了两个方法专门用于字符串比较</p><ul><li>boolean equals方法(要比较的字符串)完全一样结果才是true，否则为false</li><li>boolean equalslgnoreCase(要比较的字符串)     忽略大小写的比较</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> s1.equals(s2);</span><br><span class="line">System.out.println(res);<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>​      </p><h3 id="遍历字符串"><a href="#遍历字符串" class="headerlink" title="遍历字符串"></a>遍历字符串</h3><p>关键字：charAt</p><p>public char charAt(int index)：根据索引返回字符串</p><p>public int length()：返回此字符串的长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i &lt; s1.length;i++) &#123;</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(i)</span><br><span class="line">System.out.println(c);<span class="comment">// 依次打印：a b c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><p>StringBuilder可以看作是一个容器，创建之后里面的<font color='red'>内容是可变的</font></p><p>作用：提高字符串的效率</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringBuilder()</td><td>创建一个空白可变字符串对象，不含有任何内容</td></tr><tr><td>public StringBuilder(String str)</td><td>根据字符串的内容，来创建可变字符串对象</td></tr><tr><td></td><td></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;abc&quot;</span>);<span class="comment">// 有参</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();<span class="comment">// 无参</span></span><br></pre></td></tr></table></figure><h4 id="stringBuilder常用方法"><a href="#stringBuilder常用方法" class="headerlink" title="stringBuilder常用方法"></a>stringBuilder常用方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringBuilder append(任意类型)</td><td>添加数据，并返回对象本身</td></tr><tr><td>public StringBuilder reverse()</td><td>反转容器中的内容</td></tr><tr><td>public int length()</td><td>返回长度(字符出现的个数)</td></tr><tr><td>public String toString()</td><td>通过toString，还原字符串类型</td></tr></tbody></table><p>具体用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建对象</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">sb.append(<span class="number">123</span>);</span><br><span class="line">sb.append(<span class="number">2.3</span>);</span><br><span class="line">sb.append(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line"><span class="comment">// Java对这个类进行了特殊处理</span></span><br><span class="line"><span class="comment">// 打印对象不是地址值而是属性值</span></span><br><span class="line">System.out.println(sb); <span class="comment">// 1232.3true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反转</span></span><br><span class="line">sb.reverse();</span><br><span class="line"><span class="comment">// 获取对象字符串长度</span></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> sb.length();</span><br><span class="line">System.out.println(sb); <span class="comment">// eurt3.2321</span></span><br><span class="line">System.out.println(len); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换为字符串类型</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">System.out.println(str); <span class="comment">// eurt3.2321</span></span><br></pre></td></tr></table></figure><p>链式编程：当调用一个方法的时候，不需要用变量接受他的结果，可以继续调用其他方法</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sb.append(<span class="number">123</span>).reverse();</span><br><span class="line">System.out.println(<span class="string">&quot;321&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="StringJoiner"><a href="#StringJoiner" class="headerlink" title="StringJoiner"></a>StringJoiner</h3><p>StringJoiner用于拼接字符串，和StringBuilder一样，也可以看作是一个容器，里面的内容是可以改变的</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringJoiner(间隔符号)</td><td>创建一个StringJoiner对象，指定拼接时的间隔符号</td></tr><tr><td>public StringJoiner(间隔符号,开始符号,结束符号)</td><td>创建一个StringJoiner对象，指定拼接时的间隔符号、开始符号、结束符号</td></tr></tbody></table><p>成员方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringJoiner add(添加的内容)</td><td>添加数据，并返回对象本身</td></tr><tr><td>public int length()</td><td>返回长度(字符出现的个数)</td></tr><tr><td>public String toString()</td><td>返回一个字符串(还原字符串)</td></tr></tbody></table><h1 id="ArrayList-集合"><a href="#ArrayList-集合" class="headerlink" title="ArrayList(集合)"></a>ArrayList(集合)</h1><h2 id="集合和数组的区别"><a href="#集合和数组的区别" class="headerlink" title="集合和数组的区别"></a>集合和数组的区别</h2><p>数组：</p><ul><li>长度固定</li><li>可以存储基本数据类型</li><li>可以存储引用数据类型</li></ul><p>集合：</p><ul><li>长度不固定</li><li>只能存储引用数据类型</li><li>如果要存储基本数据类型，需要转换成包装类</li></ul><h2 id="ArrayList基本使用"><a href="#ArrayList基本使用" class="headerlink" title="ArrayList基本使用"></a>ArrayList基本使用</h2><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建集合的对象</span></span><br><span class="line"><span class="comment">// 泛型(e)：限定集合中存储数据的类型</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 这个类在底层做了一些处理，打印对象不是地址值，而是具体的数据</span></span><br><span class="line"><span class="comment">// 在展示的时候会拿[]把所有的数据进行包裹</span></span><br><span class="line">System.out.println(list);   <span class="comment">// 打印结果：[]</span></span><br></pre></td></tr></table></figure><h3 id="ArrayList成员方法"><a href="#ArrayList成员方法" class="headerlink" title="ArrayList成员方法"></a>ArrayList成员方法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>boolean add(E e)</td><td>添加元素，返回值表示是否添加成功</td></tr><tr><td>boolean remove(E e)</td><td>删除指定元素，返回值表示是否删除成功</td></tr><tr><td>E remove(int index)</td><td>删除指定索引的元素，返回被删除元素</td></tr><tr><td>E set(int index,E e)</td><td>修改指定索引下的元素，返回原来的元素</td></tr><tr><td>E get(int index)</td><td>获取指定索引的元素</td></tr><tr><td>int size()</td><td>集合的长度，也就是集合中元素的个数</td></tr></tbody></table><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">list.add(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">System.out.println(list);   <span class="comment">// 打印结果：[你好, Hello]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line">list.remove(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">System.out.println(list);   <span class="comment">// 打印结果：[Hello]</span></span><br><span class="line"><span class="comment">// 以上两个都有返回值，且为布尔值</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">res1</span> <span class="operator">=</span> list.add(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">res2</span> <span class="operator">=</span> list.remove(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">res3</span> <span class="operator">=</span> list.remove(<span class="string">&quot;???&quot;</span>);  <span class="comment">// 删除集合中不存在的元素返回值为false</span></span><br><span class="line">System.out.println(res1 + <span class="string">&quot;-&quot;</span> + res2 + <span class="string">&quot;-&quot;</span> + res3); <span class="comment">// 打印结果：true-tr</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照索引删除元素</span></span><br><span class="line"><span class="type">String</span> <span class="variable">delete</span> <span class="operator">=</span> list.remove(<span class="number">0</span>);</span><br><span class="line">System.out.println(delete); <span class="comment">// 打印结果：Hello</span></span><br><span class="line">System.out.println(list);   <span class="comment">// 打印结果：[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改元素</span></span><br><span class="line">list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">change</span> <span class="operator">=</span> list.set(<span class="number">0</span>,<span class="string">&quot;first&quot;</span>);</span><br><span class="line">System.out.println(change); <span class="comment">// aaa</span></span><br><span class="line">System.out.println(list);   <span class="comment">// [first, bbb, ccc, ddd]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询元素</span></span><br><span class="line"><span class="type">String</span> <span class="variable">find</span> <span class="operator">=</span> list.get(<span class="number">3</span>);</span><br><span class="line">System.out.println(find);   <span class="comment">// ddd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取集合的长度</span></span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line">System.out.println(size);   <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>由于集合不能直接存储基本数据类型，所以需要将基本数据类型转换为包装类</p><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><p>规律就是将原来的数据类型改为大写开头，只需要记住<code>char</code>-<code>Character</code>,<code>int</code>-<code>Integer</code></p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建集合</span></span><br><span class="line">ArrayList&lt;Integer&gt; intArr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">ArrayList&lt;Character&gt; charArr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">intArr.add(<span class="number">1</span>);</span><br><span class="line">intArr.add(<span class="number">2</span>);</span><br><span class="line">intArr.add(<span class="number">3</span>);</span><br><span class="line">intArr.add(<span class="number">4</span>);</span><br><span class="line">intArr.add(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 遍历数字集合</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; intArr.size(); i++) &#123;</span><br><span class="line">    System.out.println(intArr.get(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">charArr.add(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">charArr.add(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">charArr.add(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">charArr.add(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">charArr.add(<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">charArr.add(<span class="string">&#x27;f&#x27;</span>);</span><br><span class="line"><span class="comment">// 遍历字符集合</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; charArr.size(); i++) &#123;</span><br><span class="line">    System.out.println(charArr.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="面向对象进阶"><a href="#面向对象进阶" class="headerlink" title="面向对象进阶"></a>面向对象进阶</h1><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>static表示静态的意思，是java中的一个修饰符，可以修饰成员方法，成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 属性：学生姓名 年龄 性别 老师姓名</span></span><br><span class="line"> <span class="keyword">private</span> String name;</span><br><span class="line"> <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"> <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有的对象都共享一个老师姓名</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> String teacherName;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有的对象都共享一个老师姓名</span></span><br><span class="line">Student.teacherName = <span class="string">&quot;Bob&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">s1.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">s1.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">s1.setAge(<span class="number">23</span>);</span><br><span class="line">s1.study();</span><br><span class="line">s1.show();</span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">s2.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">s2.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">s2.setAge(<span class="number">22</span>);</span><br><span class="line">s2.study();</span><br><span class="line">s2.show();</span><br></pre></td></tr></table></figure><p>被<code>static</code>修饰的成员变量，叫做<code>静态变量</code></p><p>特点：</p><ul><li>被该类<font color='red'>所有对象共享</font></li><li>不属于对象，属于类</li><li>随着类的加载而加载，优先于对象存在</li></ul><p>调用方式：</p><ul><li>类名调用（推荐）</li><li>对象名调用</li></ul><p>被<code>static</code>修饰的成员方法，叫做<code>静态方法</code></p><p>特点：</p><ul><li>多用在测试类和工具类中</li><li>Javabean类中很少会用</li></ul><p>调用方式：</p><ul><li>类名调用（推荐）</li><li>对象名调用</li></ul><p>目前学习的共有三种类：</p><ol><li>Javabean类<br>用来描述一类事物的类。比如：Student、Teacher、Dog、Cat</li><li>测试类<br>用来检查其他类是否书写正确，带有main方法的类，是程序的入口</li><li>工具类<br>不是用来描述一类事物的，而是帮我们做一些事情的类。比如Java里的random、math</li></ol><h3 id="static注意事项"><a href="#static注意事项" class="headerlink" title="static注意事项"></a>static注意事项</h3><ul><li>静态方法只能访问静态变量和静态方法</li><li>非静态方法可以访问静态变量或者静态方法，也可以访问非静态的成员变量和非静态的成员方法</li><li>静态方法中是没有this关键字</li></ul><p>总结：</p><ol><li>静态方法中，只能访问静态</li><li>非静态方法可以访问所有</li><li>静态方法中没有this关键字</li></ol><p>在 Java 中，静态方法（Static Method）是属于类而不是对象的，因此在静态方法中没有 <code>this</code> 关键字。</p><p>静态方法是与类相关联的，它不依赖于类的实例（对象）而存在，可以直接通过类名来调用。由于静态方法不属于特定的对象，因此在静态方法中无法使用 <code>this</code> 关键字来引用对象本身，因为静态方法不知道具体是哪个对象在调用它。</p><p>相反，在实例方法（非静态方法）中，可以使用 <code>this</code> 关键字来引用调用该方法的对象本身，因为实例方法是属于对象的。</p><p>以下是一个示例，展示了静态方法和实例方法的区别：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 静态方法无法使用 this 关键字</span></span><br><span class="line">        <span class="comment">// this.value = 10; // 编译错误：Cannot use this in a static context</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">instanceMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 实例方法可以使用 this 关键字</span></span><br><span class="line">        <span class="built_in">this</span>.value = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，<code>staticMethod</code> 是一个静态方法，它试图使用 <code>this</code> 关键字来引用 <code>value</code> 属性，但会导致编译错误。而 <code>instanceMethod</code> 是一个实例方法，它可以正常使用 <code>this</code> 关键字来引用 <code>value</code> 属性。</p><p>总结一下，静态方法是属于类的方法，不依赖于对象；而实例方法是属于对象的方法，可以使用 <code>this</code> 关键字来引用对象本身。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>Java中提供一个关键字<code>extends</code>，用这个关键字，我们可以让一个类和另一个类建立起继承关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>Student称为子类（派生类），Person称为父类（基类或超类）</p><h3 id="继承的概述"><a href="#继承的概述" class="headerlink" title="继承的概述"></a>继承的概述</h3><p>Java中的继承是面向对象编程的一种重要特性，它允许一个类（称为子类或派生类）继承另一个类（称为父类或基类）的属性和方法。通过继承，子类可以获得父类的所有非私有成员变量和方法，并且可以在此基础上添加自己的新成员变量和方法。</p><p>继承的特点和优势包括：</p><ol><li><strong>代码重用：</strong> 继承允许子类重用父类的代码，避免了重复编写相同的代码，提高了代码的可维护性和复用性。</li><li><strong>层次结构：</strong> 继承可以形成类之间的层次结构，允许按照共性和特性进行分类和组织，从而更好地组织和管理代码。</li><li><strong>多态性：</strong> 继承是实现多态性的基础。通过父类类型的引用指向子类对象，可以在运行时动态地调用子类的方法，实现了多态性。</li></ol><p>在Java中，使用 <code>extends</code> 关键字来声明继承关系。子类使用 <code>extends</code> 关键字后面跟着父类的名称来声明继承，子类就会继承父类的成员变量和方法。</p><p>以下是一个简单的Java继承示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal is eating.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类继承自Animal类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">bark</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog is barking.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.eat(); <span class="comment">// 继承自Animal类的方法</span></span><br><span class="line">        dog.bark(); <span class="comment">// 子类独有的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，<code>Animal</code> 是父类，<code>Dog</code> 是子类。<code>Dog</code> 类继承了 <code>Animal</code> 类的 <code>eat()</code> 方法，并且在此基础上添加了 <code>bark()</code> 方法。在 <code>main</code> 方法中，我们可以创建 <code>Dog</code> 类的对象并调用继承自父类的方法和子类自己的方法。</p><p><font color='cornflowerblue'>需要注意的是，Java中的继承是单继承的，一个类只能继承自一个父类。但是，一个类可以实现多个接口（接口之间是多继承的关系）。</font></p><p><font color='red'>Java只支持单继承，不支持多继承，但支持多层继承</font></p><p>单继承：一个子类只能继承一个父类</p><p>不支持多继承：子类不能同时继承多个父类</p><p>多层继承：子类A继承父类B，父类B可以继承父类C</p><p>每一个类都直接或间接的继承与Object（即虚拟机会将程序员编写的类自动继承Java中的Object）</p><h3 id="继承的使用"><a href="#继承的使用" class="headerlink" title="继承的使用"></a>继承的使用</h3><p>当类与类之间，存在相同（共性）的内容，并满足子类是父类中的一种，就可以考虑使用继承，来优化代码</p><p>当构思继承的时候，不推荐直接大脑思考，而是使用思维导图的方式，把子类的共性内容抽取到父类中</p><h3 id="子类与父类的继承"><a href="#子类与父类的继承" class="headerlink" title="子类与父类的继承"></a>子类与父类的继承</h3><h4 id="子类能继承父类中的哪些内容"><a href="#子类能继承父类中的哪些内容" class="headerlink" title="子类能继承父类中的哪些内容"></a>子类能继承父类中的哪些内容</h4><table><thead><tr><th>构造方法</th><th>非私有（不能继承）</th><th>私有&#x2F;private（不能继承）</th></tr></thead><tbody><tr><td>成员变量</td><td>非私有（能继承）</td><td>私有&#x2F;private（能继承）</td></tr><tr><td>成员方法</td><td>非私有（能继承）</td><td>私有&#x2F;private（不能继承）</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>在 Java 中，构造方法（Constructor）不是普通的方法，它有特殊的用途和规则。构造方法是用于创建对象的特殊方法，它在创建对象时被调用，并负责初始化对象的状态。</p><p>由于构造方法的特殊性，它并不能被继承。在子类中不会自动继承父类的构造方法，而是由子类自己定义构造方法。当子类创建对象时，必须调用自己的构造方法来初始化自己的实例变量。</p><p>当子类没有定义构造方法时，编译器会默认提供一个无参构造方法（如果父类有无参构造方法），或者继承父类的构造方法（如果父类有其他构造方法但没有无参构造方法）。</p><p>如果子类定义了构造方法，那么它不会继承父类的构造方法。在子类的构造方法中，可以通过使用 <code>super</code> 关键字调用父类的构造方法来完成对父类的初始化。</p><p>以下是一个简单示例来说明构造方法不会被继承的情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    Parent(<span class="type">int</span> age) &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    Child(String name, <span class="type">int</span> age) &#123;</span><br><span class="line">        <span class="built_in">super</span>(age); <span class="comment">// 调用父类的构造方法进行初始化</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，<code>Parent</code> 类有一个带参数的构造方法，<code>Child</code> 类继承自 <code>Parent</code> 类。在 <code>Child</code> 类的构造方法中，我们使用 <code>super(age)</code> 调用了父类的构造方法来初始化父类的 <code>age</code> 属性，然后再初始化子类自己的 <code>name</code> 属性。</p><p>总结一下，构造方法不会被继承，子类必须定义自己的构造方法来完成对自己和父类的初始化。但是，可以通过 <code>super</code> 关键字调用父类的构造方法来辅助完成初始化过程。</p><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><p>在Java中，继承（Inheritance）允许子类继承父类的非私有成员变量，包括公共（public）、受保护（protected）和默认（包级私有，默认修饰符，没有关键字修饰）访问修饰符修饰的成员变量。但是，子类无法直接访问继承的私有（private）成员变量。</p><p>继承允许子类获取父类的属性和方法，并在子类中进行重用。这样做的好处是可以提高代码的复用性和可维护性。继承的非私有成员变量在子类中可以使用，并且通过子类的实例可以访问这些继承的成员变量。</p><p>然而，父类的私有成员变量是被封装的，它们只能在父类的内部使用，无法被子类直接访问。子类无法继承父类的私有成员变量，因此无法通过子类的实例来访问这些私有成员变量。</p><p>以下是一个简单的示例来说明继承中对成员变量的访问权限：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> publicVar;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> protectedVar;</span><br><span class="line">    <span class="type">int</span> defaultVar; <span class="comment">// 默认访问修饰符，包级私有</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> privateVar;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Parent</span><span class="params">()</span> &#123;</span><br><span class="line">        publicVar = <span class="number">1</span>;</span><br><span class="line">        protectedVar = <span class="number">2</span>;</span><br><span class="line">        defaultVar = <span class="number">3</span>;</span><br><span class="line">        privateVar = <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printVariables</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(publicVar); <span class="comment">// 可以访问继承的公共成员变量</span></span><br><span class="line">        System.out.println(protectedVar); <span class="comment">// 可以访问继承的受保护成员变量</span></span><br><span class="line">        System.out.println(defaultVar); <span class="comment">// 可以访问继承的默认成员变量</span></span><br><span class="line">        <span class="comment">// System.out.println(privateVar); // 编译错误，无法访问继承的私有成员变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Child</span> <span class="variable">child</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">        child.printVariables();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，<code>Parent</code> 类有四个成员变量，分别使用了不同的访问修饰符。<code>Child</code> 类继承了 <code>Parent</code> 类，可以访问 <code>Parent</code> 类中的公共、受保护和默认成员变量，但无法直接访问 <code>Parent</code> 类的私有成员变量。</p><h4 id="虚方法表"><a href="#虚方法表" class="headerlink" title="虚方法表"></a>虚方法表</h4><p>虚方法表（Virtual Method Table，简称Vtable）是Java虚拟机（JVM）在运行时用于支持多态性的一种数据结构。它是面向对象编程语言中实现动态绑定（Dynamic Binding）的一种机制。</p><p>在Java中，动态绑定是指在运行时根据对象的实际类型来确定调用哪个方法，而不是在编译时根据引用变量的声明类型来确定。这使得子类可以重写父类的方法，然后在运行时根据实际的对象类型调用相应的子类方法，实现了多态性。</p><p>虚方法表是实现动态绑定的重要工具。<code>每个类在Java虚拟机中都有一个虚方法表</code>，<font color='red'>其中存储了该类的虚方法信息，包括方法的地址（指向实际的方法代码）</font>。虚方法表是针对类而不是对象的，<code>因此每个类只有一个虚方法表</code>。</p><p><font color='red'>当调用对象的虚方法时，虚方法表会根据对象的实际类型查找相应的方法地址，然后进行方法调用。这样，就能实现在运行时动态地选择正确的方法，而不依赖于引用变量的类型。</font></p><p>虚方法表的使用使得Java中的方法调用变得更加灵活和多态，使得继承和方法重写得以实现。这也是Java等面向对象语言能够实现多态性的基础。</p><p><font color='red'>只有父类中的虚方法才能被子类继承</font></p><p><code>虚方法：非private、非static、非final</code></p><h3 id="继承范围"><a href="#继承范围" class="headerlink" title="继承范围"></a>继承范围</h3><h4 id="成员变量、成员方法"><a href="#成员变量、成员方法" class="headerlink" title="成员变量、成员方法"></a>成员变量、成员方法</h4><p>就近原则：现在局部位置找，本类成员位置找，父类成员位置找，逐级往上</p><p>用<code>super</code>调用，直接访问父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Fu&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Zi&quot;</span>;<span class="comment">// 删除这行，打印结果为：Fu</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ziShow</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;ziShow&quot;</span>;<span class="comment">// 删除这行，打印结果为：Zi</span></span><br><span class="line">System.out.println(name);<span class="comment">// 结果：ziShow</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是综合案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">Id</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doThings</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am Fu&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">Id</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">idShow</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Zi:&quot;</span> + <span class="built_in">this</span>.Id);</span><br><span class="line">        System.out.println(<span class="string">&quot;Fu:&quot;</span> + <span class="built_in">super</span>.Id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doThings</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am Zi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ziShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.doThings();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fuShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.doThings();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Zi</span> <span class="variable">z1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>();</span><br><span class="line">        z1.idShow();    <span class="comment">// Zi: 20 Fu:10</span></span><br><span class="line">        z1.ziShow();</span><br><span class="line">        z1.fuShow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><p>当父类的方法不能满足子类现在的需求时，需要进行方法重写</p><h4 id="书写格式"><a href="#书写格式" class="headerlink" title="书写格式"></a>书写格式</h4><p>在继承体系中，子类出现了和父类中一摸一样的方法声明，我们就称这个方法是重写的方法</p><h4 id="Override重写注解"><a href="#Override重写注解" class="headerlink" title="@Override重写注解"></a>@Override重写注解</h4><ol><li>@Override是放在重写后的方法上，校验子类重写时语法是否正确</li><li>加上注解后如果有红色波浪线，表示语法错误</li><li>建议重写方法都加@Override注解，代码安全，优雅！</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃米饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drink</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喝开水&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃菜&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drink</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喝饮料&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ol><li>重写方法的名称、形参列表必须与父类中的一致</li><li>子类重写父类方法时，访问权限子类必须大于等于父类（暂时了解：空着不写 &lt; protected &lt; public）</li><li>子类重写父类方法时，返回值类型子类必须小于等于父类</li><li>总结（建议）：<font color='red'>重写的方法尽量和父类保持一致</font></li><li>只有被添加到虚方法表中的方法才能被重写</li></ol><h3 id="继承中：构造方法的访问特点"><a href="#继承中：构造方法的访问特点" class="headerlink" title="继承中：构造方法的访问特点"></a>继承中：构造方法的访问特点</h3><ul><li>父类中的构造方法不会被子类继承</li><li>子类中所有的构造方法默认先访问父类中的无参构造，再执行自己</li></ul><p>↑解释：</p><ul><li>子类在初始化的时候，有可能会使用到父类中的数据，如果父类没有完成初始化，子类将无法使用父类的数据</li><li>子类初始化之前，一定要调用父类构造方法先完成父类数据空间的初始化</li></ul><p>怎么调用父类构造方法？</p><ul><li><font color='red'>子类构造方法的第一行语句默认都是：super()，不写也存在，且必须在第一行</font></li><li>如果想调用父类的有参构造，必须手动写super进行调用</li></ul><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fu</span>&#123;</span><br><span class="line"><span class="type">int</span> Age;</span><br><span class="line">String Name;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Fu</span><span class="params">()</span> &#123;</span><br><span class="line">Age = <span class="number">10</span>;</span><br><span class="line">Name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Fu</span><span class="params">(<span class="type">int</span> Age,String Name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.Age = Age;</span><br><span class="line"><span class="built_in">this</span>.Name = Name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Zi</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 子类构造方法中隐藏的super()去访问父类的无参构造</span></span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Zi</span><span class="params">(String Name,<span class="type">int</span> Age)</span> &#123;</span><br><span class="line">        <span class="comment">// 访问父类的有参构造</span></span><br><span class="line">        <span class="built_in">super</span>(Name,Age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态：同类型的对象，表现出的不同形态</p><h3 id="多态的表现形式"><a href="#多态的表现形式" class="headerlink" title="多态的表现形式"></a>多态的表现形式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父类类型 对象名称 = 子类对象;</span><br></pre></td></tr></table></figure><h3 id="多态前提"><a href="#多态前提" class="headerlink" title="多态前提"></a>多态前提</h3><ul><li>有继承关系</li><li>有父类引用指向子类对象</li><li>有方法重写</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Fu</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>();</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> duotai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="comment">// 变量为父，方法为子</span></span><br><span class="line">        System.out.println(a.name); <span class="comment">// 动物</span></span><br><span class="line">        a.show();   <span class="comment">// Dog----show</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;动物&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal----show&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;狗&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog----show&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><p>成员变量：在子类的对象中，会把父类的成员变量也继承下来。</p><p>成员方法：如果子类对方法进行了<font color='red'>重写</font>，那么在虚方法表中是会把父类的方法进行覆盖的。</p><p><font color='red'>编译看左边，运行看右边</font></p><h3 id="多态的优势和弊端"><a href="#多态的优势和弊端" class="headerlink" title="多态的优势和弊端"></a>多态的优势和弊端</h3><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ul><li>在多态的形式下，右边对象可以实现解耦合，便于拓展和维护</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">p.work();</span><br><span class="line"><span class="comment">// 如果需要变成teacher的work方法，不需要修改其他地方，只需要把new Student() 改为 new Teacher()</span></span><br></pre></td></tr></table></figure><ul><li>定义方法的时候，使用父类型作为参数，可以接收所有子类对象，体现多态的扩展性与便利</li></ul><h4 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h4><ul><li>不能调用子类特有方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> duotai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="comment">// 变量为父，方法为子</span></span><br><span class="line">        System.out.println(a.name); <span class="comment">// 动物</span></span><br><span class="line">        a.show();   <span class="comment">// Dog----show</span></span><br><span class="line">        <span class="comment">// a.watchDoor(); 父类里面没有这个方法，会报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;动物&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal----show&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;狗&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog----show&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">watchDoor</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;看门&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="包、final、权限修饰符、代码块"><a href="#包、final、权限修饰符、代码块" class="headerlink" title="包、final、权限修饰符、代码块"></a>包、final、权限修饰符、代码块</h2><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>包就是文件夹。用来管理各种不同功能的Java类，方便后期代码维护</p><ul><li>包名的规则：公司域名反写 + 包的作用，需要全部英文小写，见名知意，如：com.zhaojiale.domain.student</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">com.zhaojiale.domain.<span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.zhaojiale.domain.Student()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>||</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zhaojiale.domain.Student;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用其他类的规则"><a href="#使用其他类的规则" class="headerlink" title="使用其他类的规则"></a>使用其他类的规则</h4><ul><li>使用同一个包中的类时，不需要导包</li><li>使用Java.lang包中的类时，不需要导包</li><li>其他情况都需要导包</li><li>如果同时使用两个包中的同名类，需要用全类名</li></ul><h3 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h3><p>修饰方法：表明该方法是最终方法，不能被重写</p><p>修饰类：表明该类是最终类，不能被继承</p><p>修饰变量：叫做常量，只能被赋值一次</p><h3 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h3><h4 id="权限修饰符的分类"><a href="#权限修饰符的分类" class="headerlink" title="权限修饰符的分类"></a>权限修饰符的分类</h4><p>有四种作用范围由大到小（private &lt; 缺省 &lt; protected &lt; public）</p><table><thead><tr><th>修饰符</th><th>同一类中</th><th>同一包中其他类</th><th>不同包下的子类</th><th>不同包下的无关类</th></tr></thead><tbody><tr><td>private</td><td>√</td><td></td><td></td><td></td></tr><tr><td>缺省</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><p>实际开发中，一般只用private和public</p><ul><li>成员变量私有</li><li>方法公开</li></ul><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static&#123;&#125;</span><br></pre></td></tr></table></figure><p>特点：</p><p>需要通过static关键字修饰，随着类的加载而加载，并且自动触发，只执行一次</p><p>使用场景：</p><p>在类加载的时候，做一些数据初始化的时候使用</p><p>执行时机：</p><p>随着类的加载而加载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Student&#123;</span><br><span class="line">private String name;</span><br><span class="line">private int age;</span><br><span class="line"></span><br><span class="line">static &#123;</span><br><span class="line">System.out.println(&quot;静态代码块执行了&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象类-抽象方法"><a href="#抽象类-抽象方法" class="headerlink" title="抽象类&#x2F;抽象方法"></a>抽象类&#x2F;抽象方法</h2><p><code>具体实例在资料的 day12、day13中</code></p><p>抽象方法：</p><p>将共性的行为（方法）抽取到父类之后。由于每一个子类执行的内容是不一样，所以在父类中不能确定具体的方法体。该方法就可以定义为抽象方法</p><p>抽象类：</p><p>如果一个类中存在抽象方法，那么该类就必须声明为抽象类</p><ul><li>抽象方法的定义格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> 返回值类型 方法名(参数列表);</span><br></pre></td></tr></table></figure><ul><li>抽象类的定义格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> class 类名&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象类和抽象方法的注意事项"><a href="#抽象类和抽象方法的注意事项" class="headerlink" title="抽象类和抽象方法的注意事项"></a>抽象类和抽象方法的注意事项</h3><ul><li>抽象类不能实例化（实例化：创建对象）</li><li>抽象类中不一定有抽象方法。有抽象方法，类一定是抽象类</li><li>可以有构造方法</li><li>抽象类的子类<ul><li>要么重写抽象类中的所有抽象方法</li><li>要么是抽象类</li></ul></li></ul><p>​     </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> abstractDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// Person p = new Person(); java: abstractDemo.Person是抽象的; 无法实例化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口就是一种规则，是对行为的抽象</p><h3 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h3><ul><li>接口用关键字interface来定义</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> interface 接口名 &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>接口不能实例化</li><li>接口和类之间是实现关系，通过<code>implements</code>关键字表示</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名 implements 接口名 &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>接口的子类（实现类）<ul><li>要么重写接口中的所有抽象方法</li><li>要么是抽象类</li></ul></li></ul><p>注意：</p><ol><li>接口和类的实现关系，可以单实现，也可以多实现。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名 implements 接口名<span class="number">1</span>,接口名<span class="number">2</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>实现类还可以在继承一个类的同时实现多个接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名 extends 父类 implements 接口名<span class="number">1</span>,接口名<span class="number">2</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="接口中成员的特点"><a href="#接口中成员的特点" class="headerlink" title="接口中成员的特点"></a>接口中成员的特点</h3><ul><li>成员变量<ul><li>只能是<font color='red'>常量</font></li><li>默认修饰符：<code>public static final</code></li></ul></li><li>构造方法<ul><li>没有</li></ul></li><li>成员方法<ul><li>只能是抽象方法</li><li>默认修饰符：public abstract</li></ul></li><li>JDK7以前：接口中只能定义抽象方法</li><li>JDK8的新特性：接口中可以定义有方法体的方法</li><li>JDK9的新特性：接口中可以定义私有方法</li></ul><h3 id="接口和类之间的关系"><a href="#接口和类之间的关系" class="headerlink" title="接口和类之间的关系"></a>接口和类之间的关系</h3><ul><li><p>类和类的关系：</p><p>继承关系，只能单继承，不能多继承，但是可以多层继承</p></li><li><p>类和接口的关系</p><p>实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口</p></li><li><p>接口和接口的关系</p><p>继承关系，可以单继承，也可以多继承</p></li></ul><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>JDK8以后接口中新增的方法</p><ul><li>允许在接口中定义默认方法，需要使用关键字 <code>default</code> 修饰<ul><li>作用：解决接口升级问题</li></ul></li></ul><p>接口中<font color='red'>默认方法</font>的定义格式</p><ul><li>格式：public default 返回值类型 方法名(参数列表) {}</li><li>范例：public default void show() {}</li></ul><p>接口中默认方法的<font color='red'>注意事项</font>：</p><ul><li>默认方法不是抽象方法，所以不强制被重写。但如果被重写，重写的时候去掉 default 关键字</li><li>public可以省略，default不能省略</li><li>如果实现了多个接口，多个接口中存在相同名字的默认方法，子类就必须对该方法进行重写</li></ul><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>类的五大成员：属性、方法、构造方法、代码块、内部类</p><p>内部类：在一个类的里面，再定义一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;<span class="comment">// 外部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;<span class="comment">// 内部类</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部类表示的事物是外部类的一部分</p><p>内部类单独出现没有任何意义</p><p>内部类的访问特点：</p><ul><li>内部类可以直接访问外部类的成员，包括私有</li><li>外部类要访问内部类的成员，必须创建对象</li></ul><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;<span class="comment">// 外部类</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;<span class="comment">// 内部类</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态内部类只能访问外部类中的静态变量和方法，如果想要访问非静态的需要创建对象</p><p>创建静态内部类对象的格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">外部类名.内部类名 对象名 = <span class="keyword">new</span> 外部类名.内部类名();</span><br></pre></td></tr></table></figure><p>调用非静态方法的格式：先创建对象，用对象调用</p><p>调用静态方法的格式：外部类名.内部类名.方法名()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> InnerClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show1</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">Outer</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">            System.out.println(o.a);</span><br><span class="line">            System.out.println(b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">Outer</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">            System.out.println(o.a);</span><br><span class="line">            System.out.println(b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> InnerClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">oi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>.Inner();</span><br><span class="line">        oi.show1();</span><br><span class="line">        <span class="comment">// oi.show2(); 不会报错且可以使用</span></span><br><span class="line">        Outer.Inner.show2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><ol><li>将内部类定义在<font color='red'>方法里面</font>就叫做局部内部类，类似于<font color='red'>方法里面的局部变量</font></li><li>外界是无法直接使用，需要在方法内部创建对象并使用</li><li>该类可以直接访问外部类的成员，也可以访问方法内的局部变量</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> InnerClass02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">            String name;</span><br><span class="line">            <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;局部内部类中的method1方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;局部内部类中的method2静态方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建局部内部类的对象</span></span><br><span class="line">        <span class="type">Inner</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        System.out.println(i.name);</span><br><span class="line">        System.out.println(i.age);</span><br><span class="line">        i.method1();</span><br><span class="line">        Inner.method2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>匿名内部类本质上就是隐藏了名字的内部类</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类名或接口名() &#123;</span><br><span class="line">重写方法;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Inter</span>() &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际用途：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> InnerClass03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 在测试类中调用下面的method方法？</span></span><br><span class="line">        <span class="comment">// 以前的方式如何调用？</span></span><br><span class="line">        <span class="comment">// 要自己写一个子类继承Animal类</span></span><br><span class="line">        <span class="comment">// 再创建子类的对象</span></span><br><span class="line">        <span class="comment">// Dog d = new Dog();</span></span><br><span class="line">        <span class="comment">// method(d);</span></span><br><span class="line">        <span class="comment">// 以上的方法过于繁琐，需要自己定义</span></span><br><span class="line">        <span class="comment">// 使用匿名类就会方便很多</span></span><br><span class="line">        method(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Animal</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;狗吃骨头&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Animal a)</span> &#123;</span><br><span class="line">        a.eat();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="匿名自调用"><a href="#匿名自调用" class="headerlink" title="匿名自调用"></a>匿名自调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> InnerClass03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Swim</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;重写之后的游泳方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.swim();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="综合项目————拼图"><a href="#综合项目————拼图" class="headerlink" title="综合项目————拼图"></a>综合项目————拼图</h1><p>要求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 创建一个宽603像素，高680像素的游戏主界面</span><br><span class="line">2. 创建一个宽488像素，高430像素的登陆界面</span><br><span class="line">3. 创建一个宽488像素，高500像素的注册界面</span><br></pre></td></tr></table></figure><h2 id="JFrame"><a href="#JFrame" class="headerlink" title="JFrame"></a>JFrame</h2><p>Java中创建图像化窗口的JavaBean</p><p>创建<code>JFrame</code>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JFrame</span> <span class="variable">GameJFrame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>();</span><br></pre></td></tr></table></figure><p>JFrame部分参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JFrame.setSize(<span class="type">int</span> width,<span class="type">int</span> height);<span class="comment">// 设置窗口宽高</span></span><br><span class="line">JFrame.setVisible(Boolean b);<span class="comment">// 显示窗口，建议放到最后</span></span><br><span class="line">JFrame.setTitle(String s);<span class="comment">// 设置标题</span></span><br><span class="line">JFrame.setAlwaysOnTop(Boolean b);<span class="comment">// 设置窗口置顶</span></span><br><span class="line">JFrame.setDefaultCloseOperation();<span class="comment">// 设置窗口关闭方式 参数可以填入 0-3 范围</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Ui;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GameJFrame</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="comment">// JFrame表示界面、窗体</span></span><br><span class="line">    <span class="comment">// 同理它的子类也是代表界面、窗体</span></span><br><span class="line">    <span class="comment">// GameJFrame 自定义类，表示主界面窗体</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GameJFrame</span><span class="params">(<span class="type">int</span> width,<span class="type">int</span> height,Boolean vb)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setSize(width,height);</span><br><span class="line">        <span class="built_in">this</span>.setVisible(vb);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setTitle(<span class="string">&quot;拼图单机版 v1.0&quot;</span>); <span class="comment">// 设置窗口标题</span></span><br><span class="line">        <span class="built_in">this</span>.setAlwaysOnTop(<span class="literal">true</span>);  <span class="comment">// 设置窗口置顶</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setLocationRelativeTo(<span class="literal">null</span>); <span class="comment">// 设置窗口居中</span></span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用继承，创建一个自定义类，方便后期修改和简化代码</p><h2 id="JMenu"><a href="#JMenu" class="headerlink" title="JMenu"></a>JMenu</h2><p>菜单制作流程：</p><ol><li>先创建JMenuBar</li><li>再创建JMenu</li><li>再创建JMenuItem</li><li>把JMenuItem放到JMenu里面</li><li>把JMenu放到JMenuBar里面</li></ol><p>创建<code>JMenuBar</code>、<code>JMenu</code>、<code>JMenuItem</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JMenuBar</span> <span class="variable">jMenuBar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuBar</span>();</span><br><span class="line"><span class="type">JMenu</span> <span class="variable">functionJMenu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(String s);</span><br><span class="line"><span class="type">JMenuItem</span> <span class="variable">replayItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(String s);</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化菜单</span></span><br><span class="line"><span class="comment">// 创建整个的菜单对象</span></span><br><span class="line"><span class="type">JMenuBar</span> <span class="variable">jMenuBar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuBar</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">JMenu</span> <span class="variable">functionJMenu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;功能&quot;</span>);</span><br><span class="line"><span class="type">JMenu</span> <span class="variable">aboutJMenu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;关于我们&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建选项下面的条目对象</span></span><br><span class="line"><span class="type">JMenuItem</span> <span class="variable">replayItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;重新游戏&quot;</span>);</span><br><span class="line"><span class="type">JMenuItem</span> <span class="variable">reLoginItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;重写登录&quot;</span>);</span><br><span class="line"><span class="type">JMenuItem</span> <span class="variable">closeItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;关闭游戏&quot;</span>);</span><br><span class="line"><span class="type">JMenuItem</span> <span class="variable">accountItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;公众号&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将条目添加到选项中</span></span><br><span class="line">functionJMenu.add(replayItem);</span><br><span class="line">functionJMenu.add(reLoginItem);</span><br><span class="line">functionJMenu.add(closeItem);</span><br><span class="line"></span><br><span class="line">aboutJMenu.add(accountItem);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将菜单里面的两个选项添加到菜单当中</span></span><br><span class="line">jMenuBar.add(functionJMenu);</span><br><span class="line">jMenuBar.add(aboutJMenu);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将整个页面设置菜单</span></span><br><span class="line"><span class="built_in">this</span>.setJMenuBar(jMenuBar);</span><br></pre></td></tr></table></figure><h2 id="JLabel"><a href="#JLabel" class="headerlink" title="JLabel"></a>JLabel</h2><p>JLabel负责管理区域，比如图片、文字</p><p>创建<code>JLabel</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JLabel</span> <span class="variable">jLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>();</span><br></pre></td></tr></table></figure><p>创建<code>ImageIcon</code>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ImageIcon</span> <span class="variable">icon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(String s);<span class="comment">// s 填入图片路径</span></span><br></pre></td></tr></table></figure><p>将<code>ImageIcon</code>添加到<code>JLabel</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jLabel.add(icon);</span><br></pre></td></tr></table></figure><p>指定图片位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jLabel.setBounds(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> width,<span class="type">int</span> height);</span><br></pre></td></tr></table></figure><p>将<code>JLabel</code>添加到<code>JFrame</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.getContentPane().add(jLabel);</span><br></pre></td></tr></table></figure><p><font color='red'>注意</font>：</p><p>在初始化JFrame中，需要放入以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取消默认的居中放置，只有取消了才会按照XY轴的形式添加组件</span></span><br><span class="line"><span class="built_in">this</span>.setLayout(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initImage</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 获取当前要加载的图片序号</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> data[i][j];</span><br><span class="line">            <span class="comment">// 创建一个JLabel的对象（管理容器）</span></span><br><span class="line">            <span class="type">JLabel</span> <span class="variable">jLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="keyword">new</span> <span class="title class_">ImageIcon</span>(<span class="string">&quot;C://&quot;</span> + num + <span class="string">&quot;.jpg&quot;</span>));</span><br><span class="line">            <span class="comment">// 指定图片位置</span></span><br><span class="line">            jLabel.setBounds(<span class="number">105</span> * i,<span class="number">105</span>*j,<span class="number">105</span>,<span class="number">105</span>);</span><br><span class="line">            <span class="comment">// 将容器添加到界面中</span></span><br><span class="line">            <span class="comment">// this.add(jLabel);</span></span><br><span class="line">            <span class="built_in">this</span>.getContentPane().add(jLabel);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul><li>事件源：按钮、图片、窗体…</li><li>事件：某些操作。如：鼠标单击、鼠标划入…</li><li>绑定监听：当事件源上发生了某个事件，则执行某段代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">键盘监听：KeyListener</span><br><span class="line">鼠标监听：MouseListener</span><br><span class="line">动作监听：ActionListener</span><br></pre></td></tr></table></figure><p>​</p><h3 id="JButton"><a href="#JButton" class="headerlink" title="JButton"></a>JButton</h3><p>创建<code>JButton</code>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JButton</span> <span class="variable">jbtn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(String s);<span class="comment">// 按钮内的文字</span></span><br></pre></td></tr></table></figure><p>设置位置、大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jbtn.setBounds(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> width,<span class="type">int</span> height);</span><br></pre></td></tr></table></figure><h3 id="ActionListener"><a href="#ActionListener" class="headerlink" title="ActionListener"></a>ActionListener</h3><p>给 <code>JButton</code> 添加 <code>ActionListener</code></p><p> 第一种：</p><p>使用接口创建实现类，再将实现类添加到ActionListener中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyActionLisntener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;按钮被点击了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jbtn.addActionListener(<span class="keyword">new</span> <span class="title class_">MyActionLisntener</span>());</span><br></pre></td></tr></table></figure><p>第二种：</p><p>利用匿名内部类直接重写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jbtn.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;匿名内部类哦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>第三种（多个按钮）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JframeButton</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line"><span class="type">JButton</span> <span class="variable">btn1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;AButton&quot;</span>);</span><br><span class="line">    <span class="type">JButton</span> <span class="variable">btn2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;BButton&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">JframeButton</span><span class="params">()</span> &#123;</span><br><span class="line">...</span><br><span class="line">        btn1.setBounds(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">50</span>);</span><br><span class="line">        <span class="comment">// 这里的this代表传入本类对象，即btn1</span></span><br><span class="line">        btn1.addActionListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        btn2.setBounds(<span class="number">200</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">50</span>);</span><br><span class="line">        <span class="comment">// 这里的this代表传入本类对象，即btn2</span></span><br><span class="line">        btn2.addActionListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.getContentPane().add(btn1);</span><br><span class="line">        <span class="built_in">this</span>.getContentPane().add(btn2);</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">source</span> <span class="operator">=</span> e.getSource();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (source == btn1) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我是第一个按钮&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (source == btn2) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我是第二个按钮&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MouseListener"><a href="#MouseListener" class="headerlink" title="MouseListener"></a>MouseListener</h3><p>使用方法和ActionListener差不多，这里只举一种例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMouseListener</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">MouseListener</span> &#123;</span><br><span class="line">    <span class="type">JButton</span> <span class="variable">btn1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyMouseListener</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">jfm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>();</span><br><span class="line">        jfm.setSize(<span class="number">600</span>,<span class="number">500</span>);</span><br><span class="line">        jfm.setAlwaysOnTop(<span class="literal">true</span>);</span><br><span class="line">        jfm.setDefaultCloseOperation(<span class="number">3</span>);</span><br><span class="line">        jfm.setLayout(<span class="literal">null</span>);</span><br><span class="line">        jfm.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        btn1.setBounds(<span class="number">10</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        btn1.addMouseListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        jfm.getContentPane().add(btn1);</span><br><span class="line"></span><br><span class="line">        jfm.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseClicked</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">source</span> <span class="operator">=</span> e.getSource();</span><br><span class="line">        <span class="keyword">if</span> (source == btn1) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;按下&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mousePressed</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;按住&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseReleased</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;松开&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseEntered</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;鼠标划入&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseExited</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;鼠标离开&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>mouseClicked(MouseEvent e)</td><td>在组件上单击（按下并释放）鼠标按钮时调用</td></tr><tr><td>mouseEntered(MouseEvent e)</td><td>当鼠标进入组件时调用</td></tr><tr><td>mouseExited(MouseEvent e)</td><td>当鼠标退出组件时调用</td></tr><tr><td>mousePressed(MouseEvent e)</td><td>在组件上按下鼠标按钮时调用</td></tr><tr><td>mouseReleased(MouseEvent e)</td><td>在组件上释放鼠标按钮时调用</td></tr></tbody></table><h3 id="KeyListener"><a href="#KeyListener" class="headerlink" title="KeyListener"></a>KeyListener</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyKeyListener</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">KeyListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyKeyListener</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">603</span>,<span class="number">680</span>);</span><br><span class="line">        <span class="built_in">this</span>.setTitle(<span class="string">&quot;测试按键&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.setAlwaysOnTop(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line">        <span class="built_in">this</span>.setAlwaysOnTop(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(<span class="number">3</span>);</span><br><span class="line">        <span class="built_in">this</span>.setLayout(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.addKeyListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyTyped</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyPressed</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;按下不松&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyReleased</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;按下且释放&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取按键编号</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> e.getKeyCode();</span><br><span class="line">        System.out.println(code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>keyPressed(KeyEvent e)</td><td>按下键时调用</td></tr><tr><td>keyReleased(KeyEvent e)</td><td>当键被释放时调用</td></tr><tr><td>keyTyped(KeyEvent e)</td><td>键入键时调用</td></tr></tbody></table><h1 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h1><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static int abs(int a)</td><td>获取参数绝对值</td></tr><tr><td>public static double ceil(double a)</td><td>向上取整</td></tr><tr><td>public static double floor(double a)</td><td>向下取整</td></tr><tr><td>public static int round(float a)</td><td>四舍五入</td></tr><tr><td>public static int max(int a,int b)</td><td>获取两个int值中的较大值</td></tr><tr><td>public static double pow(double a,double b)</td><td>返回a的b次幂的值</td></tr><tr><td>public static double random()</td><td>返回值为double的随机值，范围[0.0,1.0]</td></tr></tbody></table><h3 id="练习一"><a href="#练习一" class="headerlink" title="练习一"></a>练习一</h3><p>要求：判断一个数是否为质数</p><p>方法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">primeNum</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; number; i++) &#123;</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">if</span> (number % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(index);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：循环次数过多，效率太低</p><p>方法二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">primeNum</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= Math.sqrt(number); i++) &#123;</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">if</span> (number % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(index);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习二"><a href="#练习二" class="headerlink" title="练习二"></a>练习二</h3><p>水仙花数（Narcissistic number）也被称为<a href="https://baike.baidu.com/item/%E8%B6%85%E5%AE%8C%E5%85%A8%E6%95%B0%E5%AD%97%E4%B8%8D%E5%8F%98%E6%95%B0/2495144?fromModule=lemma_inlink">超完全数字不变数</a>（pluperfect digital invariant, PPDI）、<a href="https://baike.baidu.com/item/%E8%87%AA%E6%81%8B%E6%95%B0/8319599?fromModule=lemma_inlink">自恋数</a>、<a href="https://baike.baidu.com/item/%E8%87%AA%E5%B9%82%E6%95%B0/4397236?fromModule=lemma_inlink">自幂数</a>、阿姆斯壮数或<a href="https://baike.baidu.com/item/%E9%98%BF%E5%A7%86%E6%96%AF%E7%89%B9%E6%9C%97%E6%95%B0/7070382?fromModule=lemma_inlink">阿姆斯特朗数</a>（Armstrong number），水仙花数是指一个 3 位数，它的每个数位上的数字的 3次幂之和等于它本身。例如：1^3 + 5^3+ 3^3 &#x3D; 153。</p><p>水仙花数只是<a href="https://baike.baidu.com/item/%E8%87%AA%E5%B9%82%E6%95%B0/0?fromModule=lemma_inlink">自幂数</a>的一种，严格来说3位数的3次<a href="https://baike.baidu.com/item/%E5%B9%82%E6%95%B0/231637?fromModule=lemma_inlink">幂数</a>才称为水仙花数。</p><p>附：其他位数的自幂数名字</p><p>一位自幂数：<a href="https://baike.baidu.com/item/%E7%8B%AC%E8%BA%AB%E6%95%B0/13019786?fromModule=lemma_inlink">独身数</a></p><p>三位自幂数：水仙花数</p><p>四位自幂数：<a href="https://baike.baidu.com/item/%E5%9B%9B%E5%8F%B6%E7%8E%AB%E7%91%B0%E6%95%B0/13019609?fromModule=lemma_inlink">四叶玫瑰数</a></p><p>五位自幂数：<a href="https://baike.baidu.com/item/%E4%BA%94%E8%A7%92%E6%98%9F%E6%95%B0/13019763?fromModule=lemma_inlink">五角星数</a></p><p>六位自幂数：<a href="https://baike.baidu.com/item/%E5%85%AD%E5%90%88%E6%95%B0/13019768?fromModule=lemma_inlink">六合数</a></p><p>七位自幂数：<a href="https://baike.baidu.com/item/%E5%8C%97%E6%96%97%E4%B8%83%E6%98%9F%E6%95%B0/13019769?fromModule=lemma_inlink">北斗七星数</a></p><p>八位自幂数：<a href="https://baike.baidu.com/item/%E5%85%AB%E4%BB%99%E6%95%B0/13019781?fromModule=lemma_inlink">八仙数</a></p><p>九位自幂数：<a href="https://baike.baidu.com/item/%E4%B9%9D%E4%B9%9D%E9%87%8D%E9%98%B3%E6%95%B0/13019774?fromModule=lemma_inlink">九九重阳数</a></p><p>十位自幂数：<a href="https://baike.baidu.com/item/%E5%8D%81%E5%85%A8%E5%8D%81%E7%BE%8E%E6%95%B0/13019780?fromModule=lemma_inlink">十全十美数</a></p><p>要求：一共有多少个水仙花数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>; i &lt;= <span class="number">999</span>; i++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> i % <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span> i / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span> i / <span class="number">100</span> % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> Math.pow(ge,<span class="number">3</span>) + Math.pow(shi,<span class="number">3</span>) + Math.pow(bai,<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> (sum == i) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><p>System也是一个工具类，提供了一些与系统相关的方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static void exit(int status)</td><td>终止当前运行的 Java 虚拟机</td></tr><tr><td>public static long currentTimeMillies()</td><td>返回当前系统的事件毫秒值形式</td></tr><tr><td>public static void arraycopy(数据源数组,起始索引,目的地数组,起始索引,拷贝个数)</td><td>数组拷贝</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.exit(<span class="number">0</span>) <span class="comment">// 虚拟机正常终止</span></span><br><span class="line">System.out.println(<span class="string">&quot;我不会被打印出来&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> System.currentTimeMillies();</span><br><span class="line">System.out.println(l)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 arr1 数组的0索引上开始复制到 arr2 数组的0索引中，总共复制 10 个数</span></span><br><span class="line">System.arraycopy(arr1,<span class="number">0</span>,arr2,<span class="number">0</span>,<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h2 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h2><p>Runtime表示当前虚拟机的运行环境</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static Runtime getRuntime()</td><td>当前系统的运行环境对象</td></tr><tr><td>public void exit(int status)</td><td>停止虚拟机</td></tr><tr><td>public int availableProcessors()</td><td>获取CPU的线程数</td></tr><tr><td>public long maxMemory()</td><td>JVM能从系统中获取总内存大小（单位byte）</td></tr><tr><td>public long totalMemory()</td><td>JVM已经从系统中获取总内存大小（单位byte）</td></tr><tr><td>public long freeMemory()</td><td>JVM剩余内存大小（单位byte）</td></tr><tr><td>public Process exec(String Name)</td><td>运行CMD命令</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Runtime r1 = Runtime.getRuntime();</span></span><br><span class="line"><span class="comment">Runtime r2 = Runtime.getRuntime();</span></span><br><span class="line"><span class="comment">System.out.println(r1 == r2);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止虚拟机</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Runtime.getRuntime().exit(0);</span></span><br><span class="line"><span class="comment">System.out.println(&quot;我不会被打印&quot;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CPU线程数</span></span><br><span class="line">System.out.println(Runtime.getRuntime().availableProcessors());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 总内存大小</span></span><br><span class="line">System.out.println(Runtime.getRuntime().maxMemory() / <span class="number">1024</span> / <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 已经获取的总内存大小</span></span><br><span class="line">System.out.println(Runtime.getRuntime().totalMemory() / <span class="number">1024</span> / <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 剩余内存大小</span></span><br><span class="line">System.out.println(Runtime.getRuntime().freeMemory() / <span class="number">1024</span> / <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 cmd 命令</span></span><br><span class="line">System.out.println(Runtime.getRuntime().exec(<span class="string">&quot;notepad&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><ul><li><code>Object</code> 是java中的顶级父类。所有的类都直接或间接的继承于Object类</li><li><code>Object</code> 类中的方法可以被所有子类访问，所以要学习Object类和其中的方法</li></ul><h3 id="Object的构造方法"><a href="#Object的构造方法" class="headerlink" title="Object的构造方法"></a>Object的构造方法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public Object()</td><td>空参构造</td></tr></tbody></table><h3 id="Object的成员方法"><a href="#Object的成员方法" class="headerlink" title="Object的成员方法"></a>Object的成员方法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public String toString()</td><td>返回对象的字符串表示形式</td></tr><tr><td>public boolean equals(Obejct obj)</td><td>比较两个对象是否相等</td></tr><tr><td>protected Object clone(int a)</td><td>对象克隆</td></tr></tbody></table><p>查看数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sflag</span> <span class="operator">=</span> obj.toString();</span><br><span class="line">System.out.println(flag.getClass());    <span class="comment">// class java.lang.Boolean</span></span><br><span class="line">System.out.println(sflag.getClass());   <span class="comment">// class java.lang.String</span></span><br></pre></td></tr></table></figure><p>toString</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OpenJDK7 java.lang.Object类toString()源码</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是代表调用toString时，会返回类名 + 对象的内存地址</p><p>如果不想打印对象地址，只打印对象中的属性，那么需要在类中重写 toString()</p><p>IDEA可以直接生成如下结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>toString方法在很多地方都会被调用</p><ul><li><p>当你print一个对象的时候，会<font color='red'>自动调用toString方法</font>。</p></li><li><p>当你print一个collection的时候，其内部所持有的每个对象都会被分别调用toString方法。</p></li><li><p>当你在开发环境调用debugger看类实例的时候，大部分debugger都会调用实例的toString方法为你显示其内部的信息。（例1）</p></li><li><p>当你把一个对象写到log文件里的时候，会自动调用toString方法。</p></li><li><p>当你用断言（Assert）检查两个实例是否相同时，会自动调用toString方法。</p></li></ul><p>对象对比</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写equals，使对象的属性之间做对比</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != student.age) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(name, student.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> name != <span class="literal">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">result</span> <span class="operator">=</span> s1.equals(s2);</span><br><span class="line">System.out.println(result); <span class="comment">// 直接输出为 false，这是因为对比的是地址值，正确的对比需要重写equals</span></span><br></pre></td></tr></table></figure><p>克隆对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] data;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;角色编号为：&quot;</span> + id + <span class="string">&quot;，用户名：&quot;</span> + username + <span class="string">&quot;，密码：&quot;</span> + password + <span class="string">&quot;，data：&quot;</span> + ArrtoString(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">ArrtoString</span><span class="params">(<span class="type">int</span>[] data)</span> &#123;</span><br><span class="line">        <span class="type">StringJoiner</span> <span class="variable">sj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;，&quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            sj.add(data[i] + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sj.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由于clone在Object中是受保护的，需要重写才可以使用</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="comment">// 调用父类的clone方法</span></span><br><span class="line">        <span class="comment">// 相当于让Java帮我们克隆一个对象，并把克隆之后的对象返回出去</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] data = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>,<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;qwe123456&quot;</span>,data);</span><br><span class="line"><span class="comment">// 克隆对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> (User) u1.clone();</span><br><span class="line">System.out.println(u1);</span><br><span class="line">System.out.println(u2);</span><br></pre></td></tr></table></figure><p>浅拷贝：</p><ol><li>拷贝对象属性的地址值，假设 B 拷贝了 A，如果A改变了，B查看属性时也会是改变后的属性</li></ol><p>深拷贝：</p><ol><li>拷贝对象属性值时会重新分配地址（<font color='red'>引用数据类型重新分配</font>，基本数据类型不会，字符串复用）</li></ol><p>Object clone默认为浅克隆，需要深克隆的话需要重写方法或使用第三方工具类</p><h3 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h3><p>Objects是一个工具类，提供了一些方法去完成一些功能</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static boolean equals(Object a,Object b)</td><td>先做非空判断，比较两个对象</td></tr><tr><td>public static boolean isNull(Object obj)</td><td>判断对象是否为Null，为Null返回true，反之</td></tr><tr><td>public static boolean nonNull(Object obj)</td><td>判断对象是否为Null，跟isNull的结果相反</td></tr></tbody></table><h2 id="BigInteger和BigDecimal"><a href="#BigInteger和BigDecimal" class="headerlink" title="BigInteger和BigDecimal"></a>BigInteger和BigDecimal</h2><p>在Java中，整数有四种类型：byte、short、int、long</p><p>在底层占用的字节个数：byte1个字节、short2个字节、int4个字节、long8个字节</p><h3 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h3><p>BigInteger 理论上存储的数字是有限制的，但是实际中，没有内存可以存储它的上限，所以可以把它看作的无上限的</p><h4 id="BigInteger构造方法"><a href="#BigInteger构造方法" class="headerlink" title="BigInteger构造方法"></a>BigInteger构造方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public BigInteger(int num,Random rnd)</td><td>获取随机大整数，范围：[0~2的num次方-1]</td></tr><tr><td>public BigInteger(String val)</td><td>获取指定大整数（字符串只能写整数）</td></tr><tr><td>public BigInteger(String val,int radix)</td><td>获取指定进制的大整数（radix：进制）</td></tr></tbody></table><p>静态方法创建：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static BigInteger valueOf(long val)</td><td>静态方法获取BigInteger的对象，内部有优化</td></tr></tbody></table><ol><li>能表示范围比较小，只能在Long的取值范围之内</li><li>对内部常用数进行了优化（-16~16）</li></ol><h4 id="BigInteger常见方法"><a href="#BigInteger常见方法" class="headerlink" title="BigInteger常见方法"></a>BigInteger常见方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public BigInteger add(BigIntger val)</td><td>加法</td></tr><tr><td>public BigInteger subtract(BigInteger val)</td><td>减法</td></tr><tr><td>public BigInteger multiply(BigInteger val)</td><td>乘法</td></tr><tr><td>public BigInteger divide(BigInteger val)</td><td>除法，获取商</td></tr><tr><td>public BigInteger[] divideAndRemainder</td><td>除法，获取商和余数</td></tr><tr><td>public boolean equals(Object x)</td><td>比较是否相同</td></tr><tr><td>public BigInteger pow(int exponent)</td><td>次幂</td></tr><tr><td>public BigInteger max&#x2F;min(BigInteger val)</td><td>返回较大值&#x2F;较小值</td></tr><tr><td>public int intValue(BigInteger val)</td><td>转换为int类型整数，超出数据范围则报错</td></tr></tbody></table><h3 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h3><ul><li>用于小数的精确计算</li><li>用来表示很大的小数</li></ul><h4 id="BigDecimal构造方法"><a href="#BigDecimal构造方法" class="headerlink" title="BigDecimal构造方法"></a>BigDecimal构造方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public BigDecimal(double val)</td><td>获取指定小数（不建议使用，小数会不精确）</td></tr><tr><td>public BigDecimal(String val)</td><td>获取指定小数（字符串只能写小数）</td></tr></tbody></table><p>静态方法：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static BigDecimal valueOf(double val)</td><td>静态方法获取BigDecimal对象，也带有优化</td></tr></tbody></table><p>如果要表示的数字不大，没有超过double的取值范围，建议使用静态方法</p><p>如果要表示的数字比较大，超过了double的取值范围，建议使用<code>public BigDecimal(String val)</code></p><p>在静态方法中，如果传递的是0~10之间的整数，包含10，那么方法会返回已经创建好的对象，不会重新new一个BigDecimal对象</p><h4 id="BigDecimal常见方法"><a href="#BigDecimal常见方法" class="headerlink" title="BigDecimal常见方法"></a>BigDecimal常见方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public BigDecimal add(BigDecimal val)</td><td>加法</td></tr><tr><td>public BigDecimal subtract(BigDecimal val)</td><td>减法</td></tr><tr><td>public BigDecimal multiply(BigDecimal val)</td><td>乘法</td></tr><tr><td>public BigDecimal divide(BigDecimal val)</td><td>除法</td></tr><tr><td>public BigDecimal divide(BigDecimal val, 精确几位, 舍入模式)</td><td>除法</td></tr></tbody></table><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式可以校验字符串是否满足一定的规则，并用来校验数据格式的合法性</p><p>需求：假如现在要求校验一个QQ号码是否正确</p><p>规则：6位及20位之间，0不能在开头，必须全是数字</p><p>字符类（只匹配一个字符）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[abc] 只能是a,b,c</span><br><span class="line">[^abc] 除了a,b,c之外的任何字符</span><br><span class="line">[a-zA-Z] a到z A到Z，包括（范围）</span><br><span class="line">[a-d[m-p]] a到d，或m到p</span><br><span class="line">[a-z&amp;&amp;[def]] a-z到def的交集。即：d，e，f</span><br><span class="line">[a-z&amp;&amp;[^bc]] a-z和非bc的交集。即：[ad-z]</span><br><span class="line">[a-z&amp;&amp;[^m-p]] a到z和除了m到p的交集。即：[a-lq-z]</span><br></pre></td></tr></table></figure><p>预定义字符（只匹配一个字符）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">. 任意字符</span><br><span class="line">\d 一个数字：[0-9]</span><br><span class="line">\D 非数字：[^0-9]</span><br><span class="line">\s 一个空白字符：[\t\n\x0B\f\r]</span><br><span class="line">\S 非空字符：[^\s]</span><br><span class="line">\w 英文、数字、下划线：[a-zA-z_0-9]</span><br><span class="line">\W [^\w] 一个非单词字符</span><br></pre></td></tr></table></figure><p>数量词</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x?x，一次或0次</span><br><span class="line">x*x，零次或多次</span><br><span class="line">x+x，一次或多次</span><br><span class="line">x&#123;n&#125; x，正好n次</span><br><span class="line">x&#123;n,&#125; x,至少n次</span><br><span class="line">x&#123;n,m&#125; x,至少n但不超过m次</span><br></pre></td></tr></table></figure><h3 id="正则表达式的作用"><a href="#正则表达式的作用" class="headerlink" title="正则表达式的作用"></a>正则表达式的作用</h3><p>作用1：校验字符串是否满足规则</p><p>作用2：在一段文本中查找满足要求的内容（本地爬虫、网络爬虫）</p><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><p>Pattern：表示正则表达式</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">有如下文本，请按照要求爬取数据</span></span><br><span class="line"><span class="comment">Java自从95年问世以来，经历了很多版本，目前企业中用的最多的是 Java8 和 Java11，</span></span><br><span class="line"><span class="comment">因为这两个是长期支持版本，下一个长期支持版本是 Java17，相信在未来不久 Java17 也会逐渐登上历史舞台</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">要求：找出里面所有的 JavaXX</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Java自从95年问世以来，经历了很多版本，目前企业中用的最多的是Java8和Java11，&quot;</span> +</span><br><span class="line">        <span class="string">&quot;因为这两个是长期支持版本，下一个长期支持版本是Java17，相信在未来不久Java17 也会逐渐登上历史舞台&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pattern 表示正则表达式</span></span><br><span class="line"><span class="comment">// Matcher 文本匹配器，作用按照正则表达式的规则去读取字符串，从头开始读取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取正则表达式的对象</span></span><br><span class="line"><span class="comment">// Pattern p = Pattern.compile(&quot;Java\\d&#123;0,2&#125;&quot;);</span></span><br><span class="line"><span class="comment">// Matcher m = p.matcher(str);</span></span><br><span class="line"><span class="comment">// 代码解释：m要在str中查找符合p规则的字符小串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// boolean b = m.find();</span></span><br><span class="line"><span class="comment">// 拿着文本匹配器从头开始读取，寻找是否有满足规则的字串</span></span><br><span class="line"><span class="comment">// 如果没有，返回false，如果有返回true，在底层记录子串的 起始索引 和 结束索引+1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法底层会根据find方法记录的索引进行字符串的截取</span></span><br><span class="line"><span class="comment">// subString(起始索引, 结束索引); 包头不包尾，所以结束索引会+1</span></span><br><span class="line"><span class="comment">// String s1 = m.group();</span></span><br><span class="line"><span class="comment">// System.out.println(s1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二次在调用find的时候，会继续读取后面的内容</span></span><br><span class="line"><span class="comment">// 读取到第二个满足要求的子串，方法会继续返回true</span></span><br><span class="line"><span class="comment">// 并把第二个字串的起始索引和结束索引+1，进行记录</span></span><br><span class="line"><span class="comment">// b = m.find();</span></span><br><span class="line"><span class="comment">// String s2 = m.group();</span></span><br><span class="line"><span class="comment">// System.out.println(s2);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 规范写法：</span></span><br><span class="line"><span class="comment">// 1. 获取正则表达式的对象</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;Java\\d&#123;0,2&#125;&quot;</span>);</span><br><span class="line"><span class="comment">// 2. 获取文本匹配器的对象</span></span><br><span class="line"><span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 利用循环获取</span></span><br><span class="line"><span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> m.group();</span><br><span class="line">    System.out.println(res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="带条件的爬取数据"><a href="#带条件的爬取数据" class="headerlink" title="带条件的爬取数据"></a>带条件的爬取数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Java自从95年问世以来，经历了很多版本，目前企业中用的最多的是Java8和Java11，&quot;</span> +</span><br><span class="line">                <span class="string">&quot;因为这两个是长期支持版本，下一个长期支持版本是Java17，相信在未来不久Java17 也会逐渐登上历史舞台&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 不显示版本号,只要java</span></span><br><span class="line">        <span class="comment">// ? 理解为前面的数据 Java</span></span><br><span class="line">        <span class="comment">// = 表示在Java后面要跟随的数据</span></span><br><span class="line">        <span class="comment">// 但是在获取的时候，只获取前半部分</span></span><br><span class="line"><span class="comment">//        String regex = &quot;Java(?=8|11|17)&quot;;</span></span><br><span class="line"><span class="comment">//        Pattern p = Pattern.compile(regex);</span></span><br><span class="line"><span class="comment">//        Matcher m = p.matcher(str);</span></span><br><span class="line"><span class="comment">//        while (m.find()) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(m.group());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 显示版本号</span></span><br><span class="line"><span class="comment">//        String regex = &quot;Java(8|11|17)&quot;;</span></span><br><span class="line"><span class="comment">//        Pattern p = Pattern.compile(regex);</span></span><br><span class="line"><span class="comment">//        Matcher m = p.matcher(str);</span></span><br><span class="line"><span class="comment">//        while (m.find()) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(m.group());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 爬取版本号位 8,11,17 的Java</span></span><br><span class="line"><span class="comment">//        String regex = &quot;Java(8|11|17)&quot;;</span></span><br><span class="line"><span class="comment">//        Pattern p = Pattern.compile(regex);</span></span><br><span class="line"><span class="comment">//        Matcher m = p.matcher(str);</span></span><br><span class="line"><span class="comment">//        while (m.find()) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(m.group());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br></pre></td></tr></table></figure><h4 id="贪婪爬起和非贪婪爬取"><a href="#贪婪爬起和非贪婪爬取" class="headerlink" title="贪婪爬起和非贪婪爬取"></a>贪婪爬起和非贪婪爬取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Java自从95年问世以来，abbbbbbbbbbbaaaaaaaaaaaaa经历了很多版本，目前企业中用的最多的是Java8和Java11，&quot;</span> + <span class="string">&quot;因为这两个是长期支持版本，下一个长期支持版本是Java17，相信在未来不久Java17 也会逐渐登上历史舞台&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只写+和*表示贪婪匹配，</span></span><br><span class="line"><span class="comment">// +? 非贪婪匹配</span></span><br><span class="line"><span class="comment">// *? 非贪婪匹配</span></span><br><span class="line"><span class="comment">// Java中默认的是贪婪爬取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 按照ab+的方式爬取ab，b尽可能多获取</span></span><br><span class="line"><span class="comment">// String regex = &quot;ab+&quot;;</span></span><br><span class="line"><span class="comment">// Pattern p = Pattern.compile(regex);</span></span><br><span class="line"><span class="comment">// Matcher m = p.matcher(str);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// while (m.find()) &#123;</span></span><br><span class="line"><span class="comment">// System.out.println( m.group());</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 按照ab+的方式爬取ab，b尽可能少获取</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;ab+?&quot;</span>;</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">System.out.println( m.group());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正则表达式——字符串"><a href="#正则表达式——字符串" class="headerlink" title="正则表达式——字符串"></a>正则表达式——字符串</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public String[] matches(String regex)</td><td>判断字符串是否满足正则表达式规则</td></tr><tr><td>public String[] replaceAll(String regex,String newStr)</td><td>按照正则表达式的规则进行替换</td></tr><tr><td>public String[] split(String regex)</td><td>按照正则表达式的规则切割字符串</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;张三三qweasdzxc123李四四poilkjmnb098王五五&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> s.replaceAll(<span class="string">&quot;[\\w&amp;&amp;[^_]]+&quot;</span>,<span class="string">&quot;vs&quot;</span>);</span><br><span class="line">System.out.println(res);</span><br><span class="line"></span><br><span class="line">String[] arr = s.split(<span class="string">&quot;[\\w&amp;&amp;[^_]]+&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>分组就是一个小括号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String regex1 = &quot;\\w+@[\\w&amp;&amp;[^_]]&#123;2,6&#125;(\\.[a-zA-Z]&#123;2,3&#125;)&quot;</span><br></pre></td></tr></table></figure><p>每组是有组号的，也就是序号</p><p>规则1：从1开始，连续不间断</p><p>规则2：从左括号为基准，最左边的是第一组，其次为第二组，以此类推</p><h4 id="捕获分组"><a href="#捕获分组" class="headerlink" title="捕获分组"></a>捕获分组</h4><p>捕获分组就是把这一组的数据捕获出来，再用一次</p><p>正则表达式内部：<code>\\组号</code></p><p>正则表达式外部：<code>$组号</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断一个字符串的开始字符和结束字符是否一致</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;(.).+\\1&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;a123a&quot;</span>.matches(regex));</span><br><span class="line">System.out.println(<span class="string">&quot;a121a&quot;</span>.matches(regex));</span><br><span class="line">System.out.println(<span class="string">&quot;b121a&quot;</span>.matches(regex));</span><br><span class="line">System.out.println(<span class="string">&quot;a123b&quot;</span>.matches(regex));</span><br><span class="line">System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将重复内容替换为单个</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;我要学学编编编编程程程程程程&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> s.replaceAll(<span class="string">&quot;(.)\\1+&quot;</span>,<span class="string">&quot;$1&quot;</span>);</span><br><span class="line">System.out.println(res);</span><br></pre></td></tr></table></figure><h4 id="非捕获分组"><a href="#非捕获分组" class="headerlink" title="非捕获分组"></a>非捕获分组</h4><p>分组之后不需要再用本组数据，仅仅是把数据括起来</p><p>特点：不占用组号</p><table><thead><tr><th>符号</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td>(?:正则)</td><td>获取所有</td><td>Java(?:8|11|17)</td></tr><tr><td>(?&#x3D;正则)</td><td>获取前面部分</td><td>Java(?&#x3D;8|11|17)</td></tr><tr><td>(?!正则)</td><td>获取不是指定内容的前面部分</td><td>Java(?!8|11|17)</td></tr></tbody></table><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>全时间的时间，有一个统一的计算标准</p><p><code>格林尼治时间/格林威治时间（Greenwich Mean Time）简称GMT</code></p><p>计算核心：地球自转一天是24小时，太阳直射时为正午12点</p><p>缺点：误差过大</p><p>原子钟：利用铯原子的震动的频率计算出来的时间，作为世界标准时间（UTC）</p><p>中国标准时间：世界标准时间 + 8小时</p><p>时间换算单位：</p><ul><li>1秒 &#x3D; 1000毫秒</li><li>1毫秒 &#x3D; 1000微妙</li><li>1微妙 &#x3D; 1000纳秒</li></ul><h3 id="Date时间类"><a href="#Date时间类" class="headerlink" title="Date时间类"></a>Date时间类</h3><p>Date类是一个JDK写好的Javabean类，用来描述时间，精确到毫秒。</p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>public Date()</td><td>创建Date对象，表示当前时间</td></tr><tr><td>public Date(long time)</td><td>创建Date对象，表示指定时间</td></tr><tr><td>public void setTime(long time)</td><td>设置&#x2F;修改毫秒值</td></tr><tr><td>public long getTime()</td><td>获取时间对象的毫秒值</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">System.out.println(d1);</span><br><span class="line"></span><br><span class="line"><span class="type">Date</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">0L</span>);</span><br><span class="line">System.out.println(d2);</span><br><span class="line"></span><br><span class="line">d2.setTime(<span class="number">1000L</span>);</span><br><span class="line">System.out.println(d2);</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> d2.getTime();</span><br><span class="line">System.out.println(time);</span><br></pre></td></tr></table></figure><h3 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h3><p>作用：</p><ul><li>格式化：把时间变成喜欢的格式</li><li>解析：把字符串表示的时间变成Date对象</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public SimpleDateFormat()</td><td>构造一个SimpleDateFormat，使用默认格式</td></tr><tr><td>public SimpleDateFormat(String pattern)</td><td>构造一个SimpleDateFormat，使用指定格式</td></tr><tr><td>public final String format(Date date)</td><td>格式化（日期对象 -&gt; 字符串）</td></tr><tr><td>public Date parse(String source)</td><td>解析（字符串 -&gt; 日期对象）</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">y 年M 月 d 日</span><br><span class="line">H 时 m 分 s 秒</span><br><span class="line"></span><br><span class="line">2025-06-15 23:42:10</span><br><span class="line">yyyy-MM-dd HH:mm:ss</span><br><span class="line"></span><br><span class="line">2025年06月15日 23:42:10</span><br><span class="line">yyyy年MM月dd日 HH:mm:ss</span><br></pre></td></tr></table></figure><h3 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h3><ul><li>Calendar 代表了系统当前时间的日历对象，可以单独修改、获取时间中的年、月、日</li><li>细节：Calendar 是一个抽象类，不能直接创建对象</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static Calendar getInstance()</td><td>获取当前时间的日历对象</td></tr><tr><td>public final Date getTime()</td><td>获取日期对象</td></tr><tr><td>public final setTime(Date date)</td><td>给日历设置日历对象</td></tr><tr><td>public long getTimeInMillies()</td><td>拿到时间毫秒值</td></tr><tr><td>public void setTimeInMillies()</td><td>给日历设置时间毫秒值</td></tr><tr><td>public int get(int field)</td><td>取日历中的某个字段信息</td></tr><tr><td>public void set(int field,int value)</td><td>修改日历的某个字段信息</td></tr><tr><td>public void add(int field,int amount)</td><td>为某个字段增加&#x2F;减少指定的值</td></tr></tbody></table><h3 id="JDK8新增时间类"><a href="#JDK8新增时间类" class="headerlink" title="JDK8新增时间类"></a>JDK8新增时间类</h3><p>代码层面：</p><ul><li>JDK7：代码麻烦</li><li>JDK8：简单</li></ul><p>安全层面：</p><ul><li>JDK7：多线程环境下会导致数据安全的问题</li><li>JDK8：时间日期对象都是不可变的，解决了这个问题</li></ul><table><thead><tr><th>ZoneId</th><th>时区</th></tr></thead><tbody><tr><td>Instant</td><td>时间戳</td></tr><tr><td>ZoneDateTime</td><td>带时区的时间</td></tr><tr><td>DateTimeFormatter</td><td>用于时间的格式化和解析</td></tr><tr><td>LocalDate</td><td>年月日</td></tr><tr><td>LocalTime</td><td>时分秒</td></tr><tr><td>LocalDateTime</td><td>年月日时分秒</td></tr><tr><td>Duration</td><td>时间间隔（秒。纳秒）</td></tr><tr><td>Period</td><td>时间间隔（年月日）</td></tr><tr><td>ChronoUnit</td><td>时间间隔（所有单位）</td></tr></tbody></table><h2 id="包装类-1"><a href="#包装类-1" class="headerlink" title="包装类"></a>包装类</h2><p>包装类：基本数据类型对应的引用类型</p><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用构造方法获取Integer（JDK5以前的方式）</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用静态方法获取Integer（JDK5以前的方式）</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> Integer.valueOf(<span class="number">2</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> Integer.valueOf(<span class="string">&quot;525&quot;</span>,<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(i2);</span><br><span class="line">System.out.println(i3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这两种方式获取对象的区别</span></span><br><span class="line"><span class="comment">// 和之前学习到的BigInteger一样，内部进行优化，127~-128 提前创建对象，不会重复创建新的对象</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> Integer.valueOf(<span class="number">127</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i5</span> <span class="operator">=</span> Integer.valueOf(<span class="number">127</span>);</span><br><span class="line">System.out.println(i4 == i5);   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i6</span> <span class="operator">=</span> Integer.valueOf(<span class="number">128</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i7</span> <span class="operator">=</span> Integer.valueOf(<span class="number">128</span>);</span><br><span class="line">System.out.println(i6 == i7);   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为有new关键字，在Java中，每一次new都是创建了一个新的对象</span></span><br><span class="line"><span class="comment">// 所以下面的两个对象都是new出来的，地址值不一样</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">127</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i9</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">127</span>);</span><br><span class="line">System.out.println(i8 == i9);   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">128</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">128</span>);</span><br><span class="line">System.out.println(i10 == i11); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="自动装箱-自动拆箱"><a href="#自动装箱-自动拆箱" class="headerlink" title="自动装箱&#x2F;自动拆箱"></a>自动装箱&#x2F;自动拆箱</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在以前包装类的计算方式</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对 i1 与 i2 进行相加操作</span></span><br><span class="line"><span class="comment">// 1. 把对象进行拆箱，变成基本数据类型</span></span><br><span class="line"><span class="comment">// 2. 相加</span></span><br><span class="line"><span class="comment">// 3. 把得到的结果再次进行装箱（再变回包装类）</span></span><br><span class="line"><span class="comment">// int res = i1.intValue() + i2.intValue();</span></span><br><span class="line"><span class="comment">// Integer i3 = new Integer(res);</span></span><br><span class="line"><span class="comment">// System.out.println(i3);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在JDK5的时候提出了一个机制，自动装箱和自动拆箱</span></span><br><span class="line"><span class="comment">// 自动装箱：把基本数据类型会自动的变成其对应的包装类</span></span><br><span class="line"><span class="comment">// 自动拆箱：把包装类自动的变成其对象的基本数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动装箱动作</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i5</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动拆箱动作</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> i2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在JDK5以后，int和Integer可以看作是同一个东西，因为在内部可以自动转化</span></span><br></pre></td></tr></table></figure><h3 id="Integer成员方法"><a href="#Integer成员方法" class="headerlink" title="Integer成员方法"></a>Integer成员方法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static String toBinaryString(int i)</td><td>得到二进制</td></tr><tr><td>public static String toOctalString(int i)</td><td>得到八进制</td></tr><tr><td>public static String toHexString(int i)</td><td>得到十六进制</td></tr><tr><td>public static int parseInt(String s)</td><td>将字符串类型的整数转成int类型的整</td></tr></tbody></table><h1 id="集合进阶"><a href="#集合进阶" class="headerlink" title="集合进阶"></a>集合进阶</h1><h2 id="集合体系结构"><a href="#集合体系结构" class="headerlink" title="集合体系结构"></a>集合体系结构</h2><p>Collection：单列集合</p><p>单列集合：即一次只能添加一组数据</p><p>Map：双列集合</p><p>双列集合：即一次可以添加一对数据</p><pre class="mermaid">flowchart TB  Start["Collection"]  Start -->List  Start -->Set    List --> id1[(ArrayList)]  List --> id2[(LinkedList)]  List --> id3[(Vector)]    Set --> id4[(HashSet)]  Set --> id5[(TreeSet)]    id4[(HashSet)] --> id6[(LinkedHashSet)]    接口  id7[(实现类)]</pre><p>List系列集合：添加的元素是有序（存和取的顺序是一样的）、可重复、有索引</p><p>Set系列集合：添加的元素是无序、不重复、无索引</p><h2 id="单列集合Collection"><a href="#单列集合Collection" class="headerlink" title="单列集合Collection"></a>单列集合Collection</h2><p>Collection是单列集合的顶层接口，它的功能是全部单列集合都可以继承使用的</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public boolean add(E e)</td><td>把给定的对象添加到当前集合中</td></tr><tr><td>public void clear()</td><td>清空集合中所有的元素</td></tr><tr><td>public boolean remove(E e)</td><td>把给定的对象在当前集合中删除</td></tr><tr><td>public boolean contains(Object obj)</td><td>判断当前集合是否包含给定的对象</td></tr><tr><td>public boolean isEmpty()</td><td>判断当前集合是否为空</td></tr><tr><td>public int size()</td><td>返回集合中元素的个数&#x2F;集合的长度</td></tr></tbody></table><h3 id="Collection的遍历方式"><a href="#Collection的遍历方式" class="headerlink" title="Collection的遍历方式"></a>Collection的遍历方式</h3><ul><li>迭代器遍历</li><li>增强for遍历</li><li>Lambda表达式遍历</li></ul><h4 id="迭代器遍历"><a href="#迭代器遍历" class="headerlink" title="迭代器遍历"></a>迭代器遍历</h4><p>迭代器在Java中的类是Iterator，迭代器是集合专用的遍历方式</p><p>Collection集合</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>Iterator&lt;e&gt; iterator()</td><td>返回迭代器对象，默认指向当前集合的0索引</td></tr></tbody></table><p>Iterator中的常用方法</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>boolean hasNext()</td><td>判断当前位置是否有元素，有元素返回true，没有元素返回false</td></tr><tr><td>E next()</td><td>获取当前位置的元素，并将迭代器对象移向下一个位置</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;String&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">coll.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;eee&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;eee&quot;</span>);</span><br><span class="line"></span><br><span class="line">Iterator&lt;String&gt; it = coll.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">    System.out.println(it.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>细节注意点：</p><ol><li>当迭代器迭代完所有数据后，再强行调用 <code>next()</code> 方法，会报 <code>NoSuchElementExpection</code></li><li>迭代器遍历完毕，指针不会复位</li><li>循环中只能用一次 <code>next()</code> 方法</li><li>迭代器遍历时，不能用集合的方法进行增加或者删除</li></ol><h4 id="增强for遍历"><a href="#增强for遍历" class="headerlink" title="增强for遍历"></a>增强for遍历</h4><ul><li>增强for的底层就是迭代器，为了简化迭代器的代码书写的</li><li>它是JDK5之后出现的，其内部原理就是一个Iterator迭代器</li><li>所有的单列集合和数组才能用增强for进行遍历</li></ul><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (元素的数据类型 变量名:数组或者集合) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建集合并添加元素</span></span><br><span class="line">Collection&lt;String&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">coll.add(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;zhaoliu&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用增强for循环</span></span><br><span class="line"><span class="keyword">for</span> (String s : coll) &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>细节：</p><ul><li>修改增强for中的变量，不会改变集合中原本的数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String s : coll) &#123;</span><br><span class="line">s = <span class="string">&quot;qqq&quot;</span>; <span class="comment">// 并不会修改值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Lambda表达式遍历"><a href="#Lambda表达式遍历" class="headerlink" title="Lambda表达式遍历"></a>Lambda表达式遍历</h4><p>得益于JDK8开始的新技术Lambda表达式，提供了一种更简单、更直接的遍历集合的方式</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>default void forEach(Consumer&lt;? super T&gt; action)</td><td>结合lambda遍历集合</td></tr></tbody></table><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建集合并添加元素</span></span><br><span class="line">Collection&lt;String&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">coll.add(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;zhaoliu&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 利用匿名内部类的形式</span></span><br><span class="line"><span class="comment">// forEach底层原理：</span></span><br><span class="line"><span class="comment">// 也会自己遍历集合，依次得到每一个元素</span></span><br><span class="line"><span class="comment">// s依次表示集合中的每一个数据</span></span><br><span class="line">coll.forEach(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// s 依次表示集合中的每一个数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// lambda表达式</span></span><br><span class="line">coll.forEach(s -&gt; System.out.println(s));</span><br></pre></td></tr></table></figure><h4 id="选择哪种遍历方式"><a href="#选择哪种遍历方式" class="headerlink" title="选择哪种遍历方式"></a>选择哪种遍历方式</h4><ul><li>迭代器：在遍历的过程中需要删除元素，选择迭代器</li><li>仅仅遍历，可以使用增强for或lambda</li></ul><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>特点：</p><ul><li>有序：存和取的元素顺序一致</li><li>有索引：可以通过索引操作元素</li><li>可重复：存储的元素可以重复</li><li>List继承了Collection的所有方法</li><li>List因为有索引，所以多了很多索引操作的方法</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void add(int index,E element)</td><td>在此集合中的指定位置插入指定的元素</td></tr><tr><td>E remove(int index)</td><td>删除指定索引的元素，返回删除的元素</td></tr><tr><td>E set(int index,E element)</td><td>修改指定索引处的元素，返回被修改的元素</td></tr><tr><td>E get(int index)</td><td>返回指定索引处的元素</td></tr></tbody></table><h4 id="List遍历"><a href="#List遍历" class="headerlink" title="List遍历"></a>List遍历</h4><ul><li>迭代器遍历</li><li>列表迭代器遍历</li><li>增强for遍历</li><li>Lambda表达式遍历</li><li>普通for循环（因为List集合存在索引）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 迭代器</span></span><br><span class="line"><span class="comment">// Iterator&lt;String&gt; it = list.iterator();</span></span><br><span class="line"><span class="comment">// while (it.hasNext()) &#123;</span></span><br><span class="line"><span class="comment">//     System.out.println(it.next());</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 增强for</span></span><br><span class="line"><span class="comment">// for (String s : list) &#123;</span></span><br><span class="line"><span class="comment">//     System.out.println(s);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. lambda</span></span><br><span class="line"><span class="comment">// list.forEach(s -&gt; System.out.println(s));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 普通for循环</span></span><br><span class="line"><span class="comment">// for (int i = 0; i &lt; list.size(); i++) &#123;</span></span><br><span class="line"><span class="comment">//     System.out.println(list.get(i));</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 列表迭代器</span></span><br><span class="line"><span class="comment">// 获取一个列表迭代器的对象，里面的指针默认指向0索引</span></span><br><span class="line">ListIterator&lt;String&gt; it = list.listIterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">    <span class="comment">// 迭代器可以添加元素</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> it.next();</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;bbb&quot;</span>.equals(s)) &#123;</span><br><span class="line">        it.add(<span class="string">&quot;qqq&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br><span class="line"><span class="keyword">while</span> (it.hasPrevious()) &#123;</span><br><span class="line">    System.out.println(it.previous());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="选择遍历方式"><a href="#选择遍历方式" class="headerlink" title="选择遍历方式"></a>选择遍历方式</h5><p>迭代器遍历：在遍历过程中需要删除元素，使用迭代器</p><p>列表迭代器：在遍历的过程中需要添加元素，使用列表迭代器</p><p>增强for遍历：仅仅想遍历，使用增强for或Lambda遍历</p><p>Lambda遍历：仅仅想遍历，使用增强for或Lambda遍历</p><p>普通for遍历：想要操作索引，使用普通for遍历</p><h4 id="ArrayList集合底层原理"><a href="#ArrayList集合底层原理" class="headerlink" title="ArrayList集合底层原理"></a>ArrayList集合底层原理</h4><ol><li>ArrayLIst底层是数组结构</li><li>利用空参创建的集合，在底层创建一个<code>默认长度为0</code>的数组</li><li>添加第一个元素时，底层会创建一个新的长度为10的数组（数组名为elementData，变量size记录数组中元素的个数以及下一个元素存放的位置）</li><li>存满数组时，会扩容1.5倍</li><li>如果一次添加多个元素，1.5倍放不下，则新创建数组的长度以实际为准</li></ol><h4 id="LinkedList集合"><a href="#LinkedList集合" class="headerlink" title="LinkedList集合"></a>LinkedList集合</h4><ol><li>底层数据结构是双链表，查询慢，增删快，但是如果操作的是首尾元素，速度也是极快的</li><li>LinkedList本身多了很多直接操作首尾元素的特有API</li></ol><table><thead><tr><th>特有方法</th><th>说明</th></tr></thead><tbody><tr><td>public void addFirst(E e)</td><td>在该列表开头插入指定的元素</td></tr><tr><td>public void addLast(E e)</td><td>将指定的元素追加到此列表的末尾</td></tr><tr><td>public E getFirst()</td><td>返回此列表中的第一个元素</td></tr><tr><td>public E getLast()</td><td>返回此列表中的最后一个元素</td></tr><tr><td>public E removeFirst()</td><td>从此列表中删除并返回第一个元素</td></tr><tr><td>public E removeLast()</td><td>从此列表中删除并返回最后一个元素</td></tr></tbody></table><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>添加的元素是无序、不重复、无索引</p><ul><li>无序：存取顺序不一致</li><li>不重复：可以去除重复值</li><li>无索引：没有带索引的方法，所以不能使用普通for循环遍历，也不能通过索引来获取元素</li></ul><h4 id="Set集合的实现类"><a href="#Set集合的实现类" class="headerlink" title="Set集合的实现类"></a>Set集合的实现类</h4><ul><li>HashSet：无序、不重复、无索引</li><li>LinkedHashSet：有序、不重复、无索引</li><li>TreeSet：可排序、不重复、无索引</li></ul><p>Set接口中的方法基本上与Collection的API一致</p><h4 id="Set遍历方式"><a href="#Set遍历方式" class="headerlink" title="Set遍历方式"></a>Set遍历方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A13_SetDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建一个set对象</span></span><br><span class="line">        Set&lt;String&gt; s = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 添加元素</span></span><br><span class="line">        <span class="comment">// 如果添加的元素集合中不存在，返回值为true</span></span><br><span class="line">        <span class="comment">// 如果添加的元素集合中存在，返回值为false</span></span><br><span class="line">        s.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        s.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        s.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 迭代器遍历</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----迭代器----&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; it = s.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 增强for遍历</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----增强for----&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s1 : s) &#123;</span><br><span class="line">            System.out.println(s1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// lambda表达式</span></span><br><span class="line">        <span class="comment">// forEach遍历</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----forEach----&quot;</span>);</span><br><span class="line">        s.forEach(s1 -&gt; &#123;</span><br><span class="line">            System.out.println(s1);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><p>底层原理：</p><ul><li>HashSet集合底层采取哈希表存储数据</li><li>哈希表是一种对于增删改查数据性能都较好的结构</li></ul><p>哈希表组成：</p><ul><li>JDK8之前：数组+链表</li><li>JDK8开始：数组+链表+红黑树</li></ul><h5 id="哈希值"><a href="#哈希值" class="headerlink" title="哈希值"></a>哈希值</h5><ul><li>根据hashCode方法算出来的int类型的整数</li><li>该方法定义在Object类中，所有对象都可以调用，默认使用地址值进行计算</li><li>一般情况下，会重写hashCode方法，利用对象内部的属性值计算哈希值</li></ul><h5 id="对象的哈希值特点"><a href="#对象的哈希值特点" class="headerlink" title="对象的哈希值特点"></a>对象的哈希值特点</h5><ul><li>如果没有重写hashCode方法，不同对象计算出的哈希值是不同的</li><li>如果已经重写hashCode方法，不同的对象只要属性值相同，计算出的哈希值就是一样的</li><li>在小部分情况下，不同的属性值或者不同的地址值计算出来的哈希值也有可能一样（哈希碰撞）</li></ul><h5 id="JDK8前的底层原理"><a href="#JDK8前的底层原理" class="headerlink" title="JDK8前的底层原理"></a>JDK8前的底层原理</h5><ol><li>创建一个默认长度为16，默认加载因子为0.75的数组，数组名table</li><li>根据元素的哈希值跟数组的长度计算出应存入的位置</li></ol><p>公式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (数组长度 - <span class="number">1</span>) &amp; 哈希值;</span><br></pre></td></tr></table></figure><ol start="3"><li>判断当前位置是否为null，如果是null直接存入</li><li>如果位置不为null，表示有元素，则调用equals方法比较属性值</li><li>一样：不存     不一样：存入数组，<font color='red'>形成链表</font>（去重）</li></ol><p>JDK8以前：新元素存入数组，老元素挂在新元素下面</p><p>JDK8以后：新元素直接挂在老元素下面，当链表长度大于8且数组长度大于等于64，自动形成红黑树</p><h4 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h4><ul><li>有序、不重复、无索引</li><li>这里的有序指的是保证存储和取出的元素顺序一致</li><li>原理：底层数据结构依然是哈希表，只是每个元素又额外的多了一个双链表的机制记录存储的顺序</li></ul><h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h4><ul><li>不重复、无索引、<font color='red'>可排序</font></li><li>可排序：按照元素的默认规则（从小到大）排序</li><li>TreeSet集合底层是基于<font color='red'>红黑树</font>的数据结构实现排序的，增删改查性能都较好</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mySet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A16_TreeSetDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            需求：利用 TreeSet 存储整数并排序</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        TreeSet&lt;Integer&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        ts.add(<span class="number">1</span>);</span><br><span class="line">        ts.add(<span class="number">3</span>);</span><br><span class="line">        ts.add(<span class="number">5</span>);</span><br><span class="line">        ts.add(<span class="number">2</span>);</span><br><span class="line">        ts.add(<span class="number">4</span>);</span><br><span class="line">        ts.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(ts);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 迭代器遍历</span></span><br><span class="line">        System.out.println(<span class="string">&quot;迭代器遍历：&quot;</span>);</span><br><span class="line">        Iterator&lt;Integer&gt; it = ts.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 增强for遍历</span></span><br><span class="line">        System.out.println(<span class="string">&quot;增强for遍历：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer t : ts) &#123;</span><br><span class="line">            System.out.println(t);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// forEach遍历</span></span><br><span class="line">        System.out.println(<span class="string">&quot;forEach遍历：&quot;</span>);</span><br><span class="line">        ts.forEach(v -&gt; &#123;</span><br><span class="line">            System.out.println(v);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="排序规则"><a href="#排序规则" class="headerlink" title="排序规则"></a>排序规则</h5><ul><li>对于数值类型：Integer、Double，默认按照从小到大的顺序进行排序</li><li>对于字符类型：按照字符在ASCII码表中的数字升序进行排序</li><li>字符串：首先比较首位字符的ASCII码，若相同，则比较后一位</li></ul><h5 id="TreeSet的两种比较方式"><a href="#TreeSet的两种比较方式" class="headerlink" title="TreeSet的两种比较方式"></a>TreeSet的两种比较方式</h5><p>方式一：</p><p>默认排序&#x2F;自然排序：Javabean类实现Comparable接口指定比较规则</p><p>方式二：</p><p>比较器排序：创建TreeSet对象的时候，传递比较器Comparator指定规则</p><p>使用原则：</p><p>默认使用第一种，如果第一种不能满足当前需求，就使用它第二种</p><h2 id="双列集合Map"><a href="#双列集合Map" class="headerlink" title="双列集合Map"></a>双列集合Map</h2><p>双列集合的特点</p><ul><li>双列集合一次需要存一对数据，分别为键和值</li><li>键不能重复，值可以重复</li><li>键和值是一一对应的，每一个键只能找到自己对应的值</li><li>键+值这个整体，称之为“键值对”或者“键值对对象”，在Java中叫做“Entry对象”</li></ul><pre class="mermaid">flowchart TD    Map[Map]    Map --> HashMap[HashMap]    Map --> Hashtable[Hashtable]    Hashtable --> Properties[Properties]    HashMap --> LinkedHashMap[LinkedHashMap]    Map --> TreeMap[TreeMap]</pre><h3 id="Map的常见API"><a href="#Map的常见API" class="headerlink" title="Map的常见API"></a>Map的常见API</h3><p>Map是双列集合的顶层接口，它的功能是全部双列集合都可以继承使用的</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>V put(K key,V value)</td><td>添加元素</td></tr><tr><td>V remove(Object key)</td><td>根据键删除键值对元素</td></tr><tr><td>void clear()</td><td>移除所有的键值对元素</td></tr><tr><td>boolean containsKey(Object key)</td><td>判断集合是否包含指定的键</td></tr><tr><td>boolean containsValue(Object Value)</td><td>判断集合是否包含指定的值</td></tr><tr><td>boolean isEmpty()</td><td>判断集合是否为空</td></tr><tr><td>int size()</td><td>集合的长度，也就是集合中键值对的个数</td></tr></tbody></table><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A01_MapDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建Map集合的对象</span></span><br><span class="line">        Map&lt;String,String&gt; m = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 添加元素</span></span><br><span class="line">        <span class="comment">// 添加数据时，键不存在，则会把键值对添加到Map中，返回值为null</span></span><br><span class="line">        <span class="comment">// 添加数据时，键存在，则会覆盖原来的键值对，返回值为被覆盖的值</span></span><br><span class="line">        m.put(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;13岁&quot;</span>);</span><br><span class="line">        m.put(<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;14岁&quot;</span>);</span><br><span class="line">        m.put(<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;13岁&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">val</span> <span class="operator">=</span> m.put(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;14岁&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(val);    <span class="comment">// 13岁</span></span><br><span class="line">        System.out.println(m);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 删除元素</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> m.remove(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(res);    <span class="comment">// 14岁</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 清空集合</span></span><br><span class="line">        <span class="comment">// m.clear();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 判断包含内容</span></span><br><span class="line">        System.out.println(m);</span><br><span class="line">        <span class="keyword">if</span> (m.containsKey(<span class="string">&quot;张三&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;有一个叫张三的人&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m.containsKey(<span class="string">&quot;李四&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;有一个叫李四的人&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m.containsValue(<span class="string">&quot;14岁&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;有一个14岁的人&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 判断集合是否为空</span></span><br><span class="line">        <span class="comment">// m.clear();</span></span><br><span class="line">        <span class="keyword">if</span> (m.isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;集合为空&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;集合不为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7. 查看集合的大小</span></span><br><span class="line">        System.out.println(<span class="string">&quot;集合中元素的个数为：&quot;</span> + m.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Map遍历"><a href="#Map遍历" class="headerlink" title="Map遍历"></a>Map遍历</h3><h4 id="键找值"><a href="#键找值" class="headerlink" title="键找值"></a>键找值</h4><ol><li>利用 <code>keySet()</code>方法，获取集合中的所有值，返回值为一个单列集合</li><li>遍历单列集合，得到每一个键</li><li>在遍历体中，使用<code>get(Object key)</code>方法获取键对应的值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A02_MapDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历Map集合</span></span><br><span class="line">        Map&lt;String, String&gt; hs = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hs.put(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;18&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;13&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;王五&quot;</span>, <span class="string">&quot;15&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;赵六&quot;</span>, <span class="string">&quot;20&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;路人甲&quot;</span>, <span class="string">&quot;17&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;路人乙&quot;</span>, <span class="string">&quot;16&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;路人丙&quot;</span>, <span class="string">&quot;21&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;路人丁&quot;</span>, <span class="string">&quot;18&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 通过键找值</span></span><br><span class="line">        <span class="comment">// 1.1 获取所有的键，把这些键放到一个单列集合中</span></span><br><span class="line">        Set&lt;String&gt; keys = hs.keySet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.2 遍历单列集合，得到每一个键</span></span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            <span class="comment">// 1.3 利用键获取对应的值</span></span><br><span class="line">            System.out.println(key + <span class="string">&quot;=&quot;</span> + hs.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="键值对"><a href="#键值对" class="headerlink" title="键值对"></a>键值对</h4><ol><li>通过<code>entrySet()</code>方法，获取所有的键值对对象，方法会返回一个Set集合,Set集合中存放的是键值对对象</li><li>遍历entries集合，获取每一个键值对对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A03_MapDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历Map集合</span></span><br><span class="line">        Map&lt;String, String&gt; hs = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hs.put(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;18&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;13&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;王五&quot;</span>, <span class="string">&quot;15&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;赵六&quot;</span>, <span class="string">&quot;20&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;路人甲&quot;</span>, <span class="string">&quot;17&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;路人乙&quot;</span>, <span class="string">&quot;16&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;路人丙&quot;</span>, <span class="string">&quot;21&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;路人丁&quot;</span>, <span class="string">&quot;18&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 通过键值对对象进行遍历</span></span><br><span class="line">        <span class="comment">// 1.1 通过entrySet()方法，获取所有的键值对对象，方法会返回一个Set集合,Set集合中存放的是键值对对象</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = hs.entrySet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.2 遍历entries集合，获取每一个键值对对象</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entries) &#123;</span><br><span class="line">            <span class="comment">// System.out.println(entry);   // 直接打印</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>default void forEach(BiConsumer&lt;? super K,? super V&gt; action)</td><td>结合lambda遍历Map集合</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.function.BiConsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A04_MapDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历Map集合</span></span><br><span class="line">        Map&lt;String, String&gt; hs = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hs.put(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;18&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;13&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;王五&quot;</span>, <span class="string">&quot;15&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;赵六&quot;</span>, <span class="string">&quot;20&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;路人甲&quot;</span>, <span class="string">&quot;17&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;路人乙&quot;</span>, <span class="string">&quot;16&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;路人丙&quot;</span>, <span class="string">&quot;21&quot;</span>);</span><br><span class="line">        hs.put(<span class="string">&quot;路人丁&quot;</span>, <span class="string">&quot;18&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 利用lambda遍历</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * hs.forEach(new BiConsumer&lt;String, String&gt;() &#123;</span></span><br><span class="line"><span class="comment">        *     @Override</span></span><br><span class="line"><span class="comment">        *     public void accept(String key, String value) &#123;</span></span><br><span class="line"><span class="comment">        *         System.out.println(key + &quot;=&quot; + value);</span></span><br><span class="line"><span class="comment">        *     &#125;</span></span><br><span class="line"><span class="comment">        * &#125;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        hs.forEach((key,value) -&gt; &#123;</span><br><span class="line">            System.out.println(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>特点：</p><ol><li>HashMap是Map里面的一个实现类</li><li>没有额外需要学习的特有方法，直接使用Map里面的方法</li><li>特点都是由键决定的：无序、不重复、无索引</li><li>HashMap跟HashSet底层原理是一摸一样的，都是哈希表结构</li></ol><p>细节：</p><ol><li>HashMap底层是哈希表结构的</li><li>依赖hashCode方法和equals方法保证键的唯一</li><li>如果键存储的是自定义对象，需要重写hashCode和equals方法。</li><li>如果值存储的是自定义对象，不需要重写hashCode和equals方法</li></ol><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><ul><li>由键决定：有序、不重复、无索引</li><li>这里的有序指的是保证存储和取出的元素顺序一致</li><li>原理：底层结构依然是哈希表，只是每个键值对元素又额外的多了一个双链表的机制记录存储顺序</li></ul><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><ul><li>TreeMap跟TreeSet底层原理一样，都是红黑树结构</li><li>由键决定特性：不重复、无索引、可排序</li><li>可排序：对键进行排序</li><li>注意：默认按照键的从小到大进行排序，也可以自己规定键的排序</li></ul><h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><ul><li>java.util.Collections：是集合工具类</li><li>作用：Collections不是集合，而是集合的工具类</li></ul><h3 id="常用API-1"><a href="#常用API-1" class="headerlink" title="常用API"></a>常用API</h3><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public static <T> boolean addAll(Collection<T> c,T…elements)</td><td>批量添加元素</td></tr><tr><td>public static void shuffle(List&lt;?&gt; list)</td><td>打乱List集合元素的顺序</td></tr><tr><td>public static <T> void sort(List<T> list)</td><td>排序</td></tr><tr><td>public static <T> void sort(List<T> list,Comparator<T> c)</td><td>根据指定的规则进行排序</td></tr><tr><td>public static <T> int binarySearch(List<T> list,T key)</td><td>以二分查找法查找元素</td></tr><tr><td>public static <T> copy(List<T> dest,List<T> src)</td><td>拷贝集合中的元素</td></tr><tr><td>public static void fill(List<T> list,T obj)</td><td>使用指定的元素填充集合</td></tr><tr><td>public static <T> max&#x2F;min(Collection<T> coll)</td><td>根据默认的自然排序获取最大&#x2F;最小值</td></tr><tr><td>public static <T> void swap(List&lt;?&gt; list,int i,int j)</td><td>交换集合中指定位置的元素</td></tr></tbody></table><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>泛型：是JDK5中引入的特性，可以在编译阶段约束操作的数据类型，并进行检查</p><p>泛型的格式：&lt;数据类型&gt;</p><p>注意：泛型只能支持引用数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A07_GenericsDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 当集合没有指定数据类型时，默认所有的元素都是Object</span></span><br><span class="line">        <span class="comment">// 此时可以往集合添加任意的数据类型</span></span><br><span class="line">        <span class="comment">// 带来一个坏处：我们在获取数据的时候，无法使用他的特有行为</span></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">18</span>,<span class="string">&quot;张三&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型带来的好处：</p><ul><li>同一数据类型</li><li>把运行时期的问题提前到了编译期间，避免了强制类型转换可能出现的问题，因为在编译阶段就能确定下来</li></ul><p>扩展知识点：Java中的泛型是伪泛型</p><p>解释：编写Java文件时（*.java），泛型是负责约束数据类型的，但在编译为机器码后（*.class），会去除泛型，将数据类型变为Object。这一过程称为泛型擦除</p><p>泛型的细节：</p><ul><li>泛型中不能写基本数据类型</li><li>指定泛型的具体类型后，传递数据时，可以传入该类类型或者子类类型</li><li>如果不写泛型，类型默认为Object</li></ul><p>泛型可以在很多地方进行定义：</p><ul><li>类后面（ArraryList&lt;数据类型&gt;）：泛型类</li><li>方法上面：泛型方法</li><li>接口后面：泛型接口</li></ul><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><p>使用场景：当一个类中，某个变量的数据类型不确定时，就可以定义带有泛型的类</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 class 类名&lt;类型&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处的E可以理解为变量，但是不是用来记录数据的，而是记录数据的类型，可以写成：T、E、K、V等</p><p>具体代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public class A08_GenericsDemo2 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        MyArrayList&lt;Integer&gt; list = new MyArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(111);</span><br><span class="line">        list.add(222);</span><br><span class="line">        list.add(333);</span><br><span class="line"></span><br><span class="line">        System.out.println(list.get(0));</span><br><span class="line">        System.out.println(list.get(1));</span><br><span class="line">        System.out.println(list.get(2));</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;-------------&quot;);</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MyArrayList&lt;E&gt; &#123;</span><br><span class="line">    Object[] obj = new Object[10];</span><br><span class="line">    int size;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    E : 表示不确定的类型</span><br><span class="line">    e : 表示形参名，变量名</span><br><span class="line">    */</span><br><span class="line">    public boolean add(E e) &#123;</span><br><span class="line">        obj[size] = e;</span><br><span class="line">        size++;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public E get(int index) &#123;</span><br><span class="line">        return (E)obj[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return Arrays.toString(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><p>方法中形参类型不确定时：</p><p>方案一：使用类名后面定义的泛型（所有的方法都可以使用）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyArrayList</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        obj[size] = e;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方案二：在方法申明上定义自己的泛型（只能在本方法中使用）</p><pre><code>public &lt;E&gt; boolean add(E e) &#123;    obj[size] = e;    size++;    return true;&#125;</code></pre><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 &lt;类型&gt; 返回值类型 方法名(类型 变量名) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 interface 接口名&lt;类型&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型接口的两种使用方式：</p><ol><li>实现类给出具体的类型</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ListIterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A09_GenericsDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyArrayList2</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyArrayList2</span>();</span><br><span class="line">        list.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        <span class="comment">// list.add(123); // 报错，因为添加的是整数类型，而该对象只能添加字符串类型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyArrayList2</span> <span class="keyword">implements</span> <span class="title class_">List</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;String&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends String&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(<span class="type">int</span> index, Collection&lt;? extends String&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, String element)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, String element)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ListIterator&lt;String&gt; <span class="title function_">listIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ListIterator&lt;String&gt; <span class="title function_">listIterator</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">subList</span><span class="params">(<span class="type">int</span> fromIndex, <span class="type">int</span> toIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>实现类延续泛型，创建实现类对象时再确定类型</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ListIterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A10_GenericsDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        MyArrayList3&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">MyArrayList3</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        MyArrayList&lt;String&gt; slist = <span class="keyword">new</span> <span class="title class_">MyArrayList</span>&lt;&gt;();</span><br><span class="line">        slist.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyArrayList3</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(<span class="type">int</span> index, Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title function_">listIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title function_">listIterator</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;E&gt; <span class="title function_">subList</span><span class="params">(<span class="type">int</span> fromIndex, <span class="type">int</span> toIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型的继承和通配符"><a href="#泛型的继承和通配符" class="headerlink" title="泛型的继承和通配符"></a>泛型的继承和通配符</h3><ul><li>泛型不具备继承性，但是数据具备继承性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A11_GenericsDemo5</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 泛型不具备继承性，但是数据具备继承性</span></span><br><span class="line">        ArrayList&lt;Fu&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Zi&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// method(list1); // 集合的数据类型为Fu，所以调用method方法时，和形参的数据类型匹配，不会报错</span></span><br><span class="line">        <span class="comment">// method(list2); // 集合的数据类型为Zi，所以调用method方法时，和形参的数据类型不匹配，会报错</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据可以具备继承性</span></span><br><span class="line">        list1.add(<span class="keyword">new</span> <span class="title class_">Fu</span>());</span><br><span class="line">        list1.add(<span class="keyword">new</span> <span class="title class_">Zi</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(ArrayList&lt;Fu&gt; list)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p>如果将method方法改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(ArrayList&lt;E&gt; list)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会有一个弊端，就是所有的数据类型都可以接受</p><p>但本方法虽然不确定类型，但只希望传递Fu、Zi</p><p>可以使用泛型的<code>通配符</code></p><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><p>泛型的通配符有两种：</p><ul><li>? extends E</li><li>? super E</li></ul><p>第一个表示可以传递E或者E所有的子类类型</p><p>第二个表示可以传递E或者E所有的父类类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A12_GenericsDemo6</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 泛型不具备继承性，但是数据具备继承性</span></span><br><span class="line">        ArrayList&lt;Fu&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Zi&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        method(list1);</span><br><span class="line">        method(list2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(ArrayList&lt;? extends Fu&gt; list)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span>&#123;&#125;;</span><br></pre></td></tr></table></figure><h1 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h1><p>方法形参的个数是可以改变的。</p><p>注意点：</p><ol><li>在方法的形参中最多只能写一个可变参数</li><li>在方法中，如果除了可变参数以外，还有其他的形参，那么可变参数要写在最后</li></ol><p>格式：形参类型…形参名</p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>...args</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArgsDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个方法，可以计算两个数的和</span></span><br><span class="line">        <span class="comment">// 创建一个方法，可以计算三个数的和</span></span><br><span class="line">        <span class="comment">// 创建一个方法，可以计算四个数的和</span></span><br><span class="line">        <span class="comment">// 创建一个方法，可以计算n个数的和</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一种：</span></span><br><span class="line">        <span class="comment">// 此时如果要计算n个数的和，就需要有n个参数的方法</span></span><br><span class="line">        System.out.println(getSum(<span class="number">10</span>,<span class="number">20</span>));</span><br><span class="line">        System.out.println(getSum(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>));</span><br><span class="line">        System.out.println(getSum(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c,<span class="type">int</span> d)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c + d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArgsDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个方法，可以计算两个数的和</span></span><br><span class="line">        <span class="comment">// 创建一个方法，可以计算三个数的和</span></span><br><span class="line">        <span class="comment">// 创建一个方法，可以计算四个数的和</span></span><br><span class="line">        <span class="comment">// 创建一个方法，可以计算n个数的和</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二种：</span></span><br><span class="line">        <span class="comment">// 虽然这种方法可以计算n个数的和，但是使用起来相对复杂</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> getSum(arr);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            sum += arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArgsDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个方法，可以计算两个数的和</span></span><br><span class="line">        <span class="comment">// 创建一个方法，可以计算三个数的和</span></span><br><span class="line">        <span class="comment">// 创建一个方法，可以计算四个数的和</span></span><br><span class="line">        <span class="comment">// 创建一个方法，可以计算n个数的和</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从JDK5开始，有了可变参数</span></span><br><span class="line">        <span class="comment">// 可变参数：方法形参的个数是个发生变化的</span></span><br><span class="line">        <span class="comment">// 格式：属性类型...形参名</span></span><br><span class="line">        <span class="comment">// int...args</span></span><br><span class="line"></span><br><span class="line">        System.out.println(getSum(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 底层：</span></span><br><span class="line">    <span class="comment">// 可变参数底层就是一个数组</span></span><br><span class="line">    <span class="comment">// 只不过不需要使用者自己创建</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span>...args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            sum += args[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用场景：</p><ol><li>如果我们在定义类、方法、接口的时候，如果类型不确定，就可以定义泛型类、泛型方法、泛型接口</li><li>如果类型不确定，但是能知道以后只能传递某个继承体系中的，就可以用泛型的通配符</li></ol><h1 id="不可变集合"><a href="#不可变集合" class="headerlink" title="不可变集合"></a>不可变集合</h1><p>不可变集合：不可以被修改的集合（长度、内容）</p><ul><li>如果某个数据不能被修改，把它防御性的拷贝到不可变集合中是个很好的实践</li><li>当集合对象被不可信的库调用时，不可变形式是安全的</li></ul><p>简单理解：</p><p>不想让别人修改集合中的内容</p><h2 id="书写格式-1"><a href="#书写格式-1" class="headerlink" title="书写格式"></a>书写格式</h2><p>在List、Set、Map接口中，都存在静态的of方法，可以获取一个不可变的集合</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>static <E> list<E> of(E…elements)</td><td>创建一个具有指定元素的List集合对象</td></tr><tr><td>static <E> Set<E> of(E…elements)</td><td>创建一个具有指定元素的Set集合对象</td></tr><tr><td>static <E> Map<E> of(E…elements)</td><td>创建一个具有指定元素的Map集合对象</td></tr></tbody></table><p>注意1：这个集合不能添加、不能删除、不能修改</p><p>注意2：<code>Map.of()</code>方法内参数最多为20个（10个键值对），如果要添加大于10个键值对的参数，先创建map可变集合，再用<code>Map.copyOf()</code>将可变集合复制给不可变集合</p><h1 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h1><h2 id="Stream流的作用"><a href="#Stream流的作用" class="headerlink" title="Stream流的作用"></a>Stream流的作用</h2><p>结合了Lambda表达式，简化集合、数组的操作</p><h2 id="Stream流的使用步骤"><a href="#Stream流的使用步骤" class="headerlink" title="Stream流的使用步骤"></a>Stream流的使用步骤</h2><ol><li>先得到一条Stream流（流水线），并把数据放上去</li><li>利用Stream流中的API进行各种操作</li></ol><table><thead><tr><th>获取方式</th><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>单列集合</td><td>default Stream<E> stream()</td><td>Collection中的默认方法</td></tr><tr><td>双列集合</td><td>无</td><td>无法直接使用stream流</td></tr><tr><td>数组</td><td>public static<T> Stream<T> stream(T[] array)</td><td>Arrays工具类中的静态方法</td></tr><tr><td>一堆零散数据</td><td>public static<T> Stream<T> of(T…values)</td><td>Stream接口中的静态方法</td></tr></tbody></table><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 单列集合获取stream流</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>);</span><br><span class="line">        list.stream().forEach(s -&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 双列集合</span></span><br><span class="line">        HashMap&lt;String,Integer&gt; hm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hm.put(<span class="string">&quot;aaa&quot;</span>,<span class="number">111</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;bbb&quot;</span>,<span class="number">222</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;ccc&quot;</span>,<span class="number">333</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;ddd&quot;</span>,<span class="number">444</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一种： ketSet方法获取stream流</span></span><br><span class="line">        hm.keySet().stream().forEach(s -&gt; System.out.println(s + <span class="string">&quot;=&quot;</span> + hm.get(s)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二种：entrySet方法获取stream流</span></span><br><span class="line">        hm.entrySet().stream().forEach(s-&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 数组获取Stream流</span></span><br><span class="line">        <span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        String[] arr2 = &#123;<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;bcd&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">        Arrays.stream(arr1).forEach(s -&gt; System.out.println(s));</span><br><span class="line">        Arrays.stream(arr2).forEach(s -&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 零散数据</span></span><br><span class="line">        Stream.of(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>).forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Stream流的中间方法"><a href="#Stream流的中间方法" class="headerlink" title="Stream流的中间方法"></a>Stream流的中间方法</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Stream<T> filter(Predicate&lt;? superT&gt; predicate)</td><td>过滤</td></tr><tr><td>Stream<T> limit(long maxSize)</td><td>获取前几个元素</td></tr><tr><td>Stream<T> skip(long n)</td><td>跳过前几个元素</td></tr><tr><td>Stream<T> distinct()</td><td>元素去重，依赖（hashCode和equals方法）</td></tr><tr><td>static <T> Stream<T> concat(Stream a,Stream b)</td><td>合并a和b两个流为一个流</td></tr><tr><td>Stream<R> map(Function&lt;T,R&gt; mapper)</td><td>转换流中的数据类型</td></tr></tbody></table><p>注意1：中间方法，返回新的Stream流，原来的Stream流只能使用一次，建议使用链式编程</p><p>注意2：修改Stream流中的数据，不会影响原来集合或者数组中的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list1,<span class="string">&quot;bob-15&quot;</span>,<span class="string">&quot;alan-20&quot;</span>,<span class="string">&quot;john-10&quot;</span>,<span class="string">&quot;bob-15&quot;</span>,<span class="string">&quot;bob-15&quot;</span>,<span class="string">&quot;alan-20&quot;</span>);</span><br><span class="line">        Collections.addAll(list2,<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;ccc&quot;</span>,<span class="string">&quot;ddd&quot;</span>,<span class="string">&quot;eee&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// distinct 去重</span></span><br><span class="line">        <span class="comment">// list1.stream().distinct().forEach(s -&gt; System.out.println(s));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// concat 合并流</span></span><br><span class="line">        <span class="comment">// Stream.concat(list1.stream(),list2.stream()).forEach(s -&gt; System.out.println(s));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// map 转换流中的数据类型</span></span><br><span class="line">        <span class="comment">// s 表示转换后的数据</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        list1.stream().map(new Function&lt;String, Integer&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public Integer apply(String s) &#123;</span></span><br><span class="line"><span class="comment">                // 获取字符串中的数字</span></span><br><span class="line"><span class="comment">                String[] arr = s.split(&quot;-&quot;);</span></span><br><span class="line"><span class="comment">                String ageString = arr[1];</span></span><br><span class="line"><span class="comment">                int age = Integer.parseInt(ageString);</span></span><br><span class="line"><span class="comment">                return age;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;).forEach(s -&gt; System.out.println(s));</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line"></span><br><span class="line">        list1.stream().map(s -&gt; Integer.parseInt(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>])).forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Stream流的终结方法"><a href="#Stream流的终结方法" class="headerlink" title="Stream流的终结方法"></a>Stream流的终结方法</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>void forEach(Consumer action)</td><td>遍历</td></tr><tr><td>long count()</td><td>统计</td></tr><tr><td>toArray()</td><td>收集流中的数据，放到数组中</td></tr><tr><td>collect(Collector collector)</td><td>收集流中的数据，放到集合中</td></tr></tbody></table><p>前三个方法使用案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        Stream.of(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;7&quot;</span>).forEach(s -&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 统计</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> Stream.of(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>).count();</span><br><span class="line">        System.out.println(<span class="string">&quot;count:&quot;</span> + count);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// toArray：创造一个指定类型的数组</span></span><br><span class="line">        <span class="comment">// 第一种使用方法：</span></span><br><span class="line">        Object[] objects = Stream.of(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>).toArray();</span><br><span class="line">        System.out.println(Arrays.toString(objects));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二种使用方法：</span></span><br><span class="line">        String[] str = Stream.of(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>).toArray(<span class="keyword">new</span> <span class="title class_">IntFunction</span>&lt;String[]&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String[] apply(<span class="type">int</span> value) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[value];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        System.out.println(Arrays.toString(str));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 第三种使用方法：</span></span><br><span class="line">        String[] strings = Stream.of(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>).toArray(value -&gt; <span class="keyword">new</span> <span class="title class_">String</span>[value]);</span><br><span class="line">        System.out.println(Arrays.toString(strings));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>collect案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// collect：收集流中的数据，放到集合中（List、Set、Map）</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="string">&quot;张三-男-15&quot;</span>,<span class="string">&quot;李四-男-14&quot;</span>,<span class="string">&quot;王五-男-16&quot;</span>,<span class="string">&quot;王若男-女-14&quot;</span>,<span class="string">&quot;赵丽-女-15&quot;</span>,<span class="string">&quot;张强-男-14&quot;</span>,<span class="string">&quot;刘莉莉-女-13&quot;</span>,<span class="string">&quot;陈念-男-15&quot;</span>,<span class="string">&quot;龚月月-女-14&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 收集到List集合当中</span></span><br><span class="line">        <span class="comment">// 需求：</span></span><br><span class="line">        <span class="comment">// 把所有的男性收集起来</span></span><br><span class="line">        List&lt;String&gt; newlist = list.stream().filter(s -&gt; <span class="string">&quot;男&quot;</span>.equals(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>])).collect(Collectors.toList());</span><br><span class="line">        System.out.println(newlist);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 收集到Set集合当中</span></span><br><span class="line">        <span class="comment">// 需求：</span></span><br><span class="line">        <span class="comment">// 把所有的男性收集起来</span></span><br><span class="line">        Set&lt;String&gt; newset = list.stream().filter(s -&gt; <span class="string">&quot;男&quot;</span>.equals(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>])).collect(Collectors.toSet());</span><br><span class="line">        System.out.println(newset);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 收集Map集合当中</span></span><br><span class="line">        <span class="comment">// 需求：</span></span><br><span class="line">        <span class="comment">// 键：名字，值：年龄</span></span><br><span class="line">        <span class="comment">// toMap方法中有两个参数，都是方法接口</span></span><br><span class="line">        <span class="comment">// 第一个参数是键的值，方法中泛型的第一个类型是流里的数据类型，第二个类型是Map集合键的数据类型</span></span><br><span class="line">        <span class="comment">// 第二个参数是值的值，用法和第一个一样</span></span><br><span class="line">        list.stream().filter(s -&gt; <span class="string">&quot;男&quot;</span>.equals(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>])).collect(Collectors.toMap(s -&gt; s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">0</span>],s -&gt; s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">2</span>])).entrySet().stream().forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方法引用（略看一遍以后再说）"><a href="#方法引用（略看一遍以后再说）" class="headerlink" title="方法引用（略看一遍以后再说）"></a>方法引用（略看一遍以后再说）</h1><p>方法：就是以前学习的方法</p><p>引用：把已经有的方法拿过来用，当作函数式接口中抽象方法的方法体</p><p>方法引用：把已经有的方法拿过来用，当作函数式接口中抽象方法的方法体</p><p>引用符号：<code>::</code></p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arrays,sort(arr,<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1,Integer o2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> o1 - o2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以变成如下形式：</p><p>假设有一个写好的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subtraction</span><span class="params">(<span class="type">int</span> n1,<span class="type">int</span> n2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 - n2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(arr,FunctionDemo::subtraction);</span><br><span class="line"><span class="comment">// FunctionDemo::subtraction：表示在FunctionDemo中有一个方法叫subtraction</span></span><br></pre></td></tr></table></figure><p>注意点：</p><ol><li>引用出必须是函数式接口</li><li>被引用的方法必须已经存在</li><li>被引用的方法的形参和返回值需要跟抽象方法保持一致</li><li>被引用的方法需要满足当前的需求</li></ol><h2 id="方法引用的分类"><a href="#方法引用的分类" class="headerlink" title="方法引用的分类"></a>方法引用的分类</h2><ol><li>引用静态方法</li><li>引用成员方法<ul><li>引用其他类的成员方法</li><li>引用本类的成员方法</li><li>引用父类的成员方法</li></ul></li><li>引用构造方法</li></ol><h3 id="引用静态方法"><a href="#引用静态方法" class="headerlink" title="引用静态方法"></a>引用静态方法</h3><p>格式：<code>类名::静态方法</code></p><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer::parseInt</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FunctionDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 集合中有以下数字，要求把它们都变成int类型</span></span><br><span class="line">        <span class="comment">// &quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建集合</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*list.stream().map(new Function&lt;String, Integer&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public Integer apply(String s) &#123;</span></span><br><span class="line"><span class="comment">                int num = Integer.parseInt(s);</span></span><br><span class="line"><span class="comment">                return num;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;).forEach(s -&gt; System.out.println(s));*/</span></span><br><span class="line"></span><br><span class="line">        list.stream().map(Integer::parseInt).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用成员方法"><a href="#引用成员方法" class="headerlink" title="引用成员方法"></a>引用成员方法</h3><p>格式：<code>对象::成员方法</code></p><ol><li>其他类：<code>其他类对象::方法名</code></li><li>本类：<code>this::方法名</code></li><li>父类：<code>super::方法名</code></li></ol><h3 id="引用构造方法"><a href="#引用构造方法" class="headerlink" title="引用构造方法"></a>引用构造方法</h3><p>格式：<code>类名::new</code></p><p>范例：<code>Student::new</code></p><h3 id="其他调用方式"><a href="#其他调用方式" class="headerlink" title="其他调用方式"></a>其他调用方式</h3><ol><li>使用类名引用成员方法<ul><li>范例：<code>String::substring</code></li></ul></li><li>引用数组的构造方法<ul><li>范例：<code>int[]::new</code></li></ul></li></ol><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>异常：异常就是代表程序出现的问题</p><p>注意：异常的作用不是让我们以后不出现异常，而是程序出了异常之后，该如何处理</p><pre class="mermaid">flowchart TD    top[Java.lang.Throwable]    top --> midleft[Error]    top --> midright[Exception]    midright --> bottomleft[RuntimeException]    midright --> bottomright[其他异常]    bottomleft --> other["。。。"]</pre><p><code>Error</code>：代表的是系统级别错误（属于严重问题），系统一旦出现问题，sun公司会把这些错误封装成Error对象。</p><p>Error是给sun公司自己用的，不是给我们程序员用的。</p><p>因此我们开发人员不用管他。</p><p><code>Exception</code>：叫做异常，代表程序可能出现的问题。我们通常会用Exception以及他的子类来封装程序出现的问题。</p><p>运行时异常：<code>RuntimeException</code>及其子类，编译阶段不会出现异常提醒。运行时出现的异常（如：数组索引越界异常）</p><p>编译时异常：编译阶段就会出现异常提醒的。（如：日期解析异常）</p><pre class="mermaid">flowchart TD    top[Java文件]    top -- Javac命令 --> mid[字节码文件]    mid -- Java命令 --> bottom[运行结果]</pre><p>Java文件到字节码文件为<code>编译时异常</code>（如：日期解析异常）</p><p>字节码文件到运行结果为<code>运行时异常</code>，RuntimeException及其子类，编译阶段不需要处理。代码运行时出现的异常（如：数组索引越界异常）</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        <span class="comment">// 编译时异常（在编译阶段，必须要手动处理，否则代码报错）</span></span><br><span class="line">        <span class="comment">/*String time = &quot;2030年1月1日&quot;;</span></span><br><span class="line"><span class="comment">        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy年MM月dd日&quot;);</span></span><br><span class="line"><span class="comment">        Date date = sdf.parse(time);</span></span><br><span class="line"><span class="comment">        System.out.println(date);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 运行时异常</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        System.out.println(arr[<span class="number">10</span>]); <span class="comment">// ArrayIndexOutOfBoundsException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译时异常和运行时异常的区别</p><ul><li>编译时异常：除了RuntimeException和它的子类，其他都是编译时异常。编译阶段需要进行处理，作用在于提醒程序员</li><li>运行时异常：RuntimeException本生和所有子类，都是运行时异常。编译阶段不报错，是程序运行时出现的。一般是由于参数传递错误带来的问题</li></ul><h2 id="异常的作用"><a href="#异常的作用" class="headerlink" title="异常的作用"></a>异常的作用</h2><p>作用一：异常是用来查询bug的关键参考信息</p><p>作用二：异常可以作为方法内部的一种特殊返回值，以便通知调用者底层的执行情况</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">// 作用一：异常是用来查询bug的关键参考信息</span></span><br><span class="line">        <span class="comment">// 案例一：</span></span><br><span class="line">        <span class="comment">// Student[] students = new Student[3];</span></span><br><span class="line">        <span class="comment">// String name = students[0].getName();</span></span><br><span class="line">        <span class="comment">// System.out.println(name); // NullPointerException</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 案例二：</span></span><br><span class="line">        <span class="comment">// Student zs = new Student(&quot;张三,23&quot;);</span></span><br><span class="line">        <span class="comment">// System.out.println(zs);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 作用二：异常可以作为方法内部的一种特殊返回值，以便通知调用者底层的执行情况</span></span><br><span class="line">        <span class="comment">// 年龄范围（18 - 40）</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s1.setAge(<span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">Student</span><span class="params">()</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">Student</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        String[] arr = str.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">this</span>.age = Integer.parseInt(arr[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">18</span> || age &gt; <span class="number">40</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常的处理方式"><a href="#异常的处理方式" class="headerlink" title="异常的处理方式"></a>异常的处理方式</h2><ol><li>JVM默认的处理方式</li><li>自己处理</li><li>抛出异常</li></ol><h3 id="JVM默认的处理方式"><a href="#JVM默认的处理方式" class="headerlink" title="JVM默认的处理方式"></a>JVM默认的处理方式</h3><ul><li>把异常的名称，异常原因及异常出现的位置等信息输出在了控制台</li><li>程序停止执行，下面的代码就不会执行了</li></ul><h3 id="自己处理（捕获异常）"><a href="#自己处理（捕获异常）" class="headerlink" title="自己处理（捕获异常）"></a>自己处理（捕获异常）</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">可能出现异常的代码;</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">异常的处理代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目的：当代码出现异常时，可以让程序继续往下执行</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myexception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">/*自己处理（捕获异常）</span></span><br><span class="line"><span class="comment">        格式：</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            可能出现异常的代码;</span></span><br><span class="line"><span class="comment">        &#125; catch &#123;</span></span><br><span class="line"><span class="comment">            异常的处理代码</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 可能出现异常的代码</span></span><br><span class="line">            System.out.println(arr[<span class="number">10</span>]); </span><br><span class="line">            <span class="comment">// 如果此处出现了异常，程序就会在这里创建一个ArrayIndexOutOfBoundsException对象</span></span><br><span class="line">            <span class="comment">// new ArrayIndexOutOfBoundsException();</span></span><br><span class="line">            <span class="comment">// 拿着这个对象到catch的小括号中对比，看括号中的变量是否可以接收这个对象</span></span><br><span class="line">            <span class="comment">// 如果能被接收，就表示该异常被捕获（抓住），执行catch里面的内容</span></span><br><span class="line">        &#125; <span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            <span class="comment">// 如果出现了ArrayIndexOutOfBoundsException该如何处理</span></span><br><span class="line">            System.out.println(<span class="string">&quot;索引越界了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;我会被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>问题一：如果try中没有遇到问题，怎么执行？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果try中没有遇到问题，怎么执行？</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(arr[<span class="number">0</span>]); <span class="comment">// 执行该行代码</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;索引越界了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;我被执行了&quot;</span>); <span class="comment">// 执行该行代码</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题二：如果try中可能遇到多个问题，怎么执行？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果try中可能遇到多个问题，怎么执行？</span></span><br><span class="line">        <span class="comment">// 写多个catch与之对应</span></span><br><span class="line">        <span class="comment">// 细节：如果要捕获多个异常，如果这些异常存在父子关系的话，那么父类一定要写在下面</span></span><br><span class="line">        <span class="comment">// 在JDK之后，可以在catch中同时捕获多个异常，中间用 | 进行隔开</span></span><br><span class="line">        <span class="comment">/*try&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(arr[10]);</span></span><br><span class="line"><span class="comment">            System.out.println(2/0);</span></span><br><span class="line"><span class="comment">            String s = null;</span></span><br><span class="line"><span class="comment">            System.out.println(s.equals(&quot;abc&quot;));</span></span><br><span class="line"><span class="comment">        &#125; catch (ArrayIndexOutOfBoundsException e) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;索引越界了&quot;);    // 执行改行代码</span></span><br><span class="line"><span class="comment">        &#125; catch (ArithmeticException e) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;除数不能为0&quot;);</span></span><br><span class="line"><span class="comment">        &#125; catch (NullPointerException e) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;空指针异常&quot;);</span></span><br><span class="line"><span class="comment">        &#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;Exception&quot;);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">            System.out.println(<span class="number">2</span>/<span class="number">0</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            System.out.println(s.equals(<span class="string">&quot;abc&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException | ArithmeticException | NullPointerException e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;我被执行了&quot;</span>); <span class="comment">// 执行该行代码</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题三：如果try中遇到的问题没有被捕获，怎么执行？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="comment">// 如果try中遇到的问题没有被捕获，怎么执行？</span></span><br><span class="line">        <span class="comment">// 如果try中遇到的问题没有捕获（没有匹配到异常），就相当于try...catch的代码白写了</span></span><br><span class="line">        <span class="comment">// 最终会交给虚拟机进行处理</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空指针异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;我不会被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题四：如果try中遇到了问题，那么try下面的其他代码还会执行吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="comment">// 如果try中遇到了问题，那么try下面的其他代码还会执行吗？</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">            System.out.println(<span class="string">&quot;我不会被执行&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空指针异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;我会被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Throwable的成员方法"><a href="#Throwable的成员方法" class="headerlink" title="Throwable的成员方法"></a>Throwable的成员方法</h2><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public String getMessage()</td><td>返回此throwable的详细消息字符串</td></tr><tr><td>public String toString()</td><td>返回此可抛出的简短描述</td></tr><tr><td>public void printStackTrace()</td><td>把异常的错误信息输出在控制台</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myexception;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo9</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*| public String getMessage()    | 返回此throwable的详细消息字符串 |</span></span><br><span class="line"><span class="comment">          | public String toString()      | 返回此可抛出的简短描述          |</span></span><br><span class="line"><span class="comment">          | public void printStackTrace() | 把异常的错误信息输出在控制台    |*/</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            <span class="comment">// String message = e.getMessage();</span></span><br><span class="line">            <span class="comment">// System.out.println(message); // Index 10 out of bounds for length 5</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// String s = e.toString();</span></span><br><span class="line">            <span class="comment">// System.out.println(s);  // java.lang.ArrayIndexOutOfBoundsException: Index 10 out of bounds for length 5</span></span><br><span class="line"></span><br><span class="line">            e.printStackTrace();    <span class="comment">// 类似与JVM的默认处理方式（红色字体打印异常），但是不会结束虚拟机</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;我是否被执行了？&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抛出处理"><a href="#抛出处理" class="headerlink" title="抛出处理"></a>抛出处理</h2><p><code>throws</code></p><p>注意：写在方法定义处，表示声明一个异常，告诉调用者，使用本方法可能有哪些异常</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 方法()<span class="keyword">throws</span> 异常类名<span class="number">1</span>,异常类名<span class="number">2.</span>.. &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编译时异常：必须要写</li><li>运行时异常：可以不写</li></ul><p><code>throw</code></p><p>注意：写在方法内，结束方法。手动抛出异常对象，交给调用者。方法中下面的代码不再执行了</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 方法() &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myexception;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 需求：定义一个方法求数组最大值</span></span><br><span class="line">        <span class="type">int</span>[] arr = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            max = getMax(arr);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;空指针异常&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;数组超出索引&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;我还是会打印&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span>[] arr)</span><span class="comment">/* throws NullPointerException,ArrayIndexOutOfBoundsException `RuntimeException的子类` */</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 手动创建一个异常对象，并把这个异常交给方法的调用者处理</span></span><br><span class="line">            <span class="comment">// 此时方法就会结束，下面的代码就不会再执行了</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (max &lt; arr[i]) &#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><ol><li>定义异常类</li><li>写继承关系</li><li>空参构造</li><li>带参构造</li></ol><p>意义：就是为了让控制台的报错信息更加的见名知意</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myexception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.InputMismatchException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionPractice2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入长度在3-10之间的姓名：&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">                <span class="keyword">if</span> (name.length() &lt; <span class="number">3</span> || name.length() &gt; <span class="number">10</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NameFormatException</span>(name + <span class="string">&quot;格式有误，长度应为：3~10&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;请输入18-40之间的年龄：&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">                sc.nextLine();  <span class="comment">// 清除输入流中的换行符</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (age &lt; <span class="number">18</span> || age &gt; <span class="number">40</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AgeFormatException</span>(age + <span class="string">&quot;格式有误，范围应为：18~40&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">// 如果姓名和年龄都合法，就跳出循环</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InputMismatchException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;年龄异常，请输入一个整数&quot;</span>);</span><br><span class="line">                sc.nextLine();  <span class="comment">// 清除输入流中的错误数据</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (NameFormatException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                sc.nextLine();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (AgeFormatException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                sc.nextLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myexception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NameFormatException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="comment">// 技巧：</span></span><br><span class="line">    <span class="comment">// NameFormat：当前异常的名字，表示姓名格式化问题</span></span><br><span class="line">    <span class="comment">// Exception：表示当前类是一个异常类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运行时：RuntimeException 核心 就表示由于参数错误而导致的</span></span><br><span class="line">    <span class="comment">// 编译时：Exception 核心 提醒程序员检查本地信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NameFormatException</span><span class="params">()</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NameFormatException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myexception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgeFormatException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="comment">// 技巧：</span></span><br><span class="line">    <span class="comment">// NameFormat：当前异常的名字，表示姓名格式化问题</span></span><br><span class="line">    <span class="comment">// Exception：表示当前类是一个异常类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运行时：RuntimeException 核心 就表示由于参数错误而导致的</span></span><br><span class="line">    <span class="comment">// 编译时：Exception 核心 提醒程序员检查本地信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeFormatException</span><span class="params">()</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeFormatException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="File"><a href="#File" class="headerlink" title="File"></a>File</h1><ul><li>File对象就表示一个路径，可以是文件的路径、也可以是文件夹的路径</li><li>这个路径可以是存在的，也允许是不存在</li></ul><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public File(String pathname)</td><td>根据文件路径创建文件对象</td></tr><tr><td>public File(String parent,String child)</td><td>根据父路径名字符串和子路径名字符串创建文件对象</td></tr><tr><td>public File(File parent,String child)</td><td>根据父路径对应文件对象和子路径字符串创建文件对象</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. public File(String pathname)</span></span><br><span class="line">        <span class="comment">// 根据文件路径创建文件对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\Zhao\\Desktop\\a.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(str);</span><br><span class="line">        System.out.println(f1); <span class="comment">// C:\Users\Zhao\Desktop\a.txt</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. public File(String parent,String child)</span></span><br><span class="line">        <span class="comment">// 父路径：C:\Users\Zhao\Desktop</span></span><br><span class="line">        <span class="comment">// 子路径：a.txt</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\Zhao\\Desktop&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">child</span> <span class="operator">=</span> <span class="string">&quot;a.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parent,child);</span><br><span class="line">        System.out.println(f2); <span class="comment">// C:\Users\Zhao\Desktop\a.txt</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. public File(File parent,String child)</span></span><br><span class="line">        <span class="comment">// 把一个File表示的路径和String表示的路径进行拼接</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">parent2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Zhao\\Desktop&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">child2</span> <span class="operator">=</span> <span class="string">&quot;a.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parent2,child);</span><br><span class="line">        System.out.println(f3); <span class="comment">// C:\Users\Zhao\Desktop\a.txt</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="File的常见成员方法"><a href="#File的常见成员方法" class="headerlink" title="File的常见成员方法"></a>File的常见成员方法</h2><h3 id="判断、获取"><a href="#判断、获取" class="headerlink" title="判断、获取"></a>判断、获取</h3><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public boolean isDirectory()</td><td>判断此路径名表示的File是否为文件夹</td></tr><tr><td>public boolean isFile()</td><td>判断此路径名表示的File是否为文件</td></tr><tr><td>public boolean exists()</td><td>判断此路径名表示的File是否存在</td></tr><tr><td>public long length()</td><td>返回文件的大小（字节数量）</td></tr><tr><td>public String getAbsolutePath()</td><td>返回文件的绝对路径</td></tr><tr><td>public String getPath()</td><td>返回定义文件时使用的路径</td></tr><tr><td>public String getName()</td><td>返回文件的名称，带后缀</td></tr><tr><td>public long lastModified()</td><td>返回文件的最后修改时间（时间毫秒值）</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        | 方法名称                     | 说明                               |</span></span><br><span class="line"><span class="comment">        | ---------------------------- | ---------------------------------- |</span></span><br><span class="line"><span class="comment">        | public boolean isDirectory() | 判断此路径名表示的File是否为文件夹 |</span></span><br><span class="line"><span class="comment">        | public boolean isFile()      | 判断此路径名表示的File是否为文件   |</span></span><br><span class="line"><span class="comment">        | public boolean exists()      | 判断此路径名表示的File是否存在     |</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 对一个文件的路径进行判断</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\data\\a.txt&quot;</span>);</span><br><span class="line">        System.out.println(f1.isDirectory());   <span class="comment">// false</span></span><br><span class="line">        System.out.println(f1.isFile());        <span class="comment">// true</span></span><br><span class="line">        System.out.println(f1.exists());        <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 对一个文件夹的路径进行判断</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\data\\bbb&quot;</span>);</span><br><span class="line">        System.out.println(f2.isDirectory());   <span class="comment">// true</span></span><br><span class="line">        System.out.println(f2.isFile());        <span class="comment">// false</span></span><br><span class="line">        System.out.println(f2.exists());        <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 对一个不存在的路径进行判断</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\data\\c.txt&quot;</span>);</span><br><span class="line">        System.out.println(f3.isDirectory());   <span class="comment">// false</span></span><br><span class="line">        System.out.println(f3.isFile());        <span class="comment">// false</span></span><br><span class="line">        System.out.println(f3.exists());        <span class="comment">// false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        | 方法名称                        | 说明                                 |</span></span><br><span class="line"><span class="comment">        | ------------------------------- | ------------------------------------ |</span></span><br><span class="line"><span class="comment">        | public long length()            | 返回文件的大小（字节数量）           |</span></span><br><span class="line"><span class="comment">        | public String getAbsolutePath() | 返回文件的绝对路径                   |</span></span><br><span class="line"><span class="comment">        | public String getPath()         | 返回定义文件时使用的路径             |</span></span><br><span class="line"><span class="comment">        | public String getName()         | 返回文件的名称，带后缀               |</span></span><br><span class="line"><span class="comment">        | public long lastModified()      | 返回文件的最后修改时间（时间毫秒值） |</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. length 返回文件的大小（字节数量）</span></span><br><span class="line">        <span class="comment">// 无法获取文件夹的大小，只能获取文件的大小，单位：字节</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\data\\a.txt&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\data\\bbb&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">length1</span> <span class="operator">=</span> f1.length();</span><br><span class="line">        <span class="type">long</span> <span class="variable">length2</span> <span class="operator">=</span> f2.length();</span><br><span class="line">        System.out.println(length1);</span><br><span class="line">        System.out.println(length2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. getAbsolutePath 文件绝对路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">absoluteFile1</span> <span class="operator">=</span> f1.getAbsoluteFile();</span><br><span class="line">        <span class="type">File</span> <span class="variable">absoluteFile2</span> <span class="operator">=</span> f3.getAbsoluteFile();</span><br><span class="line">        System.out.println(absoluteFile1);</span><br><span class="line">        System.out.println(absoluteFile2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. getPath</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path1</span> <span class="operator">=</span> f1.getPath();</span><br><span class="line">        <span class="type">String</span> <span class="variable">path2</span> <span class="operator">=</span> f3.getPath();</span><br><span class="line">        System.out.println(path1);</span><br><span class="line">        System.out.println(path2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. getName</span></span><br><span class="line">        <span class="comment">// 如果路径是文件的路径，返回 文件名 + 后缀名</span></span><br><span class="line">        <span class="comment">// 如果路径是文件夹，返回文件夹名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name1</span> <span class="operator">=</span> f1.getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name2</span> <span class="operator">=</span> f3.getName();</span><br><span class="line">        System.out.println(name1);</span><br><span class="line">        System.out.println(name2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. lastModified</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> f3.lastModified();</span><br><span class="line">        System.out.println(l);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建、删除"><a href="#创建、删除" class="headerlink" title="创建、删除"></a>创建、删除</h3><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public boolean createNewFile()</td><td>创建一个新的空的文件</td></tr><tr><td>public boolean mkdir()</td><td>创建单级文件夹</td></tr><tr><td>public boolean mkdirs()</td><td>创建多级文件夹</td></tr><tr><td>public boolean delete()</td><td>删除文件、空文件夹</td></tr></tbody></table><p>delete方法默认只能删除文件和空文件夹，delete方法直接删除不走<font color='orange'>回收站</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        | 方法名称                       | 说明                 |</span></span><br><span class="line"><span class="comment">        | ------------------------------ | -------------------- |</span></span><br><span class="line"><span class="comment">        | public boolean createNewFile() | 创建一个新的空的文件 |</span></span><br><span class="line"><span class="comment">        | public boolean mkdir()         | 创建单级文件夹       |</span></span><br><span class="line"><span class="comment">        | public boolean mkdirs()        | 创建多级文件夹       |</span></span><br><span class="line"><span class="comment">        | public boolean delete()        | 删除文件、空文件夹   |</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. createNewFile</span></span><br><span class="line">        <span class="comment">// 当前路径表示的文件不存在，则创建成功，方法返回 true</span></span><br><span class="line">        <span class="comment">// 当前路径表示的文件存在，则创建失败，方法返回 false</span></span><br><span class="line">        <span class="comment">// 如果父级路径不存在，方法会有异常(IOException)</span></span><br><span class="line">        <span class="comment">// 该方法创建的一定是文件，如果路径中不包含后缀名，则创建一个没有后缀的文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\test\\a.txt&quot;</span>); <span class="comment">// 假设该文件不存在</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">newFile</span> <span class="operator">=</span> f1.createNewFile();</span><br><span class="line">        System.out.println(newFile); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. mkdir</span></span><br><span class="line">        <span class="comment">// windows当中路径是唯一的，如果当前路径已经存在，则创建失败，返回 false</span></span><br><span class="line">        <span class="comment">// 该方法只能创建单级文件夹，无法创建多级文件夹</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\test\\aaa&quot;</span>); <span class="comment">// 假设该文件夹不存在</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\test\\bbb\\bbb\\bbb&quot;</span>); <span class="comment">// 假设该文件夹不存在</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">mkdir1</span> <span class="operator">=</span> f2.mkdir();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">mkdir2</span> <span class="operator">=</span> f3.mkdir();</span><br><span class="line">        System.out.println(mkdir1); <span class="comment">// true</span></span><br><span class="line">        System.out.println(mkdir2); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. mkdirs</span></span><br><span class="line">        <span class="comment">// 既可以创建单级文件夹，也可以创建多级文件夹</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\test\\bbb\\bbb\\bbb&quot;</span>); <span class="comment">// 假设该文件夹不存在</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\test\\ccc&quot;</span>); <span class="comment">// 假设该文件夹不存在</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">mkdirs1</span> <span class="operator">=</span> f4.mkdirs();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">mkdirs2</span> <span class="operator">=</span> f5.mkdirs();</span><br><span class="line">        System.out.println(mkdirs1); <span class="comment">// true</span></span><br><span class="line">        System.out.println(mkdirs2); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. delete</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\test\\a.txt&quot;</span>); <span class="comment">// 存在</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\test\\aaa&quot;</span>); <span class="comment">// 空文件夹</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\test\\bbb\\bbb\\bbb&quot;</span>); <span class="comment">// 多级文件夹</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">delete1</span> <span class="operator">=</span> f6.delete();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">delete2</span> <span class="operator">=</span> f7.delete();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">delete3</span> <span class="operator">=</span> f8.delete();</span><br><span class="line">        System.out.println(delete1); <span class="comment">// true</span></span><br><span class="line">        System.out.println(delete2); <span class="comment">// true</span></span><br><span class="line">        System.out.println(delete3); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public static File[] listRoots()</td><td>列出可用的文件系统根</td></tr><tr><td>public String[] list()</td><td>获取当前该路径下所有内容</td></tr><tr><td>public String[] list(FilenameFilter filter)</td><td>利用文件名过滤器获取当前该路径下所有内容</td></tr><tr><td><font color='red'>public File[] listFiles()</font></td><td><font color='red'>获取当前该路径下所有内容</font></td></tr><tr><td>public File[] listFiles(FileFilter filter)</td><td>利用文件名过滤器获取当前该路径下所有内容</td></tr><tr><td>public File[] listFiles(FilenameFilter filter)</td><td>利用文件名过滤器获取当前该路径下所有内容</td></tr></tbody></table><p><code>listFiles</code>：</p><ul><li>当调用者File表示的路径不存在，返回Null</li><li>当调用者File表示的路径是文件时，返回Null</li><li>当调用者File表示的路径是一个空文件夹时，返回一个长度为0的数组</li><li>当调用者File表示的路径是一个有内容的文件夹时，将里面所有文件和文件夹的路径放在File数组中返回</li><li>当调用者File表示的路径是一个有隐藏文件的文件夹时，将里面所有文件和文件夹的路径放在File数组中返回，包括隐藏文件</li><li>当调用者File表示的路径是需要权限才能访问的文件夹时，返回Null</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FilenameFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        | 方法名称                                       | 说明                                     |</span></span><br><span class="line"><span class="comment">        | ---------------------------------------------- | ---------------------------------------- |</span></span><br><span class="line"><span class="comment">        | public static File[] listRoots()               | 列出可用的文件系统根                     |</span></span><br><span class="line"><span class="comment">        | public String[] list()                         | 获取当前该路径下所有内容                 |</span></span><br><span class="line"><span class="comment">        | public String[] list(FilenameFilter filter)    | 利用文件名过滤器获取当前该路径下所有内容 |</span></span><br><span class="line"><span class="comment">        | public File[] listFiles()                      | 获取当前该路径下所有内容                 |</span></span><br><span class="line"><span class="comment">        | public File[] listFiles(FileFilter filter)     | 利用文件名过滤器获取当前该路径下所有内容 |</span></span><br><span class="line"><span class="comment">        | public File[] listFiles(FilenameFilter filter) | 利用文件名过滤器获取当前该路径下所有内容 |</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. listFiles 获取指定路径下所有文件和文件夹的路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\&quot;</span>);</span><br><span class="line"></span><br><span class="line">        File[] files = f1.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            System.out.println(file);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. listRoots</span></span><br><span class="line">        File[] filesRoots = File.listRoots();</span><br><span class="line">        System.out.println(Arrays.toString(filesRoots)); <span class="comment">// [C:\, E:\]，表示系统存在C盘和E盘</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. list 获取指定路径下所有内容（仅能获取名字）</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\&quot;</span>);</span><br><span class="line">        String[] list = f2.list();</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. list(FilenameFilter filter) 利用文件名过滤器获取当前该路径下所有内容</span></span><br><span class="line">        <span class="comment">// 获取 E:\\data 文件夹里面所有 txt 文件</span></span><br><span class="line">        <span class="comment">// accept方法的形参，依次表示aaa文件夹里面每一个文件或者文件夹的路径</span></span><br><span class="line">        <span class="comment">// 参数一：父级路径</span></span><br><span class="line">        <span class="comment">// 参数二：子级路径</span></span><br><span class="line">        <span class="comment">// 如果返回值为true，就表示当前路径保留</span></span><br><span class="line">        <span class="comment">// 如果返回值为false，就表示当前路径舍弃</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\data&quot;</span>);</span><br><span class="line">        String[] list1 = f3.list(<span class="keyword">new</span> <span class="title class_">FilenameFilter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File dir, String name)</span> &#123;</span><br><span class="line">                <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir, name);</span><br><span class="line">                <span class="keyword">return</span> src.isFile() &amp;&amp; name.endsWith(<span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(list1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><p>存储和读取数据的解决方案</p><p>File类只能对文件本身进行操作，不能读写文件里面存储的数据</p><p>IO流用于读写文件中的数据（可以读写文件，或网络中的数据）</p><pre class="mermaid">flowchart TD    top[IO流]    top --> mid1[输入流]    top --> mid2[输出流]    mid1 --> bottom1[读取]    mid2 --> bottom2[写出]</pre><pre class="mermaid">flowchart TD    top[IO流]    top --> mid1[字节流]    top --> mid2[字符流]    mid1 --> bottom1[所有类型的文件]    mid2 --> bottom2[纯文本文件]</pre><h2 id="IO流的体系"><a href="#IO流的体系" class="headerlink" title="IO流的体系"></a>IO流的体系</h2><pre class="mermaid">flowchart TD    top[IO流体系]    top --> midleft[字节流]    top --> midright[字符流]    midleft --> bottom1left[InputStream--字节输入流]    midleft --> bottom1right[OutputStream--字节输出流]    midright --> bottom2left[Reader--字节输入流]    midright --> bottom2right[Writer--字符输出流]</pre><p>InputStream、OutputStream、Reader、Writer都为抽象类</p><h3 id="基本流："><a href="#基本流：" class="headerlink" title="基本流："></a>基本流：</h3><ul><li>FileInputStream</li><li>FileOutputStream</li><li>FileReader</li><li>FileWriter</li></ul><h2 id="FileOutPutStream"><a href="#FileOutPutStream" class="headerlink" title="FileOutPutStream"></a>FileOutPutStream</h2><p>操作本地文件的字节输出流，可以把程序中的数据写到本地文件中</p><p>步骤：</p><ol><li>创建字节输出流对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 细节1：参数是字符串表示的路径或者是File对象都是可以的</span></span><br><span class="line"><span class="comment">// 细节2：如果文件不存在会创建一个新的文件，但是要保证父级路径是存在的</span></span><br><span class="line"><span class="comment">// 细节3：如果文件已经存在，则会清空文件（覆盖）</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;a.txt&quot;</span>); </span><br></pre></td></tr></table></figure><ol start="2"><li>写数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 细节：write方法的参数是整数，但是实际上写到本地文件的是整数在ASCII上对应的字符</span></span><br><span class="line">fos.write(<span class="number">97</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>释放资源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每次使用完流之后都要释放资源</span></span><br><span class="line">fos.close();</span><br></pre></td></tr></table></figure><h3 id="FileOutPutStream写数据的3种方式"><a href="#FileOutPutStream写数据的3种方式" class="headerlink" title="FileOutPutStream写数据的3种方式"></a>FileOutPutStream写数据的3种方式</h3><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>void write(int b)</td><td>一次写一个字节数据</td></tr><tr><td>void write(byte[] b)</td><td>一次写一个字节数组数据</td></tr><tr><td>void write(byte[] b,int off,int len)</td><td>一次写一个字节数组的部分数据</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteStreamDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        | 方法名称                             | 说明                         |</span></span><br><span class="line"><span class="comment">        | ------------------------------------ | ---------------------------- |</span></span><br><span class="line"><span class="comment">        | void write(int b)                    | 一次写一个字节数据           |</span></span><br><span class="line"><span class="comment">        | void write(byte[] b)                 | 一次写一个字节数组数据       |</span></span><br><span class="line"><span class="comment">        | void write(byte[] b,int off,int len) | 一次写一个字节数组的部分数据 |*/</span></span><br><span class="line">        <span class="comment">// 1.创建对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 写出数据</span></span><br><span class="line">        fos.write(<span class="number">97</span>); <span class="comment">// a</span></span><br><span class="line">        fos.write(<span class="number">98</span>); <span class="comment">// b</span></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">101</span>&#125;; <span class="comment">// abcde</span></span><br><span class="line">        fos.write(bytes);</span><br><span class="line"></span><br><span class="line">        fos.write(bytes,<span class="number">1</span>,<span class="number">3</span>); <span class="comment">// 索引 1~3，即 98、99、100</span></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FileOutPutStream写数据的两个问题"><a href="#FileOutPutStream写数据的两个问题" class="headerlink" title="FileOutPutStream写数据的两个问题"></a>FileOutPutStream写数据的两个问题</h3><p>问题一：换行</p><p>问题二：续写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteStreamDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 换行写：</span></span><br><span class="line"><span class="comment">        * 再次写出一个换行符就可以了</span></span><br><span class="line"><span class="comment">        *   windows：\r\n</span></span><br><span class="line"><span class="comment">        *   linux:   \n</span></span><br><span class="line"><span class="comment">        *   max:     \r</span></span><br><span class="line"><span class="comment">        * 细节：在windows操作系统中，java对回车换行进行了优化</span></span><br><span class="line"><span class="comment">        *      虽然完整的是 \r\n ，但是只需要写其中一个 \r 或者 \n，</span></span><br><span class="line"><span class="comment">        *      java也可以实现换行，因为java会在底层补全。</span></span><br><span class="line"><span class="comment">        *      但是还是建议写全</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 续写：</span></span><br><span class="line"><span class="comment">        * 如果想要续写，打开续写开关即可</span></span><br><span class="line"><span class="comment">        * 开关位置：创建对象的第二个参数</span></span><br><span class="line"><span class="comment">        * 默认false，表示关闭续写，此时创建对象会清空文件</span></span><br><span class="line"><span class="comment">        * 手动传递true，表示打开续写，此时创建对象不会清空文件</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;a.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 写出数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;zheshiyiduanceshiwenzi&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = str.getBytes();</span><br><span class="line">        fos.write(bytes);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写出一个换行符就可以实现换行效果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">warp</span> <span class="operator">=</span> <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] warpbytes = warp.getBytes();</span><br><span class="line">        fos.write(warpbytes);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;huanhang&quot;</span>;</span><br><span class="line">        fos.write(str2.getBytes());</span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h2><p>操作本地文件的字节输入流，可以把本地文件中的数据读取到程序中来</p><p>书写步骤</p><ol><li>创建字节输入流对象</li><li>读数据</li><li>释放资源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mybytestream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteStreamDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 操作本地文件的字节输入流，可以把本地文件中的数据读取到程序中来</span></span><br><span class="line"><span class="comment">        * 书写步骤</span></span><br><span class="line"><span class="comment">        *    1. 创建字节输入流对象</span></span><br><span class="line"><span class="comment">        *       细节1：如果文件不存在，就直接报错</span></span><br><span class="line"><span class="comment">        *       这和字节输出流不一样，输出流遇到不存在的文件，会自动创建</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *    2. 读数据</span></span><br><span class="line"><span class="comment">        *       细节2：一次读一个字节，读出来的是数据在ASCII上对应的数字</span></span><br><span class="line"><span class="comment">        *       细节3：读到文件末尾了，read方法返回-1</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *    3. 释放资源</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 读取数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b1</span> <span class="operator">=</span> fis.read();    <span class="comment">// 一次只能读取一个字节</span></span><br><span class="line">        System.out.println(b1 + <span class="string">&quot;:&quot;</span> + (<span class="type">char</span>)b1);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">b2</span> <span class="operator">=</span> fis.read();    <span class="comment">// 一次只能读取一个字节</span></span><br><span class="line">        System.out.println(b2 + <span class="string">&quot;:&quot;</span> + (<span class="type">char</span>)b2);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">b3</span> <span class="operator">=</span> fis.read();    <span class="comment">// 一次只能读取一个字节</span></span><br><span class="line">        System.out.println(b3 + <span class="string">&quot;:&quot;</span> + (<span class="type">char</span>)b3);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">b4</span> <span class="operator">=</span> fis.read();    <span class="comment">// 一次只能读取一个字节</span></span><br><span class="line">        System.out.println(b4 + <span class="string">&quot;:&quot;</span> + (<span class="type">char</span>)b4);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">b5</span> <span class="operator">=</span> fis.read();    <span class="comment">// 一次只能读取一个字节</span></span><br><span class="line">        System.out.println(b5 + <span class="string">&quot;:&quot;</span> + (<span class="type">char</span>)b5);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">b6</span> <span class="operator">=</span> fis.read();    <span class="comment">// 读取不到数据了，结果为 -1</span></span><br><span class="line">        System.out.println(b6);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FileInputStream循环读取"><a href="#FileInputStream循环读取" class="headerlink" title="FileInputStream循环读取"></a>FileInputStream循环读取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mybytestream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteStreamDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 字节输入流循环读取</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 循环读取</span></span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println((<span class="type">char</span>)b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果写成这种形式，read方法在循环中会执行两次，导致结果错误</span></span><br><span class="line"><span class="keyword">while</span> ((fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println((fis.read());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FileInputStream一次读多个字节"><a href="#FileInputStream一次读多个字节" class="headerlink" title="FileInputStream一次读多个字节"></a>FileInputStream一次读多个字节</h3><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public int read()</td><td>一次读一个字节数据</td></tr><tr><td>public int read(byte[] buffer)</td><td>一次读一个字节数组数据</td></tr></tbody></table><p>注意：一次读一个字节数组的数据，每次读取会尽可能把数组装满</p><h3 id="轻量文件拷贝"><a href="#轻量文件拷贝" class="headerlink" title="轻量文件拷贝"></a>轻量文件拷贝</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mybytestream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteStreamDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 拷贝文件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\copy\\1.jpg&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\copy\\bak.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 拷贝</span></span><br><span class="line">        <span class="comment">// 核心思想：边读边写</span></span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        <span class="comment">// 规则：先开的最后关闭</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="大文件拷贝"><a href="#大文件拷贝" class="headerlink" title="大文件拷贝"></a>大文件拷贝</h3><p>IO流：如果拷贝的文件过大，速度会变慢。</p><p>这是由于拷贝文件时，一次读取一个字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteStreamDemo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// public int read(byte[] buffer) 一次读一个字节数组数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\copy\\1.jpg&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\copy\\bak.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 拷贝</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        // 一次读一个字节数据;</span></span><br><span class="line"><span class="comment">        long timeBefore = System.currentTimeMillis();</span></span><br><span class="line"><span class="comment">        int b;</span></span><br><span class="line"><span class="comment">        while ((b = fis.read()) != -1) &#123;</span></span><br><span class="line"><span class="comment">            fos.write(b);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        long timeAfter = System.currentTimeMillis();</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;拷贝文件花费了&quot; + (timeAfter - timeBefore));   // 78</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一次读一个字节数组数据</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">timeBefore</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">5</span>];</span><br><span class="line">        <span class="type">int</span> len;    <span class="comment">// 这个变量用于记录读取到了几个数据</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">timeAfter</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;拷贝文件花费了&quot;</span> + (timeAfter - timeBefore));   <span class="comment">// 9</span></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        <span class="comment">// 规则：先开的最后关闭</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="try…catch异常处理"><a href="#try…catch异常处理" class="headerlink" title="try…catch异常处理"></a>try…catch异常处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">catch</span>() &#123;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：finally里面的代码一定被执行，除非虚拟机停止</p><p>基本做法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;a.txt&quot;</span>)<span class="string">&#x27;</span></span><br><span class="line"><span class="string">fos.write(97);</span></span><br><span class="line"><span class="string">&#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="string">e.printStackTrace();</span></span><br><span class="line"><span class="string">&#125; finally &#123;</span></span><br><span class="line"><span class="string">fos.close();</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>手动释放资源</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mybytestream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteStreamDemo8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\copy\\1.jpg&quot;</span>);</span><br><span class="line">            fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\copy\\bak.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 拷贝</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">5</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 3. 释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (fos != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK7方案（AutoCloseable）</p><p>特点：特定情况下，可以自动释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(创建流对象<span class="number">1</span>,创建流对象<span class="number">2</span>) &#123;</span><br><span class="line">可能出现异常的代码;</span><br><span class="line">&#125; <span class="keyword">catch</span>(异常类名 变量名) &#123;</span><br><span class="line">异常的处理代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>资源用完最终自动释放</p><p>JDK9方案（AutoCloseable）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">创建流对象<span class="number">1</span>;</span><br><span class="line">创建流对象<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>(流<span class="number">1</span>,流<span class="number">2</span>) &#123;</span><br><span class="line">可能出现异常的代码;</span><br><span class="line">&#125; <span class="keyword">catch</span>(异常类名 变量名) &#123;</span><br><span class="line">异常的处理代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>资源用完最终自动释放</p><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>字节流读取文件的时候，文件中不要有中文</p><h3 id="ASCII字符集"><a href="#ASCII字符集" class="headerlink" title="ASCII字符集"></a>ASCII字符集</h3><iframe src="https://www.runoob.com/w3cnote/ascii.html"></iframe><pre class="mermaid">flowchart TD    id1["a[要查询的英文]"]    id1 --查询ASCII--> id2["97(110 0001)[对应的数字]"]    id2 --编码--> id3["0110 0001"]    id3 --解码--> id4[97]    id4 --查询ASCII--> id5["a[读取到的英文]"]</pre><h3 id="计算机的存储规则"><a href="#计算机的存储规则" class="headerlink" title="计算机的存储规则"></a>计算机的存储规则</h3><ol><li>GB2312字符集：1980年发布，1981年5月1日实施ide简体中文汉字编码国家标准。收录7445个图形字符，其中包括6763个简体汉字</li><li>BIG5字符集：台湾地区繁体中文标准字符集，共收录13053个中文字，1984年实施。</li><li>GBK字符集：2000年3月17日发布，收录21003个汉字。包括国家标准GB13000-1中的全部中日韩汉字，和BIG5编码中的所有汉字（完全兼容ASCII）</li><li>Unicode字符集：国际标准字符集，他将世界各种语言的每个字符定义一个唯一的编码，以满足跨语言、跨平台的文本信息转换</li></ol><p><font color='red'>windows系统默认使用的就是GBK</font></p><h3 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h3><h4 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h4><pre class="mermaid">flowchart TD    id1["a[要查询的英文]"]    id1 --查询GBK--> id2["97(110 0001)[对应的数字]"]    id2 --编码--> id3["0110 0001"]    id3 --解码--> id4[97]    id4 --查询GBK--> id5["a[读取到的英文]"]</pre><h4 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h4><pre class="mermaid">flowchart TD    id1["汉[要查询的汉字]"]    id1 --查询GBK--> id2["47802(10111010 10111010)[对应的数字]"]    id2 --编码--> id3["10111010 10111010"]    id3 --解码--> id4[47802]    id4 --查询GBK--> id5["汉[读取到的汉字]"]</pre><p>规则1：汉字两个字节存储</p><p>规则2：高位字节（即两个字节的第一个字节）二进制一定以<code>1</code>开头，转成十进制之后是一个负数</p><h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><h4 id="英文-1"><a href="#英文-1" class="headerlink" title="英文"></a>英文</h4><pre class="mermaid">flowchart TD    id1["a[要查询的英文]"]    id1 --查询Unicode--> id2["97[对应的数字]"]    id2 --编码--> id3["00000000 01100001"]    id3 --解码--> id4[97]    id4 --查询Unicode--> id5["a[读取到的英文]"]</pre><p>UTF-8编码规则：用1~4个字节保存</p><p>UTF-8编码方式：</p><ul><li>0xxxxxxx</li><li>110xxxxx 10xxxxxx</li><li>1110xxxx 10xxxxxx 10xxxxxx</li><li>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</li></ul><p>UTF-16编码规则：用2~4个字节保存</p><p>UTF-32编码规则：固定使用四个字节保存</p><h4 id="中文-1"><a href="#中文-1" class="headerlink" title="中文"></a>中文</h4><pre class="mermaid">flowchart TD    id1["汉[要查询的中文]"]    id1 --查询Unicode--> id2["27721(01101100 01001001)[对应的数字]"]    id2 --编码--> id3["11100110 10110001 10001001"]</pre><h3 id="乱码"><a href="#乱码" class="headerlink" title="乱码"></a>乱码</h3><p>原因1：读取数据时未读完整个汉字</p><p>原因2：编码和解码时的方式不统一</p><h4 id="如何不产生乱码"><a href="#如何不产生乱码" class="headerlink" title="如何不产生乱码"></a>如何不产生乱码</h4><ol><li>不要用字节流读取文本文件</li><li>编码解码时使用同一个码表，同一个编码方式</li></ol><h3 id="Java编码的方法"><a href="#Java编码的方法" class="headerlink" title="Java编码的方法"></a>Java编码的方法</h3><table><thead><tr><th>String类中的方法</th><th>说明</th></tr></thead><tbody><tr><td>public byte[] getBytes()</td><td>使用默认方式进行编码</td></tr><tr><td>public byte[] getBytes(String charsetName)</td><td>使用指定方式进行编码</td></tr></tbody></table><h3 id="Java解码的方法"><a href="#Java解码的方法" class="headerlink" title="Java解码的方法"></a>Java解码的方法</h3><table><thead><tr><th>String类中的方法</th><th>说明</th></tr></thead><tbody><tr><td>String(byte[] bytes)</td><td>使用默认方式进行解码</td></tr><tr><td>String(byte[] bytes,String charsetName)</td><td>使用指定方式进行解码</td></tr></tbody></table><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">charsetDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * Java编码方法</span></span><br><span class="line"><span class="comment">        * | String类中的方法                           | 说明                 |</span></span><br><span class="line"><span class="comment">        * | ------------------------------------------ | -------------------- |</span></span><br><span class="line"><span class="comment">        * | public byte[] getBytes()                   | 使用默认方式进行编码 |</span></span><br><span class="line"><span class="comment">        * | public byte[] getBytes(String charsetName) | 使用指定方式进行编码 |</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * Java解码方法</span></span><br><span class="line"><span class="comment">        * | String类中的方法                        | 说明                 |</span></span><br><span class="line"><span class="comment">        * | --------------------------------------- | -------------------- |</span></span><br><span class="line"><span class="comment">        * | String(byte[] bytes)                    | 使用默认方式进行解码 |</span></span><br><span class="line"><span class="comment">        * | String(byte[] bytes,String charsetName) | 使用指定方式进行解码 |</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. 编码</span></span><br><span class="line">        <span class="comment">// 默认方式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello世界&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes1 = str.getBytes();</span><br><span class="line">        System.out.println(Arrays.toString(bytes1));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定编码方式</span></span><br><span class="line">        <span class="type">byte</span>[] bytes2 = str.getBytes(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(bytes2));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 解码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes1);</span><br><span class="line">        System.out.println(str2);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes2);   <span class="comment">// 如果使用默认解码方式，会有乱码，因为编码时采用的是GBK</span></span><br><span class="line">        System.out.println(str3);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes2,<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        System.out.println(str4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>字符流的底层其实就是字节流</p><p><code>字符流 = 字节流 + 字符集</code></p><p>特点：</p><p>输入流：一次读一个字节，遇到中文时，一次读多个字节</p><p>输出流：底层会把数据按照指定的编码方式进行编码，变成字节再写到文件中</p><p>使用场景：</p><p>对于纯文本文件进行读写操作</p><h2 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h2><ol><li>创建字符输入流对象</li></ol><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td>public FileReader(File file)</td><td>创建字符输入流关联本地文件</td></tr><tr><td>public FileReader(String pathname)</td><td>创建字符输入流关联本地文件</td></tr></tbody></table><p>细节1：如果文件不存在，就直接报错</p><ol start="2"><li>读取数据</li></ol><table><thead><tr><th>成员方法</th><th>说明</th></tr></thead><tbody><tr><td>public int read()</td><td>读取数据，读到末尾返回-1</td></tr><tr><td>public int read(char[] buffer)</td><td>读取多个数据，读到末尾返回-1</td></tr></tbody></table><p>细节1：按字节进行读取，遇到中文，一次读多个字节，读取后解码，返回一个整数</p><p>细节2：读到文件末尾了 ，read方法返回-1</p><ol start="3"><li>释放资源</li></ol><table><thead><tr><th>成员方法</th><th>说明</th></tr></thead><tbody><tr><td>public int close()</td><td>释放资源&#x2F;关流</td></tr></tbody></table><p>示例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharStreamDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;c.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 读取数据</span></span><br><span class="line">        <span class="type">int</span> ch;</span><br><span class="line">        <span class="keyword">while</span> ((ch = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>)ch);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharStreamDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;c.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 读取数据</span></span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read(chars)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(chars,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FileWrite"><a href="#FileWrite" class="headerlink" title="FileWrite"></a>FileWrite</h2><ol><li>创建字符输出流对象</li></ol><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td>public FileWriter(File file)</td><td>创建字符输出流关联本地文件</td></tr><tr><td>public FileWriter(String pathname)</td><td>创建字符输出流关联本地文件</td></tr><tr><td>public FileWriter(File file,boolean append)</td><td>创建字符输出流关联本地文件，续写</td></tr><tr><td>public FileWriter(String pathname,boolean append)</td><td>创建字符输出流关联本地文件，续写</td></tr></tbody></table><p>细节1：参数是字符串表示的路径或者File对象都是可以的</p><p>细节2：如果文件不存在会创建一个新的文件，但是要保证父级路径是存在的</p><p>细节3：如果文件已经存在，则会清空文件，如果不想清空可以打开续写开关</p><ol start="2"><li>写数据</li></ol><table><thead><tr><th>成员方法</th><th>说明</th></tr></thead><tbody><tr><td>void write(int c)</td><td>写出一个字符</td></tr><tr><td>void write(String str)</td><td>写出一个字符串</td></tr><tr><td>void write(String str,int off,int len)</td><td>写出一个字符串的一部分</td></tr><tr><td>void write(char[] cbuf)</td><td>写出一个字符数组</td></tr><tr><td>void write(char[] cbuf,int off,int len)</td><td>写出字符数组的一部分</td></tr></tbody></table><p>细节：如果write方法的参数是整数，但是实际上写道本地文件中的是整数在字符集上对应的字符</p><ol start="3"><li>释放资源</li></ol><p>细节：每次使用完流之后都要释放资源</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharStreamDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;d.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 写出数据</span></span><br><span class="line">        <span class="comment">// fw.write(25105);</span></span><br><span class="line">        fw.write(<span class="string">&quot;我是写出的数据&quot;</span>);</span><br><span class="line"></span><br><span class="line">        fw.write(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] chars = &#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;张&#x27;</span>,<span class="string">&#x27;三&#x27;</span>&#125;;</span><br><span class="line">        fw.write(chars);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符流原理解析"><a href="#字符流原理解析" class="headerlink" title="字符流原理解析"></a>字符流原理解析</h2><ol><li>创建字符输入流对象</li></ol><p>底层：关联文件，并创建缓冲区（长度为8192的字节数组）</p><ol start="2"><li>读取数据</li></ol><p>底层：1. 判断缓冲区中是否有数据可以读取</p><p>​         2. 缓冲区没有数据：就从文件中获取数据，装到缓冲区中，每次尽可能装满缓冲区</p><pre><code>           3. 缓冲区有数据：就从缓冲区中读取</code></pre><p>空参read方法：一次读取一个字节，遇到中文一次读多个字节，并把字节解码转成十进制返回</p><p>有参read方法：把读取字节，解码，强转三步合并了，强转之后的字符放到数组中</p><h3 id="flush和close"><a href="#flush和close" class="headerlink" title="flush和close"></a>flush和close</h3><table><thead><tr><th>成员方法</th><th>说明</th></tr></thead><tbody><tr><td>public void flush()</td><td>将缓冲区中的数据，刷新到本地文件中</td></tr><tr><td>public void close()</td><td>释放资源&#x2F;关流</td></tr></tbody></table><p>flush：刷新之后，还可以继续往文件中写出数据</p><p>close：断开通道，无法再往文件中写出数据</p><h2 id="字节流和字符流的使用场景"><a href="#字节流和字符流的使用场景" class="headerlink" title="字节流和字符流的使用场景"></a>字节流和字符流的使用场景</h2><p>字节流：</p><p>拷贝任意类型的文件</p><p>字符流：</p><p>读取纯文本文件中的数据</p><p>往纯文本文件中写出数据</p><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><ul><li><p>BufferedInputStream</p></li><li><p>BufferedOutputStream</p></li><li><p>BufferedReader</p></li><li><p>BufferedWriter</p></li></ul><h3 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h3><p>原理：底层自带了长度为8192缓冲区提高性能</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public BufferedInputStream(InputStream is)</td><td>把基本流包装成高级流，提高读取数据的性能</td></tr><tr><td>public BufferedOutputStream(OutputStream os)</td><td>把基本流包装成高级流，提高写出数据的性能</td></tr></tbody></table><h4 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h4><p>利用字节缓冲流拷贝文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedStreamDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 利用字节缓冲流拷贝文件</span></span><br><span class="line">        <span class="comment">// 一次读写一个字节</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建缓冲流的对象</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>));</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;copy.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 循环读取并写到目的地</span></span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedStreamDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 利用字节缓冲流拷贝文件</span></span><br><span class="line">        <span class="comment">// 一次读写多个字节</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建缓冲流的对象</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>));</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;copy.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 循环读取并写到目的地</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字节缓冲流提高效率的原理"><a href="#字节缓冲流提高效率的原理" class="headerlink" title="字节缓冲流提高效率的原理"></a>字节缓冲流提高效率的原理</h4><p>在Java中，缓冲流（Buffered Streams）可以提高I&#x2F;O操作的效率。这是因为缓冲流在内部维护了一个数据缓冲区，可以<font color='red'>减少直接对硬盘或网络的读写次数</font>。</p><p>当我们进行读取操作时，缓冲流会一次性从硬盘或网络中读取多个数据到缓冲区，然后我们可以从缓冲区中逐个读取这些数据。这样，即使每次只需要读取一个数据，也不需要每次都进行硬盘或网络操作，从而提高了效率。</p><p>同样，当我们进行写入操作时，缓冲流会先将数据写入到缓冲区，当缓冲区满了之后，再一次性将缓冲区中的数据写入到硬盘或网络。这样，即使我们每次只写入一个数据，也不需要每次都进行硬盘或网络操作，从而提高了效率。</p><p>总的来说，<font color='red'>缓冲流通过减少对硬盘或网络的直接操作次数，从而提高了I&#x2F;O操作的效率。</font></p><h3 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h3><p>原理：底层自带了长度为8192的缓冲区提高性能</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public BufferedReader(Reader r)</td><td>把基本流包装为高级流</td></tr><tr><td>public BufferedWriter(Writer w)</td><td>把基本流包装为高级流</td></tr></tbody></table><h4 id="字符缓冲流特有方法"><a href="#字符缓冲流特有方法" class="headerlink" title="字符缓冲流特有方法"></a>字符缓冲流特有方法</h4><table><thead><tr><th>字符缓冲输入流特有方法</th><th>说明</th></tr></thead><tbody><tr><td>public String readLine()</td><td>读取一行数据，如果没有数据可读了，会返回Null</td></tr></tbody></table><table><thead><tr><th>字符缓冲输出流特有方法</th><th>说明</th></tr></thead><tbody><tr><td>public void newLine()</td><td>跨平台换行</td></tr></tbody></table><p>输入流示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedStreamDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 字符缓冲输入流</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建字符缓冲输入流的对象</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;test.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 读取数据</span></span><br><span class="line">        <span class="comment">// 细节：</span></span><br><span class="line">        <span class="comment">// readLine方法在读取的时候，一次读一整行，遇到回车换行结束</span></span><br><span class="line">        <span class="comment">// 但是并不会把回车换行读到内存当中</span></span><br><span class="line">        <span class="comment">// String line = br.readLine();</span></span><br><span class="line">        <span class="comment">// System.out.println(line);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取所有文本内容</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出流示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedStreamDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 字符缓冲输出流</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建字符缓冲输入流的对象</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;e.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 写出数据</span></span><br><span class="line">        bw.write(<span class="string">&quot;这是一段写入缓冲区流的测试文字&quot;</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.write(<span class="string">&quot;这也是一段字符写入缓冲流的测试文字&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><p>转换流是字符流和字节流之间的桥梁</p><p>作用一：指定字符集读写（淘汰）</p><p>作用二：字节流想要使用字符流中的方法</p><h3 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConvertStreamDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 利用转换流按照指定字符编码读取</span></span><br><span class="line">        <span class="comment">// 该方法已经被JDK11淘汰了</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*// 1. 创建对象并指定字符编码</span></span><br><span class="line"><span class="comment">        InputStreamReader isr = new InputStreamReader(new FileInputStream(&quot;gbkFile.txt&quot;),&quot;GBK&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // 2. 读取数据</span></span><br><span class="line"><span class="comment">        int ch;</span></span><br><span class="line"><span class="comment">        while ((ch = isr.read()) != -1) &#123;</span></span><br><span class="line"><span class="comment">            System.out.print((char) ch);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // 3. 释放资源</span></span><br><span class="line"><span class="comment">        isr.close();*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 替代方案</span></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;gbkFile.txt&quot;</span>, Charset.forName(<span class="string">&quot;GBK&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 读取数据</span></span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read(chars)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(chars,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出流"><a href="#输出流" class="headerlink" title="输出流"></a>输出流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConvertStreamDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 利用转换流按照指定字符编码写出</span></span><br><span class="line">        <span class="comment">// 以下方法同样也是被被淘汰了</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        // 1. 创建转换流对象</span></span><br><span class="line"><span class="comment">        OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(&quot;OutPutGBKFile.txt&quot;),&quot;GBK&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // 2. 写出数据</span></span><br><span class="line"><span class="comment">        osw.write(&quot;Hello，世界&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // 3. 释放资源</span></span><br><span class="line"><span class="comment">        osw.close();*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 替代方案</span></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;OutPutGBKFile.txt&quot;</span>, Charset.forName(<span class="string">&quot;GBK&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 写出数据</span></span><br><span class="line">        fw.write(<span class="string">&quot;你好，世界&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="转换文件编码"><a href="#转换文件编码" class="headerlink" title="转换文件编码"></a>转换文件编码</h3><p>方法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConvertStreamDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 将本地GBK文件转换为UTF-8</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// JDK11之前的方案</span></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;gbkFile.txt&quot;</span>),<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;OldOutPutUTF.txt&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 循环读取/写出</span></span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            osw.write(b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        osw.close();</span><br><span class="line">        isr.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConvertStreamDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 将本地GBK文件转换为UTF-8</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// JDK11之后的方案</span></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;gbkFile.txt&quot;</span>, Charset.forName(<span class="string">&quot;GBK&quot;</span>));</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;NewOutPutGBKFile.txt&quot;</span>,Charset.forName(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 写出数据</span></span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fw.write(b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字节流使用字符流方法"><a href="#字节流使用字符流方法" class="headerlink" title="字节流使用字符流方法"></a>字节流使用字符流方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConvertStreamDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 利用字节流读取文件中的数据，每次读取一整行，而且不能出现乱码</span></span><br><span class="line">        <span class="comment">// 字节流在读取中文时，会出现乱码，这时需要字符流</span></span><br><span class="line">        <span class="comment">// 字节流里面是没有读取一整行的方法的，这时需要缓冲流</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="comment">/*FileInputStream fis = new FileInputStream(&quot;gbkFile.txt&quot;);</span></span><br><span class="line"><span class="comment">        InputStreamReader isr = new InputStreamReader(fis,Charset.forName(&quot;GBK&quot;));</span></span><br><span class="line"><span class="comment">        BufferedReader br = new BufferedReader(isr);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;gbkFile.txt&quot;</span>),<span class="string">&quot;GBK&quot;</span>));</span><br><span class="line"></span><br><span class="line">        String s;</span><br><span class="line">        <span class="keyword">while</span> ((s = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="序列化流-反序列化流"><a href="#序列化流-反序列化流" class="headerlink" title="序列化流&#x2F;反序列化流"></a>序列化流&#x2F;反序列化流</h2><p>序列化流(ObjectOutputStream)：可以把Java中的对象写到本地文件中，所以也叫对象操作输出流</p><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td>public ObjectOutputStream(OutputStream out)</td><td>把基本流包装为高级流</td></tr></tbody></table><table><thead><tr><th>成员方法</th><th>说明</th></tr></thead><tbody><tr><td>public final void writeObejct(Object obj)</td><td>把对象序列化（写出）到文件中去</td></tr></tbody></table><p>细节：使用对象输出流将对象保存到文件时会出现<code>NotSerializableException</code>异常</p><p>解决方案：需要让JavaBean类实现Serializable接口</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectStreamDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 需求：利用序列化流/对象操作输出流，把一个对象写到本地文件中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建序列化流对象</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;zhangsan.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 写出数据</span></span><br><span class="line">        oos.writeObject(stu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 释放资源</span></span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反序列化流(ObjectInputStream)</p><p>可以把序列化到本地文件中的对象，读取到程序中来</p><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td>public ObjectInputStream(InputStream out)</td><td>把基本流变成高级流</td></tr></tbody></table><table><thead><tr><th>成员方法</th><th>说明</th></tr></thead><tbody><tr><td>public Object readObject()</td><td>序列化到本地文件中的对象，读取到程序中来</td></tr></tbody></table><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectStreamDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建反序列化流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;zhangsan.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 读取数据</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="comment">// 要打印对象值而不是地址值，需要在Javabean中重写toString方法</span></span><br><span class="line">        System.out.println(o.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h3><p>假设最初的Javabean如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Serializable接口里面是没有抽象方法的，所以也叫这种接口为标记型接口</span></span><br><span class="line"><span class="comment">* 一旦实现了这个接口，那么就表示当前的Student类可以被序列化</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将对象序列化输出到文本后，又对Javabean进行了修改，修改为以下内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Serializable接口里面是没有抽象方法的，所以也叫这种接口为标记型接口</span></span><br><span class="line"><span class="comment">* 一旦实现了这个接口，那么就表示当前的Student类可以被序列化</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> String[] hobby;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getHobby() &#123;</span><br><span class="line">        <span class="keyword">return</span> hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHobby</span><span class="params">(String[] hobby)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hobby = hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，如果将序列化对象进行反序列化操作，就会提示报错，这是由于Javabean内的<code>版本号</code>不一致导致的</p><p>解决方法：</p><p>在Javabean中定义常量版本号（固定版本号），写法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br></pre></td></tr></table></figure><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ol><li>使用序列化流将对象写到文件时，需要让Javabean类实现<code>Serializable</code>接口。否则，会出现<code>NotSerializableException</code>异常</li><li>序列化流写到文件中的数据是不能修改的，一旦修改就无法再次读回来了</li><li>序列化对象后，修改了Javabean类，再次反序列化，会出问题，会抛出<code>InvalidClassException</code>异常<ul><li>解决方案：给Javabean类添加serialVersionUID（序列号、版本号）</li></ul></li><li>如果一个对象中的某个成员变量的值不想被序列化，可以给该成员变量加<code>transient</code>关键字修饰，该关键字标记的成员变量不参与序列化过程</li></ol><h3 id="多个对象序列化"><a href="#多个对象序列化" class="headerlink" title="多个对象序列化"></a>多个对象序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mytest.Student;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 需求：将多个自定义对象序列化到文件中，但是对象的个数不确定</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="string">&quot;苏州&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>,<span class="string">&quot;南京&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>,<span class="number">17</span>,<span class="string">&quot;无锡&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;objectsFile.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 序列化多个对象</span></span><br><span class="line">        oos.writeObject(s1);</span><br><span class="line">        oos.writeObject(s2);</span><br><span class="line">        oos.writeObject(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.EOFException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建反序列化流的对象</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;objectsFile.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 读取数据</span></span><br><span class="line">        <span class="comment">// 执行一次方法返回一个对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">                System.out.println(o.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (EOFException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行完毕&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><p>只有输出流，即<code>OutputStream</code>和<code>Writer</code>的子类：</p><ul><li>PrintStream</li><li>PrintWriter</li></ul><p>特点：</p><ol><li>打印流只操作文件目的地，不操作数据源</li><li>特有的写出方法可以实现，数据原样写出</li><li>特有的写出方法，可以实现自动刷新，自动换行<ul><li>打印一次数据 &#x3D; 写出 + 换行 + 刷新</li></ul></li></ol><h3 id="字节打印流"><a href="#字节打印流" class="headerlink" title="字节打印流"></a>字节打印流</h3><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td>public PrintStream(OutputStream&#x2F;File&#x2F;String)</td><td>关联字节输出流&#x2F;文件&#x2F;文件路径</td></tr><tr><td>public PrintStream(String fileName,Charset charset)</td><td>指定字符编码</td></tr><tr><td>public PrintStream(OutputStream out,boolean autoFlush)</td><td>自动刷新</td></tr><tr><td>public PrintStream(OutputStream out,boolean autoFlush,String encoding)</td><td>指定字符编码且自动刷新</td></tr></tbody></table><p>字节流底层没有缓冲区，开不开自动刷新都一样</p><table><thead><tr><th>成员方法</th><th>说明</th></tr></thead><tbody><tr><td>public void write(int b)</td><td>常规方法：规则跟之前一样，将指定的字节写出</td></tr><tr><td>public void println(Xxx xx)</td><td>特有方法：打印任意数据，自动刷新，自动换行</td></tr><tr><td>public void print(Xxx xx)</td><td>特有方法：打印任意数据，不换行</td></tr><tr><td>public void printf(String format,Object… args)</td><td>特有方法：带有占位符的打印语句，不换行</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintStreamDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException, UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建字节打印流对象</span></span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;PrintStreamFile1.txt&quot;</span>),<span class="literal">true</span>,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 写出数据</span></span><br><span class="line">        ps.println(<span class="number">97</span>);</span><br><span class="line">        ps.print(<span class="literal">true</span>);</span><br><span class="line">        ps.println();</span><br><span class="line">        ps.printf(<span class="string">&quot;%s 一段 %s&quot;</span>,<span class="string">&quot;这是&quot;</span>,<span class="string">&quot;文字&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        ps.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符打印流"><a href="#字符打印流" class="headerlink" title="字符打印流"></a>字符打印流</h3><table><thead><tr><th>构造方法</th><th>说明说明</th></tr></thead><tbody><tr><td>public PrintWriter(Writer&#x2F;File&#x2F;String)</td><td>关联字节输出流&#x2F;文件&#x2F;文件路径</td></tr><tr><td>public PrintWriter(String fileName,Charset charset)</td><td>指定字符编码</td></tr><tr><td>public PrintWriter(Write w,boolean autoFlush)</td><td>自动刷新</td></tr><tr><td>public PrintWriter(OutputStream out,boolean autoFlush,String encoding)</td><td>指定字符编码且自动刷新</td></tr></tbody></table><p>字符流底层有缓冲区，想要自动刷新需要开启</p><table><thead><tr><th>成员方法</th><th>说明</th></tr></thead><tbody><tr><td>public void write(int b)</td><td>常规方法：规则跟之前一样，将指定的字节写出</td></tr><tr><td>public void println(Xxx xx)</td><td>特有方法：打印任意数据，自动刷新，自动换行</td></tr><tr><td>public void print(Xxx xx)</td><td>特有方法：打印任意数据，不换行</td></tr><tr><td>public void printf(String format,Object… args)</td><td>特有方法：带有占位符的打印语句，不换行</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintStreamDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建字符打印流对象</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;PrintWriterFile.txt&quot;</span>),<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 写出数据</span></span><br><span class="line">        pw.println(<span class="string">&quot;PrintWriter方法很好用&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintStreamDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 打印流的应用场景</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取打印流的对象，此打印流在虚拟机启动的时候，由虚拟机创建，默认指向控制台</span></span><br><span class="line">        <span class="comment">// 特殊的打印流，系统中的标准输出流，不能关闭，在系统中是唯一的（如果误关，需要重启虚拟机）</span></span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> System.out;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用打印流中的方法println</span></span><br><span class="line">        ps.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="（解）压缩流"><a href="#（解）压缩流" class="headerlink" title="（解）压缩流"></a>（解）压缩流</h2><h3 id="解压缩流"><a href="#解压缩流" class="headerlink" title="解压缩流"></a>解压缩流</h3><p>解压的本质：把压缩包里面的每一个文件或者文件夹读取出来，按照层级拷贝到目的地当中</p><p>Java中只能识别<code>zip</code>压缩文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZipStreamDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建一个File表示要解压的压缩包</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\test.zip&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建一个File表示解压的目的地</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Zhao\\Desktop&quot;</span>);</span><br><span class="line"></span><br><span class="line">        unzip(src,dest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个方法用来解压</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unzip</span><span class="params">(File src,File dest)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 解压的本质：把压缩包里面的每一个文件或者文件夹读取出来，按照层级拷贝到目的地当中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个解压缩流用来读取压缩包中的数据</span></span><br><span class="line">        <span class="type">ZipInputStream</span> <span class="variable">zip</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(src));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 要先获取到压缩包里面的每一个zipEntry对象</span></span><br><span class="line">        <span class="comment">/*for (int i = 0; i &lt; 100; i++) &#123;</span></span><br><span class="line"><span class="comment">            ZipEntry entry = zip.getNextEntry();</span></span><br><span class="line"><span class="comment">            System.out.println(entry);  // 会遍历压缩包里的所有文件，遍历完所有后继续遍历会返回null</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        ZipEntry entry;</span><br><span class="line">        <span class="keyword">while</span> ((entry = zip.getNextEntry()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(entry);</span><br><span class="line">            <span class="keyword">if</span> (entry.isDirectory()) &#123;</span><br><span class="line">                <span class="comment">// 文件夹：需要在目的地dest处创建一个同样的文件夹</span></span><br><span class="line">                <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dest,entry.toString());</span><br><span class="line">                file.mkdirs();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 文件：需要读取到压缩包中的文件，并把他存放到目的地dest文件夹中（按照层级目录进行存放）</span></span><br><span class="line">                <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(dest,entry.toString()));</span><br><span class="line">                <span class="type">int</span> b;</span><br><span class="line">                <span class="keyword">while</span> ((b = zip.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// 写到目的地</span></span><br><span class="line">                    fos.write(b);</span><br><span class="line">                &#125;</span><br><span class="line">                fos.close();</span><br><span class="line">                zip.closeEntry();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        zip.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="压缩流"><a href="#压缩流" class="headerlink" title="压缩流"></a>压缩流</h3><p>压缩本质：把每一个（文件&#x2F;文件夹）看成<code>ZipEntry</code>对象放到压缩包中</p><p>单文件压缩</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZipStreamDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 压缩流：</span></span><br><span class="line"><span class="comment">        *   需求：</span></span><br><span class="line"><span class="comment">        *       把E:\\test.txt打包成一个压缩包</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 该示例只支持单文件压缩</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建File对象表示要压缩的文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\test.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建File对象表示压缩包的位置</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Zhao\\Desktop&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 调用方法用来压缩</span></span><br><span class="line">        toZip(src,dest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 作用：</span></span><br><span class="line"><span class="comment">    * 参数一：表示要压缩的文件</span></span><br><span class="line"><span class="comment">    * 参数二：表示压缩包的位置</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">toZip</span><span class="params">(File src,File dest)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建压缩流关联压缩包</span></span><br><span class="line">        <span class="type">ZipOutputStream</span> <span class="variable">zos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(dest,<span class="string">&quot;a.zip&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建ZipEntry对象，表示压缩包里面的每一个文件和文件夹</span></span><br><span class="line">        <span class="type">ZipEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipEntry</span>(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 把ZipEntry对象放到压缩包当中</span></span><br><span class="line">        zos.putNextEntry(entry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 把src中的数据写到压缩包中</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(src);</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            zos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 释放资源</span></span><br><span class="line">        zos.closeEntry();</span><br><span class="line">        zos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件夹压缩&#x2F;多文件压缩</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZipStreamDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 多文件压缩</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建File对象表示要压缩的文件夹</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\ziptest&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建File对象表示压缩包的父级路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">destParent</span> <span class="operator">=</span> src.getParentFile();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 创建File对象表示压缩包的路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(destParent,src.getName() + <span class="string">&quot;.zip&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 创建压缩流关联压缩包</span></span><br><span class="line">        <span class="type">ZipOutputStream</span> <span class="variable">zos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(dest));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 获取src里面的每一个文件，变成ZipEntry对象，放入到压缩包当中</span></span><br><span class="line">        toZip(src,zos, src.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 释放资源</span></span><br><span class="line">        zos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 作用：获取src里面的每一个文件，变成ZipEntry对象，放入到压缩包当中</span></span><br><span class="line"><span class="comment">    * 参数一：数据源</span></span><br><span class="line"><span class="comment">    * 参数二：压缩流</span></span><br><span class="line"><span class="comment">    * 参数三：压缩包内部的路径</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">toZip</span><span class="params">(File src,ZipOutputStream zos,String name)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 进入src文件夹</span></span><br><span class="line">        File[] files = src.listFiles();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">                <span class="comment">// 3. 判断-文件，变成ZipEntry对象，放入到压缩包当中</span></span><br><span class="line">                <span class="type">ZipEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipEntry</span>(name + <span class="string">&quot;\\&quot;</span> + file.getName());</span><br><span class="line">                zos.putNextEntry(entry);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 读取文件中的数据，写到压缩包</span></span><br><span class="line">                <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">                <span class="type">int</span> b;</span><br><span class="line">                <span class="keyword">while</span> ((b = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    zos.write(b);</span><br><span class="line">                &#125;</span><br><span class="line">                fis.close();</span><br><span class="line">                zos.closeEntry();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 4. 判断-文件夹，递归</span></span><br><span class="line">                toZip(file,zos,name + <span class="string">&quot;\\&quot;</span> + file.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Commons-io"><a href="#Commons-io" class="headerlink" title="Commons-io"></a>Commons-io</h2><p>Commons-io是apache开源基金组织提供的一组有关IO操作的开源工具包</p><p>作用：提高IO流的开发效率</p><p>Commons有以下工具类：</p><ul><li>StringUtils 字符串工具类</li><li>NumberUtils 数字工具类</li><li>ArrayUtils 数组工具类</li><li>RandomUtils 随机数工具类</li><li>DateUtils 日期工具类</li><li>StopWatch 秒表工具类</li><li>ClassUtils 反射工具类</li><li>SystemUtils 系统工具类</li><li>MapUtils 集合工具类</li><li>Beanutils bean工具类</li><li>…等等</li></ul><h3 id="Commons-io使用步骤"><a href="#Commons-io使用步骤" class="headerlink" title="Commons-io使用步骤"></a>Commons-io使用步骤</h3><ol><li>在项目中创建一个文件夹：lib</li><li>将jar包复制粘贴到lib文件夹</li><li>右键点击jar包，选择 Add as Library -&gt; 点击OK</li><li>在类中导包使用</li></ol><h3 id="FileUtils"><a href="#FileUtils" class="headerlink" title="FileUtils"></a>FileUtils</h3><table><thead><tr><th>FileUtils类（文件&#x2F;文件夹相关）</th><th>说明</th></tr></thead><tbody><tr><td>static void copyFile(File srcFile,File destFile)</td><td>复制文件</td></tr><tr><td>static void copyDirectory(File srcDir,File destDir)</td><td>复制文件夹</td></tr><tr><td>static void copyDirectoryToDirectory(File srcDir,File destDir)</td><td>复制文件夹</td></tr><tr><td>static void deleteDirectory(File directory)</td><td>删除文件夹</td></tr><tr><td>static void cleanDirectory(File directory)</td><td>清空文件夹</td></tr><tr><td>static String readFileToString(File file,Charset encoding)</td><td>读取文件中的数据变成字符串</td></tr><tr><td>static void write(File file,CharSequence data,String encoding)</td><td>写出数据</td></tr></tbody></table><h3 id="IOUtils类"><a href="#IOUtils类" class="headerlink" title="IOUtils类"></a>IOUtils类</h3><table><thead><tr><th>IOUtils类</th><th>说明</th></tr></thead><tbody><tr><td>public static int copy(InputStream input,OutputStream output)</td><td>复制文件</td></tr><tr><td>public static int copyLarge(Reader input,Writer output)</td><td>复制大文件</td></tr><tr><td>public static String readLines(Reader input)</td><td>读取数据</td></tr><tr><td>public static void write(String data,OutputStream output)</td><td>写出数据</td></tr></tbody></table><h2 id="Hutool工具包"><a href="#Hutool工具包" class="headerlink" title="Hutool工具包"></a>Hutool工具包</h2><p>API文档：<a href="https://www.hutool.cn/docs/#/">入门和安装 (hutool.cn)</a></p><table><thead><tr><th>相关类</th><th>说明</th></tr></thead><tbody><tr><td>IoUtil</td><td>流操作工具类</td></tr><tr><td>FileUtil</td><td>文件读写和操作的工具类</td></tr><tr><td>FileTypeUtil</td><td>文件类型判断工具类</td></tr><tr><td>WatchMonitor</td><td>目录、文件监听</td></tr><tr><td>ClassPathResource</td><td>针对ClassPath中资源的访问封装</td></tr><tr><td>FileReader</td><td>封装文件读取</td></tr><tr><td>FileWriter</td><td>封装文件写入</td></tr></tbody></table><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p>线程：</p><p>线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。</p><p>进程：</p><p>进程是程序的基本执行实体。</p><p>多线程的应用场景：</p><ul><li>软件中的耗时操作：拷贝、迁移大文件，加载大量的资源文件</li><li>所有的聊天软甲</li><li>所有的后台服务器</li></ul><h2 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h2><p>并发：在同一时刻，有多个指令在单个CPU上<code>交替</code>执行</p><p>并行：在同一时刻，有多个指令在多个CPU上<code>同时</code>执行</p><h2 id="多线程的实现方式"><a href="#多线程的实现方式" class="headerlink" title="多线程的实现方式"></a>多线程的实现方式</h2><ol><li>继承<code>Thread</code>类的方式进行实现</li><li>实现<code>Runnable</code>接口的方式进行实现</li><li>利用<code>Callable</code>接口和<code>Future</code>接口方式实现</li></ol><h3 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h3><p>自定义类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 书写线程要执行代码</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;：Hello World!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 多线程的第一种启动方式：</span></span><br><span class="line"><span class="comment">        *   1. 自己定义一个类继承Thread</span></span><br><span class="line"><span class="comment">        *   2. 重写run方法</span></span><br><span class="line"><span class="comment">        *   3. 创建子类对象，并启动线程</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 开启线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Runnable接口"><a href="#Runnable接口" class="headerlink" title="Runnable接口"></a>Runnable接口</h3><p>自定义类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> threadcase2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRun</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 获取到当前线程的对象</span></span><br><span class="line">            <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">            System.out.println(thread.getName() +  <span class="string">&quot;：Hello World!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> threadcase2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 多线程的第二种启动方式：</span></span><br><span class="line"><span class="comment">        *   1. 自己定义一个类实现Runnable接口</span></span><br><span class="line"><span class="comment">        *   2. 重写里面的run方法</span></span><br><span class="line"><span class="comment">        *   3. 创建自己的类的对象</span></span><br><span class="line"><span class="comment">        *   4. 创建一个Thread类的对象，并开启线程</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建自己的类的对象</span></span><br><span class="line">        <span class="comment">// 表示多线程要执行的任务</span></span><br><span class="line">        <span class="type">MyRun</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRun</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给线程设置名字</span></span><br><span class="line">        t1.setName(<span class="string">&quot;线程1：&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程2：&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Callable接口和Future接口"><a href="#Callable接口和Future接口" class="headerlink" title="Callable接口和Future接口"></a>Callable接口和Future接口</h3><p>自定义类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 求 1~100之间的和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 多线程的第三种实现方式：</span></span><br><span class="line"><span class="comment">        *   特点：可以获取到多线程运行的结果</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *   1. 创建一个类MyCallable实现Callable接口</span></span><br><span class="line"><span class="comment">        *   2. 重写call方法（是有返回值的，表示多线程运行的结果）</span></span><br><span class="line"><span class="comment">        *   3. 创建MyCallable的对象（表示多线程要执行的任务）</span></span><br><span class="line"><span class="comment">        *   4. 创建FutureTask的对象（作用：管理多线程运行的结果）</span></span><br><span class="line"><span class="comment">        *   5. 创建Thread类的对象，并启动（表示线程）</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建自己的类的对象</span></span><br><span class="line">        <span class="type">MyCallable</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建FutureTask的对象</span></span><br><span class="line">        FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(mc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程的对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ft);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取多线程的结果</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">res</span> <span class="operator">=</span> ft.get();</span><br><span class="line"></span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择方式"><a href="#选择方式" class="headerlink" title="选择方式"></a>选择方式</h3><table><thead><tr><th>方式</th><th>优先</th><th>缺点</th></tr></thead><tbody><tr><td>继承Thread类</td><td>编程比较简单，可以直接使用Thread类中的方法</td><td>可拓展性较差，不能再继承其他的类</td></tr><tr><td>实现Runnable接口</td><td>扩展性强，实现该接口的同时还可以继承其他的类</td><td>编程相对复杂，不能直接使用Thread类中的方法</td></tr><tr><td>实现Callable接口</td><td>扩展性强，实现该接口的同时还可以继承其他的类</td><td>编程相对复杂，不能直接使用Thread类中的方法</td></tr></tbody></table><h2 id="Thread常见成员方法"><a href="#Thread常见成员方法" class="headerlink" title="Thread常见成员方法"></a>Thread常见成员方法</h2><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>String getName()</td><td>返回此线程的名称</td></tr><tr><td>void setName(String name)</td><td>设置线程的名称</td></tr><tr><td>static Thread currentThread()</td><td>获取当前线程的对象</td></tr><tr><td>static void sleep(long time)</td><td>让线程休眠指定的时间，单位毫秒</td></tr><tr><td>setPriority(int newPriority)</td><td>设置线程的优先级</td></tr><tr><td>final int getPriority()</td><td>获取线程的优先级</td></tr><tr><td>final void setDaemon(boolean on)</td><td>设置为守护线程</td></tr><tr><td>public static void yield()</td><td>出让线程&#x2F;礼让线程</td></tr><tr><td>public static void join()</td><td>插入线程&#x2F;插队线程</td></tr></tbody></table><p>方法<code>setName(String name)</code>细节：</p><ol><li>如果没有个线程设置名字，线程也是会有默认的名字的。<ul><li>格式：Thread-X（X表示序号，从0开始）</li></ul></li><li>构造方法中可以设置名称</li></ol><p>方法<code>static Thread currentThread()</code>细节：</p><p>当<code>JVM</code>虚拟机启动之后，会自动的启动多条线程</p><p>其中有一条线程就叫做<code>main</code>线程</p><p>它的作用就是去调用main方法，并执行里面的代码</p><p>方法<code>static void sleep(long time)</code>细节：</p><ol><li>哪条线程执行到这个方法，哪条线程就会在这个地方停留相应的时间</li><li>方法的参数：表示睡眠的时间，单位毫秒</li><li>当时间到了之后，线程会自动醒来，继续执行下面的其他代码</li></ol><p>方法<code>setDaemon(boolean on)</code>细节：</p><p>当其他的非守护线程执行完毕之后，守护线程会陆续结束</p><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><p>抢占式调度：随机的选择线程执行</p><p>非抢占式调度：按照顺序执行线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> threadmethod2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * setPriority(int newPriority)  设置线程优先级</span></span><br><span class="line"><span class="comment">         * final int getPriority()       获取线程优先级</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程要执行的参数对象</span></span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr,<span class="string">&quot;Thread01&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr,<span class="string">&quot;Thread02&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(t1.getPriority());   <span class="comment">// 不设置的情况下，优先级默认为5</span></span><br><span class="line">        System.out.println(t2.getPriority());   <span class="comment">// 不设置的情况下，优先级默认为5</span></span><br><span class="line"></span><br><span class="line">        t1.setPriority(<span class="number">1</span>);</span><br><span class="line">        t2.setPriority(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            虽然t2优先级比t1高，但是不代表执行的时候会先完全执行完t2再执行t1</span></span><br><span class="line"><span class="comment">            只不过t2优先执行的概率更高</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><pre class="mermaid">flowchart LR    START["创建线程对象"] -- "start()" --> THEN1["有执行资格<br>没有执行权"]    THEN1 -- 抢到CPU的执行权 --> THEN2["有执行资格<br>有执行权"]    THEN2 -- 其他线程抢走CPU的执行权 --> THEN1    THEN2 --> THEN3["没有执行资格<br>没有执行权"]    THEN3 -- sleep或者其他阻塞方法 --> THEN1    THEN2 --> END["线程死亡<br>变成垃圾"]</pre><h2 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h2><p>在 Java 中，线程安全是指在多线程环境中，多个线程同时访问共享资源时，不会导致数据不一致或其他意外情况。线程安全的主要目标是确保数据的一致性和正确性。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> threadsafe1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticket &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                ticket++;</span><br><span class="line">                System.out.println(getName() + <span class="string">&quot;正在卖第&quot;</span> + ticket + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><ol><li><strong>数据竞争</strong>：多个线程同时读取和修改 <code>ticket</code> 变量，可能会导致多个线程同时增加 <code>ticket</code>，从而导致票数不正确。</li></ol><h3 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h3><p>把操作共享数据的代码锁起来</p><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">synchronized(锁)&#123;</span><br><span class="line">操作共享数据的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点1：锁默认打开，有一个线程进去了，锁自动关闭</p><p>特点2：里面的代码全部执行完毕后，线程出来，锁自动打开</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> threadsafe1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 锁对象，一定要是唯一的</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ticket &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    ticket++;</span><br><span class="line">                    System.out.println(getName() + <span class="string">&quot;正在卖第&quot;</span> + ticket + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常来说，锁对象一般为当前类的字节码对象，如以上示例，锁对象可以为MyThread.class</p><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><p>就是把<code>synchronized</code>关键字加到方法上</p><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符synchronized 返回值类型 方法名(方法参数) &#123;...&#125;</span><br></pre></td></tr></table></figure><p>特点1：同步方法是锁住方法里面所有的代码</p><p>特点2：锁对象不能自己指定</p><p>若为非静态方法：this</p><p>若为静态方法：当前类的字节码文件对象</p><h3 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h3><p>由于<code>synchronized</code>并不能清晰的表达如何加锁和释放锁，所以JDK5以后提供了一个新的锁的对象</p><p>Lock实现提供比使用synchronized方法和语句可以获得更广泛的锁定操作</p><p>Lock中提供了获得锁的释放锁的方法</p><p><code>void lock()</code>：获得锁</p><p><code>void unlock()</code>：释放锁</p><p>Lock是接口不能直接实例化，这里采用它的实现类<code>ReentrantLock</code>来实例化</p><p>ReentrantLock的构造方法</p><p><code>ReentrantLock()</code>：创建一个ReentranLock的实例</p><p>实现案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> threadsafe3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加上static，是防止该类的实现方法创建多个锁</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ticket &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    ticket++;</span><br><span class="line">                    System.out.println(getName() + <span class="string">&quot;正在卖第&quot;</span> + ticket + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用<code>try...catch...finally</code>的格式，是需要保证每个线程可以将锁释放，否则会导致程序无法自动结束</p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>简单理解：死锁就是两个锁嵌套，需要避免这种<font color='red'>错误</font></p><h2 id="生产者和消费者（等待唤醒机制）"><a href="#生产者和消费者（等待唤醒机制）" class="headerlink" title="生产者和消费者（等待唤醒机制）"></a>生产者和消费者（等待唤醒机制）</h2><p>生产者消费者模式是一个十分经典的多线程协作的模式</p><p>生产者：生产数据</p><p>消费者：消费数据</p><h3 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h3><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>void wait()</td><td>当前线程等待，直到被其他线程唤醒</td></tr><tr><td>void notify()</td><td>随机唤醒单个线程</td></tr><tr><td>void notifyAll()</td><td>唤醒所有线程</td></tr></tbody></table><p>示例：</p><p>生产者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> waitandnotify;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Creater</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            生产者</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            1. 循环</span></span><br><span class="line"><span class="comment">            2. 同步代码块（后期可以改同步方法或lock锁）</span></span><br><span class="line"><span class="comment">            3. 判断共享数据是否到了末尾（是）</span></span><br><span class="line"><span class="comment">            4. 判断共享数据是否到了末尾（否）</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Middle.lock) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Middle.count == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 判断中间体状态</span></span><br><span class="line">                    <span class="keyword">if</span> (Middle.flag == <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="comment">// 如果为1，表示停止生产，等待消费者消费</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Middle.lock.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 如果为0，表示需要生产者生产</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;生产者生产了一个物品&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 修改中间体状态</span></span><br><span class="line">                        Middle.flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 唤醒消费者</span></span><br><span class="line">                        Middle.lock.notifyAll();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> waitandnotify;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            消费者</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            1. 循环</span></span><br><span class="line"><span class="comment">            2. 同步代码块（后期可以改同步方法或lock锁）</span></span><br><span class="line"><span class="comment">            3. 判断共享数据是否到了末尾（是）</span></span><br><span class="line"><span class="comment">            4. 判断共享数据是否到了末尾（否）</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Middle.lock)&#123;</span><br><span class="line">                <span class="keyword">if</span> (Middle.count == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 先判断中间体是否存放了生产者的生成物</span></span><br><span class="line">                    <span class="keyword">if</span> (Middle.flag == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// 如果没有，就等待</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Middle.lock.wait();<span class="comment">// 让当前线程跟锁进行绑定</span></span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 把消费的次数-1</span></span><br><span class="line">                        Middle.count--;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 如果有，就由消费者消费</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;消费者在消费，还能消费&quot;</span> + Middle.count + <span class="string">&quot;次&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 消费完后，唤醒生产者继续生产</span></span><br><span class="line">                        Middle.lock.notifyAll();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 修改中间体状态</span></span><br><span class="line">                        Middle.flag = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中间体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> waitandnotify;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Middle</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        作用：控制生产者和消费者的执行</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产者是否产出，有：1，没有：0</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 总个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 锁对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> waitandnotify;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            需求：完成生产者和消费者（等待唤醒机制）的代码</span></span><br><span class="line"><span class="comment">            实现线程轮流交替执行的效果</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程对象</span></span><br><span class="line">        <span class="type">Creater</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Creater</span>();</span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给线程设置名称</span></span><br><span class="line">        c.setName(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">        u.setName(<span class="string">&quot;消费者&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启线程</span></span><br><span class="line">        c.start();</span><br><span class="line">        u.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="阻塞队列方式"><a href="#阻塞队列方式" class="headerlink" title="阻塞队列方式"></a>阻塞队列方式</h3><h4 id="阻塞队列的继承结构"><a href="#阻塞队列的继承结构" class="headerlink" title="阻塞队列的继承结构"></a>阻塞队列的继承结构</h4><p>接口：<code>Iterable</code>、<code>Collection</code>、<code>Queue</code>、<code>BlockingQueue</code></p><p>实现类：<code>ArrayBlockQueue</code>、<code>LinkedBlockingQueue</code></p><p>生产者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> waitandnotify2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Creater</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    ArrayBlockingQueue&lt;String&gt; queue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Creater</span><span class="params">(ArrayBlockingQueue&lt;String&gt; queue)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.queue = queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 不断的将产物放到阻塞队列当中</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                queue.put(<span class="string">&quot;产物&quot;</span>);    <span class="comment">// 底层已经创建了锁对象，不需要写同步代码块</span></span><br><span class="line">                System.out.println(<span class="string">&quot;生产者生产了一个产物&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> waitandnotify2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    ArrayBlockingQueue&lt;String&gt; queue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(ArrayBlockingQueue&lt;String&gt; queue)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.queue = queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 不断的将产物放到阻塞队列当中</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">take</span> <span class="operator">=</span> queue.take(); <span class="comment">// 底层已经创建了锁对象，不需要写同步代码块</span></span><br><span class="line">                System.out.println(take);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> waitandnotify2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            需求：利用阻塞队列完成生产者和消费者（等待唤醒机制）的代码</span></span><br><span class="line"><span class="comment">            细节：生产者和消费者必须使用同一个阻塞队列</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建阻塞队列的对象</span></span><br><span class="line">        ArrayBlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建线程对象，并把阻塞队列传递到对象中去</span></span><br><span class="line">        <span class="type">Creater</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Creater</span>(queue);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(queue);</span><br><span class="line"></span><br><span class="line">        c.setName(<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">        u.setName(<span class="string">&quot;消费者&quot;</span>);</span><br><span class="line"></span><br><span class="line">        c.start();</span><br><span class="line">        u.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h2><p>线程可以处于下列状态之一：</p><ul><li>NEW（新建状态）：至今尚未启动的线程处于这种状态</li><li>RUNNABLE（就绪状态）：正在Java虚拟机中执行的线程处于这种状态</li><li>BLOCKED（阻塞状态）：受阻塞并等待某个监视器锁的线程处于这种状态</li><li>WAITING（等待状态）：无限期地等待另一个线程来执行某一特定操作的线程处于这种状态</li><li>TIMED_WAITING（计时状态）：等待另一个线程来执行取决于指定等待时间的操作的线程处于这种状态</li><li>TERMINATED（结束状态）：已退出的线程处于这种状态</li></ul><p>在给定时间点上，<font color='red'>一个线程只能处于一种状态</font>。这些状态是虚拟机状态，它们并没有反映所有操作系统线程状态。</p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h3 id="以前的多线程弊端"><a href="#以前的多线程弊端" class="headerlink" title="以前的多线程弊端"></a>以前的多线程弊端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">多线程执行的一些代码</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MyThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"><span class="type">MyThread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br></pre></td></tr></table></figure><p>弊端一：用到线程的时候就创建</p><p>弊端二：用完之后线程就消失</p><h3 id="核心原理"><a href="#核心原理" class="headerlink" title="核心原理"></a>核心原理</h3><ol><li>创建一个池子，池子中是空的</li><li>提交任务时，池子会创建新的线程对象，任务执行完成，线程归还给池子。下回再次提交任务时，不需要创建任务时，不需要创建新的线程，直接复用已有的线程即可</li><li>如果提交任务时，池子中没有空闲线程，也无法创建新的线程，任务就会排队等待</li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ol><li><p>创建线程池</p></li><li><p>提交任务</p></li><li><p>所有的任务全部执行完毕，关闭线程池</p></li></ol><h4 id="创建线程池"><a href="#创建线程池" class="headerlink" title="创建线程池"></a>创建线程池</h4><p>Executors：线程池工具通过调用方法返回不同类型的线程池对象</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public static ExecutorService newCachedThreadPool()</td><td>创建一个没有上限的线程池</td></tr><tr><td>public static ExecutorService newFixedThreadPool(int nThreads)</td><td>创建有上限的线程池</td></tr></tbody></table><p>方法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Y0threadpool1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadPoolDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public static ExecutorService newCachedThreadPool() 创建一个没有上限的线程池</span></span><br><span class="line"><span class="comment">            public static ExecutorService newFixedThreadPool(int nThreads) 创建一个有上限的线程池</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 获取线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">pool1</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 提交任务（线程复用）</span></span><br><span class="line">        pool1.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        pool1.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        pool1.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        pool1.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        pool1.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 销毁线程池</span></span><br><span class="line">        <span class="comment">// pool1.shutdown();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Y0threadpool1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Y0threadpool1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadPoolDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public static ExecutorService newCachedThreadPool() 创建一个没有上限的线程池</span></span><br><span class="line"><span class="comment">            public static ExecutorService newFixedThreadPool(int nThreads) 创建一个有上限的线程池</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 获取线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">pool1</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 提交任务</span></span><br><span class="line">        pool1.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        pool1.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        pool1.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        pool1.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        pool1.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());<span class="comment">// 最多只会出现pool-1-thread-3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 销毁线程池</span></span><br><span class="line">        <span class="comment">// pool1.shutdown();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h3><p>核心元素一：核心线程数量</p><p>核心元素二：线程池中最大线程的数量</p><p>核心元素三：空闲时间（值）</p><p>核心元素四：空闲时间（单位）</p><p>核心元素五：阻塞队列</p><p>核心元素六：创建线程的方式</p><p>核心元素七：要执行的任务过多时的解决方案</p><p>注意点：</p><ol><li>当核心线程满时，再提交任务就会排队</li><li>当核心线程满时，队伍也满时，会创建临时线程</li><li>当核心线程、队伍、临时线程都满时，会触发任务拒绝策略</li></ol><h4 id="任务拒绝策略"><a href="#任务拒绝策略" class="headerlink" title="任务拒绝策略"></a>任务拒绝策略</h4><table><thead><tr><th>任务拒绝策略</th><th>说明</th></tr></thead><tbody><tr><td>ThreadPoolExecutor.AbortPolicy</td><td>默认策略：丢弃任务并抛出RejectedExecutionException异常</td></tr><tr><td>ThreadPoolExecutor.DiscardPolicy</td><td>丢弃任务，但是不抛出异常（不推荐）</td></tr><tr><td>ThreadPoolExecutor.DiscardOldestPolicy</td><td>抛弃队列中等待最久的任务，然后把当前任务加入队列中</td></tr><tr><td>ThreadPoolExecutor.CallerRunsPolicy</td><td>调用任务的run()方法绕过线程池直接执行</td></tr></tbody></table><h3 id="线程池的大小"><a href="#线程池的大小" class="headerlink" title="线程池的大小"></a>线程池的大小</h3><p>CPU密集型计算：<code>最大并行数+1</code></p><p>假设CPU是4核8线程，那么计算过程就是：8 + 1</p><p>I&#x2F;O密集型运算：<code>最大并行数 * 期望CPU利用率 * (总时间(CPU计算时间 + 等待时间) / CPU计算时间)</code></p><p>假设CPU是4核8线程，希望CPU利用率为100%，且需要进行以下操作：</p><ol><li>读取两个数据（耗时：1s）</li><li>相加（耗时：1s）</li></ol><p>那么计算过程就是</p><p>8 * 100% * ((50% + 50%) &#x2F; 50%) &#x3D; 16</p><h4 id="并行数"><a href="#并行数" class="headerlink" title="并行数"></a>并行数</h4><p>查看Java虚拟机可以的处理器的数目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class="line">System.out.println(count)</span><br></pre></td></tr></table></figure><h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><p>Java中可以使用<code>Java.net</code>包下的技术轻松开发出常见的网络应用程序</p><h2 id="常见的软件架构"><a href="#常见的软件架构" class="headerlink" title="常见的软件架构"></a>常见的软件架构</h2><p>C&#x2F;S——Client&#x2F;Server（客户端&#x2F;服务器）：</p><p>在用户本地需要下载并安装客户端程序， 在远程有一个服务器端程序</p><p>B&#x2F;S——Browser&#x2F;Server（浏览器&#x2F;服务器）：</p><p>只需要一个浏览器，用户通过不同的网址。客户访问不同的服务器</p><h3 id="B-S架构的优缺点"><a href="#B-S架构的优缺点" class="headerlink" title="B&#x2F;S架构的优缺点"></a>B&#x2F;S架构的优缺点</h3><ol><li>不需要开发客户端，只需要页面+服务端</li><li>用户不需要下载，打开浏览器就能使用</li><li>如果应用过大，用户体验受到影响</li></ol><h3 id="C-S架构的优缺点"><a href="#C-S架构的优缺点" class="headerlink" title="C&#x2F;S架构的优缺点"></a>C&#x2F;S架构的优缺点</h3><ol><li>画面可以做的非常精美，用户体验好</li><li>需要开发客户端</li><li>用户需要下载和更新的时候太麻烦</li></ol><h2 id="网络编程三要素"><a href="#网络编程三要素" class="headerlink" title="网络编程三要素"></a>网络编程三要素</h2><p>IP + 端口号 + 协议</p><p>IP：设备在网络中的地址，是唯一的标识</p><p>端口号：应用程序在设备中唯一的标识</p><p>协议：数据在网络传输中的规则，常见的协议有：UDP、TCP、HTTP、HTTPS、FTP</p><h3 id="InetAddress"><a href="#InetAddress" class="headerlink" title="InetAddress"></a>InetAddress</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>static InetAddress getByName(String host)</td><td>确定主机名称的IP地址。主机名称可以是机器名称，也可以是IP地址</td></tr><tr><td>String getHostName()</td><td>获取此IP地址的主机名</td></tr><tr><td>String getHostAddress()</td><td>返回文本显示中的IP地址字符串</td></tr></tbody></table><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><p>端口号范围：0~65535</p><p>其中，0~1023之间的端口号预留给系统，1024以上的端口可以提供开发</p><p>注意：一个端口只能由一个应用占用</p><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>TCP&#x2F;IP：</p><ol><li>应用层</li><li>表示层</li><li>会话层</li><li>传输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ol><p>应用层：HTTP、FTP、Telnet、DNS</p><p>传输层：TCP、UDP</p><p>网络层：IP、ICMP、ARP</p><h4 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h4><ul><li>用户数据包协议（User Datagram Protocol）</li><li>UDP是面向无连接通信协议。速度快，有大小限制一次最多发送64K，数据不安全，易丢失数据。</li></ul><h4 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h4><ul><li>传输控制协议TCP（Transmission Control Protocol）</li><li>TCP协议是面向连接的通信协议。速度慢，没有大小限制，数据安全。</li></ul><h2 id="UDP通信程序"><a href="#UDP通信程序" class="headerlink" title="UDP通信程序"></a>UDP通信程序</h2><h3 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h3><ol><li>创建发送端的<code>DatagramSocket对象</code></li><li>数据打包（DatagramPacket）</li><li>发送数据</li><li>释放资源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> udpdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMessageDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 发送数据</span></span><br><span class="line">        <span class="comment">// 创建DatagramSocket对象</span></span><br><span class="line">        <span class="comment">// 细节：</span></span><br><span class="line">        <span class="comment">// 空参：所有可用的端口中随机一个进行使用</span></span><br><span class="line">        <span class="comment">// 有参：指定端口进行绑定</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 打包数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;你好啊！！！&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = str.getBytes();</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">10086</span>;</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes,bytes.length,address,port);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 发送数据</span></span><br><span class="line">        ds.send(dp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 释放资源</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h3><ol><li>创建接收端的DatagramSocket对象</li><li>接收打包好的数据</li><li>解析数据包</li><li>释放资源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> udpdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveMessageDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 接收数据</span></span><br><span class="line">        <span class="comment">// 创建DatagramSocket对象</span></span><br><span class="line">        <span class="comment">// 细节：</span></span><br><span class="line">        <span class="comment">// 在接收的时候，一定要绑定端口</span></span><br><span class="line">        <span class="comment">// 并且绑定的端口一定要和发送的端口保持一致</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">10086</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 接收数据包</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, bytes.length);</span><br><span class="line">        <span class="comment">// 该方法是阻塞的</span></span><br><span class="line">        <span class="comment">// 程序执行到这一步的时候，会在这里等待</span></span><br><span class="line">        <span class="comment">// 等发送端发送消息</span></span><br><span class="line">        ds.receive(dp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 解析数据包</span></span><br><span class="line">        <span class="type">byte</span>[] data = dp.getData();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> dp.getLength();</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> dp.getAddress();</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> dp.getPort();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;接收到的数据为：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(data,<span class="number">0</span>, length));</span><br><span class="line">        System.out.println(<span class="string">&quot;该数据是从&quot;</span> + address + <span class="string">&quot;这台电脑的&quot;</span> + port + <span class="string">&quot;端口发出的&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>按照下面的要求实现程序</p><p>UDP发送数据：数据来自于键盘录入，直到输入的数据为886，发送数据结束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> udpdemo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMessageDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        按照下面的要求实现程序</span></span><br><span class="line"><span class="comment">        UDP发送数据：数据来自于键盘录入，直到输入的数据为886，发送数据结束</span></span><br><span class="line"><span class="comment">        UDP接收数据：因为接收端不知道发送端什么时候停止发送，故采用死循环接收</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 打包数据</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;886&quot;</span>.equals(str)) <span class="keyword">break</span>;</span><br><span class="line">            <span class="type">byte</span>[] bytes = str.getBytes();</span><br><span class="line"></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">10086</span>;</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, bytes.length,address,port);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 发送数据</span></span><br><span class="line">            ds.send(dp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 释放资源</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UDP接收数据：因为接收端不知道发送端什么时候停止发送，故采用死循环接收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> udpdemo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveMessageDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 接收数据</span></span><br><span class="line">        <span class="comment">// 创建DatagramSocket对象</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">10086</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 接收数据包</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, bytes.length);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            ds.receive(dp);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 解析数据包</span></span><br><span class="line">            <span class="type">byte</span>[] data = dp.getData();</span><br><span class="line">            <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> dp.getLength();</span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> dp.getAddress();</span><br><span class="line">            <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> dp.getPort();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;接收到的数据为：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(data,<span class="number">0</span>, length));</span><br><span class="line">            System.out.println(<span class="string">&quot;该数据是从&quot;</span> + address + <span class="string">&quot;这台电脑的&quot;</span> + port + <span class="string">&quot;端口发出的&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UDP的三种通信方式"><a href="#UDP的三种通信方式" class="headerlink" title="UDP的三种通信方式"></a>UDP的三种通信方式</h3><ol><li><p>单播：之前的练习就是单播</p></li><li><p>组播：</p><ol><li>组播地址：224.0.0.0 ~ 239.255.255.255</li><li>其中：224.0.0.0 ~ 224.0.0.255 为预留的组播地址</li></ol><p>发送端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> udpdemo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.MulticastSocket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMessageDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        按照下面的要求实现程序</span></span><br><span class="line"><span class="comment">        UDP发送数据：数据来自于键盘录入，直到输入的数据为886，发送数据结束</span></span><br><span class="line"><span class="comment">        UDP接收数据：因为接收端不知道发送端什么时候停止发送，故采用死循环接收</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">MulticastSocket</span> <span class="variable">ms</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MulticastSocket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 打包数据</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;886&quot;</span>.equals(str)) <span class="keyword">break</span>;</span><br><span class="line">            <span class="type">byte</span>[] bytes = str.getBytes();</span><br><span class="line"></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;224.0.0.1&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, bytes.length,address,port);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 发送数据</span></span><br><span class="line">            ms.send(dp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 释放资源</span></span><br><span class="line">        ms.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> udpdemo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.MulticastSocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveMessageDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 接收数据</span></span><br><span class="line">        <span class="comment">// 创建MuticastSocket对象</span></span><br><span class="line">        <span class="type">MulticastSocket</span> <span class="variable">ms</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MulticastSocket</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将当前本机，添加到224.0.0.1的这一组当中</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;224.0.0.1&quot;</span>);</span><br><span class="line">        ms.joinGroup(address);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 接收数据包</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, bytes.length);</span><br><span class="line"></span><br><span class="line">        ms.receive(dp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 解析数据</span></span><br><span class="line">        <span class="type">byte</span>[] data = dp.getData();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> dp.getLength();</span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> dp.getAddress().getHostAddress();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> dp.getAddress().getHostName();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;ip为：&quot;</span> + ip +<span class="string">&quot;主机名为：&quot;</span> + name + <span class="string">&quot;的人，发送了数据&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(data,<span class="number">0</span>,len));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        ms.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> udpdemo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.MulticastSocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveMessageDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 接收数据</span></span><br><span class="line">        <span class="comment">// 创建MuticastSocket对象</span></span><br><span class="line">        <span class="type">MulticastSocket</span> <span class="variable">ms</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MulticastSocket</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将当前本机，添加到224.0.0.1的这一组当中</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;224.0.0.1&quot;</span>);</span><br><span class="line">        ms.joinGroup(address);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 接收数据包</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, bytes.length);</span><br><span class="line"></span><br><span class="line">        ms.receive(dp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 解析数据</span></span><br><span class="line">        <span class="type">byte</span>[] data = dp.getData();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> dp.getLength();</span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> dp.getAddress().getHostAddress();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> dp.getAddress().getHostName();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;ip为：&quot;</span> + ip +<span class="string">&quot;主机名为：&quot;</span> + name + <span class="string">&quot;的人，发送了数据&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(data,<span class="number">0</span>,len));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        ms.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>广播：</p><ol><li>广播地址：255.255.255.255</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> udpdemo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMessageDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        按照下面的要求实现程序</span></span><br><span class="line"><span class="comment">        UDP发送数据：数据来自于键盘录入，直到输入的数据为886，发送数据结束</span></span><br><span class="line"><span class="comment">        UDP接收数据：因为接收端不知道发送端什么时候停止发送，故采用死循环接收</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建对象</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 打包数据</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;886&quot;</span>.equals(str)) <span class="keyword">break</span>;</span><br><span class="line">            <span class="type">byte</span>[] bytes = str.getBytes();</span><br><span class="line"></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;255.255.255.255&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">10086</span>;</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, bytes.length,address,port);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 发送数据</span></span><br><span class="line">            ds.send(dp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 释放资源</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="TCP通信程序"><a href="#TCP通信程序" class="headerlink" title="TCP通信程序"></a>TCP通信程序</h2><p>TCP通信协议是一种可靠的网络协议，它在通信的两端各建立一个Socket对象</p><p>通信之前要保证连接已经建立</p><p>通过Socket产生IO流来进行网络通信</p><p>客户端：</p><ol><li>创建客户端的Socket对象（Socket）与指定服务端连接<ol><li>Socket(String host, int port)</li></ol></li><li>获取输出流，写数据<ol><li>OutputStream getOutputStream()</li></ol></li><li>释放资源<ol><li>void close()</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tcpdemo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// TCP协议，发送数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建Socket对象</span></span><br><span class="line">        <span class="comment">// 细节：在创建对象的同时会连接服务端</span></span><br><span class="line">        <span class="comment">//      如果连接不上，代码会报错</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 可以从连接通道中获取输出流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">        os.write(<span class="string">&quot;你好&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 释放资源</span></span><br><span class="line">        os.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器：</p><ol><li><p>创建服务器端的Socket对象（ServerSocket）</p><ol><li>ServerSocket(int port)</li></ol></li><li><p>监听客户端连接，返回一个Socket对象</p><ol><li>Socket accept()</li></ol></li><li><p>获取输入流，读数据，并把数据显示在控制台</p><ol><li>InputStream getInputStream()</li></ol></li><li><p>释放资源</p><ol><li>void close()</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tcpdemo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// TCP协议，接收数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建对象ServerSocket</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 监听客户端的连接</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 从连接通道中获取输入流读取数据</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is);</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println((<span class="type">char</span>)b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多发多收"><a href="#多发多收" class="headerlink" title="多发多收"></a>多发多收</h3><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tcppractice1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 需求：</span></span><br><span class="line">        <span class="comment">// 客户端多次发送数据</span></span><br><span class="line">        <span class="comment">// 服务器多次接收数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9999</span>);</span><br><span class="line">                <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">                    os.write((str + <span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">                    os.flush(); <span class="comment">// 确保数据立即发送</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;关闭&quot;</span>.equals(str)) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                os.close();</span><br><span class="line">                socket.close();</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 退出外层循环</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;连接失败，重新连接中...&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>); <span class="comment">// 等待2秒后重试</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">                    ie.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tcppractice1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">            <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> b;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">while</span> ((b = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>)b);</span><br><span class="line">                sb = sb.append((<span class="type">char</span>)b);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (sb.toString().equals(<span class="string">&quot;关闭&quot;</span>)) &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">                ss.close();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接收和反馈"><a href="#接收和反馈" class="headerlink" title="接收和反馈"></a>接收和反馈</h3><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tcppractice2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 需求：</span></span><br><span class="line">        <span class="comment">// 客户端发送数据，并将服务端的响应数据打印出来</span></span><br><span class="line">        <span class="comment">// 服务端接收数据，并给客户端发送响应数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">10001</span>);</span><br><span class="line">                <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">                <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is);</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">                    os.write((str + <span class="string">&quot;\n&quot;</span>).getBytes());</span><br><span class="line">                    os.flush(); <span class="comment">// 确保数据立即发送</span></span><br><span class="line"></span><br><span class="line">                    <span class="type">int</span> b;</span><br><span class="line">                    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                    <span class="keyword">while</span> ((b = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> (<span class="type">char</span>) b;</span><br><span class="line">                        <span class="keyword">if</span> (c == <span class="string">&#x27;\n&#x27;</span>) <span class="keyword">break</span>; <span class="comment">// 读取到换行符时结束</span></span><br><span class="line">                        sb.append(c);</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;服务器响应：&quot;</span> + sb.toString());</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;关闭&quot;</span>.equals(str)) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                os.close();</span><br><span class="line">                socket.close();</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 退出外层循环</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;连接失败，重新连接中...&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>); <span class="comment">// 等待2秒后重试</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">                    ie.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tcppractice2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">10001</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">            <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is);</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 解析数据</span></span><br><span class="line">                <span class="type">int</span> b;</span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                <span class="keyword">while</span> ((b = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> (<span class="type">char</span>) b;</span><br><span class="line">                    System.out.print(c);</span><br><span class="line">                    sb.append(c);</span><br><span class="line">                    <span class="keyword">if</span> (c == <span class="string">&#x27;\n&#x27;</span>) <span class="keyword">break</span>; <span class="comment">// 读取到换行符时结束</span></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 响应数据</span></span><br><span class="line">                os.write(<span class="string">&quot;收到\n&quot;</span>.getBytes());</span><br><span class="line">                os.flush();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 关闭连接</span></span><br><span class="line">                <span class="keyword">if</span> (sb.toString().trim().equals(<span class="string">&quot;关闭&quot;</span>)) &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                    ss.close();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tcppractice3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">10002</span>)) &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">fis</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">                 <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">                 <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;A_test.txt&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">int</span> b;</span><br><span class="line">                <span class="keyword">while</span> ((b = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> (<span class="type">char</span>) b;</span><br><span class="line">                    fos.write(b);</span><br><span class="line">                    <span class="keyword">if</span> (c == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">                        os.write(<span class="string">&quot;接收完毕&quot;</span>.getBytes());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tcppractice3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">10002</span>);</span><br><span class="line">             <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">             <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">             <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">             <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">5</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                os.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            os.write(<span class="string">&quot;\n&quot;</span>.getBytes());</span><br><span class="line">            os.flush(); <span class="comment">// 确保数据被发送</span></span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> b;</span><br><span class="line">            <span class="keyword">while</span> ((b = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>) b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>反射允许对封装类的字段，方法和构造函数的信息进行编程访问</p><h2 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h2><p>共有三种方法：</p><ol><li>Class.forName(“全类名”);</li><li>类名.class</li><li>对象.getClass();</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 第一种方式</span></span><br><span class="line"><span class="comment">// Class.forName(&quot;全类名&quot;)</span></span><br><span class="line"><span class="comment">// 全类名：包名+类名</span></span><br><span class="line"><span class="comment">// 最常用</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;MyReflectDemo1.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 第二种方式</span></span><br><span class="line"><span class="comment">// 一般当作参数进行传递，如多线程的锁</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz2</span> <span class="operator">=</span> Student.class;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 第三种方式</span></span><br><span class="line"><span class="comment">// 当有类的对象时才可以使用</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz3</span> <span class="operator">=</span> s.getClass();</span><br><span class="line">System.out.println(clazz1 == clazz2);   <span class="comment">// true</span></span><br><span class="line">System.out.println(clazz2 == clazz3);   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="获取构造方法"><a href="#获取构造方法" class="headerlink" title="获取构造方法"></a>获取构造方法</h2><p>Class类中用于获取构造方法的方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Constructor&lt;?&gt;[] getConstructors()</td><td>返回所有公共构造方法对象的数组</td></tr><tr><td>Constructor&lt;?&gt;[] getDeclaredConstructors()</td><td>返回所有构造方法对象的数组</td></tr><tr><td>Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;… parameterTypes)</td><td>返回单个公共构造方法对象</td></tr><tr><td>Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</td><td>返回单个构造方法对象</td></tr></tbody></table><p>Constructor类中用于创建对象的方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>T newInstance(Object… initargs)</td><td>根据指定的构造方法创建对象</td></tr><tr><td>setAccessible(boolean flag)</td><td>设置为true，表示取消访问检查</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyReflectDemo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Parameter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myreflectdemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">// 1. 获取class字节码文件对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;MyReflectDemo2.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取构造方法</span></span><br><span class="line">        Constructor[] cons1 = clazz.getConstructors();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Constructor con : cons1) &#123;</span><br><span class="line">            <span class="comment">// public MyReflectDemo2.Student()</span></span><br><span class="line">            <span class="comment">// public MyReflectDemo2.Student(java.lang.String,int)</span></span><br><span class="line">            System.out.println(con);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Constructor[] cons2 = clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor con : cons2) &#123;</span><br><span class="line">            <span class="comment">// public MyReflectDemo2.Student()</span></span><br><span class="line">            <span class="comment">// public MyReflectDemo2.Student(java.lang.String,int)</span></span><br><span class="line">            <span class="comment">// protected MyReflectDemo2.Student(java.lang.String)</span></span><br><span class="line">            <span class="comment">// private MyReflectDemo2.Student(int)</span></span><br><span class="line">            System.out.println(con);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">decon1</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">        <span class="comment">// public MyReflectDemo2.Student()</span></span><br><span class="line">        System.out.println(decon1);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">decon2</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class);</span><br><span class="line">        <span class="comment">// protected MyReflectDemo2.Student(java.lang.String)</span></span><br><span class="line">        System.out.println(decon2);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">decon3</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="comment">// public MyReflectDemo2.Student(java.lang.String,int)</span></span><br><span class="line">        System.out.println(decon3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取权限修饰符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> decon3.getModifiers();  <span class="comment">// public == 1 | protected == 4 | private == 2</span></span><br><span class="line">        System.out.println(modifiers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取参数</span></span><br><span class="line">        Parameter[] parameters = decon3.getParameters();</span><br><span class="line">        <span class="keyword">for</span> (Parameter parameter : parameters) &#123;</span><br><span class="line">            <span class="comment">// java.lang.String arg0</span></span><br><span class="line">            <span class="comment">// int arg1</span></span><br><span class="line">            System.out.println(parameter);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student) decon3.newInstance(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>);</span><br><span class="line">        <span class="comment">// Student&#123;name=&#x27;张三&#x27;, age=23&#125;</span></span><br><span class="line">        System.out.println(stu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 暴力反射：表示临时取消权限校验</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">decon4</span> <span class="operator">=</span> clazz.getDeclaredConstructor(<span class="type">int</span>.class);</span><br><span class="line">        decon4.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) decon4.newInstance(<span class="number">13</span>);</span><br><span class="line">        <span class="comment">// Student&#123;name=&#x27;null&#x27;, age=13&#125;</span></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyReflectDemo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取字段（成员变量）"><a href="#获取字段（成员变量）" class="headerlink" title="获取字段（成员变量）"></a>获取字段（成员变量）</h2><p>Class类中用于获取成员变量的方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Field[] getFields()</td><td>返回所有公共成员变量对象的数组</td></tr><tr><td>Field[] getDeclaredFields()</td><td>返回所有成员变量对象的数组</td></tr><tr><td>Field getField(String name)</td><td>返回单个公共成员变量对象</td></tr><tr><td>Field getDeclaredField(String name)</td><td>返回单个成员变量对象</td></tr></tbody></table><p>Field类中用于创建对象的方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>void set(Object obj,Object value)</td><td>赋值</td></tr><tr><td>Object get(Object obj)</td><td>获取值</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyReflectDemo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> MyReflectDemo3.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myreflectdemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">// 1. 获取class字节码文件的对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;MyReflectDemo3.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取成员变量</span></span><br><span class="line">        Field[] fields1 = clazz.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields1) &#123;</span><br><span class="line">            <span class="comment">// public java.lang.String MyReflectDemo3.Student.gender</span></span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Field[] fields2 = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields2) &#123;</span><br><span class="line">            <span class="comment">// private java.lang.String MyReflectDemo3.Student.name</span></span><br><span class="line">            <span class="comment">// private int MyReflectDemo3.Student.age</span></span><br><span class="line">            <span class="comment">// public java.lang.String MyReflectDemo3.Student.gender</span></span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 获取单个成员变量</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">gender</span> <span class="operator">=</span> clazz.getField(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line">        <span class="comment">// public java.lang.String MyReflectDemo3.Student.gender</span></span><br><span class="line">        System.out.println(gender);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">// private java.lang.String MyReflectDemo3.Student.name</span></span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取权限修饰符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> name.getModifiers();</span><br><span class="line">        System.out.println(modifiers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取数据类型</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">type</span> <span class="operator">=</span> name.getType();</span><br><span class="line">        System.out.println(type);   <span class="comment">// class java.lang.String</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取成员变量记录的值</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(name.get(s));    <span class="comment">// 张三</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改成员变量记录的值</span></span><br><span class="line">        name.set(s,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        <span class="comment">// Student&#123;name=&#x27;李四&#x27;, age=18&#125;</span></span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyReflectDemo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取成员方法"><a href="#获取成员方法" class="headerlink" title="获取成员方法"></a>获取成员方法</h2><p>Class类中用于获取成员方法的方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Method[] getMethods()</td><td>返回所有公共成员方法对象的数组，包括继承的</td></tr><tr><td>Method[] getDeclaredMethods()</td><td>返回所有成员方法对象的数组，包括继承的</td></tr><tr><td>Method getMethod(String name,Class&lt;?&gt;… parameterTypes)</td><td>返回单个公共成员方法对象</td></tr><tr><td>Method getDeclaredMethod(String name,Class&lt;?&gt;… parameterTypes)</td><td>返回单个公共成员方法对象</td></tr></tbody></table><p>Method类中用于创建对象的方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Object invoke(Object obj,Object… args)</td><td>运行方法</td></tr><tr><td>参数一：用obj对象调用该方法 参数二：调用方法的传递的参数（没有就不写）</td><td>返回值：方法的返回值（没有就不写）</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyReflectDemo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Parameter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myflectdemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">// 1. 获取</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;MyReflectDemo4.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取里面所有的方法对象</span></span><br><span class="line">        Method[] methods1 = clazz.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods1) &#123;</span><br><span class="line">            System.out.println(method); <span class="comment">// 会打印所有的公共方法，包括继承的（如Object类）</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Method[] methods2 = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods2) &#123;</span><br><span class="line">            System.out.println(method); <span class="comment">// 会打印所有的方法，包括继承的（如Object类）</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 获取单个方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">eat</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;eat&quot;</span>, String.class);</span><br><span class="line">        System.out.println(eat);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 获取方法的形参</span></span><br><span class="line">        Parameter[] parameters = eat.getParameters();</span><br><span class="line">        <span class="keyword">for</span> (Parameter parameter : parameters) &#123;</span><br><span class="line">            System.out.println(parameter);  <span class="comment">// java.lang.String arg0</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取方法的修饰符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> eat.getModifiers();</span><br><span class="line">        System.out.println(modifiers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取方法的抛出的异常</span></span><br><span class="line">        Class[] exceptionTypes = eat.getExceptionTypes();</span><br><span class="line">        <span class="keyword">for</span> (Class exceptionType : exceptionTypes) &#123;</span><br><span class="line">            <span class="comment">// class java.io.IOException</span></span><br><span class="line">            <span class="comment">// class java.lang.NullPointerException</span></span><br><span class="line">            <span class="comment">// class java.lang.ClassCastException</span></span><br><span class="line">            System.out.println(exceptionType);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法运行</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        eat.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> eat.invoke(s, <span class="string">&quot;炒饭&quot;</span>);</span><br><span class="line">        System.out.println(res);    <span class="comment">// 吃完啦</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyReflectDemo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">eat</span><span class="params">(String something)</span> <span class="keyword">throws</span> IOException,NullPointerException,ClassCastException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在吃&quot;</span> + something);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;吃完啦&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射的作用"><a href="#反射的作用" class="headerlink" title="反射的作用"></a>反射的作用</h2><ol><li>获取一个类里面的所有信息，获取到了之后，再执行其他的业务逻辑</li><li>结合配置文件，动态的创建对象并调用方法</li></ol><p>将对象的成员变量输出为文本文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MyReflectDemo5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myreflectdemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            将任意一个对象的所有字段名和值保存到文件中去</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Student s= <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>,<span class="number">177</span>,<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">        Teacher t= <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;小王&quot;</span>,<span class="number">10000</span>);</span><br><span class="line">        saveObject(s);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IllegalAccessException, IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 获取字节码文件的对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> obj.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建IO流</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;a.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取所有的成员变量</span></span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> field.getName();</span><br><span class="line">            <span class="type">Object</span> <span class="variable">val</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 写出数据</span></span><br><span class="line">            bw.write(name + <span class="string">&quot;=&quot;</span> + val);</span><br><span class="line">            bw.newLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><p>特点：无侵入式的给代码增加额外的功能</p><pre class="mermaid">flowchart TB    A[调用者] --> B[代理]    B --> C[对象]</pre><p>Java中，通过接口保证，后面的对象和代理需要实现同一个接口</p><p>接口中就是被代理的所有方法</p><h2 id="创建代理"><a href="#创建代理" class="headerlink" title="创建代理"></a>创建代理</h2><p><code>public static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</code></p><p>参数一：用于指定用哪个类加载器，去加载生成的代理类</p><p>参数二：指定接口，这些接口用于指定生成的代理长什么样子，也就是有哪些方法</p><p>参数三：用来指定生成的代理对象要干什么事情</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mydynamicproxydemo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Helper</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 唱歌</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sing</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;正在唱&quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;谢谢&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跳舞</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dance</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;正在跳舞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mydynamicproxydemo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Helper</span> &#123;</span><br><span class="line">    <span class="comment">// 可以把所有想要被代理的方法定义在接口中</span></span><br><span class="line">    <span class="comment">// 唱歌</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">sing</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跳舞</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">dance</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mydynamicproxydemo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyUtil</span> &#123;</span><br><span class="line">    <span class="comment">// 方法作用：给对象创建一个代理</span></span><br><span class="line">    <span class="comment">// 形参：被代理的对象</span></span><br><span class="line">    <span class="comment">// 返回值：给对象创建的代理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需求：</span></span><br><span class="line">    <span class="comment">// 需要用户唱歌</span></span><br><span class="line">    <span class="comment">// 1. 获取代理的对象</span></span><br><span class="line">    <span class="comment">// 代理对象 = ProxyUtil.createProxy()</span></span><br><span class="line">    <span class="comment">// 2. 再调用代理的唱歌方法</span></span><br><span class="line">    <span class="comment">// 代理对象.唱歌的方法()</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Helper <span class="title function_">createProxy</span><span class="params">(User u)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        参数一：用于指定用哪个类加载器，去加载生成的代理类</span></span><br><span class="line"><span class="comment">        参数二：指定接口，这些接口用于指定生成的代理长什么样子，也就是有哪些方法</span></span><br><span class="line"><span class="comment">        参数三：用来指定生成的代理对象要干什么事情</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Helper</span> <span class="variable">helper</span> <span class="operator">=</span> (Helper) Proxy.newProxyInstance(</span><br><span class="line">                ProxyUtil.class.getClassLoader(),   <span class="comment">// 参数一：用于指定用哪个类加载器，去加载生成的代理类</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Helper.class&#125;,  <span class="comment">// 参数二：指定接口，这些接口用于指定生成的代理长什么样子，也就是有哪些方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;   <span class="comment">// 参数三：用来指定生成的代理对象要干什么事情</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        <span class="comment">// 参数一：代理的对象</span></span><br><span class="line">                        <span class="comment">// 参数二：要运行的方法</span></span><br><span class="line">                        <span class="comment">// 参数三：调用方法时，传递的实参</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">&quot;sing&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;准备话筒，收钱&quot;</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;dance&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;准备场地，收钱&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">return</span> method.invoke(u,args);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> helper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mydynamicproxydemo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 获取代理的对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="type">Helper</span> <span class="variable">proxy</span> <span class="operator">=</span> ProxyUtil.createProxy(u);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 调用唱歌的方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> proxy.sing(<span class="string">&quot;乱唱&quot;</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 调用跳舞的方法</span></span><br><span class="line">        proxy.dance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 自学系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见算法</title>
      <link href="/2024/07/12/%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/"/>
      <url>/2024/07/12/%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><ol><li>基本查找</li><li>二分查找&#x2F;折半查找</li><li>分块查找</li><li>插值查找</li><li>斐波那契查找</li><li>树表查找</li><li>哈希查找</li></ol><h2 id="基本查找"><a href="#基本查找" class="headerlink" title="基本查找"></a>基本查找</h2><p><code>核心：从0索引开始逐个往后查找</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 需求：定义一个方法利用基本查找，查询某个元素是否存在</span></span><br><span class="line">    <span class="comment">// 数据如下：&#123;131,127,147,81,103,23,7,79&#125;</span></span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">131</span>,<span class="number">127</span>,<span class="number">147</span>,<span class="number">81</span>,<span class="number">103</span>,<span class="number">23</span>,<span class="number">7</span>,<span class="number">79</span>&#125;;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> basicSearch(arr,<span class="number">100</span>);</span><br><span class="line">    System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">basicSearch</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> number)</span> &#123;</span><br><span class="line">    <span class="comment">// 利用基本查找来查找number是否存在</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == number) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>前提条件：<code>数组中的数据必须是有序的</code></p><p>核心逻辑：<code>每次排除一般的查找范围</code></p><p>优势：<code>提高查找效率</code></p><p>假设有一个数组为：[7, 23, 79, 81, 103, 127, 131, 147]</p><p>那么，可以得到两个值，min&#x3D;0，max&#x3D;7，这两个值表示最大索引值和最小索引值，</p><p>接着 (max + min) &#x2F; 2，得出来的值就是mid值</p><ul><li>如果查找的元素在mid的左边，缩小范围时，min不变，max等于mid减1</li><li>如果查找的元素在mid的右边，缩小范围时，max不变，min等于mid加1</li><li>如果 min 大于 max 时，说明数据不存在</li></ul><p>如果数据是乱的，先排序再用二分查找得到的索引没有实际意义，只能确定当前数字在数组中是否存在，因为排序之后数字的位置就可能发生变化了（排序浪费的性能比查找高得多）</p><h3 id="插值查找（二分查找改进）"><a href="#插值查找（二分查找改进）" class="headerlink" title="插值查找（二分查找改进）"></a>插值查找（二分查找改进）</h3><p>假设，数组的数据都是均匀分布的，如[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]，那么可以套用以下公式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mid = min + ((key-arr[min]) / (arr[max]-arr[min])) * (max-min)</span><br></pre></td></tr></table></figure><p>通过以上公式，可以获得目标数据在索引中的大概位置</p><p>缺点也很明显：需要数据均匀分布，若是不均匀的则会导致资源浪费或查找不到</p><h3 id="斐波那契查找（二分查找改进）"><a href="#斐波那契查找（二分查找改进）" class="headerlink" title="斐波那契查找（二分查找改进）"></a>斐波那契查找（二分查找改进）</h3><p>斐波那契查找就是在二分查找的基础上，根据斐波那契数列进行分割的</p><p>斐波那契数列：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]</span><br></pre></td></tr></table></figure><p>首先，将要查找的数组长度看为 <code>F(k)</code>，mid的左侧看作 <code>F(k-1)-1</code>，mid的右侧看作 <code>F(k-2)</code></p><p>可以得出：<code>F(k)=F(k-1)-1+F(k-2)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mid = arr[min] + F(k-1) - 1</span><br></pre></td></tr></table></figure><p>解释：<br>在斐波那契数列找一个等于略大于查找表中元素个数的数<code>f(n)</code>，将原查找表扩展为长度<code>F(n)</code>（如果要补充元素，则补充重复最后一个元素，直到满足<code>F(n)</code>），完成后进行斐波那契分割，即<code>F(n)</code>个元素分割为前半部分<code>F(n-1)</code>个元素，后半部分<code>F(n-2)</code>个元素，找出要查找的元素在哪一部分并递归，直到找到</p><ul><li><p>相等，则mid位置的元素即为所求</p></li><li><p>&gt;，则low&#x3D;mid+1，k-&#x3D;2</p><p>解释：low&#x3D;mid+1说明待查找的元素在<code>[mid+1,high]</code>范围内，k-&#x3D;2说明范围<code>[mid+1,high]</code>内的元素个数为</p><p><code>n-(F(k-1)) = Fk-1-F(k-1) = Fk-F(k-1)-1=F(k-2)-1</code></p></li><li><p>&lt;，则high&#x3D;mid-1，k-&#x3D;1</p></li></ul><h2 id="分块查找"><a href="#分块查找" class="headerlink" title="分块查找"></a>分块查找</h2><p>假设有这样一个无序的数组：</p><p>[7, 10, 13, 19, 16, 20, 27, 22, 30, 40, 36, 43, 50, 48]</p><p>把这个数组分成几个不同的块，变成：</p><p>[7,10][13,19,16,20][27,22,30,40,36][43,50,48]</p><p>分块原则1：前一块中的最大数据，小于后一块中每一个数据（块内无序，块间有序）</p><p>分块原则2：块数数量一般等于数字的个数开根号。比如：16个数字一般分为4块左右</p><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序：</p><ol><li>相邻的数据两两比较，小的放前面，大的放后面</li><li>第一轮循环结束，最大值已经找到，在数组的最右边</li><li>第二轮循环，只需要找剩余数组的最大值</li><li>以此类推，如果数组中有n个数据，总共只要执行n-1轮的代码就可以</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外层循环代表需要执行几轮对比</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 内层代表索引为0的数据逐一往后对比</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">            arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">            arr[j+<span class="number">1</span>]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序：从0索引开始，拿着每一个索引上的元素<code>跟后面的元素依次比较</code>，小的放前面，大的放后面，以此类推</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            arr[j] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>插入排序：将0索引的元素到N索引的元素看作是有序的，把N+1索引的元素到最后一个当成是无序的。遍历无序的数据，将遍历到的元素插入有序序列中适当的位置，如遇到相同数据，插在后面</p><p>类似与打牌时整理牌的过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">44</span>,<span class="number">38</span>,<span class="number">5</span>,<span class="number">47</span>,<span class="number">15</span>,<span class="number">36</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">2</span>,<span class="number">46</span>,<span class="number">4</span>,<span class="number">19</span>,<span class="number">50</span>,<span class="number">48</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 找到无序的那一组是从哪个索引开始</span></span><br><span class="line"><span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &gt; arr[i+<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="comment">// 确定无序数组开始索引</span></span><br><span class="line">        startIndex = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 遍历从startIndex开始到最后一个元素，依次得到无序的那一组数据中的每一个元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">// System.out.print(arr[i] + &quot; &quot;);</span></span><br><span class="line">    <span class="comment">// 将遍历到的数组，插入到前面有序的这一组当中</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 记录当前要插入数据的索引</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 从后往前开始排序</span></span><br><span class="line">    <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; arr[j] &lt; arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">        arr[j] = arr[j-<span class="number">1</span>];</span><br><span class="line">        arr[j-<span class="number">1</span>] = tmp;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前的排序的方法，速度对比：选择排序 &gt; 插入排序 &gt; 冒泡排序</p><p>如果数组本身不是很乱的，如 [2,5,12,43,23,11,65] 这种，插入排序是最快的</p><h2 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h2><p>递归指的是方法中调用方法本身的现象</p><p>递归的注意点：递归一定要有出口，否则就会出现内存溢出</p><h3 id="递归算法的作用"><a href="#递归算法的作用" class="headerlink" title="递归算法的作用"></a>递归算法的作用</h3><p>把一个复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解</p><p>递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算</p><h3 id="书写递归的两个核心"><a href="#书写递归的两个核心" class="headerlink" title="书写递归的两个核心"></a>书写递归的两个核心</h3><ul><li>找出口：什么时候不再调用方法</li><li>找规则：如何把大问题变成规模较小的问题</li></ul><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>第一轮：把0索引的数字作为基准数，确定基准数在数组中正确的位置。比基准数小的全部在左边，比基准数大的全部在右边</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> i,<span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="comment">// 定义两个变量记录要查找的范围</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> j;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归的出口</span></span><br><span class="line">    <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">baseNumber</span> <span class="operator">=</span> arr[i];</span><br><span class="line">    <span class="keyword">while</span> (start != end) &#123;</span><br><span class="line">        <span class="comment">// 利用end，从后往前找，找比基准数小的数字</span></span><br><span class="line">        </span><br><span class="line">       <span class="comment">// 这里的 end 和 start 两个循环不能交换位置，否则会导致基准数归位的位置不正</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (end &lt;= start || arr[end] &lt; baseNumber) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 利用start，从前往后找，找比基准数大的数字</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (end &lt;= start || arr[start] &gt; baseNumber) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把end和start指向的元素进行交换</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[start];</span><br><span class="line">        arr[start] = arr[end];</span><br><span class="line">        arr[end] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当 start 和 end 指向了同一个数字，那么上面的循环就会结束</span></span><br><span class="line">    <span class="comment">// 表示已经找到了基准数在数组中应存入的位置</span></span><br><span class="line">    <span class="comment">// 基准数归位</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">    arr[i] = arr[start];</span><br><span class="line">    arr[start] = tmp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确定基准数左边的范围和基准数右边的范围</span></span><br><span class="line">    quickSort(arr,i,start - <span class="number">1</span>);</span><br><span class="line">    quickSort(arr,start + <span class="number">1</span>,j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>冒泡排序：</p><p>相邻的元素两两比较，小的放前面，大的放后面</p></li><li><p>选择排序：</p><p>从0索引开始，拿着每一个索引上的元素跟后面的元素依次比较</p><p>小的放前面，大的放后面，以此类推</p></li><li><p>插入排序：</p><p>将数组分为有序和无序两组，遍历无序数据，将元素插入有序序列中即可</p></li><li><p>快速排序：</p><ul><li>将排序范围中的第一个数字作为基准数，再定义两个变量start，end</li><li>start从前往后找比基准数大的，end从后往前找比基准数小的（end先开始找，然后start再找）</li><li>找到之后交换start和end指向的元素，并循环这一过程，直到start和end处于同一个位置，该位置是基准数在数组中应存入的位置，再让基准数归位</li></ul></li></ol><h1 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h1><p>操作数组的工具类</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static String toString(数组)</td><td>把数组拼接成一个字符串</td></tr><tr><td>public static int binarySearch(数组, 查找元素)</td><td>二分查找法找元素</td></tr><tr><td>public static int[] copyOf(原数组, 新数组长度)</td><td>拷贝数组</td></tr><tr><td>public static int[] copyOfRange(原数组, 起始索引, 结束索引)</td><td>拷贝数组（指定范围）</td></tr><tr><td>public static void fill(数组, 元素)</td><td>填充数组</td></tr><tr><td>public static void sort(数组)</td><td>按照默认方式进行数组排序</td></tr><tr><td>public static void sort(数组, 排序规则)</td><td>按照指定的规则排序</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// toString 把数组变为字符串</span></span><br><span class="line">System.out.println(<span class="string">&quot;------- toString -------&quot;</span>);</span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// binarySearch：二分查找法查找元素</span></span><br><span class="line"><span class="comment">// 注意：需要查找的数组必须是升序的</span></span><br><span class="line"><span class="comment">// 如果数据不存在，则返回数据应该所在位置的 - 索引 - 1</span></span><br><span class="line">System.out.println(<span class="string">&quot;------- binarySearch -------&quot;</span>);</span><br><span class="line">System.out.println(Arrays.binarySearch(arr,<span class="number">5</span>));</span><br><span class="line">System.out.println(Arrays.binarySearch(arr,<span class="number">10</span>));</span><br><span class="line">System.out.println(Arrays.binarySearch(arr,<span class="number">15</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// copyOf：拷贝数组</span></span><br><span class="line">System.out.println(<span class="string">&quot;------- copyOf -------&quot;</span>);</span><br><span class="line"><span class="type">int</span>[] newArr1 = Arrays.copyOf(arr,<span class="number">20</span>);</span><br><span class="line">System.out.println(Arrays.toString(newArr1));</span><br><span class="line"></span><br><span class="line"><span class="comment">// copyOfRange：指定拷贝数组的范围</span></span><br><span class="line"><span class="comment">// 细节：包头不包尾</span></span><br><span class="line">System.out.println(<span class="string">&quot;------- copyOfRange -------&quot;</span>);</span><br><span class="line"><span class="type">int</span>[] newArr2 = Arrays.copyOfRange(arr,<span class="number">0</span>,<span class="number">9</span>);</span><br><span class="line">System.out.println(Arrays.toString(newArr2));</span><br><span class="line"></span><br><span class="line"><span class="comment">// fill：填充数组</span></span><br><span class="line">System.out.println(<span class="string">&quot;------- fill -------&quot;</span>);</span><br><span class="line">Arrays.fill(arr,<span class="number">100</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// sort：排序，默认情况下，给基本数据类型进行升序排序</span></span><br><span class="line">System.out.println(<span class="string">&quot;------- sort -------&quot;</span>);</span><br><span class="line"><span class="type">int</span>[] arr2 = &#123;<span class="number">10</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">9</span>&#125;;</span><br><span class="line">Arrays.sort(arr2);</span><br><span class="line">System.out.println(Arrays.toString(arr2));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Integer[] arr=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个参数，是一个接口，所以在调用方法的时候，需要传递这个接口的实现类对象，作为排序规则</span></span><br><span class="line"><span class="comment">// 但是这个实现类，只要用一次，所以就没有必要单独的去写一个类，直接采取匿名内部类的方式就可以了</span></span><br><span class="line">Arrays.sort(arr, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="comment">// 底层原理：</span></span><br><span class="line">    <span class="comment">// 利用插入排序 + 二分查找的方式进行排序的</span></span><br><span class="line">    <span class="comment">// 默认把0索引的数据当作是有序的序列，1索引到最后认为是无序的序列</span></span><br><span class="line">    <span class="comment">// 遍历无序的序列得到里面的每一个元素，假设当前遍历得到的元素是A元素</span></span><br><span class="line">    <span class="comment">// 把A往有序序列中进行插入，在插入的时候，是利用二分查找确定A元素的插入点</span></span><br><span class="line">    <span class="comment">// 拿着A元素，跟插入点的元素进行比较，比较的规则就是compare方法的方法体</span></span><br><span class="line">    <span class="comment">// 如果方法的返回值是负数，拿着A继续跟前面的数据进行比较</span></span><br><span class="line">    <span class="comment">// 如果方法的返回值是正数，拿着A继续跟后面的数据进行比较</span></span><br><span class="line">    <span class="comment">// 如果方法的返回值是0，也拿着A跟后面的数据进行比较</span></span><br><span class="line">    <span class="comment">// 直到能确定A的最终位置为止</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// compare的形参：</span></span><br><span class="line">    <span class="comment">// o1：表示在无序序列中遍历得到的每一个元素</span></span><br><span class="line">    <span class="comment">// o2：表示在有序序列中的元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回值：</span></span><br><span class="line">    <span class="comment">// 负数：表示当前要插入的元素，是小的，要放在前面</span></span><br><span class="line">    <span class="comment">// 正数：表示当前要插入的元素，是大的，要放在后面</span></span><br><span class="line">    <span class="comment">// 0：表示当前要插入的元素跟现在的元素比是一样的，也会放在后面</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 简单理解：</span></span><br><span class="line">    <span class="comment">// o1 - o2 升序排列</span></span><br><span class="line">    <span class="comment">// o2 - o1 降序排列</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// Integer[] arr=&#123;2,3,1,5,6,7,8,4,9&#125;;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;o1：&quot;</span> + o1);</span><br><span class="line">        System.out.println(<span class="string">&quot;o2：&quot;</span> + o2);</span><br><span class="line">        <span class="keyword">return</span> o1 - o2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br></pre></td></tr></table></figure><h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p>对 <code>Arrary.sort()</code> 进行简化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Integer[] arr=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">9</span>&#125;;</span><br><span class="line">Arrays.sort(arr, (Integer o1,Integer o2) -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> o1 - o2;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br></pre></td></tr></table></figure><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><p>函数式编程（Functional programming）是一种思想特点</p><p>面向对象：先找对象，让对象做事情</p><p>函数式编程思想，忽略面向对象的复杂语法，<font color='red'>强调做什么，而不是谁去做</font></p><p>而Lambda表达式就是函数式思想的体现</p><h2 id="Lambda表达式的标准格式"><a href="#Lambda表达式的标准格式" class="headerlink" title="Lambda表达式的标准格式"></a>Lambda表达式的标准格式</h2><p>Lambda表达式是JDK8开始后的一种新语法形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">() -&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>()</code> 对应着方法的形参</li><li><code>-&gt;</code> 固定格式</li><li><code>&#123;&#125;</code>对应着方法的方法体</li></ul><p>注意点：</p><ul><li><p>Lambda表达式可以用来简化匿名内部类的书写</p></li><li><p>Lambda表达式只能简化函数式接口的匿名内部类的写法</p></li><li><p>函数式接口：</p><p>有且仅有一个抽象方法的接口叫做函数式接口，接口上方可以加@FunctionalInterface注解</p></li></ul><h2 id="Lambda表达式的省略写法"><a href="#Lambda表达式的省略写法" class="headerlink" title="Lambda表达式的省略写法"></a>Lambda表达式的省略写法</h2><p>省略核心：可推导，可省略</p><ul><li>参数类型可以省略不写</li><li>如果只有一个参数，参数类型可以省略，同时<code>()</code>也可以省略</li><li>如果lambda表达式的方法体只有一行，大括号，分号，return可以省略不写，需要同时省略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrarys.sort(arr,(o1,o2) -&gt; o1 - o2)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 自学系列 </tag>
            
            <tag> 常见算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2024/07/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2024/07/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>数据结构是计算机底层存储、组织数据的方式</p><p>是指数据相互之间是以什么方式排列在一起的</p><p>数据结构是为了更加方便的管理和使用数据，需要结合具体的业务场景来进行选择</p><p>一般情况下，精心选择的数据结构可以带来更高的运行或存储效果</p><p>常见的数据结构</p><ul><li>栈</li><li>队列</li><li>数组</li><li>链表</li><li>二叉树</li><li>二叉查找树</li><li>平衡二叉树</li><li>红黑树</li></ul><p>重点掌握：</p><ol><li>数据结构的样式</li><li>如何添加数据</li><li>如何删除数据</li></ol><h2 id="数据结构（栈）"><a href="#数据结构（栈）" class="headerlink" title="数据结构（栈）"></a>数据结构（栈）</h2><p>栈的特点：后进先出，先进后出</p><p>数据进入栈模型的过程称为：<code>压栈/进栈</code></p><p>数据离开栈模型的过程称为：<code>弹栈/出栈</code></p><p>栈内最后进入的元素（处于顶部的元素）称为<code>栈顶元素</code></p><p>栈内最先进入的元素（处于底部的元素）称为<code>栈底元素</code></p><h2 id="数据结构（队列）"><a href="#数据结构（队列）" class="headerlink" title="数据结构（队列）"></a>数据结构（队列）</h2><p>队列的特点：先进先出，后进后出，将数据进入的一端称为后端，数据出去的一端称为前端</p><p>数据从后端进入队列模型的过程称为：入队列</p><p>数据从前端离开队列模型的过程称为：出队列</p><h2 id="数据结构（数组）"><a href="#数据结构（数组）" class="headerlink" title="数据结构（数组）"></a>数据结构（数组）</h2><ul><li>查询速度快：查询数据通过地址值和索引定位，查询任意数据耗时相同（元素在内存中是连续存储的）</li><li>删除效率低：要将原始数据删除，同时后面每个数据前移</li><li>添加效率极低：添加位置后的每个数据后移，再添加元素</li></ul><h2 id="数据结构（链表）"><a href="#数据结构（链表）" class="headerlink" title="数据结构（链表）"></a>数据结构（链表）</h2><p>链表内的每一个元素都称为结点，每一个结点都是一个对象</p><p>结点中，会存储如下内容：</p><ul><li>存储具体的数据</li><li>地址值</li><li>下一个结点的地址（当不存在下一个结点时，地址为空）</li></ul><p>链表中的结点是独立的对象，在内存中是不连续的，每个结点包含数据值和下一个结点的地址</p><p>特点：</p><p>链表查询慢，无论查询哪个数据都要从头开始找</p><p>链表的增删相对快（只需要修改对应结点记录的地址值）</p><p>以上就是最基础的单向链表，还有一种链表为双向链表，即结点中存储三个部分：数据、前一个结点的地址、后一个结点的地址</p><h2 id="数据结构（树）"><a href="#数据结构（树）" class="headerlink" title="数据结构（树）"></a>数据结构（树）</h2><p>示例：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD    A((22))    A --&gt; B((18))    A --&gt; C((26))    B --&gt; D((16))    B --&gt; E((20))    D --&gt; F((15))    D --&gt; G((17))    E --&gt; N((19))    E --&gt; O((21))    C --&gt; H((24))    C --&gt; I((28))    H --&gt; J((23))    H --&gt; K((25))    I --&gt; L((27))    I --&gt; M((29))  </pre></div><p>其中，16可以看作是15、17的父节点，15是16的左子节点，17是16的右子节点</p><p>每一个结点都会存储四个值，分别是：</p><ol><li>数据</li><li>父节点地址</li><li>左子节点地址</li><li>右子节点地址</li></ol><p>若是没有父节点地址、子节点地址，记为null</p><p>度：每一个节点的子节点数量</p><p>树高：树的总层数（示例中，树的高度为4）</p><p>根节点：最顶层的结点（示例中，树的根为22）</p><p>左子节点：左下方的节点</p><p>右子节点：右下方的结点</p><p>根节点的左子树：就是根节点的左子节点以及子子节点（示例中，左子树为18、16、20、15、17、19、12）</p><p>根节点的右子树：就是根节点的右子节点以及子子节点（示例中，左子树为26、24、28、23、25、27、29）</p><h3 id="数据结构（二叉树）"><a href="#数据结构（二叉树）" class="headerlink" title="数据结构（二叉树）"></a>数据结构（二叉树）</h3><p>二叉树中，任意节点的度&lt;&#x3D;2</p><p>普通的二叉树</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD9((9))    9 --&gt; 7((7))    9 --&gt; R((2))    R --&gt; D((1))    D --&gt; 10((10))    7 --&gt; 3((3))    7 --&gt; 8((8))    3 --&gt; 4((4))    3 --&gt; 6((6))    8 --&gt; 5((5))  </pre></div><p>排列没有规则</p><h4 id="数据结构（二叉查找树）"><a href="#数据结构（二叉查找树）" class="headerlink" title="数据结构（二叉查找树）"></a>数据结构（二叉查找树）</h4><p>二叉查找树，又称二叉排序树或者二叉搜索树</p><p>特点：</p><ol><li>每个节点上最多有两个子节点</li><li>任意节点左子树上的值都小于当前节点</li><li>任意节点右子树上的值都大于当前节点</li></ol><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))4 --&gt; 2((2))4 --&gt; 5((5))5 --&gt; 6((6))2 --&gt; 1((1))2 --&gt; 3((3))7 --&gt; 10((10))10 --&gt; 11((11))11 --&gt; 12((12))  </pre></div><p>规则：小的存左边，大的存右边，一样的不存</p><h4 id="数据结构（平衡二叉树）"><a href="#数据结构（平衡二叉树）" class="headerlink" title="数据结构（平衡二叉树）"></a>数据结构（平衡二叉树）</h4><p>规则：任意节点左右子树高度差不超过1</p><p>示例：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 8((8))8 --&gt; 9((9))9 --&gt; 10((10))10 --&gt; 11((11))  </pre></div><p>假设要查询数据10，效率太低。此时需要平衡二叉树</p><p>示例：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD9((9))9 --&gt; 8((8))8 --&gt; 7((7))9 --&gt; 10((10))10 --&gt; 11((11))  </pre></div><h5 id="旋转机制"><a href="#旋转机制" class="headerlink" title="旋转机制"></a>旋转机制</h5><p>规则1：左旋</p><p>规则2：右旋</p><p>触发时机：当添加一个节点后，该树不再是一棵平衡二叉树</p><h6 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h6><p>确定支点：从添加的节点开始，不断的往父节点找不平衡的节点</p><p>步骤：</p><ol><li>以不平衡的点作为支点</li><li>把支点左旋降级，变成左子节点</li><li>晋升原来的右子节点</li></ol><p>不平衡二叉树示例1：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))7 --&gt; 10((10))10 --&gt; 11((11))11 --&gt; 12((12))  </pre></div><p>以上图例，不平衡点为10</p><p>将10作为左子节点，再晋升11、12</p><p>经过左旋后的平衡二叉树：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))7 --&gt; 11((11))11 --&gt; 10((10))11 --&gt; 12((12))  </pre></div><p>不平衡二叉树示例2：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))7 --&gt; 10((10))10 --&gt; 11((11))10 --&gt; 9((9))11 --&gt; 12((12))  </pre></div><p>此时，不平衡点就不再是10，而是根节点7</p><p>且左旋的步骤也发生了改变：</p><ul><li>以不平衡点为支点</li><li>将根节点的右侧往左拉</li><li>原先的右子节点变成新的父节点，并把多余的左子节点出让，给已经降级的根节点当右子节点</li></ul><p>经过左旋后的平衡二叉树：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD10((10))10 --&gt; 7((7))7 --&gt; 4((4))7 --&gt; 9((9))10 --&gt; 11((11))11 --&gt; 12((12))  </pre></div><h6 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h6><p>确定支点：从添加的节点开始，不断的往父节点找不平衡的节点</p><p>步骤：</p><ol><li>以不平衡的点作为支点</li><li>把支点右旋降级，变成右子节点</li><li>晋升原来的左子节点</li></ol><p>使用方法和左旋类似</p><h5 id="平衡树需要旋转情况"><a href="#平衡树需要旋转情况" class="headerlink" title="平衡树需要旋转情况"></a>平衡树需要旋转情况</h5><ol><li>左左</li><li>左右</li><li>右右</li><li>右左</li></ol><h6 id="左左"><a href="#左左" class="headerlink" title="左左"></a>左左</h6><p>当根节点左子树的左子树有节点插入，导致二叉树不平衡</p><p>节点插入前的平衡二叉树：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))4 --&gt; 2((2))4 --&gt; 5((5))7 --&gt; 10((10))  </pre></div><p>左左，在根节点左子树的左子树插入节点，导致不平衡二叉树：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))4 --&gt; 2((2))4 --&gt; 5((5))2 --&gt; 1((1))7 --&gt; 10((10))  </pre></div><p>一次右旋就可以保持平衡：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD4((4))4 --&gt; 2((2))4 --&gt; 7((7))7 --&gt; 5((5))7 --&gt; 10((10))2 --&gt; 1((1))  </pre></div><h6 id="左右"><a href="#左右" class="headerlink" title="左右"></a>左右</h6><p>当根节点左子树的右子树有节点插入，导致二叉树不平衡</p><p>节点插入前的平衡二叉树：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))4 --&gt; 2((2))4 --&gt; 5((5))7 --&gt; 10((10))  </pre></div><p>左右，在根节点左子树的右子树插入节点，导致不平衡二叉树：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))4 --&gt; 2((2))4 --&gt; 5((5))5 --&gt; 6((6))7 --&gt; 10((10))  </pre></div><p>先在局部进行左旋，使其成为左左</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 5((5))5 --&gt; 4((4))5 --&gt; 6((6))4 --&gt; 2((2))7 --&gt; 10((10))  </pre></div><p>再整体右旋</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD5((5))5 --&gt; 4((4))4 --&gt; 2((2))5 --&gt; 7((7))7 --&gt; 6((6))7 --&gt; 10((10))  </pre></div><h6 id="右右"><a href="#右右" class="headerlink" title="右右"></a>右右</h6><p>当根节点右子树的右子树有节点插入，导致二叉树不平衡</p><p>节点插入前的平衡二叉树：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))7 --&gt; 10((10))10 --&gt; 9((9))10 --&gt; 11((11))  </pre></div><p>右右，在根节点右子树的右子树插入节点，导致不平衡二叉树：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))7 --&gt; 10((10))10 --&gt; 9((9))10 --&gt; 11((11))11 --&gt; 12((12))  </pre></div><p>一次左旋就可以保持平衡：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD10((10))10 --&gt; 7((7))7 --&gt; 4((4))7 --&gt; 9((9))10 --&gt; 11((11))11 --&gt; 12((12))  </pre></div><h6 id="右左"><a href="#右左" class="headerlink" title="右左"></a>右左</h6><p>当根节点右子树的左子树有节点插入，导致二叉树不平衡</p><p>节点插入前的平衡二叉树：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))7 --&gt; 10((10))10 --&gt; 9((9))10 --&gt; 11((11))  </pre></div><p>右左，在根节点右子树的左子树插入节点，导致不平衡二叉树：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))7 --&gt; 10((10))10 --&gt; 9((9))9 --&gt; 8((8))10 --&gt; 11((11))  </pre></div><p>局部右旋</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD7((7))7 --&gt; 4((4))7 --&gt; 9((9))9 --&gt; 10((10))9 --&gt; 8((8))10 --&gt; 11((11))  </pre></div><p>再整体左旋</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD9((9))9 --&gt; 7((7))7 --&gt; 4((4))7 --&gt; 8((8))9 --&gt; 10((10))10 --&gt; 11((11))  </pre></div><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>左左和右右只需一次旋转就可以保持平衡，而左右和右左需要进行局部旋转，再整体旋转才能保持平衡</p><h4 id="二叉树遍历方式"><a href="#二叉树遍历方式" class="headerlink" title="二叉树遍历方式"></a>二叉树遍历方式</h4><p>前序遍历：</p><p>从根节点开始，然后按照当前节点，左子节点，右子节点的顺序遍历</p><p>示例：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD20((20))20 --&gt; 18((18))18 --&gt; 16((16))18 --&gt; 19((19))20 --&gt; 23((23))23 --&gt; 22((22))23 --&gt; 24((24))  </pre></div><p>遍历获取元素顺序为：20 ➡ 18 ➡ 16 ➡ 19 ➡ 23 ➡ 22 ➡ 24</p><p>中序遍历：</p><p>从最左边的子节点开始，然后按照左子节点，当前节点，右子节点的顺序遍历</p><p>遍历获取元素顺序为：16 ➡ 18 ➡ 19 ➡ 20 ➡ 22 ➡ 23 ➡ 24</p><p>后序遍历：</p><p>从最左边的子节点开始，然后按照左子节点，右子节点，当前节点的顺序遍历</p><p>遍历获取元素顺序为：16 ➡ 19 ➡ 18 ➡ 22 ➡ 24 ➡ 23 ➡ 20</p><p>层序遍历：</p><p>从根节点开始，一层一层的遍历</p><p>遍历获取元素顺序为：20 ➡  18 ➡ 23 ➡ 16 ➡ 19 ➡ 22 ➡  24</p><p>总结：</p><ol><li>前序遍历：<font color='red'>当前节点</font>，左子节点，右子节点</li><li>中序遍历：左子节点，<font color='red'>当前节点</font>，右子节点</li><li>后序遍历：左子节点，右子节点，<font color='red'>当前节点</font></li><li>层序遍历：一层一层的去遍历</li></ol><h4 id="二叉树的演变"><a href="#二叉树的演变" class="headerlink" title="二叉树的演变"></a>二叉树的演变</h4><p>二叉树 ➡ 二叉查找树 ➡ 平衡二叉树</p><p>查找效率：从左往右，从小到大</p><h3 id="数据结构（红黑树）"><a href="#数据结构（红黑树）" class="headerlink" title="数据结构（红黑树）"></a>数据结构（红黑树）</h3><ul><li>红黑树是一种自平衡的二叉查找树，是计算机科学中用到的一种数据结构</li><li>1972年出现，当时被称为平衡二叉B树。直到1978年，被正式修改为如今的<code>红黑树</code></li><li>它是一种特殊的二叉查找树，红黑树的每一个节点上都有存储位表示<code>节点的颜色</code></li><li>每一个节点可以是红或者黑；红黑树不是高度平衡的，它的平衡是通过<code>红黑规则</code>进行实现的</li></ul><h4 id="红黑规则"><a href="#红黑规则" class="headerlink" title="红黑规则"></a>红黑规则</h4><ol><li>每一个节点或是黑色的，或者是红色的</li><li>根节点必须是黑色</li><li>如果一个节点没有子节点或者父节点，则该节点相应的指针属性值为Nil，这些Nil视为叶节点，每个叶节点是黑色的</li><li>如果某个节点是红色，那么它的子节点必须是黑色（不能出现两个红色节点相连的情况）</li><li>对每一个节点，从该节点到其所有后代叶节点的简单路径上，均包含相同数目的黑色节点</li></ol><p>示例：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD13((13)):::black13 --&gt; 8((8)):::red13 --&gt; 17((17)):::red8 --&gt; 1((1)):::black8 --&gt; 11((11)):::black1 --&gt; Nil1((Nil)):::black1 --&gt; 6((6)):::red11 --&gt; Nil2((Nil)):::black11 --&gt; Nil3((Nil)):::black17 --&gt; 15((15)):::black17 --&gt; 25((25)):::black15 --&gt; Nil4((Nil)):::black15 --&gt; Nil5((Nil)):::black25 --&gt; 22((22)):::red25 --&gt; Nil6((Nil)):::black22 --&gt; Nil7((Nil)):::black22 --&gt; Nil8((Nil)):::black6 --&gt; Nil9((Nil)):::black6 --&gt; Nil10((Nil)):::blackclassDef black fill:#000,color:#fffclassDef red fill:red,color:#fff  </pre></div><h4 id="节点添加规则"><a href="#节点添加规则" class="headerlink" title="节点添加规则"></a>节点添加规则</h4><p>默认颜色：添加节点默认是红色的（效率高）</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LRid1[添加节点]id1 --&gt; id2[根]id2 --&gt; id3[直接变成黑色]id1 --&gt; id4[非根]id4 --&gt; id5[父黑色]id5 --&gt; id6[则不需要任何操作]id4 --&gt; id7[父红色]id7 --&gt; id8[叔叔红色]id8 --&gt; id9[&quot;将父设为黑色,将叔叔设为黑色&quot;]id8 --&gt; id10[&quot;将祖父设为红色&quot;]id8 --&gt; id11[&quot;如果祖父为根，再将根变回黑色&quot;]id8 --&gt; id12[&quot;如果祖父为非根，将祖父设置为当前节点再进行其他判断&quot;]id7 --&gt; id13[&quot;叔叔黑色，当前节点是父的右孩子&quot;]id13 --&gt; id14[&quot;把父作为当前节点并左旋，再进行判断&quot;]id7 --&gt; id15[&quot;叔叔黑色，当前节点是父的左孩子&quot;]id15 --&gt; id16[&quot;将父设为黑色&quot;]id15 --&gt; id17[&quot;将祖父变为红色&quot;]id15 --&gt; id18[&quot;以祖父为支点进行右旋&quot;]  </pre></div><p>红黑树旋转时，不需要将Nil叶节点进行旋转</p><p><font color='red'>红黑树增删改查的性能都很好</font></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 自学系列 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu基本使用</title>
      <link href="/2024/07/10/ubuntu%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/07/10/ubuntu%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id="压缩包管理——ZIP"><a href="#压缩包管理——ZIP" class="headerlink" title="压缩包管理——ZIP"></a>压缩包管理——ZIP</h1><h2 id="安装ZIP"><a href="#安装ZIP" class="headerlink" title="安装ZIP"></a>安装ZIP</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-install zip</span><br></pre></td></tr></table></figure><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a>压缩文件</h3><ol><li>压缩文件单个文件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip test.zip myfile</span><br></pre></td></tr></table></figure><p>test.zip：压缩文件的名称</p><p>myfile：压缩的目标文件</p><ol start="2"><li>压缩多个文件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip test.zip file1 file2 file3</span><br></pre></td></tr></table></figure><h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><ol><li>解压缩到当前目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip test.zip</span><br></pre></td></tr></table></figure><ol start="2"><li>解压缩到指定目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip test.zip -d directory</span><br></pre></td></tr></table></figure><h1 id="AppImage安装"><a href="#AppImage安装" class="headerlink" title="AppImage安装"></a>AppImage安装</h1><p>将文件权限设置为如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x &lt;AppImage File&gt;</span><br></pre></td></tr></table></figure><p>然后直接打开文件就可以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./&lt;AppImage File&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java测试题</title>
      <link href="/2024/06/29/Java%E6%B5%8B%E8%AF%95%E9%A2%98/"/>
      <url>/2024/06/29/Java%E6%B5%8B%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>1. 借助随机函数生成100以内的整数表示成绩，将得到的10名同学3门课的成绩存储在一个二维数组中。分别统计每个人的平均成绩，每门课的平均成绩，并分别显示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] score =<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; score.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; score[i].length; j++) &#123;</span><br><span class="line">                score[i][j] = r.nextInt(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 显示成绩</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; score.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; score[i].length; j++) &#123;</span><br><span class="line">                System.out.print(score[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 求每个人的平均成绩</span></span><br><span class="line">        <span class="type">int</span>[] personal_avg_score = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; score.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; score[i].length; j++) &#123;</span><br><span class="line">                sum += score[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            personal_avg_score[i] = sum / score[i].length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; personal_avg_score.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;个人的平均成绩：&quot;</span> + personal_avg_score[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 求每科的平均成绩</span></span><br><span class="line">        <span class="type">int</span>[] subject_avg_score = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; score[i].length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; score.length; j++) &#123;</span><br><span class="line">                sum += score[j][i];</span><br><span class="line">            &#125;</span><br><span class="line">            subject_avg_score[i] = sum / score.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; subject_avg_score.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;科目：&quot;</span> + subject_avg_score[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2. 编写程序统计用户从键盘输入的任意一个字符串中数字字符出现的总数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountCharacter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count_num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count_letter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (Character.isDigit(ch)) &#123;</span><br><span class="line">                count_num++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(Character.isLetter(ch)) &#123;</span><br><span class="line">                count_letter++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;数字的个数：&quot;</span> + count_num);</span><br><span class="line">        System.out.println(<span class="string">&quot;字符的个数：&quot;</span> + count_letter);</span><br><span class="line">        System.out.println(<span class="string">&quot;其他的个数：&quot;</span> + (str.length() - (count_num + count_letter)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3. 编程实现：获取某个给定的整型数组中最小的能整除5的数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">findMinNum</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">50</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> r.nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (temp % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                arr[i] = temp;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                arr[i] = <span class="number">999</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        <span class="keyword">if</span> (arr[<span class="number">0</span>] == <span class="number">999</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;数组中没有能被5整除的数字&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;数组中最小能被5整除的数字是：&quot;</span> + arr[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4. 编程实现：判断用户从键盘输入的任意字符串，在忽略了非数字和字母符号后，</p><p>是否为回文串。例如：用户输入的字符串是“123ab-&amp;*;2332@b#a3%21”,忽略非数</p><p>字字母符号后的串为“123ab2332ba321”，这是一个回文串（正向和逆向的序列相</p><p>同）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Palindromic_String</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        sc.close();</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; checkInput = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Character.isLetter(str.charAt(i)) || Character.isDigit(str.charAt(i))) &#123;</span><br><span class="line">                checkInput.add(Character.toString(str.charAt(i)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; checkReverse= <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; checkInput.size(); i++) &#123;</span><br><span class="line">            checkReverse.add(checkInput.get(checkInput.size() - i - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (checkReverse.equals(checkInput)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;是回文串&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不是回文串&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5. 从给定的二进制文件test.dat中读取50个整数，过滤3和5的倍数，将剩余元素送到</p><p>屏幕上显示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDataFilter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readDigs</span><span class="params">(File fd, <span class="type">int</span>[] digs)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">DataInputStream</span> <span class="variable">din</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(fd)));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; digs.length; i++) &#123;</span><br><span class="line">            digs[i] = din.readInt();</span><br><span class="line">            din.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printDigs</span><span class="params">(<span class="type">int</span>[] digs)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; digs.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (digs[i] % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (digs[i] % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(digs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">fd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;test.dat&quot;</span>);</span><br><span class="line">        <span class="type">int</span>[] digs = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">        FileDataFilter.readDigs(fd,digs);</span><br><span class="line">        FileDataFilter.printDigs(digs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6. 编写一个Java程序，求出整数1～100内的所有素数，并在屏幕上显示这些数，每5</p><p>个一行。同时算出这些素数的累加和，并独立一行显示到屏幕上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrimeNumber</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">changeLine</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isPrime(i)) &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">                System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                changeLine++;</span><br><span class="line">                <span class="keyword">if</span> (changeLine == <span class="number">5</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                    changeLine=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; x; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x % i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7. 编程实现：随机生成100个不大于100的正整数，去除重复值后，按一行5个将不重</p><p>复的数输出到屏幕上，并显示不重复数一共有多少个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomNumber</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">Set</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">101</span>; i++) &#123;</span><br><span class="line">            s.add(r.nextInt(<span class="number">100</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s.forEach(<span class="keyword">new</span> <span class="title class_">Consumer</span>() &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">                index++;</span><br><span class="line">                System.out.print(o + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (index == <span class="number">5</span>) &#123;</span><br><span class="line">                    System.out.println();</span><br><span class="line">                    index = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;不重复数的个数为：&quot;</span> + s.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8. 列出当前文件夹及其子文件夹下所有文件的文件名（文件夹的名字无需列出）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShowFileName</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">listAll</span><span class="params">(File fd)</span> &#123;</span><br><span class="line">        File[] FList = fd.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; FList.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (FList[i].isFile()) &#123;</span><br><span class="line">                System.out.println(FList[i].getName());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                listAll(FList[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">fd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        listAll(fd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9. 编写一个矩形类，包含：</p><p>长和宽两个属性；</p><p>依据指定的长和宽构建矩形；</p><p>不指定长和宽时，默认两者为1.0；</p><p>能求矩形的面积；</p><p>能求矩形的周长；</p><p>能显示矩形的长和宽的基本信息，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RectangleClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> height;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RectangleClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = <span class="built_in">this</span>.height = <span class="number">1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RectangleClass</span><span class="params">(<span class="type">int</span> width, <span class="type">int</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取面积</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.height * <span class="built_in">this</span>.width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取周长</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getLength</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">this</span>.height * <span class="number">2</span>) + (<span class="built_in">this</span>.width * <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取、设置长宽</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getWidth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWidth</span><span class="params">(<span class="type">double</span> width)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHeight</span><span class="params">(<span class="type">double</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10. 编程实现：从键盘输入若干个正整数，输入为负数时表示输入结束。求输入的若</p><p>干元素中的最大值，以及它们的累加和、乘积，并将结果送到屏幕显示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ScannerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 输入数据且判断退出时机</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入整数：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sc.next();</span><br><span class="line">            <span class="keyword">if</span> (Integer.parseInt(s) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                list.add(Integer.parseInt(s));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Integer.parseInt(s) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将输入数据转换为数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[list.size()];</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cj</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            arr[i] = list.get(i);</span><br><span class="line">            <span class="comment">// 计算累加和以及乘积</span></span><br><span class="line">            sum += list.get(i);</span><br><span class="line">            cj *= list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排序得到最大值</span></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：&quot;</span>);</span><br><span class="line">        System.out.println(arr[arr.length - <span class="number">1</span>]);</span><br><span class="line">        System.out.println(<span class="string">&quot;累加和：&quot;</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;乘积：&quot;</span>);</span><br><span class="line">        System.out.println(cj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>11.\ 随机生成50个不大于1000的正整数，将大于等于平均值的那些正整数按个位数的</p><p>升序排列，并将它们以5个一行，空格间隔的形式输出到屏幕。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RandomSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">50</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成随机数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">avgNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = r.nextInt(<span class="number">1001</span>);</span><br><span class="line">            sum += arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算平均值</span></span><br><span class="line">        avgNum = sum / arr.length;</span><br><span class="line">        System.out.println(avgNum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 过滤出高于平均值的数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">arrLength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt;= avgNum) &#123;</span><br><span class="line">                arrLength++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将高于平均值的数重新组成一个数组</span></span><br><span class="line">        <span class="type">int</span>[] avgArr = <span class="keyword">new</span> <span class="title class_">int</span>[arrLength];</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt;= avgNum) &#123;</span><br><span class="line">                avgArr[index] = arr[i];</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;平均值：&quot;</span> + avgNum);</span><br><span class="line">        System.out.println(Arrays.toString(avgArr));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 冒泡排序，对个位数进行升序排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; avgArr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; avgArr.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (avgArr[j] % <span class="number">10</span> &gt; avgArr[j + <span class="number">1</span>] % <span class="number">10</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> avgArr[j];</span><br><span class="line">                    avgArr[j] = avgArr[j + <span class="number">1</span>];</span><br><span class="line">                    avgArr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出格式化</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">changeLine</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; avgArr.length; i++) &#123;</span><br><span class="line">            changeLine++;</span><br><span class="line">            System.out.print(avgArr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (changeLine == <span class="number">5</span>) &#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">                changeLine = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>12. 编程实现：定义通信簿中的一个联系方式，内容包括：</p><p>身份证，姓名和电话三个属性；</p><p>能够依据给定的身份证、姓名和电话生成一个联系项（构造函数）；</p><p>能修改联系电话；</p><p>能依据身份证号查找某个联系项是否与当前项相同（equals方法）；</p><p>能够显示详细的联系项信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AddressList</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数生成练习簿</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddressList</span><span class="params">(String id, String name, <span class="type">int</span> phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改号码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(<span class="type">int</span> phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 比较身份证的值（这地方存疑，答案上是这么写的）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(AddressList a)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a.id.equals(<span class="built_in">this</span>.id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出详细信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;AddressList&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&#x27;&quot;</span> + id + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, phone=&quot;</span> + phone +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressListTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AddressList</span> <span class="variable">adL1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AddressList</span>(<span class="string">&quot;1234567890x&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>,<span class="number">1333333333</span>);</span><br><span class="line">        <span class="type">AddressList</span> <span class="variable">adL2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AddressList</span>(<span class="string">&quot;1234567890&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>,<span class="number">1333333333</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(adL1.equals(adL2));</span><br><span class="line">        adL1.setPhone(<span class="number">1344444444</span>);</span><br><span class="line">        System.out.println(adL1.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 自学系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP32-SSCMA</title>
      <link href="/2024/06/05/ESP32-SSCMA/"/>
      <url>/2024/06/05/ESP32-SSCMA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="项目获取"><a href="#项目获取" class="headerlink" title="项目获取"></a>项目获取</h2><p>github地址：<a href="https://github.com/Seeed-Studio/sscma-example-esp32">https://github.com/Seeed-Studio/sscma-example-esp32</a></p><h2 id="环境要求（我自己的）"><a href="#环境要求（我自己的）" class="headerlink" title="环境要求（我自己的）"></a>环境要求（我自己的）</h2><p>Python 3.11.2</p><p>ESP-IDF 5.1.2</p><ol><li>克隆仓库</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Seeed-Studio/sscma-example-esp32</span><br></pre></td></tr></table></figure><ol start="2"><li>进入 sscma-example-esp32 文件夹</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> sscma<span class="literal">-example-esp32</span></span><br></pre></td></tr></table></figure><ol start="3"><li>获取子模块</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update <span class="literal">--init</span></span><br></pre></td></tr></table></figure><p>进入examples&#x2F;mobilenetv2_classification_demo 目录</p><p>由于我使用的是ESP32S3-EYE，在上传到板子前，需要在 cmake&#x2F;CMakeLists.txt 修改开发板型号</p><p>在文件尾部，修改如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">target_compile_definitions(</span><br><span class="line">    $&#123;COMPONENT_TARGET&#125;</span><br><span class="line">    PUBLIC</span><br><span class="line">    -DCONFIG_EL_TARGET_ESPPRESSIF</span><br><span class="line">    -DCONFIG_EL_BOARD_ESPRESSIF_ESP32S3_EYE</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>此外，要注意由于是非官方开发板，官方提供的代码中<font color="red">缺少 <code>LED_0_PIN </code>的定义</font></p><p>文件修改位置：</p><p>sscma-example-esp32\components\sscma-micro\porting\espressif\boards\espressif_esp32s3_eye</p><p>在文件中添加如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define LED_0_PIN                    GPIO_NUM_21</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ESP32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esp32s3-eye </tag>
            
            <tag> SSCMA </tag>
            
            <tag> AI classification </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序的一些疑难杂症</title>
      <link href="/2024/05/09/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
      <url>/2024/05/09/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h2 id="引入样式的问题"><a href="#引入样式的问题" class="headerlink" title="引入样式的问题"></a>引入样式的问题</h2><p>微信小程序在引入样式时，不允许有id选择器，所以需要把id修改为class</p>]]></content>
      
      
      
        <tags>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在微信小程序中引入font awesome</title>
      <link href="/2024/05/08/WeChatBlog/"/>
      <url>/2024/05/08/WeChatBlog/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h2 id="获取图标"><a href="#获取图标" class="headerlink" title="获取图标"></a>获取图标</h2><p>现在官网下载压缩包<a href="https://fontawesome.dashgame.com/">Font Awesome，一套绝佳的图标字体库和CSS框架 (dashgame.com)</a>，将文件解压后，得到以下文件：</p><p><img src="/img/wechatblog/1.png"></p><h2 id="转换字体文件"><a href="#转换字体文件" class="headerlink" title="转换字体文件"></a>转换字体文件</h2><p>将font&#x2F;fontawesome-webfont.ttf文件</p><p>通过<a href="https://transfonter.org/">Online @font-face generator — Transfonter</a>获得Base64编码格式的文件，具体操作配置如下：</p><p><img src="/img/wechatblog/2.png"></p><p>下载后得到一个压缩包</p><h2 id="修改样式文件"><a href="#修改样式文件" class="headerlink" title="修改样式文件"></a>修改样式文件</h2><p>解压压缩包，将解压出的文件中的stylesheet.css改名为stylesheet.wxss</p><p>将fontawesome文件下的css&#x2F;font-awesome.css改名为font-awesome.wxss</p><p>最后将这两个文件放入微信小程序的项目文件中，在app.wxss中引入就可以使用了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span>&quot;./stylesheet.wxss&quot;;</span><br><span class="line"><span class="keyword">@import</span>&quot;./font-awesome.wxss&quot;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wechat </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo相关命令</title>
      <link href="/2024/05/05/%E7%94%9F%E6%88%90%E6%96%87%E7%AB%A0/"/>
      <url>/2024/05/05/%E7%94%9F%E6%88%90%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><h2 id="网站生成以及部署"><a href="#网站生成以及部署" class="headerlink" title="网站生成以及部署"></a>网站生成以及部署</h2><p>生成一个新的博客（Hexo框架），在对应的目录下打开终端，输入Hexo初始化命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;Blog&#x27;name&gt; </span><br></pre></td></tr></table></figure><p>生成静态文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>在本地部署网站：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>上传网站（部署网站至服务器）:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>注意：</p><p><font color="red">部署之前预先生成静态文件</font></p><p>当对项目文件进行修改后，发现网站并没有生效时，可以尝试清楚文件缓存:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h2 id="生成文章"><a href="#生成文章" class="headerlink" title="生成文章"></a>生成文章</h2><p>在命令行中，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n 文章名称</span><br></pre></td></tr></table></figure><p>即可生成新文章，生成文章默认路径会在source&#x2F;_post文件夹中</p><p>而使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n page ABC</span><br></pre></td></tr></table></figure><p>以上命令则会生成：source&#x2F;ABC 这样路径的文件夹，文件夹中包含了index.md文件，该文件就是新的文章页</p><h2 id="文章格式"><a href="#文章格式" class="headerlink" title="文章格式"></a>文章格式</h2><p>Front-matter 是文件开头的 YAML 或 JSON 代码块，用于配置写作设置。 以 YAML 格式书写时，Front-matter 以三个破折号结束；以 JSON 格式书写时，Front-matter 以三个分号结束。</p><h3 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a><strong>YAML</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2013/7/13 20:46:25</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="Post-Front-matter"><a href="#Post-Front-matter" class="headerlink" title="Post Front-matter"></a>Post Front-matter</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top_img:</span><br><span class="line">comments:</span><br><span class="line">cover:</span><br><span class="line">toc:</span><br><span class="line">toc_number:</span><br><span class="line">toc_style_simple:</span><br><span class="line">copyright:</span><br><span class="line">copyright_author:</span><br><span class="line">copyright_author_href:</span><br><span class="line">copyright_url:</span><br><span class="line">copyright_info:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aplayer:</span><br><span class="line">highlight_shrink:</span><br><span class="line">aside:</span><br><span class="line">abcjs:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><table><thead><tr><th>寫法</th><th>解釋</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章標題</td></tr><tr><td>date</td><td>【必需】文章創建日期</td></tr><tr><td>updated</td><td>【可選】文章更新日期</td></tr><tr><td>tags</td><td>【可選】文章標籤</td></tr><tr><td>categories</td><td>【可選】文章分類</td></tr><tr><td>keywords</td><td>【可選】文章關鍵字</td></tr><tr><td>description</td><td>【可選】文章描述</td></tr><tr><td>top_img</td><td>【可選】文章頂部圖片</td></tr><tr><td>cover</td><td>【可選】文章縮略圖(如果沒有設置top_img,文章頁頂部將顯示縮略圖，可設為false&#x2F;圖片地址&#x2F;留空)</td></tr><tr><td>comments</td><td>【可選】顯示文章評論模塊(默認 true)</td></tr><tr><td>toc</td><td>【可選】顯示文章TOC(默認為設置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可選】顯示toc_number(默認為設置中toc的number配置)</td></tr><tr><td>toc_style_simple</td><td>【可選】顯示 toc 簡潔模式</td></tr><tr><td>copyright</td><td>【可選】顯示文章版權模塊(默認為設置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可選】文章版權模塊的<code>文章作者</code></td></tr><tr><td>copyright_author_href</td><td>【可選】文章版權模塊的<code>文章作者</code>鏈接</td></tr><tr><td>copyright_url</td><td>【可選】文章版權模塊的<code>文章連結</code>鏈接</td></tr><tr><td>copyright_info</td><td>【可選】文章版權模塊的<code>版權聲明</code>文字</td></tr><tr><td>mathjax</td><td>【可選】顯示mathjax(當設置 mathjax 的 per_page: false 時，才需要配置，默認 false )</td></tr><tr><td>katex</td><td>【可選】顯示 katex (當設置 katex 的 per_page: false 時，才需要配置，默認 false )</td></tr><tr><td>aplayer</td><td>【可選】在需要的頁面加載 aplayer 的 js 和 css,請參考文章下面的<code>音樂</code> 配置</td></tr><tr><td>highlight_shrink</td><td>【可選】配置代碼框是否展開(true&#x2F;false)(默認為設置中 highlight_shrink 的配置)</td></tr><tr><td>aside</td><td>【可選】顯示側邊欄 (默認 true)</td></tr><tr><td>abcjs</td><td>【可選】加載 abcjs (當設置 abcjs 的 per_page: false 時，才需要配置，默認 false )</td></tr></tbody></table><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p><a href="https://hexo.io/zh-cn/docs/commands">指令 | Hexo</a></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无题啊，想不出题啊</title>
      <link href="/2024/05/05/%E8%8A%9C%E6%B9%96/"/>
      <url>/2024/05/05/%E8%8A%9C%E6%B9%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>框架有了，开搞开搞咯</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/04/hello-world/"/>
      <url>/2024/05/04/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting/dist/Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="彩蛋？"><a href="#彩蛋？" class="headerlink" title="彩蛋？"></a>彩蛋？</h2><p>不想删这文章是因为想记录一下网站生成的那一瞬间，🤭</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
